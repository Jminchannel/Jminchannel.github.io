<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>5_Activity任务栈查看</title>
    <link href="/2025/05/18/%E5%AE%89%E5%8D%93%E5%BC%80%E5%8F%91/Activity%E4%BB%BB%E5%8A%A1%E6%A0%88%E6%9F%A5%E7%9C%8B/"/>
    <url>/2025/05/18/%E5%AE%89%E5%8D%93%E5%BC%80%E5%8F%91/Activity%E4%BB%BB%E5%8A%A1%E6%A0%88%E6%9F%A5%E7%9C%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="Activity任务栈查看"><a href="#Activity任务栈查看" class="headerlink" title="Activity任务栈查看"></a>Activity任务栈查看</h1><p>进入终端命令行窗口</p><p>输入：<code>adb shell dumpsys activity | findstr 包名</code></p><p><img src="/../../assets/image-20250518210331998.png" alt="image-20250518210331998"></p><h2 id="Activity启动模式"><a href="#Activity启动模式" class="headerlink" title="Activity启动模式"></a>Activity启动模式</h2><h2 id="Handler线程"><a href="#Handler线程" class="headerlink" title="Handler线程"></a>Handler线程</h2>]]></content>
    
    
    <categories>
      
      <category>安卓开发</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>4_页面跳转</title>
    <link href="/2025/05/06/%E5%AE%89%E5%8D%93%E5%BC%80%E5%8F%91/%E9%A1%B5%E9%9D%A2%E8%B7%B3%E8%BD%AC/"/>
    <url>/2025/05/06/%E5%AE%89%E5%8D%93%E5%BC%80%E5%8F%91/%E9%A1%B5%E9%9D%A2%E8%B7%B3%E8%BD%AC/</url>
    
    <content type="html"><![CDATA[<h1 id="网络请求"><a href="#网络请求" class="headerlink" title="网络请求"></a>网络请求</h1><h1 id="页面跳转"><a href="#页面跳转" class="headerlink" title="页面跳转"></a>页面跳转</h1><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">package</span> com.jmin.androidhistoryechoes.activity<br><br><span class="hljs-keyword">import</span> android.content.Context<br><span class="hljs-keyword">import</span> android.content.Intent<br><span class="hljs-keyword">import</span> android.os.Bundle<br><span class="hljs-keyword">import</span> androidx.activity.enableEdgeToEdge<br><span class="hljs-keyword">import</span> androidx.appcompat.app.AppCompatActivity<br><span class="hljs-keyword">import</span> androidx.core.view.ViewCompat<br><span class="hljs-keyword">import</span> androidx.core.view.WindowInsetsCompat<br><span class="hljs-keyword">import</span> com.drake.net.Get<br><span class="hljs-keyword">import</span> com.drake.net.utils.scopeNetLife<br><span class="hljs-keyword">import</span> com.jmin.androidhistoryechoes.R<br><span class="hljs-keyword">import</span> com.jmin.androidhistoryechoes.databinding.ActivityHistoryEchoesDetailBinding<br><span class="hljs-keyword">import</span> com.jmin.androidhistoryechoes.model.HistoryEchoesDetail<br><span class="hljs-keyword">import</span> com.jmin.androidhistoryechoes.network.Api<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">HistoryEchoesDetailActivity</span> : <span class="hljs-type">AppCompatActivity</span>() &#123;<br>    <span class="hljs-comment">// companion object是一个可以访问类的所有非私有成员（包括方法和属性）的对象。</span><br>    <span class="hljs-comment">// 这个对象被称为这个类的伴生对象，它的行为类似于Java中的静态成员。</span><br>    <span class="hljs-keyword">companion</span> <span class="hljs-keyword">object</span>&#123;<br>        <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">start</span><span class="hljs-params">(content:<span class="hljs-type">Context</span>,id:<span class="hljs-type">String</span>)</span></span> &#123;<br>            <span class="hljs-keyword">val</span> intent = Intent(content, HistoryEchoesDetailActivity::<span class="hljs-keyword">class</span>.java)<br>            intent.putExtra(<span class="hljs-string">&quot;id&quot;</span>,id)<br>            content.startActivity(intent)<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">lateinit</span> <span class="hljs-keyword">var</span> binding:ActivityHistoryEchoesDetailBinding<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">lateinit</span> <span class="hljs-keyword">var</span> id:String<br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">onCreate</span><span class="hljs-params">(savedInstanceState: <span class="hljs-type">Bundle</span>?)</span></span> &#123;<br>        <span class="hljs-keyword">super</span>.onCreate(savedInstanceState)<br>        binding = ActivityHistoryEchoesDetailBinding.inflate(layoutInflater)<br>        setContentView(binding.root)<br>        id = intent.getStringExtra(<span class="hljs-string">&quot;id&quot;</span>)!!  <span class="hljs-comment">//!!不可能</span><br>        scopeNetLife &#123;<br>            <span class="hljs-keyword">val</span> model = Get&lt;HistoryEchoesDetail&gt;(Api.HISTORY_ECHOES_DETAIL) &#123;<br>                param(<span class="hljs-string">&quot;id&quot;</span>,id)<br>            &#125;.await()<br>            binding.tvDetailTitle.text = model.<span class="hljs-keyword">data</span>.title<br>            binding.tvDetailYear.text = model.<span class="hljs-keyword">data</span>.year.toString()<br>            binding.tvDetailDate.text = <span class="hljs-string">&quot;<span class="hljs-subst">$&#123;model.data.month&#125;</span>月<span class="hljs-subst">$&#123;model.data.day&#125;</span>日&quot;</span><br>            binding.tvDetailContent.text = model.<span class="hljs-keyword">data</span>.content<br><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在MainActivity执行跳转</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">adapter.setOnItemHistoryEchoesClickListener &#123;view, model -&gt;<br>           HistoryEchoesDetailActivity.start(<span class="hljs-keyword">this</span>,model.id)<br>        &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>安卓开发</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>3_viewModel调用</title>
    <link href="/2025/05/06/%E5%AE%89%E5%8D%93%E5%BC%80%E5%8F%91/viewModel%E8%B0%83%E7%94%A8/"/>
    <url>/2025/05/06/%E5%AE%89%E5%8D%93%E5%BC%80%E5%8F%91/viewModel%E8%B0%83%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="viewModel调用"><a href="#viewModel调用" class="headerlink" title="viewModel调用"></a>viewModel调用</h1><ol><li><p>libs.versions.toml配置版本</p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs toml"><span class="hljs-section">[versions]</span><br><span class="hljs-attr">activity-ktx</span> = <span class="hljs-string">&quot;1.9.0&quot;</span><br><span class="hljs-section">[libraries]</span><br><span class="hljs-attr">activity-ktx</span> = &#123; group = <span class="hljs-string">&quot;androidx.activity&quot;</span>, name = <span class="hljs-string">&quot;activity-ktx&quot;</span>, version.ref = <span class="hljs-string">&quot;activity-ktx&quot;</span>&#125;<br></code></pre></td></tr></table></figure></li><li><p>build.gradle.kts引入依赖，sync now</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ts">dependencies &#123;<br>    <span class="hljs-title function_">implementation</span>(libs.<span class="hljs-property">activity</span>.<span class="hljs-property">ktx</span>)<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>进入acticvity</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MainActivity</span> : <span class="hljs-type">AppCompatActivity</span>() &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">val</span> mainViewModel:MainViewModel <span class="hljs-keyword">by</span> viewModels()<br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">onCreate</span><span class="hljs-params">(savedInstanceState: <span class="hljs-type">Bundle</span>?)</span></span> &#123;<br>    <span class="hljs-keyword">val</span> simpleDateFormat = SimpleDateFormat(<span class="hljs-string">&quot;MM月dd日&quot;</span>, Locale.getDefault())<br>        <span class="hljs-keyword">val</span> currentDate = simpleDateFormat.format(Date())<br>        mainViewModel.getHistoryEchoesList(currentDate)<br>    &#125;<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>安卓开发</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>2_网络请求</title>
    <link href="/2025/05/05/%E5%AE%89%E5%8D%93%E5%BC%80%E5%8F%91/%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82/"/>
    <url>/2025/05/05/%E5%AE%89%E5%8D%93%E5%BC%80%E5%8F%91/%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82/</url>
    
    <content type="html"><![CDATA[<h1 id="网络请求"><a href="#网络请求" class="headerlink" title="网络请求"></a>网络请求</h1><p>网络请求库可以采用NET库</p><p>[GitHub - liangjingkanji&#x2F;Net: <a href="https://github.com/liangjingkanji/Net">永久维护] Android 基于协程&#x2F;OkHttp网络请求工具</a></p><p>Android 基于协程&#x2F;OkHttp网络请求工具</p><p>相关使用文档<a href="https://liangjingkanji.github.io/Net/">Net</a></p><ol><li><p>引入依赖</p><p><img src="/../../assets/image-20250505211920805.png" alt="image-20250505211920805"></p><p>进入espresso版本管理</p><p><img src="/../../assets/image-20250505212001644.png" alt="image-20250505212001644"></p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs toml"><span class="hljs-section">[versions]</span><br><span class="hljs-attr">agp</span> = <span class="hljs-string">&quot;8.3.0&quot;</span><br><span class="hljs-attr">kotlin</span> = <span class="hljs-string">&quot;1.9.0&quot;</span><br><span class="hljs-attr">coreKtx</span> = <span class="hljs-string">&quot;1.10.1&quot;</span><br><span class="hljs-attr">junit</span> = <span class="hljs-string">&quot;4.13.2&quot;</span><br><span class="hljs-attr">junitVersion</span> = <span class="hljs-string">&quot;1.1.5&quot;</span><br><span class="hljs-attr">espressoCore</span> = <span class="hljs-string">&quot;3.5.1&quot;</span><br><span class="hljs-attr">appcompat</span> = <span class="hljs-string">&quot;1.6.1&quot;</span><br><span class="hljs-attr">material</span> = <span class="hljs-string">&quot;1.10.0&quot;</span><br><span class="hljs-attr">activity</span> = <span class="hljs-string">&quot;1.8.0&quot;</span><br><span class="hljs-attr">constraintlayout</span> = <span class="hljs-string">&quot;2.1.4&quot;</span><br><span class="hljs-comment">#json序列化库</span><br><span class="hljs-attr">kotlinx-serialllization-json</span> = <span class="hljs-string">&quot;1.6.0&quot;</span><br><span class="hljs-comment">#协程</span><br><span class="hljs-attr">kotlinx-coroutines-core</span> = <span class="hljs-string">&quot;1.7.0&quot;</span><br><span class="hljs-attr">kotlinx-coroutines-android</span> = <span class="hljs-string">&quot;1.7.0&quot;</span><br><span class="hljs-comment">#网络请求</span><br><span class="hljs-attr">okhttp</span> = <span class="hljs-string">&quot;4.11.0&quot;</span><br><span class="hljs-attr">net</span> = <span class="hljs-string">&quot;3.7.0&quot;</span><br><br><br><span class="hljs-section">[libraries]</span><br><span class="hljs-attr">androidx-core-ktx</span> = &#123; group = <span class="hljs-string">&quot;androidx.core&quot;</span>, name = <span class="hljs-string">&quot;core-ktx&quot;</span>, version.ref = <span class="hljs-string">&quot;coreKtx&quot;</span> &#125;<br><span class="hljs-attr">junit</span> = &#123; group = <span class="hljs-string">&quot;junit&quot;</span>, name = <span class="hljs-string">&quot;junit&quot;</span>, version.ref = <span class="hljs-string">&quot;junit&quot;</span> &#125;<br><span class="hljs-attr">androidx-junit</span> = &#123; group = <span class="hljs-string">&quot;androidx.test.ext&quot;</span>, name = <span class="hljs-string">&quot;junit&quot;</span>, version.ref = <span class="hljs-string">&quot;junitVersion&quot;</span> &#125;<br><span class="hljs-attr">androidx-espresso-core</span> = &#123; group = <span class="hljs-string">&quot;androidx.test.espresso&quot;</span>, name = <span class="hljs-string">&quot;espresso-core&quot;</span>, version.ref = <span class="hljs-string">&quot;espressoCore&quot;</span> &#125;<br><span class="hljs-attr">androidx-appcompat</span> = &#123; group = <span class="hljs-string">&quot;androidx.appcompat&quot;</span>, name = <span class="hljs-string">&quot;appcompat&quot;</span>, version.ref = <span class="hljs-string">&quot;appcompat&quot;</span> &#125;<br><span class="hljs-attr">material</span> = &#123; group = <span class="hljs-string">&quot;com.google.android.material&quot;</span>, name = <span class="hljs-string">&quot;material&quot;</span>, version.ref = <span class="hljs-string">&quot;material&quot;</span> &#125;<br><span class="hljs-attr">androidx-activity</span> = &#123; group = <span class="hljs-string">&quot;androidx.activity&quot;</span>, name = <span class="hljs-string">&quot;activity&quot;</span>, version.ref = <span class="hljs-string">&quot;activity&quot;</span> &#125;<br><span class="hljs-attr">androidx-constraintlayout</span> = &#123; group = <span class="hljs-string">&quot;androidx.constraintlayout&quot;</span>, name = <span class="hljs-string">&quot;constraintlayout&quot;</span>, version.ref = <span class="hljs-string">&quot;constraintlayout&quot;</span> &#125;<br><span class="hljs-attr">kotlinx-coroutines-core</span> = &#123; group = <span class="hljs-string">&quot;org.jetbrains.kotlinx&quot;</span>, name = <span class="hljs-string">&quot;kotlinx-coroutines-core&quot;</span>, version.ref = <span class="hljs-string">&quot;kotlinx-coroutines-core&quot;</span>&#125;<br><span class="hljs-attr">kotlinx-coroutines-android</span> = &#123; group = <span class="hljs-string">&quot;org.jetbrains.kotlinx&quot;</span>, name = <span class="hljs-string">&quot;kotlinx-coroutines-android&quot;</span>, version.ref = <span class="hljs-string">&quot;kotlinx-coroutines-android&quot;</span> &#125;<br><span class="hljs-attr">okhttp</span> = &#123; group = <span class="hljs-string">&quot;com.squareup.okhttp3&quot;</span>, name = <span class="hljs-string">&quot;okhttp&quot;</span>, version.ref = <span class="hljs-string">&quot;okhttp&quot;</span>&#125;<br><span class="hljs-attr">net</span> = &#123; group = <span class="hljs-string">&quot;com.github.liangjingkanji&quot;</span>, name = <span class="hljs-string">&quot;Net&quot;</span>, version.ref = <span class="hljs-string">&quot;net&quot;</span>&#125;<br><span class="hljs-attr">kotlinx-serialllization-json</span> = &#123; group = <span class="hljs-string">&quot;org.jetbrains.kotlinx&quot;</span>, name = <span class="hljs-string">&quot;kotlinx-serialllization-json&quot;</span>, version.ref = <span class="hljs-string">&quot;kotlinx-serialllization-json&quot;</span>&#125;<br><span class="hljs-section">[plugins]</span><br><span class="hljs-attr">androidApplication</span> = &#123; id = <span class="hljs-string">&quot;com.android.application&quot;</span>, version.ref = <span class="hljs-string">&quot;agp&quot;</span> &#125;<br><span class="hljs-attr">jetbrainsKotlinAndroid</span> = &#123; id = <span class="hljs-string">&quot;org.jetbrains.kotlin.android&quot;</span>, version.ref = <span class="hljs-string">&quot;kotlin&quot;</span> &#125;<br><span class="hljs-attr">kotlinSerialization</span> = &#123; id = <span class="hljs-string">&quot;org.jetbrains.kotlin.plugin.serialization&quot;</span>, version.ref = <span class="hljs-string">&quot;kotlin&quot;</span>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p>kotlinSerialization是新增引用的插件，需要声明在build.gradl.ts中声明</p><p><img src="/../../assets/image-20250505224937884.png" alt="image-20250505224937884"></p><p><img src="/../../assets/image-20250505225213149.png" alt="image-20250505225213149"></p><p>引入依赖</p><p><img src="/../../assets/image-20250505225739497.png" alt="image-20250505225739497"></p></li><li><p>sync now之后发现问题（依赖找不到！）</p><p><img src="/../../assets/image-20250505233150708.png" alt="image-20250505233150708"></p><p>原因是所用的仓库地址不存在依赖，需要添加新的仓库地址</p><p><img src="/../../assets/image-20250505230151621.png" alt="image-20250505230151621"></p><p>进入setting.gradle.kts</p><p><img src="/../../assets/image-20250505230535439.png" alt="image-20250505230535439"></p><p><img src="/../../assets/image-20250505233052983.png" alt="image-20250505233052983"></p></li><li><p>创建网络请求全局配置入口</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 应用的全局入口</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">APP</span>:<span class="hljs-type">Application</span>() &#123;<br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">onCreate</span><span class="hljs-params">()</span></span> &#123;<br>        <span class="hljs-keyword">super</span>.onCreate()<br>        NetConfig.initialize(Api.HOST, <span class="hljs-keyword">this</span>) &#123;<br>            <span class="hljs-comment">// 超时配置, 默认是10秒, 设置太长时间会导致用户等待过久</span><br>            connectTimeout(<span class="hljs-number">30</span>, TimeUnit.SECONDS)<br>            readTimeout(<span class="hljs-number">30</span>, TimeUnit.SECONDS)<br>            writeTimeout(<span class="hljs-number">30</span>, TimeUnit.SECONDS)<br>            setRequestInterceptor(<span class="hljs-keyword">object</span> : RequestInterceptor &#123;<br>                <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">interceptor</span><span class="hljs-params">(request: <span class="hljs-type">BaseRequest</span>)</span></span> &#123;<br>                    request.setHeader(<span class="hljs-string">&quot;token&quot;</span>, <span class="hljs-string">&quot;evhbjuxo7lprx4r7ose6yv3exlz5pq&quot;</span>)<br>                &#125;<br>            &#125;)<br>            setDebug(BuildConfig.DEBUG)<br><span class="hljs-comment">//            SerializationConverter()为转换器</span><br>            setConverter(SerializationConverter())<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意需要在AndroidManifest.xml中引用APP</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">manifest</span> <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:tools</span>=<span class="hljs-string">&quot;http://schemas.android.com/tools&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.INTERNET&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">application</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;.app.APP&quot;</span>   &lt;<span class="hljs-attr">--引用</span></span><br><span class="hljs-tag">        </span><br></code></pre></td></tr></table></figure></li><li><p>创建viewmodel请求数据</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MainViewModel</span>: <span class="hljs-type">ViewModel</span>() &#123;<br>    <span class="hljs-keyword">val</span> historyEchoesListLiveData = MutableLiveData&lt;List&lt;Data&gt;&gt;()<br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">getHistoryEchoesList</span><span class="hljs-params">(time:<span class="hljs-type">String</span>)</span></span> &#123;<br>        <span class="hljs-keyword">val</span> pair = extractMonthAndDay(time)<br>        <span class="hljs-keyword">val</span> month = pair.first<br>        <span class="hljs-keyword">val</span> day = pair.second<br>        scopeNetLife &#123;<br>            <span class="hljs-keyword">val</span> historyEchoes = Get&lt;HistoryEchoes&gt;(Api.HISTORY_ECHOES) &#123;<br>                param(<span class="hljs-string">&quot;month&quot;</span>,month)<br>                param(<span class="hljs-string">&quot;day&quot;</span>,day)<br>            &#125;.await()<br>            historyEchoesListLiveData.postValue(historyEchoes.<span class="hljs-keyword">data</span>)<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">extractMonthAndDay</span><span class="hljs-params">(time:<span class="hljs-type">String</span>)</span></span>:Pair&lt;<span class="hljs-built_in">Int</span>,<span class="hljs-built_in">Int</span>&gt; &#123;<br>        <span class="hljs-keyword">val</span> split = time.split(<span class="hljs-string">&quot;月&quot;</span>, <span class="hljs-string">&quot;日&quot;</span>)<br>        <span class="hljs-keyword">val</span> month = split[<span class="hljs-number">0</span>].toInt()<br>        <span class="hljs-keyword">val</span> day = split[<span class="hljs-number">1</span>].toInt()<br>        <span class="hljs-keyword">return</span> Pair(month,day)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>需要在AndroidManifest.xml授权网络请求</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.INTERNET&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>安卓开发</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>1_viewBinding的使用</title>
    <link href="/2025/05/05/%E5%AE%89%E5%8D%93%E5%BC%80%E5%8F%91/viewBinding%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <url>/2025/05/05/%E5%AE%89%E5%8D%93%E5%BC%80%E5%8F%91/viewBinding%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="viewBinding的使用"><a href="#viewBinding的使用" class="headerlink" title="viewBinding的使用"></a>viewBinding的使用</h1><ol><li><p>在build.gradle.kts配置</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ts">android &#123;<br>...<br>    buildFeatures &#123;<br>            viewBinding = <span class="hljs-literal">true</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/../../assets/image-20250505203907862.png" alt="image-20250505203907862"></p><p>随后点击sync now</p></li><li><p>在对应的activity中声明延迟变量并赋值</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MainActivity</span> : <span class="hljs-type">AppCompatActivity</span>() &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">lateinit</span> <span class="hljs-keyword">var</span> binding:ActivityMainBinding<br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">onCreate</span><span class="hljs-params">(savedInstanceState: <span class="hljs-type">Bundle</span>?)</span></span> &#123;<br>        <span class="hljs-keyword">super</span>.onCreate(savedInstanceState)<br>        binding = ActivityMainBinding.inflate(layoutInflater)<br>        setContentView(binding.root)<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><p>具体效果如下：</p><p><img src="/../../assets/image-20250505204757833.png" alt="image-20250505204757833"></p>]]></content>
    
    
    <categories>
      
      <category>安卓开发</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Redis实现分布式锁</title>
    <link href="/2024/11/27/%E9%BB%91%E9%A9%AC%E7%82%B9%E8%AF%84-Redis/Redis%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/"/>
    <url>/2024/11/27/%E9%BB%91%E9%A9%AC%E7%82%B9%E8%AF%84-Redis/Redis%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</url>
    
    <content type="html"><![CDATA[<h1 id="Redis实现分布式锁"><a href="#Redis实现分布式锁" class="headerlink" title="Redis实现分布式锁"></a>Redis实现分布式锁</h1><p>Redis本身可以被任意JVM实例访问，同时Redis中的setnx命令具备互斥性，因此符合分布式锁的需求。不过实现分布式锁的时候还有一些细节需要考虑，绝不仅仅是setnx这么简单。</p><h2 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h2><p>Redis的setnx命令是对string类型数据的操作，setnx的作用是在给定的键不存在的情况下，设置键的值。如果键已经存在，则不做任何操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs redis"># 给key赋值为value redis中不存在该key返回1并保存，存在则返回0。<br>SETNX key value<br># 删除指定key，用来释放锁<br>DEL key<br># 例如对某个业务的锁key<br>SETNX lock thread1<br># 可对其设置过期时间，避免死锁<br>EXPIRE lock 20<br># 但建议用下面命令实现具备原子性，避免执行完SETNX，还没来得急执行EXPIRE时服务已经宕机了，这样加锁成功，但锁超时时间依然没能设置<br>SET lock thread1 NX EX 20<br></code></pre></td></tr></table></figure><h2 id="基于SETNX实现分布式锁可能存在的问题"><a href="#基于SETNX实现分布式锁可能存在的问题" class="headerlink" title="基于SETNX实现分布式锁可能存在的问题"></a>基于SETNX实现分布式锁可能存在的问题</h2><h3 id="锁误删问题"><a href="#锁误删问题" class="headerlink" title="锁误删问题"></a>锁误删问题</h3><p>释放锁的操作是基于DEL，但是在极端情况下会出现问题。</p><p>例如，某个线程获取锁后执行业务，由于业务执行的时间较长，导致锁因为长时间阻塞而自动释放。</p><p><img src="/../../assets/image.png" alt="image"></p>]]></content>
    
    
    <categories>
      
      <category>Redis</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Redis持久化</title>
    <link href="/2024/11/20/%E9%BB%91%E9%A9%AC%E7%82%B9%E8%AF%84-Redis/Redis%E6%8C%81%E4%B9%85%E5%8C%96/"/>
    <url>/2024/11/20/%E9%BB%91%E9%A9%AC%E7%82%B9%E8%AF%84-Redis/Redis%E6%8C%81%E4%B9%85%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h1 id="Redis持久化"><a href="#Redis持久化" class="headerlink" title="Redis持久化"></a>Redis持久化</h1><p><strong>目前存在两种持久化方式，RDB和AOF</strong></p><h2 id="RDB"><a href="#RDB" class="headerlink" title="RDB"></a>RDB</h2><p>在redis运行时，RDB将内存中的数据库生成一个Snapshot快照保存到磁盘文件中，Redis重启时，RDB可通过快照文件来还原数据库的状态。它的触发方式有，<strong>save命令</strong>（同步），<strong>bgsave命令</strong>（异步）还有<strong>自动方式</strong>。</p><p>SAVE 命令一般在非常小的数据集上使用，BGSAVE 命令是更常用的方式，特别是在生产环境中，因为它不会阻塞整个 Redis 服务。 </p><p><img src="/../../assets/b6d3793f402c24f7665d3c6561508b6.png" alt="b6d3793f402c24f7665d3c6561508b6"></p><p><img src="/../../assets/image-20241120155516031.png" alt="image-20241120155516031"></p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs tap">配置时间策略具体的意思：<br>-<span class="hljs-number"> 3600 </span>秒内有一个 key 变化<br>-<span class="hljs-number"> 300 </span>秒内<span class="hljs-number"> 100 </span>个 key 变化<br>-<span class="hljs-number"> 60 </span>秒内有<span class="hljs-number"> 10000 </span>个 key 发生变化<br></code></pre></td></tr></table></figure><p>如果存在老的 RDB 文件，那么会生成一个临时文件，然后新生成的文件就会替换老的 RDB 文件。</p><p>有时候没有执行 save，bgsave 命令或者配置文件设置 RDB 自动生成方式时候也会生成RDB文件，因为可能主从之间会有全量复制导致生成的，主节点会自动生成 RDB 文件。</p><h2 id="AOF"><a href="#AOF" class="headerlink" title="AOF"></a>AOF</h2><p>客户端每执行一条命令都会被记录在 AOF 文件中。当 Redis 服务器宕机后，Redis 可以从 AOF 文件中恢复数据。Redis 在执行写入 AOF 日志文件的时候不是直接去写入文件中，而是先记录在硬盘的缓冲区，缓冲区会根据一些刷新策略来决定什么时候刷新到磁盘中，这样会提高写入的效率。</p><p>always（暴力写入磁盘，效率高但性能差吞吐量低）</p><p>everysec（每秒将缓冲中的数据 fsync 到磁盘）</p><p>no（关闭自动写入磁盘）</p><p><strong>AOF重写</strong>是将过期的，没有用的，重复的命令，以及一些可以优化的命令都进行一个精简，来缩小 AOF 文件的体积，减少对磁盘的占用量。同时文件体积缩小也可以加速Redis恢复的速度。</p><h2 id="二者选择"><a href="#二者选择" class="headerlink" title="二者选择"></a>二者选择</h2><p>RDB（Redis DataBase）和 AOF（Append Only File）是两种不同的持久化机制，它们各自有一些优势和劣势。下面是它们之间的一些对比：</p><h3 id="数据格式"><a href="#数据格式" class="headerlink" title="数据格式"></a>数据格式</h3><p>RDB： 生成的是二进制的快照文件，包含了 Redis 在某个时间点上的所有数据。这种格式非常紧凑，适合用于备份和恢复。</p><p>AOF： 以文本格式追加写操作的日志文件，记录了每个写命令。这使得 AOF 文件相对容易阅读和人工修复。</p><h3 id="恢复速度"><a href="#恢复速度" class="headerlink" title="恢复速度"></a>恢复速度</h3><p>RDB： 恢复速度一般比 AOF 快，因为它是一个完整的数据快照，只需读取 RDB 文件并加载到内存中即可。</p><p>AOF： 恢复速度可能比较慢，特别是对于大型 AOF 文件，因为需要逐行执行写操作来还原数据。</p><h3 id="数据丢失"><a href="#数据丢失" class="headerlink" title="数据丢失"></a>数据丢失</h3><p>RDB： 在两次 RDB 文件生成之间的写操作可能会丢失，因为 RDB 是定期生成的。</p><p>AOF： 数据丢失的程度通常比较小，因为 AOF 记录了每个写操作。在发生故障时，只有最后一次写操作之后的数据可能会丢失。</p><h3 id="文件大小"><a href="#文件大小" class="headerlink" title="文件大小"></a>文件大小</h3><p>RDB： 通常比较小，因为它是一个完整的数据快照。</p><p>AOF： 可能比较大，特别是对于频繁写入的系统，因为它记录了每个写命令。</p><h3 id="随机访问性"><a href="#随机访问性" class="headerlink" title="随机访问性"></a>随机访问性</h3><p>RDB： 适合大规模数据集的恢复，因为它是一个二进制文件，支持快速的随机访问。</p><p>AOF： 由于是文本文件，随机访问性相对较差。</p><h3 id="系统稳定性"><a href="#系统稳定性" class="headerlink" title="系统稳定性"></a>系统稳定性</h3><p>RDB： 在生成 RDB 文件期间会有一段时间的阻塞，因为 Redis 在生成 RDB 文件时执行 fork 操作。在这个时间段内，不能执行写操作。</p><p>AOF： AOF 在追加写操作时是非阻塞的，因此不会影响系统的响应性。</p><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><p>RDB： 适合用于备份和定期快照，对于大型数据集的快速恢复。</p><p>AOF： 适合对数据的持久化要求更高，能够容忍一些性能开销，以及需要更精细的数据恢复场景。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通常情况下，可以同时使用 RDB 和 AOF，以兼顾数据恢复的速度和可靠性。<br>如果需要在故障时最小化数据丢失，并且对于恢复速度有较高的要求，可以使用 AOF 持久化。如果可以忍受一小段时间内数据的丢失，毫无疑问使用 RDB 是最好的，定时生成 RDB 快照（snapshot）非常便于进行数据库备份， 并且 RDB 恢复数据集的速度也要比 AOF 恢复的速度要快，而且使用 RDB 还可以避免 AOF 一些隐藏的 bug；否则就使用 AOF 重写。但是一般情况下建议不要单独使用某一种持久化机制，而是应该两种一起用，在这种情况下,当redis重启的时候会优先载入AOF文件来恢复原始的数据，因为在通常情况下AOF文件保存的数据集要比RDB文件保存的数据集要完整。Redis后期官方可能都有将两种持久化方式整合为一种持久化模型。</p>]]></content>
    
    
    <categories>
      
      <category>Redis</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2024/11/11/Git/1/"/>
    <url>/2024/11/11/Git/1/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>3_Linux查看日志的各种方案</title>
    <link href="/2024/11/11/Linux%E5%9F%BA%E7%A1%80/3_Linux%E6%9F%A5%E7%9C%8B%E6%97%A5%E5%BF%97%E7%9A%84%E5%90%84%E7%A7%8D%E6%96%B9%E6%A1%88/"/>
    <url>/2024/11/11/Linux%E5%9F%BA%E7%A1%80/3_Linux%E6%9F%A5%E7%9C%8B%E6%97%A5%E5%BF%97%E7%9A%84%E5%90%84%E7%A7%8D%E6%96%B9%E6%A1%88/</url>
    
    <content type="html"><![CDATA[<h1 id="Linux查看日志的各种方案"><a href="#Linux查看日志的各种方案" class="headerlink" title="Linux查看日志的各种方案"></a>Linux查看日志的各种方案</h1><p>常用的日志命令有tail,cat,tac,head,echo等</p><h2 id="tail"><a href="#tail" class="headerlink" title="tail"></a>tail</h2><figure class="highlight stan"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs stan">命令格式：<span class="hljs-built_in">tail</span>[必要参数][选择参数][文件]<br>-f 循环读取 <br>-q 不显示处理信息 <br>-v 显示详细的处理信息 <br>-c&lt;数目&gt; 显示的字节数 <br>-n&lt;行数&gt; 显示行数 <br><br><span class="hljs-built_in">tail</span> -n <span class="hljs-number">10</span> test.<span class="hljs-built_in">log</span> 查询日志尾部最后<span class="hljs-number">10</span>行的日志;<br><span class="hljs-built_in">tail</span> -n +<span class="hljs-number">10</span> test.<span class="hljs-built_in">log</span> 查询<span class="hljs-number">10</span>行之后的所有日志;<br><span class="hljs-built_in">tail</span> -fn <span class="hljs-number">10</span> test.<span class="hljs-built_in">log</span> 循环实时查看最后<span class="hljs-number">10</span>行记录(最常用的)<br></code></pre></td></tr></table></figure><p>tail -fn 10 test.log 循环实时查看最后10行记录(最常用的)，一般还会配合着grep搜索用比如</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">tail -fn <span class="hljs-number">1000</span> test.<span class="hljs-built_in">log</span> | <span class="hljs-keyword">grep</span> <span class="hljs-string">&#x27;关键字&#x27;</span><br></code></pre></td></tr></table></figure><p><img src="/../../assets/image-20241111162127090.png" alt="image-20241111162127090"></p><h2 id="head"><a href="#head" class="headerlink" title="head"></a>head</h2><p>跟tail是相反的head是看前多少行日志</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">head</span> -n <span class="hljs-number">10</span> test.log 查询日志文件中的头<span class="hljs-number">10</span>行日志;<br><span class="hljs-attribute">head</span> -n -<span class="hljs-number">10</span> test.log 查询日志文件除了最后<span class="hljs-number">10</span>行的其他所有日志;<br></code></pre></td></tr></table></figure><h2 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h2><p>cat 是由第一行到最后一行连续显示在屏幕上</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs stata">一次显示整个文件:<br><span class="hljs-keyword">cat</span> filename<br><br>从键盘创建一个文件:<br><span class="hljs-keyword">cat</span> &gt; filename<br><br>将几个文件合并为一个文件:<br><span class="hljs-keyword">cat</span> file1 file2 &gt; <span class="hljs-keyword">file</span> 只能创建新文件,不能编辑已有文件<br><br>将一个日志文件的内容追加到另外一个:<br><span class="hljs-keyword">cat</span> -<span class="hljs-keyword">n</span> textfile1 &gt; textfile2<br><br>清空一个日志文件<br><span class="hljs-keyword">cat</span> : &gt;textfile2<br></code></pre></td></tr></table></figure><p>&gt; 意思是创建，&gt;&gt;是追加。千万不要弄混了</p><h2 id="more"><a href="#more" class="headerlink" title="more"></a>more</h2><p>more命令是一个基于vi编辑器文本过滤器，它以全屏幕的方式按页显示文本文件的内容，支持vi中的关键字定位操作。more名单中内置了若干快捷键，常用的有H（获得帮助信息），Enter（向下翻滚一行），空格（向下滚动一屏），Q（退出命令）。more命令从前向后读取文件，因此在启动时就加载整个文件。</p><p>该命令一次显示一屏文本，满屏后停下来，并且在屏幕的底部出现一个提示信息，给出至今己显示的该文件的百分比：–More–（XX%）</p><ul><li>more的语法：more 文件名</li><li>Enter 向下n行，需要定义，默认为1行</li><li>Ctrl f 向下滚动一屏</li><li>空格键 向下滚动一屏</li><li>Ctrl b 返回上一屏</li><li>&#x3D; 输出当前行的行号</li><li>:f 输出文件名和当前行的行号</li><li>v 调用vi编辑器</li><li>!命令 调用Shell，并执行命令</li><li>q退出more</li></ul><h2 id="sed"><a href="#sed" class="headerlink" title="sed"></a>sed</h2><p>查找日志文件特定的一段 , 根据时间的一个范围查询，可以按照行号和时间范围查询按照行号</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs 1c">按照行号<br>sed -n &#x27;5,10p&#x27; filename 这样可以只查看文件的第<span class="hljs-number">5</span>行到第<span class="hljs-number">10</span>行。<br>按照时间段<br>sed -n &#x27;/<span class="hljs-number">2024-11-11</span> 16:17:20/,/<span class="hljs-number">2024-11-11</span> 16:17:36/p&#x27; test.<span class="hljs-built_in">log</span><br></code></pre></td></tr></table></figure><h2 id="less"><a href="#less" class="headerlink" title="less"></a>less</h2><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">less nohup.out<br><span class="hljs-keyword">shift+G </span>到文件尾部然后输入？加上需要搜索的关键字 ?<span class="hljs-keyword">java</span><br><span class="hljs-keyword"></span>按N向上查找关键字 <span class="hljs-keyword">shift+N </span>向下查找关键字<br></code></pre></td></tr></table></figure><p><img src="/../../assets/image-20241111164311876.png" alt="image-20241111164311876"></p><p>使用less可以随意浏览文件，而more仅能向前移动，不能向后移动，而且 less 在查看之前不会加载整个文件。</p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>1_DelayQueue</title>
    <link href="/2024/08/04/%E9%AB%98%E5%B9%B6%E5%8F%91%E5%9C%BA%E6%99%AF/DelayQueue/"/>
    <url>/2024/08/04/%E9%AB%98%E5%B9%B6%E5%8F%91%E5%9C%BA%E6%99%AF/DelayQueue/</url>
    
    <content type="html"><![CDATA[<h1 id="DelayQueue"><a href="#DelayQueue" class="headerlink" title="DelayQueue"></a>DelayQueue</h1><h2 id="DelayQueue的基本认识"><a href="#DelayQueue的基本认识" class="headerlink" title="DelayQueue的基本认识"></a>DelayQueue的基本认识</h2><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">这是一种实现延迟任务的方式<br>由<span class="hljs-keyword">JAVA </span>API提供两种实现延迟任务的方法：<br>DelayQueue和<span class="hljs-keyword">ScheduledExecutorService</span><br></code></pre></td></tr></table></figure><p>DelayQueue是一个无边界的阻塞队列，只能存放实现Delayed接口的对象，到期后自动从队列中提取。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-keyword">import</span> java.time.Duration;<br><span class="hljs-keyword">import</span> java.util.concurrent.Delayed;<br><span class="hljs-keyword">import</span> java.util.concurrent.TimeUnit;<br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DelayTask</span>&lt;D&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Delayed</span> &#123;<br>    <span class="hljs-comment">// 数据</span><br>    <span class="hljs-keyword">private</span> D data;<br>    <span class="hljs-comment">// 执行时间（纳秒）</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">long</span> activeTime;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">DelayTask</span><span class="hljs-params">(D data, Duration d)</span> &#123;<br>        <span class="hljs-built_in">this</span>.data = data;<br><span class="hljs-comment">//        this.activeTime = System.nanoTime() + d.getNano();</span><br>        <span class="hljs-built_in">this</span>.activeTime = System.nanoTime() + d.toNanos();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 返回任务执行剩余的时间</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> unit the time unit</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">long</span> <span class="hljs-title function_">getDelay</span><span class="hljs-params">(TimeUnit unit)</span> &#123;<br>        <span class="hljs-keyword">return</span> unit.convert(Math.max(<span class="hljs-number">0</span>,activeTime - System.nanoTime()),TimeUnit.NANOSECONDS);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 排序</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> o the object to be compared.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compareTo</span><span class="hljs-params">(Delayed o)</span> &#123;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> getDelay(TimeUnit.NANOSECONDS) - o.getDelay(TimeUnit.NANOSECONDS);<br>        <span class="hljs-keyword">if</span> (l &gt; <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (l == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span>  <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest(classes = LearningApplication.class)</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DelayTaskTest</span> &#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fun1</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-comment">// 1.定义DelayQueue，向DelayQueue存放三个延迟任务</span><br>        DelayQueue&lt;DelayTask&lt;String&gt;&gt; delayTasks = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DelayQueue</span>&lt;&gt;();<br>        delayTasks.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">DelayTask</span>&lt;String&gt;(<span class="hljs-string">&quot;任务一&quot;</span>, Duration.ofSeconds(<span class="hljs-number">1</span>)));<br>        delayTasks.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">DelayTask</span>&lt;String&gt;(<span class="hljs-string">&quot;任务二&quot;</span>,Duration.ofSeconds(<span class="hljs-number">5</span>)));<br>        delayTasks.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">DelayTask</span>&lt;String&gt;(<span class="hljs-string">&quot;任务三&quot;</span>,Duration.ofSeconds(<span class="hljs-number">6</span>)));<br>        <span class="hljs-comment">// 2.从DelayQueue取出延迟任务</span><br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-comment">// take()阻塞方法</span><br>            DelayTask&lt;String&gt; delayTask = delayTasks.take();<br>            log.info(<span class="hljs-string">&quot;&#123;&#125;执行了&quot;</span>,delayTask.getData());<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>日志如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">23</span>:<span class="hljs-number">55</span>:<span class="hljs-number">36.000</span>-[JMin][sys] - INFO <span class="hljs-number">8208</span> --- [           main] com.tianji.learning.DelayTaskTest        : 现在时间是<span class="hljs-number">2024</span>-08-04T23:<span class="hljs-number">55</span>:<span class="hljs-number">36.000673500</span>,任务一执行了<br><span class="hljs-number">23</span>:<span class="hljs-number">55</span>:<span class="hljs-number">40.001</span>-[JMin][sys] - INFO <span class="hljs-number">8208</span> --- [           main] com.tianji.learning.DelayTaskTest        : 现在时间是<span class="hljs-number">2024</span>-08-04T23:<span class="hljs-number">55</span>:<span class="hljs-number">40.001206200</span>,任务二执行了<br><span class="hljs-number">23</span>:<span class="hljs-number">55</span>:<span class="hljs-number">40.991</span>-[JMin][sys] - INFO <span class="hljs-number">8208</span> --- [           main] com.tianji.learning.DelayTaskTest        : 现在时间是<span class="hljs-number">2024</span>-08-04T23:<span class="hljs-number">55</span>:<span class="hljs-number">40.991293800</span>,任务三执行了<br><br></code></pre></td></tr></table></figure><h2 id="Volatile的基本使用"><a href="#Volatile的基本使用" class="headerlink" title="Volatile的基本使用"></a>Volatile的基本使用</h2><p>看下面案例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.tianji.learning;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">VolatileDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-type">VlDemo</span> <span class="hljs-variable">vlDemo</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">VlDemo</span>();<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">thread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(vlDemo);<br>        thread.start();<br>        Thread.sleep(<span class="hljs-number">100</span>);<br>        vlDemo.flag = <span class="hljs-literal">false</span>;<br>        System.out.println(<span class="hljs-string">&quot;主线将vlDemo.flag改为:&quot;</span> + vlDemo.flag);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">VlDemo</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;线程开始&quot;</span>);<br>        <span class="hljs-keyword">while</span> (flag) &#123;<br><br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;线程结束&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出的结果</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">线程开始<br>主线将vlDemo.flag改为:<span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><p>主线程中将flag修改，但子线程的flag未被读到修改后的值，此时需要在VlDemo类中的flag变量前加volatile修饰</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.tianji.learning;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">VolatileDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-type">VlDemo</span> <span class="hljs-variable">vlDemo</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">VlDemo</span>();<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">thread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(vlDemo);<br>        thread.start();<br>        Thread.sleep(<span class="hljs-number">100</span>);<br>        vlDemo.flag = <span class="hljs-literal">false</span>;<br>        System.out.println(<span class="hljs-string">&quot;主线将vlDemo.flag改为:&quot;</span> + vlDemo.flag);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">VlDemo</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br>    <span class="hljs-comment">// 关键！！</span><br>    <span class="hljs-keyword">volatile</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;线程开始&quot;</span>);<br>        <span class="hljs-keyword">while</span> (flag) &#123;<br><br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;线程结束&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>线程可见性问题，在多线程中，一个线程对共享数据的操作，其他线程如果不可见</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss">注意，在Spring项目中，不能直接单线程调用<span class="hljs-built_in">delayTask</span>()方法，因为Spring采用的是单例模式，一旦直接调用，会导致整个系统陷入阻塞！！！<br></code></pre></td></tr></table></figure><p>异步：</p><p>不建议创建Thread对象，会造成资源浪费</p><ul><li><p>方式一，自定义线程池，注册到Spring容器中，注入线程池，线程池调用业务（子线程）</p></li><li><p>方式二，<code>CompletableFuture</code> 是 Java 8 引入用于支持异步编程和非阻塞操作的类 <a href="https://baijiahao.baidu.com/s?id=1782365142068901855&wfr=spider&for=pc">深度解析CompletableFuture：Java 异步世界的奇迹 (baidu.com)</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostConstruct</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span>&#123;<br>    CompletableFuture.runAsync(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>            handleDelayTask();<br>        &#125;<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><p><code>CompletableFuture</code> 默认使用共享线程池： <code>ForkJoinPool.commonPool()</code> 作为线程池，通过工作窃取算法提高了任务的并行度，同时使用<code>VarHandle</code>、<code>volatile</code>来保证线程间的可见性和原子操作，以上保证了线程安全和高可用。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>高并发场景</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>面试准备</title>
    <link href="/2024/07/24/%E9%9D%A2%E8%AF%95%E4%B8%93%E9%A2%98/%E9%9D%A2%E8%AF%95/"/>
    <url>/2024/07/24/%E9%9D%A2%E8%AF%95%E4%B8%93%E9%A2%98/%E9%9D%A2%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<h1 id="面试准备"><a href="#面试准备" class="headerlink" title="面试准备"></a>面试准备</h1><h2 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h2><h3 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h3><p><img src="/../../assets/image-20240724114742355.png" alt="image-20240724114742355"></p><h3 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h3><p>锁，即在多线程环境下，对共享资源的访问造成的线程安全问题，通过锁的机制来实现资源访问互斥；比如Java语言有线程锁：synchronize&#x2F;Lock等；</p><h4 id="基本思路"><a href="#基本思路" class="headerlink" title="基本思路"></a>基本思路</h4><ol><li>获取锁：setnx key value 其他线程创建key失败，则获取锁失败</li><li>设置锁的过期时间 expire key 30 防止宕机后一直锁</li><li>执行业务代码</li><li>释放锁 del key</li></ol><h4 id="四种redis集成工具"><a href="#四种redis集成工具" class="headerlink" title="四种redis集成工具"></a>四种redis集成工具</h4><ul><li>Jedis</li><li>Lettuce</li><li>RedisTemplate</li><li>Redisson(分布式锁推荐)</li></ul><h4 id="Redisson实现分布式锁"><a href="#Redisson实现分布式锁" class="headerlink" title="Redisson实现分布式锁"></a>Redisson实现分布式锁</h4><ol><li>获取锁： redisson.getLock(“lock”);  &#x2F;&#x2F; lock.lock();</li><li>业务代码();</li><li>释放锁 lock.unlock();</li></ol><p><img src="/../../assets/image-20240724114735243.png" alt="image-20240724114735243"></p><p><img src="/../../assets/image-20240724114727877.png" alt="image-20240724114719826"></p><h4 id="Redisson实现分布式锁getLock-源代码分析"><a href="#Redisson实现分布式锁getLock-源代码分析" class="headerlink" title="Redisson实现分布式锁getLock()源代码分析"></a>Redisson实现分布式锁getLock()源代码分析</h4><p><img src="/../../assets/image-20240724154116816.png" alt="image-20240724154116816"></p><p><img src="/../../assets/image-20240724154221999.png" alt="image-20240724154221999"></p><p><img src="/../../assets/image-20240724154345856.png" alt="image-20240724154345856"></p><p><img src="/../../assets/image-20240724154356583.png" alt="image-20240724154356583"></p><p><img src="/../../assets/image-20240724154447867.png" alt="image-20240724154447867"></p><p><img src="/../../assets/image-20240724154651812.png" alt="image-20240724154651812"></p><h4 id="Redisson实现分布式锁lock-源代码分析"><a href="#Redisson实现分布式锁lock-源代码分析" class="headerlink" title="Redisson实现分布式锁lock()源代码分析"></a>Redisson实现分布式锁lock()源代码分析</h4><p><img src="/../../assets/image-20240724154813368.png" alt="image-20240724154813368"></p><p><img src="/../../assets/image-20240724154824149.png" alt="image-20240724154824149"></p><p><img src="/../../assets/image-20240724160214475.png" alt="image-20240724160214475"></p><p><img src="/../../assets/image-20240724160555110.png" alt="image-20240724160555110"></p><p><img src="/../../assets/image-20240724160720054.png" alt="image-20240724160720054"></p><p>lua脚本执行，保证操作具备原子性</p><h4 id="Redisson实现分布式锁续期源代码分析"><a href="#Redisson实现分布式锁续期源代码分析" class="headerlink" title="Redisson实现分布式锁续期源代码分析"></a>Redisson实现分布式锁续期源代码分析</h4>]]></content>
    
    
    <categories>
      
      <category>面试</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Redis实现秒杀</title>
    <link href="/2024/03/26/%E9%BB%91%E9%A9%AC%E7%82%B9%E8%AF%84-Redis/Redis%E7%A7%92%E6%9D%80/"/>
    <url>/2024/03/26/%E9%BB%91%E9%A9%AC%E7%82%B9%E8%AF%84-Redis/Redis%E7%A7%92%E6%9D%80/</url>
    
    <content type="html"><![CDATA[<h1 id="Redis实现秒杀"><a href="#Redis实现秒杀" class="headerlink" title="Redis实现秒杀"></a>Redis实现秒杀</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">VoucherOrderServiceImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ServiceImpl</span>&lt;VoucherOrderMapper, VoucherOrder&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IVoucherOrderService</span> &#123;<br><br>    <span class="hljs-comment">// 优惠券服务</span><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> ISeckillVoucherService seckillVoucherService;<br>    <span class="hljs-comment">// 生成订单id</span><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> RedisIdWorker redisIdWorker;<br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> StringRedisTemplate stringRedisTemplate;<br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> RedissonClient redissonClient1;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">seckillVoucher</span><span class="hljs-params">(Long voucherId)</span> &#123;<br>        <span class="hljs-comment">// 查询优惠券</span><br>        <span class="hljs-type">SeckillVoucher</span> <span class="hljs-variable">voucher</span> <span class="hljs-operator">=</span> seckillVoucherService.getById(voucherId);<br>        <span class="hljs-comment">// 秒杀是否开启</span><br>        <span class="hljs-keyword">if</span> (voucher.getBeginTime().isAfter(LocalDateTime.now())) &#123;<br>            <span class="hljs-comment">// 尚未开始</span><br>            <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;秒杀尚未开始！&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (voucher.getEndTime().isBefore(LocalDateTime.now())) &#123;<br>            <span class="hljs-comment">// 已经结束</span><br>            <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;秒杀已经结束！&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">// 判断库存是否充足</span><br>        <span class="hljs-keyword">if</span> (voucher.getStock() &lt; <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-comment">// 库存不足</span><br>            <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;库存不足！&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">// 原子</span><br><span class="hljs-comment">//         @Transactional 自调用(实际上是目标对象内的方法调用目标对象的另一个方法)在运行时不会导致实际的事务</span><br>        <span class="hljs-type">Long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> UserHolder.getUser().getId();<br>        <span class="hljs-comment">// 创建锁对象</span><br>        <span class="hljs-type">RLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> redissonClient1.getLock(<span class="hljs-string">&quot;lock:order:&quot;</span> + userId);<br><span class="hljs-comment">//        SimpleRedisLock lock = new SimpleRedisLock(&quot;order:&quot; + userId, stringRedisTemplate);</span><br>        <span class="hljs-comment">// 获取锁,无参tryLock()默认没有最大等待时间，30秒后释放锁</span><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">isLock</span> <span class="hljs-operator">=</span> lock.tryLock();<br>        <span class="hljs-keyword">if</span> (!isLock) &#123;<br>            <span class="hljs-comment">// 获取锁失败</span><br>            <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;不允许重复下单！&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">IVoucherOrderService</span> <span class="hljs-variable">proxy</span> <span class="hljs-operator">=</span> (IVoucherOrderService) AopContext.currentProxy();<br>            <span class="hljs-keyword">return</span> proxy.createVoucherOrder(voucherId);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">// 释放锁</span><br>            lock.unlock();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Transactional</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">createVoucherOrder</span><span class="hljs-params">(Long voucherId)</span> &#123;<br>        <span class="hljs-comment">// 一人一单</span><br>        <span class="hljs-type">Long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> UserHolder.getUser().getId();<br>        <span class="hljs-type">Long</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> query().eq(<span class="hljs-string">&quot;user_id&quot;</span>, userId).eq(<span class="hljs-string">&quot;voucher_id&quot;</span>, voucherId).count();<br>        <span class="hljs-keyword">if</span> (count &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-comment">// 该用户已获取优惠券</span><br>            <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;该用户已获取过优惠券&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">// 扣减库存</span><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">seckillSuccess</span> <span class="hljs-operator">=</span> seckillVoucherService.update()<br>                .setSql(<span class="hljs-string">&quot;stock = stock - 1&quot;</span>)<br>                .eq(<span class="hljs-string">&quot;voucher_id&quot;</span>, voucherId)<br>                <span class="hljs-comment">// 乐观锁</span><br>                .gt(<span class="hljs-string">&quot;stock&quot;</span>, <span class="hljs-number">0</span>)<br>                .update();<br>        <span class="hljs-keyword">if</span> (!seckillSuccess) &#123;<br>            <span class="hljs-comment">// 秒杀失败</span><br>            <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;优惠券库存不足！&quot;</span>);<br>        &#125;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">orderId</span> <span class="hljs-operator">=</span> redisIdWorker.nextId(<span class="hljs-string">&quot;order&quot;</span>);<br>        <span class="hljs-comment">// 创建订单</span><br>        <span class="hljs-type">VoucherOrder</span> <span class="hljs-variable">voucherOrder</span> <span class="hljs-operator">=</span> VoucherOrder.builder()<br>                <span class="hljs-comment">// 订单id</span><br>                .id(orderId)<br>                <span class="hljs-comment">// 代金券id</span><br>                .voucherId(voucherId)<br>                <span class="hljs-comment">// 用户id</span><br>                .userId(userId)<br>                .build();<br>        <span class="hljs-comment">// 保存订单</span><br>        save(voucherOrder);<br>        <span class="hljs-comment">// 返回订单id</span><br>        <span class="hljs-keyword">return</span> Result.ok(orderId);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>继之前的解决超卖和一人一单问题后，由于存在较多的数据库操作，业务性能较低。</p><p><img src="/assets/image-20240328004704143.png" alt="image-20240328004704143"></p><p><img src="/assets/image-20240327005300600.png" alt="image-20240327005300600"></p><p><img src="/assets/image-20240327005548605.png" alt="image-20240327005548605"></p><p><img src="/assets/image-20240327005626624.png" alt="image-20240327005626624"></p><p><img src="/assets/image-20240327010457153.png" alt="image-20240327010457153"></p><p>对于库存避免超卖，可以直接用key-value。当用户拥有购买资格，库存必须减1</p><p><img src="/assets/image-20240327011041765.png" alt="image-20240327011041765"></p><p>对于一人一单，采用key-set</p><p><img src="/assets/image-20240327011158224.png" alt="image-20240327011158224"></p><p><img src="/assets/image-20240327011224318.png" alt="image-20240327011224318"></p><p><img src="/assets/image-20240327011350950.png" alt="image-20240327011350950"></p><h2 id="基于Redis完成秒杀资格判断，提高并发性能"><a href="#基于Redis完成秒杀资格判断，提高并发性能" class="headerlink" title="基于Redis完成秒杀资格判断，提高并发性能"></a>基于Redis完成秒杀资格判断，提高并发性能</h2><p><img src="/assets/image-20240327011540090.png" alt="image-20240327011540090"></p><p>需求1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-meta">@Transactional</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addSeckillVoucher</span><span class="hljs-params">(Voucher voucher)</span> &#123;<br>    <span class="hljs-comment">// 保存优惠券</span><br>    save(voucher);<br>    <span class="hljs-comment">// 保存秒杀信息</span><br>    <span class="hljs-type">SeckillVoucher</span> <span class="hljs-variable">seckillVoucher</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SeckillVoucher</span>();<br>    seckillVoucher.setVoucherId(voucher.getId());<br>    seckillVoucher.setStock(voucher.getStock());<br>    seckillVoucher.setBeginTime(voucher.getBeginTime());<br>    seckillVoucher.setEndTime(voucher.getEndTime());<br>    seckillVoucherService.save(seckillVoucher);<br>    <span class="hljs-comment">// 保存优惠券的库存到Redis</span><br>    stringRedisTemplate.opsForValue().set(SECKILL_STOCK_KEY + voucher.getId(), String.valueOf(voucher.getStock()));<br>&#125;<br></code></pre></td></tr></table></figure><p>需求2，lua脚本，判断秒杀库存、一人一单，决定用户是否抢购成功</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-comment">---</span><br><span class="hljs-comment">--- Generated by EmmyLua(https://github.com/EmmyLua)</span><br><span class="hljs-comment">--- Created by 29522.</span><br><span class="hljs-comment">--- DateTime: 2024/3/27 9:44</span><br><span class="hljs-comment">---</span><br><span class="hljs-comment">--- 参数列表：优惠券id，用户id</span><br><span class="hljs-keyword">local</span> voucherId = ARGV[<span class="hljs-number">1</span>]<br><span class="hljs-keyword">local</span> userId = ARGV[<span class="hljs-number">2</span>]<br><span class="hljs-comment">-- 库存key，订单key</span><br><span class="hljs-comment">-- ..拼接符</span><br><span class="hljs-keyword">local</span> stockKey = <span class="hljs-string">&quot;seckill:stock:&quot;</span> .. voucherId<br><span class="hljs-keyword">local</span> orderKey = <span class="hljs-string">&quot;seckill:order:&quot;</span> .. voucherId<br><span class="hljs-comment">-- 库存是否充足</span><br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">tonumber</span>(redis.call(<span class="hljs-string">&quot;get&quot;</span>, stockKey)) &lt;= <span class="hljs-number">0</span>) <span class="hljs-keyword">then</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br><span class="hljs-keyword">end</span><br><span class="hljs-comment">-- 判断用户是否已经下单</span><br><span class="hljs-keyword">if</span> (redis.call(<span class="hljs-string">&quot;sismember&quot;</span>, orderKey, userId) == <span class="hljs-number">1</span>) <span class="hljs-keyword">then</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">2</span><br><span class="hljs-keyword">end</span><br><span class="hljs-comment">-- 扣减库存</span><br>redis.call(<span class="hljs-string">&quot;incrby&quot;</span>, stockKey, <span class="hljs-number">-1</span>)<br><span class="hljs-comment">-- 添加订单</span><br>redis.call(<span class="hljs-string">&quot;sadd&quot;</span>, orderKey, userId)<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">seckillVoucher</span><span class="hljs-params">(Long voucherId)</span> &#123;<br>    <span class="hljs-type">Long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> UserHolder.getUser().getId();<br>    <span class="hljs-comment">// 执行lua脚本</span><br>    <span class="hljs-type">Long</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> stringRedisTemplate.execute(<br>            SECKILL_SCRIPT,<br>            Collections.emptyList(),<br>            voucherId.toString(),<br>            userId.toString()<br>    );<br>    <span class="hljs-type">int</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> result.intValue();<br>    <span class="hljs-keyword">if</span> (r != <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> Result.fail(r == <span class="hljs-number">1</span> ? <span class="hljs-string">&quot;库存不足!&quot;</span> : <span class="hljs-string">&quot;不能重复下单!&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">// 生成订单id</span><br>    <span class="hljs-type">long</span> <span class="hljs-variable">orderId</span> <span class="hljs-operator">=</span> redisIdWorker.nextId(<span class="hljs-string">&quot;order&quot;</span>);<br><br>    <span class="hljs-comment">// TODO 异步线程</span><br>    <span class="hljs-keyword">return</span> Result.ok(orderId);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20240327114151104.png" alt="image-20240327114151104"></p><p>显然，耗时平均值降低</p><p>需求3，创建阻塞队列</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 阻塞队列</span><br>    <span class="hljs-keyword">private</span> BlockingQueue&lt;VoucherOrder&gt; orderTasks = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="hljs-number">1024</span> * <span class="hljs-number">1024</span>);<br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">seckillVoucher</span><span class="hljs-params">(Long voucherId)</span> &#123;<br>        <span class="hljs-comment">// 新增秒杀优惠券的同时，将优惠券信息保存道Redis</span><br>        <span class="hljs-type">Long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> UserHolder.getUser().getId();<br>        <span class="hljs-comment">// 执行lua脚本</span><br>        <span class="hljs-type">Long</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> stringRedisTemplate.execute(<br>                SECKILL_SCRIPT,<br>                Collections.emptyList(),<br>                voucherId.toString(),<br>                userId.toString()<br>        );<br>        <span class="hljs-type">int</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> result.intValue();<br>        <span class="hljs-keyword">if</span> (r != <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> Result.fail(r == <span class="hljs-number">1</span> ? <span class="hljs-string">&quot;库存不足!&quot;</span> : <span class="hljs-string">&quot;不能重复下单!&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">// 生成订单id</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">orderId</span> <span class="hljs-operator">=</span> redisIdWorker.nextId(<span class="hljs-string">&quot;order&quot;</span>);<br>        <span class="hljs-comment">// TODO</span><br>        <span class="hljs-comment">// 异步线程 抢购成功，将优惠券id和用户id封装存入阻塞队列</span><br>        <span class="hljs-type">VoucherOrder</span> <span class="hljs-variable">voucherOrder</span> <span class="hljs-operator">=</span> VoucherOrder.builder()<br>                .id(orderId)<br>                .userId(userId)<br>                .voucherId(voucherId)<br>                .build();<br>        <span class="hljs-comment">// 存入阻塞队列</span><br>        orderTasks.add(voucherOrder);<br><br>        <span class="hljs-keyword">return</span> Result.ok(orderId);<br>    &#125;<br><br></code></pre></td></tr></table></figure><p>需求4，创建线程池和阻塞队列</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">   <span class="hljs-comment">// 阻塞队列</span><br>   <span class="hljs-keyword">private</span> BlockingQueue&lt;VoucherOrder&gt; orderTasks = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="hljs-number">1024</span> * <span class="hljs-number">1024</span>);<br>   <span class="hljs-comment">// 线程池</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">SECKILL_ORDER_EXECUTOR</span> <span class="hljs-operator">=</span> Executors.newSingleThreadExecutor();<br>   <span class="hljs-comment">// 代理IVoucherOrderService对象，以便执行原子性操作</span><br>   <span class="hljs-keyword">private</span> IVoucherOrderService proxy;<br></code></pre></td></tr></table></figure><p>当线程初始化时提前等待队列</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostConstruct</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span> &#123;<br>    SECKILL_ORDER_EXECUTOR.submit(<span class="hljs-keyword">new</span> <span class="hljs-title class_">VoucherOrderHandler</span>());<br>&#125;<br></code></pre></td></tr></table></figure><p>VoucherOrderHandler<strong>异步线程</strong>执行的程序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">VoucherOrderHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-comment">// 获取队列中的队列信息，获取不到则阻塞</span><br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-type">VoucherOrder</span> <span class="hljs-variable">voucherOrder</span> <span class="hljs-operator">=</span> orderTasks.take();<br>                <span class="hljs-comment">// 创建订单</span><br>                handleVoucherOrder(voucherOrder);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                log.error(<span class="hljs-string">&quot;处理订单异常&quot;</span>,e);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>当阻塞队列获得voucherOrder对象时，停止阻塞，想尝试获取锁，再创建订单（原子性）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleVoucherOrder</span><span class="hljs-params">(VoucherOrder voucherOrder)</span> &#123;<br>    <span class="hljs-type">Long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> voucherOrder.getUserId();<br>    <span class="hljs-comment">// 创建锁对象</span><br>    <span class="hljs-type">RLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> redissonClient1.getLock(<span class="hljs-string">&quot;lock:order:&quot;</span> + userId);<br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">isLock</span> <span class="hljs-operator">=</span> lock.tryLock();<br>    <span class="hljs-keyword">if</span> (!isLock) &#123;<br>        <span class="hljs-comment">// 获取锁失败</span><br>        log.error(<span class="hljs-string">&quot;不允许重复下单！&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 由于是子线程，无法获取代理对象，可以通过父线程获取然后存入阻塞队列中，或者成员变量的形式获取代理对象</span><br>        proxy.createVoucherOrder(voucherOrder);<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-comment">// 释放锁</span><br>        lock.unlock();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>获取到锁，进行数据库操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Transactional</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">createVoucherOrder</span><span class="hljs-params">(VoucherOrder voucherOrder)</span> &#123;<br>    <span class="hljs-comment">// 一人一单</span><br>    <span class="hljs-type">Long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> voucherOrder.getUserId();<br>    <span class="hljs-type">Long</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> query().eq(<span class="hljs-string">&quot;user_id&quot;</span>, userId).eq(<span class="hljs-string">&quot;voucher_id&quot;</span>, voucherOrder.getVoucherId()).count();<br>    <span class="hljs-keyword">if</span> (count &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-comment">// 该用户已获取优惠券</span><br>        log.error(<span class="hljs-string">&quot;该用户已获取过优惠券&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-comment">// 扣减库存</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">seckillSuccess</span> <span class="hljs-operator">=</span> seckillVoucherService.update()<br>            .setSql(<span class="hljs-string">&quot;stock = stock - 1&quot;</span>)<br>            .eq(<span class="hljs-string">&quot;voucher_id&quot;</span>, voucherOrder.getVoucherId())<br>            <span class="hljs-comment">// 乐观锁</span><br>            .gt(<span class="hljs-string">&quot;stock&quot;</span>, <span class="hljs-number">0</span>)<br>            .update();<br>    <span class="hljs-keyword">if</span> (!seckillSuccess) &#123;<br>        <span class="hljs-comment">// 秒杀失败</span><br>        log.error(<span class="hljs-string">&quot;优惠券库存不足！&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-comment">// 保存订单</span><br>    save(voucherOrder);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20240328004734355.png" alt="image-20240328004734355"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li><p>秒杀业务的优化思路</p><p>将同步下单改为异步下单，先判断有无下单资格，再异步下单</p><p>先利用Redis完成库存余量，一人一单判断，完成抢单业务</p><p>再将下单业务放入阻塞队列中，利用独立线程异步下单</p></li><li><p>基于阻塞队列的异步秒杀存在哪些问题？</p><p>内存限制问题，当前使用的是JDK的阻塞队列，这种阻塞队列使用了JVM内存，如果加以内存限制，在高并发场景下，可能存在无数订单对象需要存储到阻塞队列中，导致内存溢出</p><p>数据安全问题，当前使用的是内存保存订单数据，如果服务器宕机，内存保存订单数据将全部丢失，用户完成了下单而且付款成功，但后台没有存储订单数据，数据不一致。另一种情况，从队列中取出了任务并执行，但执行过程中出现异常，任务中断</p><p>因此可以考虑使用消息队列！！</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>Redis</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>超卖问题</title>
    <link href="/2024/03/25/%E9%BB%91%E9%A9%AC%E7%82%B9%E8%AF%84-Redis/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/"/>
    <url>/2024/03/25/%E9%BB%91%E9%A9%AC%E7%82%B9%E8%AF%84-Redis/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</url>
    
    <content type="html"><![CDATA[<h1 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h1><p>满足分布式系统或集群模式下多进程可见并且互斥的锁。</p><p>分布式锁的核心是实现多线程之间的互斥，常见三种实现方式</p><p>MYSQL.REDIS.ZOOKEEPER</p><p><img src="/assets/image-20240312173633980.png" alt="image-20240312173633980"></p><p>REDIS实现分布式锁的两个基本方法</p><ul><li><p>获取锁</p><ul><li><p>互斥：确保只有一个线程获取锁</p><p><code>set lock thread1 NX EX 10</code></p></li></ul></li><li><p>释放锁</p><ul><li><p>手动释放</p><p><code>DEL key</code></p></li><li><p>超时释放</p></li></ul></li></ul><p><img src="/assets/image-20240313144052132.png" alt="image-20240313144052132"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jmin.hmdp.utils;<br><br><span class="hljs-keyword">import</span> org.springframework.data.redis.core.StringRedisTemplate;<br><br><span class="hljs-keyword">import</span> java.util.concurrent.TimeUnit;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * ClassName: SimpleRedisLock</span><br><span class="hljs-comment"> * Package: com.jmin.hmdp.utils</span><br><span class="hljs-comment"> * Description:</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> Jmin</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Create</span> 2024/3/12 17:58</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SimpleRedisLock</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ILock</span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> StringRedisTemplate stringRedisTemplate;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">LOCK_PREFIX</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;lock:&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">SimpleRedisLock</span><span class="hljs-params">(String name, StringRedisTemplate stringRedisTemplate)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.stringRedisTemplate = stringRedisTemplate;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryLock</span><span class="hljs-params">(<span class="hljs-type">long</span> timeoutSec)</span> &#123;<br>        <span class="hljs-comment">// 获取当前线程的id</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">threadId</span> <span class="hljs-operator">=</span> Thread.currentThread().getId();<br>        <span class="hljs-type">Boolean</span> <span class="hljs-variable">isSuccess</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForValue()<br>                .setIfAbsent(LOCK_PREFIX + name, threadId + <span class="hljs-string">&quot;&quot;</span>, timeoutSec, TimeUnit.SECONDS);<br>        <span class="hljs-comment">// 拆箱写法</span><br>        <span class="hljs-keyword">return</span> Boolean.TRUE.equals(isSuccess);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unlock</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 释放锁</span><br>        stringRedisTemplate.delete(LOCK_PREFIX + name);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> UserHolder.getUser().getId();<br><span class="hljs-comment">// 创建锁对象</span><br><span class="hljs-type">SimpleRedisLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleRedisLock</span>(<span class="hljs-string">&quot;order:&quot;</span> + userId, stringRedisTemplate);<br><span class="hljs-comment">// 获取锁</span><br><span class="hljs-type">boolean</span> <span class="hljs-variable">isLock</span> <span class="hljs-operator">=</span> lock.tryLock(<span class="hljs-number">60</span> * <span class="hljs-number">20</span>);<br><span class="hljs-keyword">if</span> (!isLock) &#123;<br>    <span class="hljs-comment">// 获取锁失败</span><br>    <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;不允许重复下单！&quot;</span>);<br>&#125;<br><br><span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-type">IVoucherOrderService</span> <span class="hljs-variable">proxy</span> <span class="hljs-operator">=</span> (IVoucherOrderService) AopContext.currentProxy();<br>    <span class="hljs-keyword">return</span> proxy.createVoucherOrder(voucherId);<br>&#125; <span class="hljs-keyword">finally</span> &#123;<br>    <span class="hljs-comment">// 释放锁</span><br>    lock.unlock();<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20240313202245881.png" alt="image-20240313202245881"></p><p><img src="/assets/image-20240313202258347.png" alt="image-20240313202258347"></p><p>但仍存在极端问题！</p><p><img src="/assets/image-20240313232721539.png" alt="image-20240313232721539"></p><p><img src="/assets/image-20240313233123369.png" alt="image-20240313233123369"></p><h2 id="改进Redis实现的分布式锁"><a href="#改进Redis实现的分布式锁" class="headerlink" title="改进Redis实现的分布式锁"></a>改进Redis实现的分布式锁</h2><ol><li>在获取锁时存入线程标识</li><li>在释放锁时先获取锁的线程标识，判断是否与当前的线程标识是否一致。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jmin.hmdp.utils;<br><br><span class="hljs-keyword">import</span> cn.hutool.core.lang.UUID;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.core.StringRedisTemplate;<br><br><span class="hljs-keyword">import</span> java.util.concurrent.TimeUnit;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * ClassName: SimpleRedisLock</span><br><span class="hljs-comment"> * Package: com.jmin.hmdp.utils</span><br><span class="hljs-comment"> * Description:</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> Jmin</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Create</span> 2024/3/12 17:58</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SimpleRedisLock</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ILock</span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> StringRedisTemplate stringRedisTemplate;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">LOCK_PREFIX</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;lock:&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">ID_PREFIX</span> <span class="hljs-operator">=</span> UUID.randomUUID().toString(<span class="hljs-literal">true</span>) + <span class="hljs-string">&quot;-&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">SimpleRedisLock</span><span class="hljs-params">(String name, StringRedisTemplate stringRedisTemplate)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.stringRedisTemplate = stringRedisTemplate;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryLock</span><span class="hljs-params">(<span class="hljs-type">long</span> timeoutSec)</span> &#123;<br>        <span class="hljs-comment">// 获取当前线程标识</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">threadId</span> <span class="hljs-operator">=</span> ID_PREFIX + Thread.currentThread().getId();<br>        <span class="hljs-type">Boolean</span> <span class="hljs-variable">isSuccess</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForValue()<br>                .setIfAbsent(LOCK_PREFIX + name, threadId + <span class="hljs-string">&quot;&quot;</span>, timeoutSec, TimeUnit.SECONDS);<br>        <span class="hljs-comment">// 拆箱写法</span><br>        <span class="hljs-keyword">return</span> Boolean.TRUE.equals(isSuccess);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unlock</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 获取当前线程标识</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">threadId</span> <span class="hljs-operator">=</span> ID_PREFIX + Thread.currentThread().getId();<br>        <span class="hljs-comment">// 注意：查询过程可能出现阻塞！！！无法保证原子性</span><br>        <span class="hljs-keyword">if</span> (threadId.equals(stringRedisTemplate.opsForValue().get(LOCK_PREFIX + name))) &#123;<br>            <span class="hljs-comment">// 删除锁</span><br>            stringRedisTemplate.delete(LOCK_PREFIX + name);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>测试如下：</p><p>让第一个线程获取锁，并模拟业务超时，锁过期（删除redis）</p><p><img src="/assets/image-20240313234913411.png" alt="image-20240313234913411"></p><p><img src="/assets/image-20240313234743574.png" alt="image-20240313234743574"></p><p><img src="/assets/image-20240313234750038.png" alt="image-20240313234750038"></p><p>此时，第二个线程尝试获取锁，成功获取</p><p><img src="/assets/image-20240313234856378.png" alt="image-20240313234856378"></p><p>模拟第一个线程完成业务，并尝试释放锁（删除Redis）</p><p><img src="/assets/image-20240313235217962.png" alt="image-20240313235217962"></p><p>此时线程标识与当前分布式锁内容不一致，无法释放锁，线程安全！</p><h2 id="再进一步改进Redis实现的分布式锁，JVM阻塞"><a href="#再进一步改进Redis实现的分布式锁，JVM阻塞" class="headerlink" title="再进一步改进Redis实现的分布式锁，JVM阻塞"></a>再进一步改进Redis实现的分布式锁，JVM阻塞</h2><p><img src="/assets/image-20240313235940122.png" alt="image-20240313235940122"></p><p>阻塞原因：JVM在做垃圾回收时，会阻塞所有代码。一旦阻塞出现，就会造成分布式锁过期，自动释放。</p><p>如果在判断当前线程标识是否为分布式锁内容通过，在准备执行释放锁之前造成长时间阻塞，那么分布式锁将会自动释放，并由其他线程获取，当其他线程未释放锁之前，过气线程的阻塞状态已经恢复，就可能造成释放失误。</p><p><img src="/assets/image-20240314000827489.png" alt="image-20240314000827489"></p><p>解决方案：确保获取锁和释放锁两个步骤形成原子性</p><h3 id="Redis的Lua脚本"><a href="#Redis的Lua脚本" class="headerlink" title="Redis的Lua脚本"></a>Redis的Lua脚本</h3><p>Redis提供了Lua脚本功能，在一个脚本中编写多条Redis命令，确保多条命令执行时的原子性。Lua是一种编程语言，它的基本语法可以参考网站：<a href="https://www.runoob.com/lua/lua-tutorial.html">https://www.runoob.com/lua/lua-tutorial.html</a></p><p><img src="/assets/image-20240314001529771.png" alt="image-20240314001529771"></p><p><img src="/assets/image-20240314001544166.png" alt="image-20240314001544166"></p><p>不带参的写法</p><p><img src="/assets/image-20240314001944297.png" alt="image-20240314001944297"></p><p><img src="/assets/image-20240314001959356.png" alt="image-20240314001959356"></p><p>如果脚本中的key、value不想写死，可以作为参数传递。key类型参数会放入KEYS数组，其它参数会放入ARGV数组，在脚本中可以从KEYS和ARGV数组获取这些参数：</p><p>带参的写法</p><p><code>EVAL &quot;return redis.call(&#39;set&#39;,KEYS[1],ARGV[1])&quot; 1 name Rose</code></p><ul><li>KEYS[1]：第一个键</li><li>ARGV[1]：第一个值</li></ul><p><img src="/assets/image-20240319175434851.png" alt="image-20240319175434851"></p><p><img src="/assets/image-20240319175733381.png" alt="image-20240319175733381"></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-comment">-- KEYS[1]第一个键</span><br><span class="hljs-comment">-- ARGV[1]第一个值</span><br><span class="hljs-keyword">if</span> (ARGV[<span class="hljs-number">1</span>] == redis.call(<span class="hljs-string">&#x27;GET&#x27;</span>,KEYS[<span class="hljs-number">1</span>])) <span class="hljs-keyword">then</span><br>    <span class="hljs-keyword">return</span> redis.call(<span class="hljs-string">&#x27;del&#x27;</span>,KEYS[<span class="hljs-number">1</span>])<br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h3 id="基于Lua脚本实现分布式锁的释放锁逻辑"><a href="#基于Lua脚本实现分布式锁的释放锁逻辑" class="headerlink" title="基于Lua脚本实现分布式锁的释放锁逻辑"></a>基于Lua脚本实现分布式锁的释放锁逻辑</h3><p><img src="/assets/image-20240319180043138.png" alt="image-20240319180043138"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> DefaultRedisScript&lt;Long&gt; UNLOCK_SCRIPT;<br><span class="hljs-keyword">static</span> &#123;<br>    UNLOCK_SCRIPT = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultRedisScript</span>&lt;&gt;();<br>    UNLOCK_SCRIPT.setLocation(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathResource</span>(<span class="hljs-string">&quot;unlock.lua&quot;</span>));<br>    UNLOCK_SCRIPT.setResultType(Long.class);<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unlock</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 获取当前线程标识</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">threadId</span> <span class="hljs-operator">=</span> ID_PREFIX + Thread.currentThread().getId();<br>    <span class="hljs-comment">// 调用lua脚本，确保原子性！！！</span><br>    stringRedisTemplate.execute(UNLOCK_SCRIPT, Collections.singletonList(LOCK_PREFIX + name),threadId);<br>&#125;<br></code></pre></td></tr></table></figure><p>测试如下：</p><p><img src="/assets/image-20240320011252526.png" alt="image-20240320011252526"></p><p><img src="/assets/image-20240320011301094.png" alt="image-20240320011301094"></p><p><img src="/assets/image-20240320013537827.png" alt="image-20240320013537827"></p><p>此时模拟线程1的分布式锁失效，将key删除</p><p><img src="/assets/image-20240320013508652.png" alt="image-20240320013508652"></p><p>删除后，让线程2获取新的锁</p><p><img src="/assets/image-20240320013618631.png" alt="image-20240320013618631"></p><p><img src="/assets/image-20240320013717955.png" alt="image-20240320013717955"></p><p>放行线程1，使线程1调用lua脚本</p><p><img src="/assets/image-20240320011959306.png" alt="image-20240320011959306"></p><p>此时发现，锁并未被删除</p><p><img src="/assets/image-20240320013800321.png" alt="image-20240320013800321"><img src="/assets/image-20240320013825359.png" alt="image-20240320013825359"></p><p>再让线程2放行</p><p><img src="/assets/image-20240320012125587.png" alt="image-20240320012125587"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>利用Redis的set nx ex获取锁，并设置过期时间</li><li>释放锁之前判断线程标识是否与当前线程一致，一致则删除锁（释放）</li></ul><p>利用set nx满足互斥性<br>利用set ex保证故障时锁依然能释放，避免死锁，提高安全性<br>利用Redis集群保证高可用和高并发特性</p><h2 id="基于Redis分布式锁的进一步优化Redisson"><a href="#基于Redis分布式锁的进一步优化Redisson" class="headerlink" title="基于Redis分布式锁的进一步优化Redisson"></a>基于Redis分布式锁的进一步优化Redisson</h2><p><strong>基于setnx实现的分布式锁存在的问题：</strong></p><ol><li>不可重入，同一个线程无法多次获取同一把锁（呆） </li><li>不可重试，通过判断获取锁，只尝试一次就返回false，没有等待重试机制（急）</li><li>超时释放，释放虽然可以避免死锁，但如果锁的有效时长过短，业务执行耗时过长，导致锁释放，存在安全隐患，阻塞周期过长也有一定影响。</li><li>主从一致性，如果Redis提供了主从集群，主从同步存在延迟，当主宕机时，如果从并同步主中的锁数据，则会出现锁实现</li></ol><p>有成熟的框架可以解决上述问题，Redisson</p><h3 id="Redisson"><a href="#Redisson" class="headerlink" title="Redisson"></a>Redisson</h3><p>Redisson是一个在Redis的基础上实现的ava驻内存数据网格(In-Memory Data Grid)。它不仅提供了一系列的分布式的java常用对象，还提供了许多分布式服务，其中就包含了各种分布式锁的实现。</p><p>官方地址：<a href="https://redisson.org/">https://redisson.org/</a></p><p>Github：<a href="https://github.com/redisson/redisson/wiki">https://github.com/redisson/redisson/wiki</a></p><ol><li>导入依赖</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.redisson/redisson --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.redisson<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>redisson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.27.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br></code></pre></td></tr></table></figure><ol start="2"><li><p>配置Redisson客户端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisConfig</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> RedissonClient <span class="hljs-title function_">redissonClient</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 创建配置</span><br>        <span class="hljs-type">Config</span> <span class="hljs-variable">config</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Config</span>();<br>        <span class="hljs-comment">// 设置redis地址</span><br>        config.useSingleServer().setAddress(<span class="hljs-string">&quot;redis://localhost:6379&quot;</span>).setPassword(<span class="hljs-string">&quot;123456&quot;</span>);<br>        <span class="hljs-keyword">return</span> Redisson.create(config);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>使用</p><p><img src="/assets/image-20240321093706273.png" alt="image-20240321093706273"></p></li></ol><h2 id="Redisson可重入锁原理"><a href="#Redisson可重入锁原理" class="headerlink" title="Redisson可重入锁原理"></a>Redisson可重入锁原理</h2><p>redisson的可重入锁原理，在锁中记录锁的名称为键，哈希为值，哈希属性记录线程标识，哈希值为在当前线程中获取锁的次数，当前线程中请求获取锁，则累加当前锁的哈希值次数；当前线程中请求释放锁，则递减当前当次数为 0 时，则自行释放当前锁。</p><p><img src="/assets/image-20240321095715886.png" alt="image-20240321095715886"></p><p><img src="/assets/image-20240321235520183.png" alt="image-20240321235520183"></p><p><img src="/assets/image-20240321235552260.png" alt="image-20240321235552260"></p><p><img src="/assets/image-20240322000356264.png" alt="image-20240322000356264"></p><h3 id="获取锁相关源码"><a href="#获取锁相关源码" class="headerlink" title="获取锁相关源码"></a>获取锁相关源码</h3><p><img src="/assets/image-20240322001735117.png" alt="image-20240322001735117"></p><p><img src="/assets/image-20240322001745026.png" alt="image-20240322001745026"></p><p><img src="/assets/image-20240322001805044.png" alt="image-20240322001805044"></p><p><img src="/assets/image-20240322001834543.png" alt="image-20240322001834543"></p><p><img src="/assets/image-20240322002217639.png" alt="image-20240322002217639"></p><p><img src="/assets/image-20240322002236510.png" alt="image-20240322002236510"></p><h3 id="释放锁相关源码"><a href="#释放锁相关源码" class="headerlink" title="释放锁相关源码"></a>释放锁相关源码</h3><p><img src="/assets/image-20240322003148372.png" alt="image-20240322003148372"><img src="/assets/image-20240322003354497.png" alt="image-20240322003354497"></p><h2 id="Redisson可重试锁原理"><a href="#Redisson可重试锁原理" class="headerlink" title="Redisson可重试锁原理"></a>Redisson可重试锁原理</h2><p><img src="/assets/image-20240322095109276.png" alt="image-20240322095109276"></p><p><img src="/assets/image-20240324154804001.png" alt="image-20240324154804001"></p><p><strong>不设置锁的释放时间则默认看门狗超时时间（30秒）</strong></p><p><img src="/assets/image-20240322101109593.png" alt="image-20240322101109593"></p><p><img src="/assets/image-20240322100826062.png" alt="image-20240322100826062"></p><p><img src="/assets/image-20240322100838837.png" alt="image-20240322100838837"></p><p><img src="/assets/image-20240322100851583.png" alt="image-20240322100851583"></p><p><img src="/assets/image-20240322100943080.png" alt="image-20240322100943080"></p><p><img src="/assets/image-20240323165757136.png" alt="image-20240323165757136"></p><p>拿到锁返回null，拿不到则返回剩余有效期</p><p><img src="/assets/image-20240323164532028.png" alt="image-20240323164532028"></p><p>如果有效期已经失效，返回false，否则进入订阅subscribe方法，如果其他线程业务完毕，会发布释放锁的通知。</p><p><img src="/assets/image-20240323165449231.png" alt="image-20240323165449231"></p><p><img src="/assets/image-20240323170643975.png" alt="image-20240323170643975"></p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">subscribeFuture.<span class="hljs-keyword">get</span>(<span class="hljs-built_in">time</span>, TimeUnit.MILLISECONDS);<br></code></pre></td></tr></table></figure><p>该Java函数尝试在给定时间内获取订阅结果，超时则抛出异常，并设置订阅失败的异常信息，尝试取消订阅。若出现执行异常，同样设置失败并执行通用错误处理函数acquireFailed，最终均返回false。</p><p>巧妙之处，不是无休止的盲等，而是在一定的时间内等待释放锁的通知，如果获取到了释放锁的通知，则尝试获取锁。而不是一直循环尝试获取，降低CPU的负担。</p><p><img src="/assets/image-20240323172334053.png" alt="image-20240323172334053"></p><h2 id="Redisson超时续约"><a href="#Redisson超时续约" class="headerlink" title="Redisson超时续约"></a>Redisson超时续约</h2><p>看门狗</p><h2 id="Redisson主从一致性"><a href="#Redisson主从一致性" class="headerlink" title="Redisson主从一致性"></a>Redisson主从一致性</h2><p>主从指的是在多台Redis服务器中，有一台作为主节点，其他设备作为从节点，主节点可用来处理缓存的增删改，而从节点可以用来处理查询操作，主从之间要确保数据的一致性，主节点会将自己的缓存数据同步到从节点，但由于设备隔离，同步存在一定延迟。</p><p><img src="/assets/image-20240324163330619.png" alt="image-20240324163330619"></p><p>当有程序将缓存写入Redis的主节点，主节点会向所有的从节点同步，但是如果主节点发生故障，同步未完成，此时Redis哨兵监控集群状态，发现主节点宕机，首先断开客户端与主节点的连接，然后在从节点中选择一个节点作为新的主节点，由于之前的同步未完成，其他线程获取锁时锁可能不存在，于是又创建新的锁，造成并发安全问题！</p><p><img src="/assets/image-20240324164424785.png" alt="image-20240324164424785"></p><p>Redisson的解决思路是：由于主从关系是问题的根本，所以将所有的节点都作为独立的Redis节点，相互之间没有主从关系，都可以处理读写操作，获取锁时必须向所有节点获取，<strong>如果有存在某个节点获取不到锁则立即失败</strong>，节点越多，可用性越高。</p><p><img src="/assets/image-20240324170703077.png" alt="image-20240324170703077"></p><p>甚至可以让所有独立节点各自做主从同步，可用性更强</p><p><img src="/assets/image-20240324170902084.png" alt="image-20240324170902084"></p><p><img src="/assets/image-20240325211257706.png" alt="image-20240325211257706"></p><p>创建三个不同的Redis节点，并且配置bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> RedissonClient <span class="hljs-title function_">redissonClient1</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 创建配置</span><br>    <span class="hljs-type">Config</span> <span class="hljs-variable">config</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Config</span>();<br>    <span class="hljs-comment">// 设置redis地址</span><br>    config.useSingleServer().setAddress(<span class="hljs-string">&quot;redis://localhost:6379&quot;</span>).setPassword(<span class="hljs-string">&quot;123456&quot;</span>);<br>    <span class="hljs-keyword">return</span> Redisson.create(config);<br>&#125;<br><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> RedissonClient <span class="hljs-title function_">redissonClient2</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 创建配置</span><br>    <span class="hljs-type">Config</span> <span class="hljs-variable">config</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Config</span>();<br>    <span class="hljs-comment">// 设置redis地址</span><br>    config.useSingleServer().setAddress(<span class="hljs-string">&quot;redis://localhost:6380&quot;</span>).setPassword(<span class="hljs-string">&quot;123456&quot;</span>);<br>    <span class="hljs-keyword">return</span> Redisson.create(config);<br>&#125;<br><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> RedissonClient <span class="hljs-title function_">redissonClient3</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 创建配置</span><br>    <span class="hljs-type">Config</span> <span class="hljs-variable">config</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Config</span>();<br>    <span class="hljs-comment">// 设置redis地址</span><br>    config.useSingleServer().setAddress(<span class="hljs-string">&quot;redis://localhost:6381&quot;</span>).setPassword(<span class="hljs-string">&quot;123456&quot;</span>);<br>    <span class="hljs-keyword">return</span> Redisson.create(config);<br>&#125;<br></code></pre></td></tr></table></figure><p>创建连锁 multiLock测试 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> RLock lock;<br><span class="hljs-meta">@BeforeEach</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">setUp</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">RLock</span> <span class="hljs-variable">lock1</span> <span class="hljs-operator">=</span> redissonClient1.getLock(<span class="hljs-string">&quot;lock&quot;</span>);<br><span class="hljs-type">RLock</span> <span class="hljs-variable">lock2</span> <span class="hljs-operator">=</span> redissonClient2.getLock(<span class="hljs-string">&quot;lock&quot;</span>);<br><span class="hljs-type">RLock</span> <span class="hljs-variable">lock3</span> <span class="hljs-operator">=</span> redissonClient3.getLock(<span class="hljs-string">&quot;lock&quot;</span>);<br><span class="hljs-comment">// 创建连锁 multiLock</span><br>lock = redissonClient1.getMultiLock(lock1, lock2, lock3);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20240325220841324.png" alt="image-20240325220841324"></p><p><img src="/assets/image-20240325220858271.png" alt="image-20240325220858271"></p><p><img src="/assets/image-20240325221127461.png" alt="image-20240325221127461"></p><h2 id="Redisson分布式锁的原理总结"><a href="#Redisson分布式锁的原理总结" class="headerlink" title="Redisson分布式锁的原理总结"></a>Redisson分布式锁的原理总结</h2><ul><li>可重入，Redisson是基于Hash结构记录线程ID和重试次数，每次获取锁的时候先判断锁是否存在，如果不存在则直接获取，如果存在，查询锁的线程标识与当前线程标识一致，就代表可以再次获取，只需要将锁的重试次数加1；释放锁的时候将锁的重试次数减1，直到重试次数为0，此时才是真正的释放锁，也就是删除锁。</li><li>可重试，Redisson是基于信号量和PubSub功能实现等待，唤醒，获取锁失败的重试机制；在第一次尝试获取锁失败以后，不会立即返回false直接失败，而是等待释放锁的信号通知（Redisson的PubSub的信号发布机制），获取锁成功的线程在完成业务释放锁的时候会发送通知，订阅通知的线程捕获到通知则会尝试获取锁，如果获取失败则继续等待释放释放锁的信号，重试并非无限制的重试，它有一个重试等待时间，如果超过了等待时间，则停止重试，因为采取等待唤醒的方案，所以不会过多的占用CPU，影响性能。</li><li>超时续约，Redisson利用watchDog机制，获取锁成功以后，开启定时任务，每隔一段时间（releaseTime&#x2F;3)，重置锁的超时时间。</li><li>主从一致性，Redisson的multiLock解决方案，多个独立的Redis节点，必须在所有节点都获取重入锁，才能算获取锁成功，运维成本较高，实现复杂。不过是最安全的方案！！</li></ul>]]></content>
    
    
    <categories>
      
      <category>Redis</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>一人一单</title>
    <link href="/2024/03/11/%E9%BB%91%E9%A9%AC%E7%82%B9%E8%AF%84-Redis/%E4%B8%80%E4%BA%BA%E4%B8%80%E5%8D%95/"/>
    <url>/2024/03/11/%E9%BB%91%E9%A9%AC%E7%82%B9%E8%AF%84-Redis/%E4%B8%80%E4%BA%BA%E4%B8%80%E5%8D%95/</url>
    
    <content type="html"><![CDATA[<h1 id="一人一单"><a href="#一人一单" class="headerlink" title="一人一单"></a>一人一单</h1><h2 id="悲观锁处理"><a href="#悲观锁处理" class="headerlink" title="悲观锁处理"></a>悲观锁处理</h2><p>思路：采用悲观锁处理，只允许单线程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 优惠券服务</span><br><span class="hljs-meta">@Resource</span><br><span class="hljs-keyword">private</span> ISeckillVoucherService seckillVoucherService;<br><span class="hljs-comment">// 生成订单id</span><br><span class="hljs-meta">@Resource</span><br><span class="hljs-keyword">private</span> RedisIdWorker redisIdWorker;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">seckillVoucher</span><span class="hljs-params">(Long voucherId)</span> &#123;<br>    <span class="hljs-comment">// 查询优惠券</span><br>    <span class="hljs-type">SeckillVoucher</span> <span class="hljs-variable">voucher</span> <span class="hljs-operator">=</span> seckillVoucherService.getById(voucherId);<br>    <span class="hljs-comment">// 秒杀是否开启</span><br>    <span class="hljs-keyword">if</span> (voucher.getBeginTime().isAfter(LocalDateTime.now())) &#123;<br>        <span class="hljs-comment">// 尚未开始</span><br>        <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;秒杀尚未开始！&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (voucher.getEndTime().isBefore(LocalDateTime.now())) &#123;<br>        <span class="hljs-comment">// 已经结束</span><br>        <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;秒杀已经结束！&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">// 判断库存是否充足</span><br>    <span class="hljs-keyword">if</span> (voucher.getStock() &lt; <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-comment">// 库存不足</span><br>        <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;库存不足！&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">// 这种写法原子性将还会失效，</span><br>    <span class="hljs-comment">// @Transactional 自调用(实际上是目标对象内的方法调用目标对象的另一个方法)在运行时不会导致实际的事务</span><br>    <span class="hljs-keyword">synchronized</span> (UserHolder.getUser().getId().toString().intern()) &#123;<br>        <span class="hljs-type">IVoucherOrderService</span> <span class="hljs-variable">proxy</span> <span class="hljs-operator">=</span> (IVoucherOrderService) AopContext.currentProxy();<br>        <span class="hljs-keyword">return</span> proxy.createVoucherOrder(voucherId);<br>    &#125;<br>&#125;<br><span class="hljs-meta">@Transactional</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">createVoucherOrder</span><span class="hljs-params">(Long voucherId)</span> &#123;<br>    <span class="hljs-comment">// 一人一单</span><br>    <span class="hljs-type">Long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> UserHolder.getUser().getId();<br>    <span class="hljs-type">Long</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> query().eq(<span class="hljs-string">&quot;user_id&quot;</span>, userId).eq(<span class="hljs-string">&quot;voucher_id&quot;</span>, voucherId).count();<br>    <span class="hljs-keyword">if</span> (count &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-comment">// 该用户已获取优惠券</span><br>        <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;该用户已获取过优惠券&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">// 扣减库存</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">seckillSuccess</span> <span class="hljs-operator">=</span> seckillVoucherService.update()<br>            .setSql(<span class="hljs-string">&quot;stock = stock - 1&quot;</span>)<br>            .eq(<span class="hljs-string">&quot;voucher_id&quot;</span>, voucherId)<br>            <span class="hljs-comment">// 乐观锁</span><br>            .gt(<span class="hljs-string">&quot;stock&quot;</span>,<span class="hljs-number">0</span>)<br>            .update();<br>    <span class="hljs-keyword">if</span> (!seckillSuccess) &#123;<br>        <span class="hljs-comment">// 秒杀失败</span><br>        <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;优惠券库存不足！&quot;</span>);<br>    &#125;<br>    <span class="hljs-type">long</span> <span class="hljs-variable">orderId</span> <span class="hljs-operator">=</span> redisIdWorker.nextId(<span class="hljs-string">&quot;order&quot;</span>);<br>    <span class="hljs-comment">// 创建订单</span><br>    <span class="hljs-type">VoucherOrder</span> <span class="hljs-variable">voucherOrder</span> <span class="hljs-operator">=</span> VoucherOrder.builder()<br>            <span class="hljs-comment">// 订单id</span><br>            .id(orderId)<br>            <span class="hljs-comment">// 代金券id</span><br>            .voucherId(voucherId)<br>            <span class="hljs-comment">// 用户id</span><br>            .userId(userId)<br>            .build();<br>    <span class="hljs-comment">// 保存订单</span><br>    save(voucherOrder);<br>    <span class="hljs-comment">// 返回订单id</span><br>    <span class="hljs-keyword">return</span> Result.ok(orderId);<br>&#125;<br></code></pre></td></tr></table></figure><p>遇到问题，将@Transactional注解的createVoucherOrder方法在其他方法中调用，会失去事务特性，不安全。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">VoucherOrderServiceImpl</span> &#123;<br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">a</span><span class="hljs-params">()</span>&#123;<br>     <span class="hljs-keyword">synchronized</span> (UserHolder.getUser().getId().toString().intern()) &#123;<br>         <span class="hljs-keyword">return</span> createVoucherOrder(voucherId);<br>     &#125;<br>&#125;<br>    <span class="hljs-meta">@Transactional</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">b</span><span class="hljs-params">()</span>&#123;<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>其中createVoucherOrder(voucherId);调用者为该类的对象，而不是Spring代理的对象。</p><p>解决方案</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">synchronized</span> (UserHolder.getUser().getId().toString().intern()) &#123;<br>    <span class="hljs-type">IVoucherOrderService</span> <span class="hljs-variable">proxy</span> <span class="hljs-operator">=</span> (IVoucherOrderService) AopContext.currentProxy();<br>    <span class="hljs-keyword">return</span> proxy.createVoucherOrder(voucherId);<br>&#125;<br></code></pre></td></tr></table></figure><p>导入maven</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.aspectj/aspectjweaver --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.aspectj<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>aspectjweaver<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.9.7<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在启动类上添加注解<code>@EnableAspectJAutoProxy(exposeProxy = true)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableAspectJAutoProxy(exposeProxy = true)</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableTransactionManagement</span> <span class="hljs-comment">//开启注解方式的事务管理</span><br><span class="hljs-meta">@MapperScan(&quot;com.jmin.hmdp.mapper&quot;)</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HmdpApplication</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>SpringApplication.run(HmdpApplication.class, args);<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="模拟集群下的一人一单"><a href="#模拟集群下的一人一单" class="headerlink" title="模拟集群下的一人一单"></a>模拟集群下的一人一单</h2><p><img src="/assets/image-20240312114024436.png" alt="image-20240312114024436"></p><p><img src="/assets/image-20240312114623661.png" alt="image-20240312114623661"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs conf"><br>worker_processes  1;<br><br>events &#123;<br>    worker_connections  1024;<br>&#125;<br><br>http &#123;<br>    include       mime.types;<br>    default_type  application/json;<br><br>    sendfile        on;<br>    <br>    keepalive_timeout  65;<br><br>    server &#123;<br>        listen       8080;<br>        server_name  localhost;<br>        # 指定前端项目所在的位置<br>        location / &#123;<br>            root   html/hmdp;<br>            index  index.html index.htm;<br>        &#125;<br><br>        error_page   500 502 503 504  /50x.html;<br>        location = /50x.html &#123;<br>            root   html;<br>        &#125;<br><br><br>        location /api &#123;  <br>            default_type  application/json;<br>            #internal;  <br>            keepalive_timeout   30s;  <br>            keepalive_requests  1000;  <br>            #支持keep-alive  <br>            proxy_http_version 1.1;  <br>            rewrite /api(/.*) $1 break;  <br>            proxy_pass_request_headers on;<br>            #more_clear_input_headers Accept-Encoding;  <br>            proxy_next_upstream error timeout;  <br>            proxy_pass http://127.0.0.1:8081;<br>            #proxy_pass http://backend;<br>        &#125;<br>    &#125;<br><br>    upstream backend &#123;<br>        server 127.0.0.1:8081 max_fails=5 fail_timeout=10s weight=1;<br>        #server 127.0.0.1:8082 max_fails=5 fail_timeout=10s weight=1;<br>    &#125;  <br>&#125;<br><br></code></pre></td></tr></table></figure><p>nginx配置完毕后，nginx.exe -s reload重启服务</p><p><img src="/assets/image-20240312163305349.png" alt="image-20240312163305349"></p><p><img src="/assets/image-20240312163338841.png" alt="image-20240312163338841"></p><p><img src="/assets/image-20240312163510603.png" alt="image-20240312163510603"></p><p><img src="/assets/image-20240312163519418.png" alt="image-20240312163519418"></p><p><img src="/assets/image-20240312163629353.png" alt="image-20240312163629353"></p><p><img src="/assets/image-20240312163643308.png" alt="image-20240312163643308"></p><p><img src="/assets/image-20240312163936582.png" alt="image-20240312163936582"></p><p><img src="/assets/image-20240312163947336.png" alt="image-20240312163947336"></p><p><img src="/assets/image-20240312164019737.png" alt="image-20240312164019737"></p><p><img src="/assets/image-20240312164031954.png" alt="image-20240312164031954"></p><p>集群模式下，synchronized锁失效，synchronized只能保证单个JVM内部的多个线程之间的互斥，但对集群下的多个线程没有互斥保障。因此可以考虑分布式锁解决线程的互斥问题</p><p><img src="/assets/image-20240312164328958.png" alt="image-20240312164328958"></p>]]></content>
    
    
    <categories>
      
      <category>Redis</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>超卖问题</title>
    <link href="/2024/03/10/%E9%BB%91%E9%A9%AC%E7%82%B9%E8%AF%84-Redis/%E8%B6%85%E5%8D%96%E9%97%AE%E9%A2%98/"/>
    <url>/2024/03/10/%E9%BB%91%E9%A9%AC%E7%82%B9%E8%AF%84-Redis/%E8%B6%85%E5%8D%96%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="超卖问题"><a href="#超卖问题" class="headerlink" title="超卖问题"></a>超卖问题</h1><p>超卖问题是典型的多线程安全问题，针对该问题的常见解决方案是加锁。悲观锁vs乐观锁</p><p><img src="/assets/image-20240310165929078.png" alt="image-20240310165929078"></p><p>乐观锁的关键是判断之前查询得到数据是否被修改过：</p><ul><li><p>版本号法</p><p><img src="/assets/image-20240310170642208.png" alt="image-20240310170642208"></p></li><li><p>CAS法</p><p><img src="/assets/image-20240310171004213.png" alt="image-20240310171004213"></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> ISeckillVoucherService seckillVoucherService;<br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> RedisIdWorker redisIdWorker;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-meta">@Transactional</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">seckillVoucher</span><span class="hljs-params">(Long voucherId)</span> &#123;<br>        <span class="hljs-comment">// 查询优惠券</span><br>        <span class="hljs-type">SeckillVoucher</span> <span class="hljs-variable">voucher</span> <span class="hljs-operator">=</span> seckillVoucherService.getById(voucherId);<br>        <span class="hljs-comment">// 秒杀是否开启</span><br>        <span class="hljs-keyword">if</span> (voucher.getBeginTime().isAfter(LocalDateTime.now())) &#123;<br>            <span class="hljs-comment">// 尚未开始</span><br>            <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;秒杀尚未开始！&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (voucher.getEndTime().isBefore(LocalDateTime.now())) &#123;<br>            <span class="hljs-comment">// 已经结束</span><br>            <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;秒杀已经结束！&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">// 判断库存是否充足</span><br>        <span class="hljs-keyword">if</span> (voucher.getStock() &lt; <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-comment">// 库存不足</span><br>            <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;库存不足！&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">// 扣减库存</span><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">seckillSuccess</span> <span class="hljs-operator">=</span> seckillVoucherService.update()<br>                .setSql(<span class="hljs-string">&quot;stock = stock - 1&quot;</span>)<br>                .eq(<span class="hljs-string">&quot;voucher_id&quot;</span>, voucherId)<br>                <span class="hljs-comment">// 乐观锁</span><br><span class="hljs-comment">//                .gt(&quot;stock&quot;,0)</span><br>                .update();<br>        <span class="hljs-keyword">if</span> (!seckillSuccess) &#123;<br>            <span class="hljs-comment">// 秒杀失败</span><br>            <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;秒杀失败！&quot;</span>);<br>        &#125;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">orderId</span> <span class="hljs-operator">=</span> redisIdWorker.nextId(<span class="hljs-string">&quot;order&quot;</span>);<br>        <span class="hljs-comment">// 创建订单</span><br>        <span class="hljs-type">VoucherOrder</span> <span class="hljs-variable">voucherOrder</span> <span class="hljs-operator">=</span> VoucherOrder.builder()<br>                <span class="hljs-comment">// 订单id</span><br>                .id(orderId)<br>                <span class="hljs-comment">// 代金券id</span><br>                .voucherId(voucherId)<br>                <span class="hljs-comment">// 用户id</span><br>                .userId(UserHolder.getUser().getId())<br>                .build();<br>        save(voucherOrder);<br>        <span class="hljs-keyword">return</span> Result.ok(orderId);<br>    &#125;<br></code></pre></td></tr></table></figure><p>乐观锁适用于更新数据库，插入数据适用悲观锁</p>]]></content>
    
    
    <categories>
      
      <category>Redis</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>全局ID生成器</title>
    <link href="/2024/03/07/%E6%9D%82%E9%A1%B9%E9%85%8D%E7%BD%AE/%E5%85%A8%E5%B1%80ID%E7%94%9F%E6%88%90%E5%99%A8/"/>
    <url>/2024/03/07/%E6%9D%82%E9%A1%B9%E9%85%8D%E7%BD%AE/%E5%85%A8%E5%B1%80ID%E7%94%9F%E6%88%90%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="全局ID生成器"><a href="#全局ID生成器" class="headerlink" title="全局ID生成器"></a>全局ID生成器</h1><p>全局ID生成器，是一种在分布式系统下用来生成全局唯一ID的工具：【唯一性，高可用，递增性，安全性，高性能】</p><h2 id="拼接Redis自增数值"><a href="#拼接Redis自增数值" class="headerlink" title="拼接Redis自增数值"></a>拼接Redis自增数值</h2><p><img src="/assets/image-20240307220756337.png" alt="image-20240307220756337"></p><p>ID的组成部分：<br>符号位：1bit，永远为0<br>时间戳：31bt，以秒为单位，可以使用69年<br>序列号：32bit，秒内的计数器，支持每秒产生2的 32个不同ID</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jmin.hmdp.utils;<br><br><span class="hljs-keyword">import</span> org.springframework.data.redis.core.StringRedisTemplate;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-keyword">import</span> java.time.LocalDateTime;<br><span class="hljs-keyword">import</span> java.time.ZoneOffset;<br><span class="hljs-keyword">import</span> java.time.format.DateTimeFormatter;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * ClassName: RedisIdWorker</span><br><span class="hljs-comment"> * Package: com.jmin.hmdp.utils</span><br><span class="hljs-comment"> * Description:</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> Jmin</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Create</span> 2024/3/9 20:32</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisIdWorker</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">BEGIN_TIMESTAMP</span> <span class="hljs-operator">=</span> <span class="hljs-number">1704067200L</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">COUNT_BITS</span> <span class="hljs-operator">=</span> <span class="hljs-number">32</span>;<br>    <span class="hljs-keyword">public</span> StringRedisTemplate stringRedisTemplate;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">RedisIdWorker</span><span class="hljs-params">(StringRedisTemplate stringRedisTemplate)</span> &#123;<br>        <span class="hljs-built_in">this</span>.stringRedisTemplate = stringRedisTemplate;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">long</span> <span class="hljs-title function_">nextId</span><span class="hljs-params">(String keyPrefix)</span> &#123;<br><span class="hljs-comment">//        1.生成时间戳</span><br>        <span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">now</span> <span class="hljs-operator">=</span> LocalDateTime.now();<br>        <span class="hljs-type">long</span> <span class="hljs-variable">nowSecond</span> <span class="hljs-operator">=</span> now.toEpochSecond(ZoneOffset.UTC);<br>        <span class="hljs-type">long</span> <span class="hljs-variable">timeStamp</span> <span class="hljs-operator">=</span> nowSecond - BEGIN_TIMESTAMP;<br><span class="hljs-comment">//        2.生成序列号</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> now.format(DateTimeFormatter.ofPattern(<span class="hljs-string">&quot;yyyy:MM:dd&quot;</span>));<br>        <span class="hljs-type">long</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForValue().increment(<span class="hljs-string">&quot;icr:&quot;</span> + keyPrefix + <span class="hljs-string">&quot;:&quot;</span> + date);<br><br><span class="hljs-comment">//        3.拼接并返回</span><br>        <span class="hljs-keyword">return</span> timeStamp &lt;&lt; COUNT_BITS | count;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">time</span> <span class="hljs-operator">=</span> LocalDateTime.of(<span class="hljs-number">2024</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>        <span class="hljs-type">long</span> <span class="hljs-variable">second</span> <span class="hljs-operator">=</span> time.toEpochSecond(ZoneOffset.UTC);<br>        System.out.println(second);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">es</span> <span class="hljs-operator">=</span> Executors.newFixedThreadPool(<span class="hljs-number">500</span>);<br>   <span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br><span class="hljs-type">CountDownLatch</span> <span class="hljs-variable">countDownLatch</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CountDownLatch</span>(<span class="hljs-number">300</span>);<br><span class="hljs-type">Runnable</span> <span class="hljs-variable">task</span> <span class="hljs-operator">=</span> () -&gt; &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br><span class="hljs-type">long</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> redisIdWorker.nextId(<span class="hljs-string">&quot;order&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;id = &quot;</span> + id);<br>&#125;<br>countDownLatch.countDown();<br>&#125;;<br><span class="hljs-type">long</span> <span class="hljs-variable">begin</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">300</span>; i++) &#123;<br>es.submit(task);<br>&#125;<br>countDownLatch.await();<br><span class="hljs-type">long</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>System.out.println(<span class="hljs-string">&quot;time = &quot;</span> + (end - begin));<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="UUID"><a href="#UUID" class="headerlink" title="UUID"></a>UUID</h2><h2 id="雪花算法"><a href="#雪花算法" class="headerlink" title="雪花算法"></a>雪花算法</h2><h2 id="数据库自增"><a href="#数据库自增" class="headerlink" title="数据库自增"></a>数据库自增</h2>]]></content>
    
    
    <categories>
      
      <category>杂项配置</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Redis基础_缓存</title>
    <link href="/2024/02/26/%E9%BB%91%E9%A9%AC%E7%82%B9%E8%AF%84-Redis/Redis%E5%9F%BA%E7%A1%80/"/>
    <url>/2024/02/26/%E9%BB%91%E9%A9%AC%E7%82%B9%E8%AF%84-Redis/Redis%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="Redis基础-缓存"><a href="#Redis基础-缓存" class="headerlink" title="Redis基础_缓存"></a>Redis基础_缓存</h1><h2 id="什么是缓存"><a href="#什么是缓存" class="headerlink" title="什么是缓存"></a>什么是缓存</h2><p>缓存是数据交换的缓冲区，称作Cache，是存贮数据的临时地方，通常读写性能较高。</p><p>读写性能：CPU 》内存 》磁盘</p><p>通常CPU运算需要先通过磁盘或者内存读取数据放到寄存器中，导致运算性能受限。为缓解限制，在CPU中出现了缓存，将经常读写的数据存储到缓存中。</p><p><img src="/assets/image-20240228132616469.png" alt="image-20240228132616469"></p><p><strong>缓存的作用：</strong></p><ol><li>降低后端负载</li><li>提高读写效率，降低响应实践</li></ol><p><strong>缓存的成本：</strong></p><ol><li>数据一致性成本</li><li>代码维护成本</li><li>运维成本</li></ol><h2 id="添加Redis缓存"><a href="#添加Redis缓存" class="headerlink" title="添加Redis缓存"></a>添加Redis缓存</h2><p>设置redis缓存之前的操作：通常客户端向服务器发起请求后，服务器将请求打到数据库，从数据库获取数据并向客户端返回。</p><p>设置redis缓存之后：在客户端和数据库之间添加了中间层Redis，客户端向服务器发起请求后，服务器先访问redis，查询是否存在所需数据，如果存在则将数据直接返回到客户端，无需访问数据库。如果不存在即未命中redis，则访问数据库并获取数据，先将数据缓存到redis中，再将数据返回给客户端。</p><p><img src="/assets/image-20240228141219247.png" alt="image-20240228141219247"></p><p>调用缓存前</p><p><img src="/assets/image-20240228185756974.png" alt="image-20240228185756974"></p><p>调用缓存后</p><p><img src="/assets/image-20240228185836897.png" alt="image-20240228185836897"></p><h2 id="缓存更新策略"><a href="#缓存更新策略" class="headerlink" title="缓存更新策略"></a>缓存更新策略</h2><ol><li><p>内存淘汰</p><p>无需自己维护，利用Redis的内存淘汰机制，当内存不足时自动淘汰部分数据。下次查询时更新缓存。一致性较差，零维护。</p></li><li><p>超时剔除</p><p>给缓存数据添加TTL时长，到期后自动删除缓存，下次查询时更新缓存。一致性一般，低维护。</p></li><li><p>主动更新</p><p>编写业务逻辑，在修改数据库同时，更新缓存。高一致性，高维护。</p></li></ol><p><strong>业务场景</strong></p><ul><li>低一致性需求：使用内存淘汰机制。例如店铺类型的查询缓存</li><li>高一致性需求：主动更新，并以超时剔除作为兜底方案。例如店铺详情查询的缓存</li></ul><h3 id="主动更新策略"><a href="#主动更新策略" class="headerlink" title="主动更新策略"></a>主动更新策略</h3><ol><li><p>Cache Aside Pattern</p><p>即人工编码，由缓存调用者在更新数据库的同时更新缓存。</p></li><li><p>Read&#x2F;Write Through Pattern</p><p>缓存与数据库整合为一个服务，由服务来维护一致性。调用者调用该服务，无需关心缓存一致性问题。</p></li><li><p>Write Behind Caching Pattern</p><p>调用者只操作缓存，由其它线程<strong>异步</strong>的将缓存数据持久化到数据库，保证最终一致。</p></li></ol><p>通常采取第一种主动更新策略，人工编码。</p><p>操作缓存和数据库时有三个问题需要考虑：</p><ol><li><p>删除缓存还是更新缓存？</p><p>选择<strong>删除缓存</strong>。更新选择是当数据发生改变时，缓存随着更新，查询次数比较少的情况下，缓存操作频繁；删除缓存是当数据一旦发生变动，相应缓存删除，直到该数据被查询才得以插入新的缓存数据。</p></li><li><p>如何保证缓存与数据库的操作的同时成功或失败？</p><ul><li>在单体系统，将缓存与数据库操作放在一个事务。</li><li>在分布式系统，利用TCC等分布式事务方案。</li><li>还要考虑线程安全！</li></ul></li><li><p>先操作缓存还是先操作数据库？</p><p><img src="/assets/image-20240228195015969.png" alt="image-20240228195015969"></p><ul><li><p>先删除缓存，再操作数据库</p><p>正常情况</p><p><img src="/assets/image-20240228194517338.png" alt="image-20240228194517338"></p><p>异常情况</p><p><img src="/assets/image-20240228194455843.png" alt="image-20240228194455843"></p></li><li><p><strong>先操作数据库，再删除缓存</strong>，首选</p><p>正常情况</p><p><img src="/assets/image-20240228194737704.png" alt="image-20240228194737704"></p><p>异常情况</p><p><img src="/assets/image-20240228194954683.png" alt="image-20240228194954683"></p><p>尽可能避免异常情况，可以在写入缓存的时候加入缓存有效期</p></li></ul></li></ol><h3 id="缓存的最佳实践方案"><a href="#缓存的最佳实践方案" class="headerlink" title="缓存的最佳实践方案"></a>缓存的最佳实践方案</h3><ol><li>低一致性需求：使用Redis自带的内存淘汰机制</li><li>高一致性需求：主动更新，并以超时剔除作为兜底方案</li></ol><p>读操作：</p><ul><li>缓存命中直接返回</li><li>缓存未命中，查询数据库，并写入缓存，设定超时时间</li></ul><p>写操作：</p><ul><li>先写数据库，然后再删除缓存</li><li>要确保数据库与缓存操作的原子性</li></ul><h2 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h2><p>缓存穿透，客户端请求的数据在缓存和数据库中均不存在，缓存永远不会生效，这些请求都会打到数据库。</p><p><img src="/assets/image-20240229100527795.png" alt="image-20240229100527795"></p><p>常见的解决方案有两种：</p><ol><li><p><strong>缓存空对象</strong></p><p>将null缓存，简单粗暴，方便维护；但造成额外的内存消耗，短期的不一致。</p><p><img src="/assets/image-20240229101136230.png" alt="image-20240229101136230"></p></li><li><p>布隆过滤</p><p><img src="/assets/image-20240229101216194.png" alt="image-20240229101216194"></p><p>优势，内存占用较少，没有多余的key</p><p>缺陷，实现复杂，存在误判可能<br>通常采取方案一，缓存空对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> keyPrefix Redis的key前缀</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> id Redis的key_id</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> beanType redis存储value的数据类型</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> dbFallback 缓存穿透后调用的sql查询方法，查询返回值将缓存至Redis</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> timeout 缓存过期时间</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> unit 时间单位</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &lt;R&gt; 返回类型</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &lt;ID&gt; Redis的key_id可以任意类型</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> &lt;R,ID&gt; R <span class="hljs-title function_">queryPassThrough</span><span class="hljs-params">(String keyPrefix, ID id, Class&lt;R&gt; beanType, Function&lt;ID,R&gt; dbFallback,Long timeout, TimeUnit unit)</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> keyPrefix + id;<br>    <span class="hljs-comment">// 1.redis查询bean缓存</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">json</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForValue().get(key);<br>    <span class="hljs-comment">// 2.存在，直接返回</span><br>    <span class="hljs-keyword">if</span> (StrUtil.isNotBlank(json)) &#123;<br>        <span class="hljs-keyword">return</span> JSONUtil.toBean(json,beanType);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (json != <span class="hljs-literal">null</span>) &#123;<br>        log.info(<span class="hljs-string">&quot;redis查询不到&#123;&#125;的数据&quot;</span>,key);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>    <span class="hljs-comment">// 3.不存在，查询数据库</span><br>    <span class="hljs-type">R</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> dbFallback.apply(id);<br>    <span class="hljs-comment">// 数据库不存在该用户，返回提示信息</span><br>    <span class="hljs-keyword">if</span> (BeanUtil.isEmpty(r)) &#123;<br>        set(key,<span class="hljs-string">&quot;&quot;</span>,CACHE_NULL_TTL,TimeUnit.MINUTES);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>    <span class="hljs-comment">// 4.将数据缓存到redis</span><br>    set(key,r,timeout,unit);<br>    <span class="hljs-comment">// 5.将数据返回</span><br>    <span class="hljs-keyword">return</span> r;<br>&#125;<br></code></pre></td></tr></table></figure><p>还有解决方案：</p><ol start="3"><li>增强id的复杂度，避免id被猜测</li><li>做好数据的基础格式校验</li><li>加强用户权限校验</li><li>做好热点参数的限流</li></ol></li></ol><h2 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h2><p>缓存雪崩，同一时段大量的缓存key同时失效或者Redis服务器宕机，达到大量请求到达数据库，带来巨大压力。</p><p><img src="/assets/image-20240229210902946.png" alt="image-20240229210902946"></p><p>解决方案</p><ol><li>给不同的Key的TTL添加随机值</li><li>利用Redis集群提高服务的可用性</li><li>给缓存业务添加降级限流策略（让请求快速失败，牺牲服务）</li><li>给业务添加多级缓存</li></ol><h2 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h2><p>缓存击穿问题也叫热点Key问题，一个被高并发（同时）访问并且缓存重建业务较复杂的key突然失效了，无数的请求访问会在瞬间给数据库带来巨大的冲击。</p><p><img src="/assets/image-20240301170734279.png" alt="image-20240301170734279"></p><p>常见的解决方案</p><ol><li><p>互斥锁</p><p><img src="/assets/image-20240301170946342.png" alt="image-20240301170946342"></p><p>优势：编码简单，劣势：线程需要等待，而且存在死锁分享，性能较差</p><p><img src="/assets/image-20240301192930721.png" alt="image-20240301192930721"></p><p>互斥锁可以用redis中的setnx实现（当key不存在时可以创建键值对，如果存在无法修改该键值对，只能删除重建）</p><p>java对应的方法为</p><p><code>stringRedisTemplate.opsForValue.setIfAbsent(key,value)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 互斥锁</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">getLock</span><span class="hljs-params">(String key)</span> &#123;<br>    <span class="hljs-keyword">return</span> BooleanUtil.isTrue(stringRedisTemplate.opsForValue().setIfAbsent(key,LOCKED,Duration.ofMinutes(LOCKED_TTL)));<br>&#125;<br><span class="hljs-comment">// 解锁</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unLock</span><span class="hljs-params">(String key)</span> &#123;<br>    stringRedisTemplate.delete(key);<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">queryShopById</span><span class="hljs-params">(Long id)</span> &#123;<br>    <span class="hljs-type">Shop</span> <span class="hljs-variable">shop</span> <span class="hljs-operator">=</span> queryWithMutex(id);<br>    <span class="hljs-keyword">if</span> (BeanUtil.isEmpty(shop)) &#123;<br>        <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;店铺不存在&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> Result.ok(shop);<br>&#125;<br><span class="hljs-keyword">private</span> Shop <span class="hljs-title function_">queryWithMutex</span><span class="hljs-params">(Long id)</span> &#123;<br>    <span class="hljs-comment">// 1.redis查询商城缓存</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">shopJson</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForValue().get(CACHE_SHOP_KEY + id);<br>    <span class="hljs-comment">// 2.存在，直接返回</span><br>    <span class="hljs-keyword">if</span> (StrUtil.isNotBlank(shopJson)) &#123;<br>        <span class="hljs-comment">// 将json数据转为bean对象</span><br>        <span class="hljs-keyword">return</span> JSONUtil.toBean(shopJson, Shop.class);<br>    &#125;<br>    <span class="hljs-comment">// 应对缓存穿透</span><br>    <span class="hljs-keyword">if</span> (shopJson != <span class="hljs-literal">null</span>) &#123;<br>        log.info(<span class="hljs-string">&quot;redis查询不到ID为&#123;&#125;的数据&quot;</span>,id);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>    <span class="hljs-comment">// 3.不存在，查询数据库，应对缓存击穿</span><br>    <span class="hljs-comment">// 3.1实现缓存重建</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">lockKey</span> <span class="hljs-operator">=</span> LOCK_SHOP_KEY + id;<br>    <span class="hljs-type">Shop</span> <span class="hljs-variable">shop</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">isLock</span> <span class="hljs-operator">=</span> getLock(lockKey);<br>        <span class="hljs-comment">// 3.2判断是否获取成功</span><br>        <span class="hljs-comment">// 3.3失败，休眠，重试(递归)</span><br>        <span class="hljs-keyword">if</span> (!isLock) &#123;<br>            Thread.sleep(<span class="hljs-number">50</span>);<br>            <span class="hljs-comment">// 重试(递归)</span><br>            <span class="hljs-keyword">return</span> queryWithMutex(id);<br>        &#125;<br>        <span class="hljs-comment">// 3.4成功，根据id查询数据库</span><br>        shop = getById(id);<br>        <span class="hljs-comment">// 数据库不存在该用户，返回提示信息</span><br>        <span class="hljs-keyword">if</span> (BeanUtil.isEmpty(shop)) &#123;<br>            stringRedisTemplate.opsForValue().set(CACHE_SHOP_KEY + id,<span class="hljs-string">&quot;&quot;</span>, Duration.ofMinutes(CACHE_NULL_TTL));<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-comment">// 4.将数据缓存到redis</span><br>        stringRedisTemplate.opsForValue().set(CACHE_SHOP_KEY + id,JSONUtil.toJsonStr(shop), Duration.ofSeconds(CACHE_SHOP_TTL));<br>    &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        unLock(lockKey);<br>    &#125;<br>    <span class="hljs-comment">// 5.释放互斥锁</span><br>    unLock(lockKey);<br>    <span class="hljs-comment">// 6.将数据返回</span><br>    <span class="hljs-keyword">return</span> shop;<br>&#125;<br></code></pre></td></tr></table></figure><p>jmeter压测如下：</p><p>测试之前</p><p><img src="/assets/image-20240301230116420.png" alt="image-20240301230116420"></p><p><img src="/assets/image-20240301230150888.png" alt="image-20240301230150888"></p><p>开始测试</p><p><img src="/assets/image-20240301230232231.png" alt="image-20240301230232231"></p><p><img src="/assets/image-20240301230352243.png" alt="image-20240301230352243"></p><p><img src="/assets/image-20240301230420233.png" alt="image-20240301230420233"></p><p>仅一次击中数据库！</p></li><li><p>逻辑过期</p><p><img src="/assets/image-20240301191226590.png" alt="image-20240301191226590"></p><p>优势：线程无需等待，性能较好。</p><p>劣势：不保证一致性，内存损耗，实现复杂。</p><p><img src="/assets/image-20240302143424209.png" alt="image-20240302143424209"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> Shop <span class="hljs-title function_">queryWithLogicalExpire</span><span class="hljs-params">(Long id)</span> &#123;<br>        <span class="hljs-comment">// 1.redis查询商城缓存</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">shopJson</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForValue().get(CACHE_SHOP_KEY + id);<br>        <span class="hljs-comment">// 2.不存在，直接返回null</span><br>        <span class="hljs-keyword">if</span> (StrUtil.isBlank(shopJson)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-comment">// 3.命中，将json反序列化为对象，判断是否过期</span><br>        <span class="hljs-type">RedisData</span> <span class="hljs-variable">redisData</span> <span class="hljs-operator">=</span> JSONUtil.toBean(shopJson, RedisData.class);<br>        <span class="hljs-type">JSONObject</span> <span class="hljs-variable">jsonObject</span> <span class="hljs-operator">=</span> (JSONObject) redisData.getData();<br>        <span class="hljs-type">Shop</span> <span class="hljs-variable">shop</span> <span class="hljs-operator">=</span> JSONUtil.toBean(jsonObject, Shop.class);<br>        <span class="hljs-keyword">if</span> (redisData.getExpireTime().isAfter(LocalDateTime.now())) &#123;<br>            <span class="hljs-comment">// 未过期直接返回店铺信息</span><br>            <span class="hljs-keyword">return</span> shop;<br>        &#125;<br>        <span class="hljs-comment">// 过期重建缓存</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">lockKey</span> <span class="hljs-operator">=</span> LOCK_SHOP_KEY + id;<br>        <span class="hljs-comment">// 获取互斥锁</span><br>        <span class="hljs-keyword">if</span> (getLock(lockKey)) &#123;<br>            <span class="hljs-comment">// 成功获取锁，开启独立线程，实现缓存重建,采取线程池实现</span><br>            CACHE_REBUILDE_EXCUTOR.submit(() -&gt; &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-comment">// 重建缓存</span><br>                    saveShop2Redis(id,<span class="hljs-number">20L</span>);<br>                &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>                &#125; <span class="hljs-keyword">finally</span> &#123;<br>                    unLock(lockKey);<br>                &#125;<br>            &#125;);<br>        &#125;<br>        <span class="hljs-keyword">return</span> shop;<br>    &#125;<br>    <span class="hljs-comment">// 互斥锁</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">getLock</span><span class="hljs-params">(String key)</span> &#123;<br>        <span class="hljs-keyword">return</span> BooleanUtil.isTrue(stringRedisTemplate.opsForValue().setIfAbsent(key,LOCKED,Duration.ofMinutes(LOCKED_TTL)));<br>    &#125;<br>    <span class="hljs-comment">// 解锁</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unLock</span><span class="hljs-params">(String key)</span> &#123;<br>        stringRedisTemplate.delete(key);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">saveShop2Redis</span><span class="hljs-params">(Long id,Long expireSeconds)</span> &#123;<br>        <span class="hljs-comment">// 1.查询店铺数据</span><br>        <span class="hljs-type">Shop</span> <span class="hljs-variable">shop</span> <span class="hljs-operator">=</span> getById(id);<br>        <span class="hljs-comment">// 2.封装逻辑过期时间</span><br>        <span class="hljs-type">RedisData</span> <span class="hljs-variable">redisData</span> <span class="hljs-operator">=</span> RedisData.builder()<br>                .data(shop)<br>                .expireTime(LocalDateTime.now().plusSeconds(expireSeconds))<br>                .build();<br>        <span class="hljs-comment">// 3.写入redis</span><br>        stringRedisTemplate.opsForValue().set(CACHE_SHOP_KEY + id,JSONUtil.toJsonStr(redisData));<br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">CACHE_REBUILDE_EXCUTOR</span> <span class="hljs-operator">=</span> Executors.newFixedThreadPool(<span class="hljs-number">10</span>);<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20240302185356130.png" alt="image-20240302185356130"></p><p><img src="/assets/image-20240302185319128.png" alt="image-20240302185319128"></p><p><img src="/assets/image-20240302185412072.png" alt="image-20240302185412072"></p></li></ol><h2 id="缓存工具封装"><a href="#缓存工具封装" class="headerlink" title="缓存工具封装"></a>缓存工具封装</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">package</span> com.jmin.hmdp.utils;<br><br><span class="hljs-keyword">import</span> cn.hutool.core.bean.BeanUtil;<br><span class="hljs-keyword">import</span> cn.hutool.core.util.BooleanUtil;<br><span class="hljs-keyword">import</span> cn.hutool.core.util.StrUtil;<br><span class="hljs-keyword">import</span> cn.hutool.json.JSONObject;<br><span class="hljs-keyword">import</span> cn.hutool.json.JSONUtil;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.cglib.core.internal.Function;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.core.StringRedisTemplate;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-keyword">import</span> java.time.Duration;<br><span class="hljs-keyword">import</span> java.time.LocalDateTime;<br><span class="hljs-keyword">import</span> java.util.concurrent.ExecutorService;<br><span class="hljs-keyword">import</span> java.util.concurrent.Executors;<br><span class="hljs-keyword">import</span> java.util.concurrent.TimeUnit;<br><br><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> com.jmin.hmdp.utils.RedisConstants.*;<br><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> com.jmin.hmdp.utils.RedisConstants.CACHE_SHOP_TTL;<br><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> java.util.concurrent.TimeUnit.SECONDS;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * ClassName: CacheClient</span><br><span class="hljs-comment"> * Package: com.jmin.hmdp.utils</span><br><span class="hljs-comment"> * Description:</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> Jmin</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Create</span> 2024/3/2 19:03</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CacheClient</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> StringRedisTemplate stringRedisTemplate;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">CacheClient</span><span class="hljs-params">(StringRedisTemplate stringRedisTemplate)</span> &#123;<br>        <span class="hljs-built_in">this</span>.stringRedisTemplate = stringRedisTemplate;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">set</span><span class="hljs-params">(String key, Object value, Long timeout, TimeUnit unit)</span> &#123;<br>        stringRedisTemplate.opsForValue().set(key, JSONUtil.toJsonStr(value), timeout, unit);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setWithLogicalExpire</span><span class="hljs-params">(String key, Object value, Long timeout, TimeUnit unit)</span> &#123;<br>        <span class="hljs-comment">// 设置逻辑过期</span><br>        <span class="hljs-type">RedisData</span> <span class="hljs-variable">redisData</span> <span class="hljs-operator">=</span> RedisData.builder()<br>                .data(value).expireTime(LocalDateTime.now().plusSeconds(unit.toSeconds(timeout))).build();<br><br>        stringRedisTemplate.opsForValue().set(key, JSONUtil.toJsonStr(redisData));<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 应对缓存穿透策略，当前端请求查询，缓存数据库分别查询不到数据时，存储一份假数据（例如空字符串），避免往后多次查询</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> keyPrefix  Redis的key前缀</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> id         Redis的key_id</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> beanType   redis存储value的数据类型</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> dbFallback 调用sql查询方法，查询返回值将缓存至Redis</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> timeout    缓存过期时间</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> unit       时间单位</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> &lt;R&gt;        返回类型</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> &lt;ID&gt;       Redis的key_id可以任意类型</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> &lt;R, ID&gt; R <span class="hljs-title function_">queryPassThrough</span><span class="hljs-params">(String keyPrefix, ID id, Class&lt;R&gt; beanType, Function&lt;ID, R&gt; dbFallback, Long timeout, TimeUnit unit)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> keyPrefix + id;<br>        <span class="hljs-comment">// 1.redis查询bean缓存</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">json</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForValue().get(key);<br>        <span class="hljs-comment">// 2.存在，直接返回</span><br>        <span class="hljs-keyword">if</span> (StrUtil.isNotBlank(json)) &#123;<br>            <span class="hljs-keyword">return</span> JSONUtil.toBean(json, beanType);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (json != <span class="hljs-literal">null</span>) &#123;<br>            log.info(<span class="hljs-string">&quot;redis查询不到&#123;&#125;的数据,假数据&quot;</span>, key);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-comment">// 3.不存在，查询数据库</span><br>        <span class="hljs-type">R</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> dbFallback.apply(id);<br>        <span class="hljs-comment">// 数据库不存在该用户，返回提示信息</span><br>        <span class="hljs-keyword">if</span> (BeanUtil.isEmpty(r)) &#123;<br>            set(key, <span class="hljs-string">&quot;&quot;</span>, CACHE_NULL_TTL, TimeUnit.MINUTES);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-comment">// 4.将数据缓存到redis</span><br>        set(key, r, timeout, unit);<br>        <span class="hljs-comment">// 5.将数据返回</span><br>        <span class="hljs-keyword">return</span> r;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 应对缓存击穿策略，热点key问题，当热点请求访问到redis缓存并且成功击中，会根据缓存数据的逻辑过期时间判断该数据是否过期，不过期则返回该数据</span><br><span class="hljs-comment">     * 否则，先尝试获取互斥锁（这里的互斥锁以Redis的键值对数据充当），</span><br><span class="hljs-comment">     * 如果获取到互斥锁，先创建一条新的线程，在新线程中查询数据库并将数据缓存至redis，再释放互斥锁（删除Redis的键值对数据），</span><br><span class="hljs-comment">     * 如果获取不到互斥锁，意味着已经有线程正在更新数据，那么直接返回redis过期的数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> keyPrefix Redis的key前缀</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> id Redis的key_id</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> beanType redis存储value的数据类型</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> dbFallback 调用sql查询方法，查询返回值将缓存至Redis</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> timeoutSeconds 缓存逻辑过期时间，单位秒</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 数据实体</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> &lt;R&gt;</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> &lt;ID&gt;</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> &lt;R, ID&gt; R <span class="hljs-title function_">queryWithLogicalExpire</span><span class="hljs-params">(String keyPrefix, ID id,Class&lt;R&gt; beanType,Function&lt;ID, R&gt; dbFallback,Long timeoutSeconds)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> keyPrefix + id;<br>        <span class="hljs-comment">// 1.redis查询商城缓存</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">json</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForValue().get(key);<br>        <span class="hljs-comment">// 2.不存在，直接返回null</span><br>        <span class="hljs-keyword">if</span> (StrUtil.isBlank(json)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-comment">// 3.命中，将json反序列化为对象，判断是否过期</span><br>        <span class="hljs-type">RedisData</span> <span class="hljs-variable">redisData</span> <span class="hljs-operator">=</span> JSONUtil.toBean(json, RedisData.class);<br>        <span class="hljs-type">JSONObject</span> <span class="hljs-variable">jsonObject</span> <span class="hljs-operator">=</span> (JSONObject) redisData.getData();<br>        <span class="hljs-type">R</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> JSONUtil.toBean(jsonObject, beanType);<br>        <span class="hljs-keyword">if</span> (redisData.getExpireTime().isAfter(LocalDateTime.now().plusSeconds(timeoutSeconds))) &#123;<br>            <span class="hljs-comment">// 未过期直接返回店铺信息</span><br>            <span class="hljs-keyword">return</span> r;<br>        &#125;<br>        <span class="hljs-comment">// 过期重建缓存</span><br>        <span class="hljs-comment">// 获取互斥锁</span><br>        <span class="hljs-keyword">if</span> (getLock(key)) &#123;<br>            <span class="hljs-comment">// 成功获取锁，开启独立线程，实现缓存重建,采取线程池实现</span><br>            CACHE_REBUILDE_EXCUTOR.submit(() -&gt; &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-comment">// 重建缓存</span><br>                    <span class="hljs-comment">// 查询数据库</span><br>                    <span class="hljs-type">R</span> <span class="hljs-variable">r1</span> <span class="hljs-operator">=</span> dbFallback.apply(id);<br>                    <span class="hljs-comment">// 写入redis</span><br>                    <span class="hljs-type">RedisData</span> <span class="hljs-variable">redisData1</span> <span class="hljs-operator">=</span> RedisData.builder().data(r1)<br>                            .expireTime(LocalDateTime.now().plusSeconds(timeoutSeconds)).build();<br>                    stringRedisTemplate.opsForValue().set(key,JSONUtil.toJsonStr(redisData1));<br>                &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>                &#125; <span class="hljs-keyword">finally</span> &#123;<br>                    unLock(key);<br>                &#125;<br>            &#125;);<br>        &#125;<br>        <span class="hljs-keyword">return</span> r;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 应对缓存击穿策略，当缓存查询不到数据，尝试获取互斥锁，如果获取不到则休眠一段时间后递归，休眠阶段缓存可能已经被更新</span><br><span class="hljs-comment">     * 如果获取到了互斥锁，查询数据库若查询到数据，将数据存储于redis缓存并返回，如果查询不到，存储假数据于redis缓存</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> keyPrefix Redis的key前缀</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> id Redis的key_id</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> beanType Redis存储value的数据类型</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> dbFallback 调用sql查询方法，查询返回值将缓存至Redis</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> &lt;R&gt;</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> &lt;ID&gt;</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> &lt;R,ID&gt;R <span class="hljs-title function_">queryWithMutex</span><span class="hljs-params">(String keyPrefix, ID id,Class&lt;R&gt; beanType,Function&lt;ID, R&gt; dbFallback)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> keyPrefix + id;<br>        <span class="hljs-comment">// 1.redis查询商城缓存</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">json</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForValue().get(key);<br>        <span class="hljs-comment">// 2.存在，直接返回</span><br>        <span class="hljs-keyword">if</span> (StrUtil.isNotBlank(json)) &#123;<br>            <span class="hljs-comment">// 将json数据转为bean对象</span><br>            <span class="hljs-keyword">return</span> JSONUtil.toBean(json, beanType);<br>        &#125;<br>        <span class="hljs-comment">// 应对缓存穿透</span><br>        <span class="hljs-keyword">if</span> (json != <span class="hljs-literal">null</span>) &#123;<br>            log.info(<span class="hljs-string">&quot;redis查询不到&#123;&#125;的数据&quot;</span>, key);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-comment">// 3.不存在，查询数据库，应对缓存击穿</span><br>        <span class="hljs-comment">// 3.1实现缓存重建</span><br>        <span class="hljs-type">R</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 3.2判断是否获取成功</span><br>            <span class="hljs-comment">// 3.3失败，休眠，重试(递归)</span><br>            <span class="hljs-keyword">if</span> (!getLock(key)) &#123;<br>                Thread.sleep(<span class="hljs-number">50</span>);<br>                <span class="hljs-comment">// 重试(递归)</span><br>                <span class="hljs-keyword">return</span> queryWithMutex(keyPrefix,id,beanType,dbFallback);<br>            &#125;<br>            <span class="hljs-comment">// 3.4成功，根据id查询数据库</span><br>            r = dbFallback.apply(id);<br>            <span class="hljs-comment">// 数据库不存在该用户，返回提示信息</span><br>            <span class="hljs-keyword">if</span> (BeanUtil.isEmpty(r)) &#123;<br>                stringRedisTemplate.opsForValue().set(key,<span class="hljs-string">&quot;&quot;</span>, Duration.ofMinutes(CACHE_NULL_TTL));<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>            &#125;<br>            <span class="hljs-comment">// 4.将数据缓存到redis</span><br>            set(key,JSONUtil.toJsonStr(r),CACHE_SHOP_TTL,SECONDS);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            unLock(key);<br>        &#125;<br>        <span class="hljs-comment">// 5.释放互斥锁</span><br>        unLock(key);<br>        <span class="hljs-comment">// 6.将数据返回</span><br>        <span class="hljs-keyword">return</span> r;<br>    &#125;<br>    <span class="hljs-keyword">public</span> &lt;R,ID&gt;<span class="hljs-keyword">void</span> <span class="hljs-title function_">saveR2Redis</span><span class="hljs-params">(Function&lt;ID,R&gt; dbFallback,String keyPrefix,ID id,Long expireSeconds)</span> &#123;<br>        <span class="hljs-comment">// 1.查询数据库</span><br>        <span class="hljs-type">R</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> dbFallback.apply(id);<br>        <span class="hljs-comment">// 2.封装逻辑过期时间</span><br>        <span class="hljs-type">RedisData</span> <span class="hljs-variable">redisData</span> <span class="hljs-operator">=</span> RedisData.builder()<br>                .data(r)<br>                .expireTime(LocalDateTime.now().plusSeconds(expireSeconds))<br>                .build();<br>        <span class="hljs-comment">// 3.写入redis</span><br>        stringRedisTemplate.opsForValue().set(CACHE_SHOP_KEY + id,JSONUtil.toJsonStr(redisData));<br>    &#125;<br>    <span class="hljs-comment">// 互斥锁</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">getLock</span><span class="hljs-params">(String key)</span> &#123;<br>        <span class="hljs-keyword">return</span> BooleanUtil.isTrue(stringRedisTemplate.opsForValue().setIfAbsent(key,LOCKED,Duration.ofMinutes(LOCKED_TTL)));<br>    &#125;<br>    <span class="hljs-comment">// 解锁</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unLock</span><span class="hljs-params">(String key)</span> &#123;<br>        stringRedisTemplate.delete(key);<br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">CACHE_REBUILDE_EXCUTOR</span> <span class="hljs-operator">=</span> Executors.newFixedThreadPool(<span class="hljs-number">10</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Redis</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Nacos配置</title>
    <link href="/2024/02/22/%E6%9D%82%E9%A1%B9%E9%85%8D%E7%BD%AE/Nacos%E9%85%8D%E7%BD%AE/"/>
    <url>/2024/02/22/%E6%9D%82%E9%A1%B9%E9%85%8D%E7%BD%AE/Nacos%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="Nacos配置"><a href="#Nacos配置" class="headerlink" title="Nacos配置"></a>Nacos配置</h1><ol><li><p>安装docker</p></li><li><p>docker拉取镜像</p><p><code>docker pull nacos/nacos-server:1.2.0</code></p></li><li><p>创建容器</p><p><code>docker run --env MODE=standalone --name nacos --restart=always -d -p 8848:8848 nacos/nacos-server:1.2.0</code></p><p>–env MODE&#x3D;standalone 当前nacos状态为单机版开发阶段</p><p>–name nacos 当前容器名称为nacos</p><p>–restart&#x3D;always 服务器开机就启动</p><p>-p 8848:8848 映射端口</p><p>-d 创建一个守护式容器在后台运行</p></li><li><p>容器状态查询</p><p><code>docker ps -a</code></p></li><li><p>容器日志查询</p><p><code>docker logs -f &lt;container ID&gt;</code></p></li></ol>]]></content>
    
    
    <categories>
      
      <category>杂项配置</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>VM虚拟机系统导入</title>
    <link href="/2024/02/22/%E6%9D%82%E9%A1%B9%E9%85%8D%E7%BD%AE/VM%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%B3%BB%E7%BB%9F%E5%AF%BC%E5%85%A5/"/>
    <url>/2024/02/22/%E6%9D%82%E9%A1%B9%E9%85%8D%E7%BD%AE/VM%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%B3%BB%E7%BB%9F%E5%AF%BC%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="VM虚拟机系统导入"><a href="#VM虚拟机系统导入" class="headerlink" title="VM虚拟机系统导入"></a>VM虚拟机系统导入</h1><h2 id="系统导入"><a href="#系统导入" class="headerlink" title="系统导入"></a>系统导入</h2><p><img src="/assets/image-20240222220109558.png" alt="image-20240222220109558"></p><p><img src="/assets/image-20240222220126894.png" alt="image-20240222220126894"></p><p><img src="/assets/image-20240222220152553.png" alt="image-20240222220152553"></p><h2 id="配置网络"><a href="#配置网络" class="headerlink" title="配置网络"></a>配置网络</h2><img src="/2024/02/22/%E6%9D%82%E9%A1%B9%E9%85%8D%E7%BD%AE/VM%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%B3%BB%E7%BB%9F%E5%AF%BC%E5%85%A5/image-20240222220143282.png" alt="image-20240222220143282" style="zoom:67%;"><p>找到NAT模式类型的选项</p><p><img src="/assets/image-20240222220305194.png" alt="image-20240222220305194"></p><p>发现子网地址不是192.168.200.0，需要手动更改，点击更改设置，选中NAT模式选项</p><p><img src="/assets/image-20240222220334740.png" alt="image-20240222220334740"></p><p><img src="/assets/image-20240222220423917.png" alt="image-20240222220423917"></p><p>点击应用，点击确定。</p><p>将虚拟机系统指定当前网络</p><p><img src="/assets/image-20240222220636576.png" alt="image-20240222220636576"></p><p>点击设置，如图设置</p><p><img src="/assets/image-20240222220739122.png" alt="image-20240222220739122"></p><p>点击确定即可。</p>]]></content>
    
    
    <categories>
      
      <category>杂项配置</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>2_Sa-Token安装配置</title>
    <link href="/2024/01/24/Sa-Token/2_Sa-Token%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/"/>
    <url>/2024/01/24/Sa-Token/2_Sa-Token%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="Sa-Token安装配置"><a href="#Sa-Token安装配置" class="headerlink" title="Sa-Token安装配置"></a>Sa-Token安装配置</h1><p>pom依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- Sa-Token 权限认证 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>cn.dev33<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>sa-token-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.34.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>推荐yml配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">server:</span><br>    <span class="hljs-comment"># 端口</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">8081</span><br>    <br><span class="hljs-attr">sa-token:</span> <br>    <span class="hljs-comment"># token名称 (同时也是cookie名称)</span><br>    <span class="hljs-attr">token-name:</span> <span class="hljs-string">satoken</span><br>    <span class="hljs-comment"># token有效期，单位s 默认30天, -1代表永不过期 </span><br>    <span class="hljs-attr">timeout:</span> <span class="hljs-number">2592000</span><br>    <span class="hljs-comment"># token临时有效期 (指定时间内无操作就视为token过期) 单位: 秒</span><br>    <span class="hljs-attr">activity-timeout:</span> <span class="hljs-number">-1</span><br>    <span class="hljs-comment"># 是否允许同一账号并发登录 (为true时允许一起登录, 为false时新登录挤掉旧登录) </span><br>    <span class="hljs-attr">is-concurrent:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-comment"># 在多人登录同一账号时，是否共用一个token (为true时所有登录共用一个token, 为false时每次登录新建一个token) </span><br>    <span class="hljs-attr">is-share:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-comment"># token风格</span><br>    <span class="hljs-attr">token-style:</span> <span class="hljs-string">uuid</span><br>    <span class="hljs-comment"># 是否输出操作日志 </span><br>    <span class="hljs-attr">is-log:</span> <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>sa_token</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>1_Sa-Token介绍</title>
    <link href="/2024/01/24/Sa-Token/1_Sa-Token%E4%BB%8B%E7%BB%8D/"/>
    <url>/2024/01/24/Sa-Token/1_Sa-Token%E4%BB%8B%E7%BB%8D/</url>
    
    <content type="html"><![CDATA[<h1 id="Sa-Token介绍"><a href="#Sa-Token介绍" class="headerlink" title="Sa-Token介绍"></a>Sa-Token介绍</h1><h2 id="Satoken概述"><a href="#Satoken概述" class="headerlink" title="Satoken概述"></a>Satoken概述</h2><p>官方文档：<a href="https://sa-token.cc/">https://sa-token.cc/</a></p><p><strong>Sa-Token</strong> 是一个轻量级 Java 权限认证框架，主要解决：**<code>登录认证</code><strong>、</strong><code>权限认证</code><strong>、</strong><code>Session会话</code><strong>、</strong><code>单点登录</code><strong>、</strong><code>OAuth2.0</code><strong>、</strong><code>微服务网关鉴权</code>** 等一系列权限相关问题。</p><p>Sa-Token 的 API 设计简单、优雅！绝大多数功能只用一行代码解决</p><h2 id="Satoken功能概览"><a href="#Satoken功能概览" class="headerlink" title="Satoken功能概览"></a>Satoken功能概览</h2><p>Sa-Token 目前主要五大功能模块：登录认证、权限认证、单点登录、OAuth2.0、微服务鉴权。</p><ul><li>登录认证 —— 单端登录、多端登录、同端互斥登录、七天内免登录</li><li>权限认证 —— 权限认证、角色认证、会话二级认证<br>Session会话 —— 全端共享Session、单端独享Session、自定义Session</li><li>踢人下线 —— 根据账号id踢人下线、根据Token值踢人下线</li><li>账号封禁 —— 登录封禁、按照业务分类封禁、按照处罚阶梯封禁</li><li>持久层扩展 —— 可集成Redis、Memcached等专业缓存中间件，重启数据不丢失</li><li>分布式会话 —— 提供jwt集成、共享数据中心两种分布式会话方案</li><li>微服务网关鉴权 —— 适配Gateway、ShenYu、Zuul等常见网关的路由拦截认证</li><li>单点登录 —— 内置三种单点登录模式：无论是否跨域、是否共享Redis，都可以搞定</li><li>OAuth2.0认证 —— 轻松搭建 OAuth2.0 服务，支持openid模式</li><li>二级认证 —— 在已登录的基础上再次认证，保证安全</li><li>Basic认证 —— 一行代码接入 Http Basic 认证</li><li>独立Redis —— 将权限缓存与业务缓存分离</li><li>临时Token认证 —— 解决短时间的Token授权问题</li><li>模拟他人账号 —— 实时操作任意用户状态数据</li><li>临时身份切换 —— 将会话身份临时切换为其它账号</li><li>前后端分离 —— APP、小程序等不支持Cookie的终端</li><li>同端互斥登录 —— 像QQ一样手机电脑同时在线，但是两个手机上互斥登录</li><li>多账号认证体系 —— 比如一个商城项目的user表和admin表分开鉴权</li><li>Token风格定制 —— 内置六种Token风格，还可：自定义Token生成策略、自定义Token前缀</li><li>注解式鉴权 —— 优雅的将鉴权与业务代码分离<br>路由拦截式鉴权 —— 根据路由拦截鉴权，可适配restful模式</li><li>自动续签 —— 提供两种Token过期策略，灵活搭配使用，还可自动续签</li><li>会话治理 —— 提供方便灵活的会话查询接口</li><li>记住我模式 —— 适配[记住我]模式，重启浏览器免验证</li><li>密码加密 —— 提供密码加密模块，可快速MD5、SHA1、SHA256、AES、RSA加密</li><li>全局侦听器 —— 在用户登陆、注销、被踢下线等关键性操作时进行一些AOP操作</li><li>开箱即用 —— 提供SpringMVC、WebFlux等常见web框架starter集成包，真正的开箱即用</li></ul>]]></content>
    
    
    <categories>
      
      <category>sa_token</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>1_SpringSecurity</title>
    <link href="/2024/01/24/Spring_Security/1_springsecurity%E7%AE%80%E4%BB%8B/"/>
    <url>/2024/01/24/Spring_Security/1_springsecurity%E7%AE%80%E4%BB%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="SpringSecurity"><a href="#SpringSecurity" class="headerlink" title="SpringSecurity"></a>SpringSecurity</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><strong>Spring Security</strong> 是 Spring 家族中的一个安全管理框架。相比与另外一个安全框架<strong>Shiro</strong>，SaToken，它提供了更丰富的功能，社区资源也比<a href="https://so.csdn.net/so/search?q=Shiro&spm=1001.2101.3001.7020">Shiro</a>，SaToken丰富。</p><h2 id="学习进度"><a href="#学习进度" class="headerlink" title="学习进度"></a>学习进度</h2><p>目前未开发中大型项目，因此先学习国产的sa-token框架</p>]]></content>
    
    
    <categories>
      
      <category>SpringSecurity</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>idea格式化ftl文件教程</title>
    <link href="/2024/01/21/%E6%9D%82%E9%A1%B9%E9%85%8D%E7%BD%AE/idea%E6%A0%BC%E5%BC%8F%E5%8C%96ftl%E6%96%87%E4%BB%B6%E6%95%99%E7%A8%8B/"/>
    <url>/2024/01/21/%E6%9D%82%E9%A1%B9%E9%85%8D%E7%BD%AE/idea%E6%A0%BC%E5%BC%8F%E5%8C%96ftl%E6%96%87%E4%BB%B6%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="idea格式化ftl文件教程"><a href="#idea格式化ftl文件教程" class="headerlink" title="idea格式化ftl文件教程"></a>idea格式化ftl文件教程</h1><p>格式化ftl文件目的是为了治理mybatisx的某些模板</p><ol><li><p>在html文件中定义*.ftl模式</p><p><img src="/assets/image-20240121170836311.png" alt="image-20240121170836311"></p></li><li><p>安装插件<strong>Adapter for Eclipse Code Formatter</strong></p><p><img src="/assets/image-20240121171016162.png" alt="image-20240121171016162"></p><p>idea重启</p></li><li><p>添加文件 ali-code-style.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> standalone=<span class="hljs-string">&quot;no&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">profiles</span> <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;12&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">profile</span> <span class="hljs-attr">kind</span>=<span class="hljs-string">&quot;CodeFormatterProfile&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;P3C-CodeStyle&quot;</span> <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;13&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--可变参数的... Idea没有对应的配置项，强制insert--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_after_ellipsis&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;insert&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!--枚举值之间 Idea没有对应的配置项，强制insert--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_after_comma_in_enum_declarations&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;insert&quot;</span>/&gt;</span><br> <br>        <span class="hljs-comment">&lt;!--org.eclipse.jdt.core.formatter.insert_space_before_comma_in_method_invocation_arguments=Java:SPACE_BEFORE_COMMA--&gt;</span><br>        <span class="hljs-comment">&lt;!--org.eclipse.jdt.core.formatter.insert_space_before_comma_in_method_declaration_parameters=Java:SPACE_BEFORE_COMMA</span><br><span class="hljs-comment">        由于IDEA只有一个SPACE_BEFORE_COMMA选项，所以统一设置 insert_space_before_comma 为 do not insert</span><br><span class="hljs-comment">        --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_before_comma_in_method_declaration_parameters&quot;</span></span><br><span class="hljs-tag">                 <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;do not insert&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_before_comma_in_method_invocation_arguments&quot;</span></span><br><span class="hljs-tag">                 <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;do not insert&quot;</span>/&gt;</span><br> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_before_comma_in_allocation_expression&quot;</span></span><br><span class="hljs-tag">                 <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;do not insert&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_before_comma_in_for_inits&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;do not insert&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_before_comma_in_method_declaration_throws&quot;</span></span><br><span class="hljs-tag">                 <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;do not insert&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_before_comma_in_array_initializer&quot;</span></span><br><span class="hljs-tag">                 <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;do not insert&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_before_comma_in_annotation&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;do not insert&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_before_comma_in_type_parameters&quot;</span></span><br><span class="hljs-tag">                 <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;do not insert&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_before_comma_in_type_arguments&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;do not insert&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_before_comma_in_constructor_declaration_parameters&quot;</span></span><br><span class="hljs-tag">                 <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;do not insert&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_before_comma_in_superinterfaces&quot;</span></span><br><span class="hljs-tag">                 <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;do not insert&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_before_comma_in_parameterized_type_reference&quot;</span></span><br><span class="hljs-tag">                 <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;do not insert&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_before_comma_in_enum_declarations&quot;</span></span><br><span class="hljs-tag">                 <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;do not insert&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_before_comma_in_enum_constant_arguments&quot;</span></span><br><span class="hljs-tag">                 <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;do not insert&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_before_comma_in_multiple_local_declarations&quot;</span></span><br><span class="hljs-tag">                 <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;do not insert&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_before_comma_in_for_increments&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;do not insert&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_before_comma_in_explicitconstructorcall_arguments&quot;</span></span><br><span class="hljs-tag">                 <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;do not insert&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_before_comma_in_constructor_declaration_throws&quot;</span></span><br><span class="hljs-tag">                 <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;do not insert&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_before_comma_in_multiple_field_declarations&quot;</span></span><br><span class="hljs-tag">                 <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;do not insert&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!--insert_space_before_comma end--&gt;</span><br> <br>        <span class="hljs-comment">&lt;!--org.eclipse.jdt.core.formatter.insert_space_after_comma_in_type_arguments=Java:SPACE_AFTER_COMMA_IN_TYPE_ARGUMENTS--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_after_comma_in_type_arguments&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;insert&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!--IDEA只有一个配置项SPACE_AFTER_COMMA，insert_space_after_comma*统一设置成insert--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_after_comma_in_constructor_declaration_parameters&quot;</span></span><br><span class="hljs-tag">                 <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;insert&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_after_comma_in_for_increments&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;insert&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_after_comma_in_multiple_local_declarations&quot;</span></span><br><span class="hljs-tag">                 <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;insert&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_after_comma_in_explicitconstructorcall_arguments&quot;</span></span><br><span class="hljs-tag">                 <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;insert&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_after_and_in_type_parameter&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;insert&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_after_comma_in_for_inits&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;insert&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_after_comma_in_parameterized_type_reference&quot;</span></span><br><span class="hljs-tag">                 <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;insert&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_after_comma_in_multiple_field_declarations&quot;</span></span><br><span class="hljs-tag">                 <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;insert&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_after_comma_in_superinterfaces&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;insert&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_after_comma_in_array_initializer&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;insert&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_after_comma_in_method_invocation_arguments&quot;</span></span><br><span class="hljs-tag">                 <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;insert&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_after_comma_in_constructor_declaration_throws&quot;</span></span><br><span class="hljs-tag">                 <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;insert&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_after_comma_in_allocation_expression&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;insert&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_after_comma_in_method_declaration_parameters&quot;</span></span><br><span class="hljs-tag">                 <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;insert&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_after_comma_in_method_declaration_throws&quot;</span></span><br><span class="hljs-tag">                 <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;insert&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_after_comma_in_enum_constant_arguments&quot;</span></span><br><span class="hljs-tag">                 <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;insert&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_after_comma_in_type_parameters&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;insert&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_after_comma_in_annotation&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;insert&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!--insert_space_after_comma end--&gt;</span><br> <br> <br>        <span class="hljs-comment">&lt;!--org.eclipse.jdt.core.formatter.insert_space_before_colon_in_conditional=Java:SPACE_BEFORE_COLON--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_before_colon_in_conditional&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;insert&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_before_colon_in_assert&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;insert&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_before_colon_in_for&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;insert&quot;</span>/&gt;</span><br> <br>        <span class="hljs-comment">&lt;!--org.eclipse.jdt.core.formatter.insert_space_after_colon_in_conditional=Java:SPACE_AFTER_COLON--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_after_colon_in_conditional&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;insert&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_after_colon_in_assert&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;insert&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_after_colon_in_for&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;insert&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_after_colon_in_labeled_statement&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;insert&quot;</span>/&gt;</span><br> <br>        <span class="hljs-comment">&lt;!--IDEA不支持配置，默认do not insert--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_before_colon_in_default&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;do not insert&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_before_colon_in_labeled_statement&quot;</span></span><br><span class="hljs-tag">                 <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;do not insert&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_before_colon_in_case&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;do not insert&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!--这个在Eclipse也没有找到配置的地方--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_after_colon_in_case&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;do not insert&quot;</span>/&gt;</span><br> <br>        <span class="hljs-comment">&lt;!--org.eclipse.jdt.core.formatter.insert_space_before_semicolon=Java:SPACE_BEFORE_SEMICOLON</span><br><span class="hljs-comment">        程序导入的时候强制将SPACE_BEFORE_SEMICOLON设置为false</span><br><span class="hljs-comment">        --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_before_semicolon_in_try_resources&quot;</span></span><br><span class="hljs-tag">                 <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;do not insert&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_before_semicolon&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;do not insert&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_before_semicolon_in_for&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;do not insert&quot;</span>/&gt;</span><br> <br>        <span class="hljs-comment">&lt;!--SPACE_AFTER_SEMICOLON=true--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_after_semicolon_in_for&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;insert&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_after_semicolon_in_try_resources&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;insert&quot;</span>/&gt;</span><br> <br>        <span class="hljs-comment">&lt;!--IDEA不支持配置,do not insert--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_enum_constant&quot;</span></span><br><span class="hljs-tag">                 <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;do not insert&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span></span><br><span class="hljs-tag">                <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_annotation_type_member_declaration&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;do not insert&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_constructor_declaration&quot;</span></span><br><span class="hljs-tag">                 <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;do not insert&quot;</span>/&gt;</span><br> <br>        <span class="hljs-comment">&lt;!--IDEA不支持，使用默认--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_after_postfix_operator&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;do not insert&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_before_postfix_operator&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;do not insert&quot;</span>/&gt;</span><br> <br>        <span class="hljs-comment">&lt;!--org.eclipse.jdt.core.formatter.insert_space_after_binary_operator=Java:&lt;Programmatic&gt;--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_after_binary_operator&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;insert&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_before_binary_operator&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;insert&quot;</span>/&gt;</span><br> <br>        <span class="hljs-comment">&lt;!--IDEA不支持配置，使用如下值，两者对应--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span></span><br><span class="hljs-tag">                <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_after_opening_angle_bracket_in_parameterized_type_reference&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;do not insert&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_after_opening_angle_bracket_in_type_arguments&quot;</span></span><br><span class="hljs-tag">                 <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;do not insert&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_after_opening_angle_bracket_in_type_parameters&quot;</span></span><br><span class="hljs-tag">                 <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;do not insert&quot;</span>/&gt;</span><br> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_after_closing_angle_bracket_in_type_parameters&quot;</span></span><br><span class="hljs-tag">                 <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;insert&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span></span><br><span class="hljs-tag">                <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_before_opening_angle_bracket_in_parameterized_type_reference&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;do not insert&quot;</span>/&gt;</span><br> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_before_closing_angle_bracket_in_type_arguments&quot;</span></span><br><span class="hljs-tag">                 <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;do not insert&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span></span><br><span class="hljs-tag">                <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_before_closing_angle_bracket_in_parameterized_type_reference&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;do not insert&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_before_opening_angle_bracket_in_type_arguments&quot;</span></span><br><span class="hljs-tag">                 <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;do not insert&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_before_closing_angle_bracket_in_type_parameters&quot;</span></span><br><span class="hljs-tag">                 <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;do not insert&quot;</span>/&gt;</span><br> <br>        <span class="hljs-comment">&lt;!--Java:SPACE_BEFORE_OPENING_ANGLE_BRACKET_IN_TYPE_PARAMETER--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_before_opening_angle_bracket_in_type_parameters&quot;</span></span><br><span class="hljs-tag">                 <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;do not insert&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!--org.eclipse.jdt.core.formatter.insert_space_after_closing_angle_bracket_in_type_arguments=Java:SPACE_AFTER_CLOSING_ANGLE_BRACKET_IN_TYPE_ARGUMENT--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_after_closing_angle_bracket_in_type_arguments&quot;</span></span><br><span class="hljs-tag">                 <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;do not insert&quot;</span>/&gt;</span><br> <br>        <span class="hljs-comment">&lt;!--org.eclipse.jdt.core.formatter.insert_space_after_closing_brace_in_block=Java:&lt;Programmatic&gt;--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_after_closing_brace_in_block&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;insert&quot;</span>/&gt;</span><br> <br>        <span class="hljs-comment">&lt;!--IDEA使用了对应的配置：Java:SPACE_WITHIN_ARRAY_INITIALIZER_BRACES，但感觉不太好，IDEA默认不插入，Eclipse也使用不插入--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_before_closing_brace_in_array_initializer&quot;</span></span><br><span class="hljs-tag">                 <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;do not insert&quot;</span>/&gt;</span><br> <br>        <span class="hljs-comment">&lt;!--use default insert--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_before_parenthesized_expression_in_return&quot;</span></span><br><span class="hljs-tag">                 <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;insert&quot;</span>/&gt;</span><br> <br>        <span class="hljs-comment">&lt;!--use default do not insert --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_while&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;do not insert&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_after_prefix_operator&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;do not insert&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_before_prefix_operator&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;do not insert&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_for&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;do not insert&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_catch&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;do not insert&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_switch&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;do not insert&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_for&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;do not insert&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_method_declaration&quot;</span></span><br><span class="hljs-tag">                 <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;do not insert&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_between_brackets_in_array_type_reference&quot;</span></span><br><span class="hljs-tag">                 <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;do not insert&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_parenthesized_expression&quot;</span></span><br><span class="hljs-tag">                 <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;do not insert&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_method_declaration&quot;</span></span><br><span class="hljs-tag">                 <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;do not insert&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_method_invocation&quot;</span></span><br><span class="hljs-tag">                 <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;do not insert&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_method_invocation&quot;</span></span><br><span class="hljs-tag">                 <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;do not insert&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_try&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;do not insert&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_if&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;do not insert&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_try&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;do not insert&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_before_closing_bracket_in_array_reference&quot;</span></span><br><span class="hljs-tag">                 <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;do not insert&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_if&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;do not insert&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_synchronized&quot;</span></span><br><span class="hljs-tag">                 <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;do not insert&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_after_opening_bracket_in_array_reference&quot;</span></span><br><span class="hljs-tag">                 <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;do not insert&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_cast&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;do not insert&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_synchronized&quot;</span></span><br><span class="hljs-tag">                 <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;do not insert&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_parenthesized_expression&quot;</span></span><br><span class="hljs-tag">                 <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;do not insert&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_catch&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;do not insert&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_method_invocation&quot;</span></span><br><span class="hljs-tag">                 <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;do not insert&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_method_declaration&quot;</span></span><br><span class="hljs-tag">                 <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;do not insert&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_annotation&quot;</span></span><br><span class="hljs-tag">                 <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;do not insert&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_after_opening_brace_in_array_initializer&quot;</span></span><br><span class="hljs-tag">                 <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;do not insert&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_annotation&quot;</span></span><br><span class="hljs-tag">                 <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;do not insert&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_while&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;do not insert&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_switch&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;do not insert&quot;</span>/&gt;</span><br> <br> <br>        <span class="hljs-comment">&lt;!--use default insert--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_anonymous_type_declaration&quot;</span></span><br><span class="hljs-tag">                 <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;insert&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_enum_constant&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;insert&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_enum_declaration&quot;</span></span><br><span class="hljs-tag">                 <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;insert&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_annotation_type_declaration&quot;</span></span><br><span class="hljs-tag">                 <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;insert&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_constructor_declaration&quot;</span></span><br><span class="hljs-tag">                 <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;insert&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_before_and_in_type_parameter&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;insert&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_before_parenthesized_expression_in_throw&quot;</span></span><br><span class="hljs-tag">                 <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;insert&quot;</span>/&gt;</span><br> <br> <br>        <span class="hljs-comment">&lt;!--org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_switch=Java:SPACE_BEFORE_SWITCH_LBRACE--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_switch&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;insert&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!--org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_type_declaration=Java:SPACE_BEFORE_CLASS_LBRACE--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_type_declaration&quot;</span></span><br><span class="hljs-tag">                 <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;insert&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!--org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_block=Java:&lt;Programmatic&gt;--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_block&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;insert&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!--org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_array_initializer=Java:SPACE_BEFORE_ARRAY_INITIALIZER_LBRACE--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_array_initializer&quot;</span></span><br><span class="hljs-tag">                 <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;insert&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!--org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_method_declaration=Java:SPACE_BEFORE_METHOD_LBRACE--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_method_declaration&quot;</span></span><br><span class="hljs-tag">                 <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;insert&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!--org.eclipse.jdt.core.formatter.insert_space_after_question_in_conditional=Java:SPACE_AFTER_QUEST--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_after_question_in_conditional&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;insert&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!--org.eclipse.jdt.core.formatter.insert_space_before_question_in_conditional=Java:SPACE_BEFORE_QUEST--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_before_question_in_conditional&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;insert&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!--org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_annotation=Java:SPACE_BEFORE_ANOTATION_PARAMETER_LIST--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_annotation&quot;</span></span><br><span class="hljs-tag">                 <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;do not insert&quot;</span>/&gt;</span><br> <br>        <span class="hljs-comment">&lt;!--use default do not insert--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_before_question_in_wildcard&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;do not insert&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_after_question_in_wildcard&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;do not insert&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_before_ellipsis&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;do not insert&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_between_empty_brackets_in_array_allocation_expression&quot;</span></span><br><span class="hljs-tag">                 <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;do not insert&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_enum_constant&quot;</span></span><br><span class="hljs-tag">                 <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;do not insert&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_constructor_declaration&quot;</span></span><br><span class="hljs-tag">                 <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;do not insert&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_before_closing_bracket_in_array_allocation_expression&quot;</span></span><br><span class="hljs-tag">                 <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;do not insert&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_before_at_in_annotation_type_declaration&quot;</span></span><br><span class="hljs-tag">                 <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;do not insert&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_after_at_in_annotation&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;do not insert&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_after_at_in_annotation_type_declaration&quot;</span></span><br><span class="hljs-tag">                 <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;do not insert&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_parenthesized_expression&quot;</span></span><br><span class="hljs-tag">                 <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;do not insert&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_enum_constant&quot;</span></span><br><span class="hljs-tag">                 <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;do not insert&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_constructor_declaration&quot;</span></span><br><span class="hljs-tag">                 <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;do not insert&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_constructor_declaration&quot;</span></span><br><span class="hljs-tag">                 <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;do not insert&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_cast&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;do not insert&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span></span><br><span class="hljs-tag">                <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_annotation_type_member_declaration&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;do not insert&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_enum_constant&quot;</span></span><br><span class="hljs-tag">                 <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;do not insert&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_before_opening_bracket_in_array_type_reference&quot;</span></span><br><span class="hljs-tag">                 <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;do not insert&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_after_opening_bracket_in_array_allocation_expression&quot;</span></span><br><span class="hljs-tag">                 <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;do not insert&quot;</span>/&gt;</span><br> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_before_opening_bracket_in_array_allocation_expression&quot;</span></span><br><span class="hljs-tag">                 <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;do not insert&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_before_opening_bracket_in_array_reference&quot;</span></span><br><span class="hljs-tag">                 <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;do not insert&quot;</span>/&gt;</span><br> <br> <br>        <span class="hljs-comment">&lt;!--下面两个对应IDEA中的一个配置Java:SPACE_AROUND_ASSIGNMENT_OPERATORS，使用insert--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_after_assignment_operator&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;insert&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_before_assignment_operator&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;insert&quot;</span>/&gt;</span><br> <br>        <span class="hljs-comment">&lt;!--org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_catch=Java:SPACE_BEFORE_CATCH_PARENTHESES--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_catch&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;insert&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!--org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_method_invocation=Java:SPACE_BEFORE_METHOD_CALL_PARENTHESES--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_method_invocation&quot;</span></span><br><span class="hljs-tag">                 <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;do not insert&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!--org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_try=Java:SPACE_BEFORE_TRY_PARENTHESES--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_try&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;insert&quot;</span>/&gt;</span><br> <br>        <span class="hljs-comment">&lt;!--下面两个对应IDEA中的一个配置Java:SPACE_AROUND_UNARY_OPERATOR，使用do not insert--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_before_unary_operator&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;do not insert&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_after_unary_operator&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;do not insert&quot;</span>/&gt;</span><br> <br>        <span class="hljs-comment">&lt;!--org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_if=Java:SPACE_BEFORE_IF_PARENTHESES--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_if&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;insert&quot;</span>/&gt;</span><br> <br>        <span class="hljs-comment">&lt;!--org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_while=Java:SPACE_BEFORE_WHILE_PARENTHESES--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_while&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;insert&quot;</span>/&gt;</span><br> <br>        <span class="hljs-comment">&lt;!--org.eclipse.jdt.core.formatter.insert_space_after_closing_paren_in_cast=Java:SPACE_AFTER_TYPE_CAST--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_after_closing_paren_in_cast&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;do not insert&quot;</span>/&gt;</span><br> <br>        <span class="hljs-comment">&lt;!--org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_method_declaration=Java:SPACE_BEFORE_METHOD_PARENTHESES--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_method_declaration&quot;</span></span><br><span class="hljs-tag">                 <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;do not insert&quot;</span>/&gt;</span><br> <br>        <span class="hljs-comment">&lt;!--org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_for=Java:SPACE_BEFORE_FOR_PARENTHESES--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_for&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;insert&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!--org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_synchronized=Java:SPACE_BEFORE_SYNCHRONIZED_PARENTHESES--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_synchronized&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;insert&quot;</span>/&gt;</span><br> <br>        <span class="hljs-comment">&lt;!--org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_switch=Java:SPACE_BEFORE_SWITCH_PARENTHESES--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_switch&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;insert&quot;</span>/&gt;</span><br> <br>        <span class="hljs-comment">&lt;!--下面两个对应IDEA中的一个配置Java:SPACE_AROUND_LAMBDA_ARROW，使用insert--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_before_lambda_arrow&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;insert&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_after_lambda_arrow&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;insert&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!--SPACE_WITHIN_EMPTY_ARRAY_INITIALIZER_BRACES--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_space_between_empty_braces_in_array_initializer&quot;</span></span><br><span class="hljs-tag">                 <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;do not insert&quot;</span>/&gt;</span><br> <br>        <span class="hljs-comment">&lt;!--Idea -&gt; Wrapping And Braces -&gt; Simple classes in one line --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_new_line_in_empty_annotation_declaration&quot;</span></span><br><span class="hljs-tag">                 <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;do not insert&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_new_line_in_empty_anonymous_type_declaration&quot;</span></span><br><span class="hljs-tag">                 <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;do not insert&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_new_line_in_empty_type_declaration&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;do not insert&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_new_line_in_empty_enum_declaration&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;do not insert&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!--Idea -&gt; Wrapping And Braces -&gt; Simple method in one line --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_new_line_in_empty_method_body&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;do not insert&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!--因为Idea不支持配置，所以设置为 Idea默认值--&gt;</span><br> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_package&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;do not insert&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_parameter&quot;</span></span><br><span class="hljs-tag">                 <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;do not insert&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_enum_constant&quot;</span></span><br><span class="hljs-tag">                 <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;do not insert&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_new_line_in_empty_enum_constant&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;do not insert&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_new_line_after_type_annotation&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;do not insert&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_new_line_after_label&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;insert&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!--Idea可以通过Wrap Always实现 TODO--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_field&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;insert&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_method&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;insert&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_local_variable&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;insert&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_type&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;insert&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!--Idea -&gt; Wrapping And Braces -&gt; Simple block in one line -&gt; do not select --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_new_line_in_empty_block&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;insert&quot;</span>/&gt;</span><br> <br>        <span class="hljs-comment">&lt;!--Idea -&gt; Wrapping And Braces -&gt; try statement -&gt; catch.... (Java:CATCH_ON_NEW_LINE)--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_new_line_before_catch_in_try_statement&quot;</span></span><br><span class="hljs-tag">                 <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;do not insert&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!--org.eclipse.jdt.core.formatter.insert_new_line_at_end_of_file_if_missing=&lt;Programmatic&gt;--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_new_line_at_end_of_file_if_missing&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;do not insert&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!--org.eclipse.jdt.core.formatter.insert_new_line_before_closing_brace_in_array_initializer=Java:ARRAY_INITIALIZER_RBRACE_ON_NEXT_LINE--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_new_line_before_closing_brace_in_array_initializer&quot;</span></span><br><span class="hljs-tag">                 <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;do not insert&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!--#org.eclipse.jdt.core.formatter.insert_new_line_after_opening_brace_in_array_initializer=Java:ARRAY_INITIALIZER_LBRACE_ON_NEXT_LINE--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_new_line_after_opening_brace_in_array_initializer&quot;</span></span><br><span class="hljs-tag">                 <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;do not insert&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!--org.eclipse.jdt.core.formatter.insert_new_line_before_else_in_if_statement=Java:ELSE_ON_NEW_LINE--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_new_line_before_else_in_if_statement&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;do not insert&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!--org.eclipse.jdt.core.formatter.insert_new_line_before_while_in_do_statement=Java:WHILE_ON_NEW_LINE--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_new_line_before_while_in_do_statement&quot;</span></span><br><span class="hljs-tag">                 <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;do not insert&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!--org.eclipse.jdt.core.formatter.insert_new_line_before_finally_in_try_statement=Java:FINALLY_ON_NEW_LINE--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.insert_new_line_before_finally_in_try_statement&quot;</span></span><br><span class="hljs-tag">                 <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;do not insert&quot;</span>/&gt;</span><br> <br>        <span class="hljs-comment">&lt;!--comment start--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.comment.line_length&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;120&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!--ENABLE_JAVADOC_FORMATTING--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.comment.format_javadoc_comments&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!--org.eclipse.jdt.core.formatter.comment.clear_blank_lines_in_javadoc_comment=&lt;Programmatic&gt;--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.comment.clear_blank_lines_in_javadoc_comment&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!--IDEA无对应设置，所以关闭对block comment的格式化 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.comment.format_block_comments&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.comment.clear_blank_lines_in_block_comment&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.comment.new_lines_at_block_boundaries&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br> <br>        <span class="hljs-comment">&lt;!--org.eclipse.jdt.core.formatter.never_indent_line_comments_on_first_column=Java:KEEP_FIRST_COLUMN_COMMENT--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.never_indent_line_comments_on_first_column&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!--org.eclipse.jdt.core.formatter.use_on_off_tags=FORMATTER_TAGS_ENABLED--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.use_on_off_tags&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!--org.eclipse.jdt.core.formatter.disabling_tag=FORMATTER_OFF_TAG--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.disabling_tag&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;@formatter:off&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!--org.eclipse.jdt.core.formatter.enabling_tag=FORMATTER_ON_TAG--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.enabling_tag&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;@formatter:on&quot;</span>/&gt;</span><br> <br>        <span class="hljs-comment">&lt;!--下面的没有IDEA对应项，在代码里面对IDEA中使用默认值即可,LINE_COMMENT_AT_FIRST_COLUMN BLOCK_COMMENT_AT_FIRST_COLUMN设置为false--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.never_indent_block_comments_on_first_column&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.comment.insert_new_line_before_root_tags&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;insert&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.comment.indent_root_tags&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.comment.preserve_white_space_between_code_and_line_comments&quot;</span></span><br><span class="hljs-tag">                 <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span><br> <br> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.format_line_comment_starting_on_first_column&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.comment.format_line_comments&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.comment.format_header&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.comment.new_lines_at_javadoc_boundaries&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.comment.format_source_code&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.comment.format_html&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.join_lines_in_comments&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!--和IDEA保持一致，注释换行--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.comment.indent_parameter_description&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.comment.insert_new_line_for_parameter&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;insert&quot;</span>/&gt;</span><br> <br> <br>        <span class="hljs-comment">&lt;!--comment end--&gt;</span><br> <br>        <span class="hljs-comment">&lt;!--org.eclipse.jdt.core.formatter.blank_lines_after_imports=Java:BLANK_LINES_AFTER_IMPORTS--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.blank_lines_after_imports&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!--org.eclipse.jdt.core.formatter.blank_lines_before_imports=Java:BLANK_LINES_BEFORE_IMPORTS--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.blank_lines_before_imports&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!--org.eclipse.jdt.core.formatter.blank_lines_after_package=Java:BLANK_LINES_AFTER_PACKAGE--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.blank_lines_after_package&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!--org.eclipse.jdt.core.formatter.blank_lines_between_type_declarations=Java:BLANK_LINES_AROUND_CLASS--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.blank_lines_between_type_declarations&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!--org.eclipse.jdt.core.formatter.number_of_blank_lines_at_beginning_of_method_body=Java:BLANK_LINES_BEFORE_METHOD_BODY--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.number_of_blank_lines_at_beginning_of_method_body&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;0&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!--org.eclipse.jdt.core.formatter.blank_lines_before_first_class_body_declaration=Java:&lt;Programmatic&gt;--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.blank_lines_before_first_class_body_declaration&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;0&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!--org.eclipse.jdt.core.formatter.blank_lines_before_field=Java:BLANK_LINES_AROUND_FIELD--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.blank_lines_before_field&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;0&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!--org.eclipse.jdt.core.formatter.blank_lines_before_method=Java:BLANK_LINES_AROUND_METHOD--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.blank_lines_before_method&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!--org.eclipse.jdt.core.formatter.blank_lines_before_package=Java:BLANK_LINES_BEFORE_PACKAGE--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.blank_lines_before_package&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;0&quot;</span>/&gt;</span><br> <br>        <span class="hljs-comment">&lt;!--下面IDEA没有对应设置，使用对应值即可--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.align_fields_grouping_blank_lines&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;2147483647&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.blank_lines_before_new_chunk&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.blank_lines_before_member_type&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.blank_lines_between_import_groups&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span>/&gt;</span><br> <br>        <span class="hljs-comment">&lt;!--org.eclipse.jdt.core.formatter.indentation.size=Java:IndentOptions:INDENT_SIZE--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.indentation.size&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;4&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!--org.eclipse.jdt.core.formatter.continuation_indentation=Java:IndentOptions:&lt;Programmatic&gt;--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.continuation_indentation&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!--org.eclipse.jdt.core.formatter.indent_body_declarations_compare_to_type_header=Java:&lt;Programmatic&gt;--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.indent_body_declarations_compare_to_type_header&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!--org.eclipse.jdt.core.formatter.use_tabs_only_for_leading_indentations=Java:IndentOptions:SMART_TABS--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.use_tabs_only_for_leading_indentations&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!--org.eclipse.jdt.core.formatter.indent_switchstatements_compare_to_switch=Java:INDENT_CASE_FROM_SWITCH--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.indent_switchstatements_compare_to_switch&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!--KEEP_INDENTS_ON_EMPTY_LINES--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.indent_empty_lines&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!--org.eclipse.jdt.core.formatter.tabulation.size=Java:IndentOptions:&lt;Programmatic&gt;--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.tabulation.size&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;4&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!--Java:IndentOptions:&lt;Programmatic&gt;--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.tabulation.char&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;space&quot;</span>/&gt;</span><br> <br> <br>        <span class="hljs-comment">&lt;!--下面IDEA没有对应设置，使用对应值即可--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.indent_statements_compare_to_block&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.indent_body_declarations_compare_to_annotation_declaration_header&quot;</span></span><br><span class="hljs-tag">                 <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.indent_switchstatements_compare_to_cases&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.continuation_indentation_for_array_initializer&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span>/&gt;</span><br> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.indent_body_declarations_compare_to_enum_declaration_header&quot;</span></span><br><span class="hljs-tag">                 <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.indent_breaks_compare_to_cases&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.indent_statements_compare_to_body&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.indent_body_declarations_compare_to_enum_constant_header&quot;</span></span><br><span class="hljs-tag">                 <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br> <br> <br>        <span class="hljs-comment">&lt;!--Java:&lt;Programmatic&gt;--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.alignment_for_arguments_in_method_invocation&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;16&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.alignment_for_selector_in_method_invocation&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;16&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.alignment_for_assignment&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;16&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.alignment_for_superinterfaces_in_type_declaration&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;16&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.alignment_for_binary_expression&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;16&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.alignment_for_throws_clause_in_method_declaration&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;16&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.alignment_for_parameters_in_method_declaration&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;16&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.alignment_for_resources_in_try&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;16&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.alignment_for_arguments_in_annotation&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;16&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.alignment_for_conditional_expression&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;16&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.alignment_for_expressions_in_array_initializer&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;16&quot;</span>/&gt;</span><br> <br>        <span class="hljs-comment">&lt;!--下面没有对应的IDEA设置，Eclipse先使用对应值--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.alignment_for_enum_constants&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;16&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.alignment_for_arguments_in_enum_constant&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;16&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.alignment_for_parameterized_type_references&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;16&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.alignment_for_union_type_in_multicatch&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;16&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.alignment_for_arguments_in_explicit_constructor_call&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;16&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.alignment_for_parameters_in_constructor_declaration&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;16&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.alignment_for_type_parameters&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;16&quot;</span>/&gt;</span><br> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.alignment_for_throws_clause_in_constructor_declaration&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;16&quot;</span>/&gt;</span><br> <br> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.alignment_for_arguments_in_allocation_expression&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;16&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.alignment_for_method_declaration&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;16&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.alignment_for_superclass_in_type_declaration&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;16&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.alignment_for_superinterfaces_in_enum_declaration&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;16&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.alignment_for_compact_if&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;16&quot;</span>/&gt;</span><br> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.alignment_for_type_arguments&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;16&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.alignment_for_arguments_in_qualified_allocation_expression&quot;</span></span><br><span class="hljs-tag">                 <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;16&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.alignment_for_multiple_fields&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;16&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.alignment_for_expressions_in_for_loop_header&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;16&quot;</span>/&gt;</span><br> <br>        <span class="hljs-comment">&lt;!--IDEA默认配置在同一行，Eclipse使用对应值即可--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.parentheses_positions_in_for_statment&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;common_lines&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.parentheses_positions_in_method_invocation&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;common_lines&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.parentheses_positions_in_switch_statement&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;common_lines&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.parentheses_positions_in_enum_constant_declaration&quot;</span></span><br><span class="hljs-tag">                 <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;common_lines&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.parentheses_positions_in_if_while_statement&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;common_lines&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.parentheses_positions_in_catch_clause&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;common_lines&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.parentheses_positions_in_annotation&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;common_lines&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.parentheses_positions_in_try_clause&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;common_lines&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.parentheses_positions_in_method_delcaration&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;common_lines&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.parentheses_positions_in_lambda_declaration&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;common_lines&quot;</span>/&gt;</span><br> <br>        <span class="hljs-comment">&lt;!--Java:BINARY_OPERATION_SIGN_ON_NEXT_LINE--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.wrap_before_binary_operator&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br> <br>        <span class="hljs-comment">&lt;!--ASSIGNMENT_WRAP 需要设置为 WRAP_AS_NEEDED  WRAP_AS_NEEDED . Add in jdt.core-3.12，it&#x27;s not work in previous version --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.wrap_before_assignment_operator&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span><br> <br>        <span class="hljs-comment">&lt;!--IDEA无配置项，Eclipse使用对应值即可--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.wrap_before_or_operator_multicatch&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.wrap_before_conditional_operator&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.wrap_outer_expressions_when_nested&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.keep_else_statement_on_same_line&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.put_empty_statement_on_new_line&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.format_guardian_clause_on_one_line&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.keep_empty_array_initializer_on_one_line&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span><br> <br>        <span class="hljs-comment">&lt;!--org.eclipse.jdt.core.formatter.keep_then_statement_on_same_line=Java:KEEP_CONTROL_STATEMENT_IN_ONE_LINE--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.keep_then_statement_on_same_line&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!--org.eclipse.jdt.core.formatter.compact_else_if=Java:SPECIAL_ELSE_IF_TREATMENT--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.compact_else_if&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!--Java:ALIGN_GROUP_FIELD_DECLARATIONS--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.align_type_members_on_columns&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!--Java:&lt;Programmatic&gt;--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.number_of_empty_lines_to_preserve&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.join_wrapped_lines&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br> <br>        <span class="hljs-comment">&lt;!--统一为end_of_lint，IDEA默认一致--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.brace_position_for_method_declaration&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;end_of_line&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.brace_position_for_anonymous_type_declaration&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;end_of_line&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.brace_position_for_block&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;end_of_line&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.brace_position_for_constructor_declaration&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;end_of_line&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.brace_position_for_lambda_body&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;end_of_line&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.brace_position_for_enum_declaration&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;end_of_line&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.brace_position_for_block_in_case&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;end_of_line&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.brace_position_for_annotation_type_declaration&quot;</span></span><br><span class="hljs-tag">                 <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;end_of_line&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.brace_position_for_switch&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;end_of_line&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.brace_position_for_array_initializer&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;end_of_line&quot;</span>/&gt;</span><br> <br> <br>        <span class="hljs-comment">&lt;!--        &lt;setting id=&quot;org.eclipse.jdt.core.compiler.source&quot; value=&quot;1.8&quot;/&gt;</span><br><span class="hljs-comment">                &lt;setting id=&quot;org.eclipse.jdt.core.compiler.compliance&quot; value=&quot;1.8&quot;/&gt;</span><br><span class="hljs-comment">                &lt;setting id=&quot;org.eclipse.jdt.core.compiler.codegen.targetPlatform&quot; value=&quot;1.8&quot;/&gt;</span><br><span class="hljs-comment">                        &lt;setting id=&quot;org.eclipse.jdt.core.compiler.problem.enumIdentifier&quot; value=&quot;error&quot;/&gt;</span><br><span class="hljs-comment">                                &lt;setting id=&quot;org.eclipse.jdt.core.compiler.problem.assertIdentifier&quot; value=&quot;error&quot;/&gt;</span><br><span class="hljs-comment">                                        &lt;setting id=&quot;org.eclipse.jdt.core.compiler.codegen.inlineJsrBytecode&quot; value=&quot;enabled&quot;/&gt;</span><br><span class="hljs-comment">                --&gt;</span><br>        <span class="hljs-comment">&lt;!--Java:KEEP_SIMPLE_BLOCKS_IN_ONE_LINE--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.keep_imple_if_on_one_line&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span><br> <br>        <span class="hljs-comment">&lt;!--Java:CLASS_BRACE_STYLE，统一使用end_of_line TODO--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.brace_position_for_enum_constant&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;end_of_line&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.brace_position_for_type_declaration&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;end_of_line&quot;</span>/&gt;</span><br> <br>        <span class="hljs-comment">&lt;!--org.eclipse.jdt.core.formatter.lineSplit=RIGHT_MARGIN--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;org.eclipse.jdt.core.formatter.lineSplit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;120&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">profile</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">profiles</span>&gt;</span><br><br></code></pre></td></tr></table></figure></li><li><p>进入插件配置中引用该配置文件</p><p>选中<code>Use Eclipse&#39;s Code Formatter</code></p><p><code>Eclipse workspace/project folder or config file</code>浏览选中配置文件</p><p><img src="/assets/image-20240121171431934.png" alt="image-20240121171431934"></p></li></ol><p>大功告成。</p>]]></content>
    
    
    <categories>
      
      <category>杂项配置</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>二改mybaitsx代码生成器-自定义模板</title>
    <link href="/2024/01/21/%E6%9D%82%E9%A1%B9%E9%85%8D%E7%BD%AE/%E4%BA%8C%E6%94%B9mybaitsx%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E5%99%A8-%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A8%A1%E6%9D%BF/"/>
    <url>/2024/01/21/%E6%9D%82%E9%A1%B9%E9%85%8D%E7%BD%AE/%E4%BA%8C%E6%94%B9mybaitsx%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E5%99%A8-%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A8%A1%E6%9D%BF/</url>
    
    <content type="html"><![CDATA[<h1 id="二改mybaitsx代码生成器-自定义模板"><a href="#二改mybaitsx代码生成器-自定义模板" class="headerlink" title="二改mybaitsx代码生成器-自定义模板"></a>二改mybaitsx代码生成器-自定义模板</h1><h2 id="idea插件安装"><a href="#idea插件安装" class="headerlink" title="idea插件安装"></a>idea插件安装</h2><p><img src="/assets/image-20240121163737851.png" alt="image-20240121163737851"></p><p>如何使用此处不赘述</p><h2 id="模板库"><a href="#模板库" class="headerlink" title="模板库"></a>模板库</h2><p><img src="/assets/image-20240121163836211.png" alt="image-20240121163836211"></p><h2 id="domain-ftl"><a href="#domain-ftl" class="headerlink" title="domain.ftl"></a>domain.ftl</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs ftl">package $&#123;domain.packageName&#125;;<br>import javax.validation.constraints.NotBlank;<br>import javax.validation.constraints.Size;<br>import javax.validation.constraints.NotNull;<br>import lombok.Data;<br>import java.io.Serializable;<br>&lt;#list tableClass.importList as fieldType&gt;$&#123;&quot;\n&quot;&#125;import $&#123;fieldType&#125;;&lt;/#list&gt;<br>import io.swagger.annotations.ApiModelProperty;<br><br>/**<br>* $&#123;tableClass.remark!&#125;<br>* @author JMIN<br>* @TableName $&#123;tableClass.tableName&#125;<br>*/<br>@Data<br>public class $&#123;tableClass.shortClassName&#125; implements Serializable &#123;<br><br>    private static final long serialVersionUID = 1L;<br>    &lt;#list tableClass.allFields as field&gt;<br>    /**<br>    * $&#123;field.remark!&#125;<br>    */<br>    &lt;#if !field.nullable&gt;<br>    &lt;#if field.jdbcType==&quot;VARCHAR&quot;&gt;@NotBlank(message=&quot;[$&#123;field.remark!&#125;]不能为空&quot;)&lt;#else&gt;@NotNull(message=&quot;[$&#123;field.remark!&#125;]不能为空&quot;)<br>    &lt;/#if&gt;<br>    &lt;/#if&gt;<br>    &lt;#if field.jdbcType==&quot;VARCHAR&quot;&gt;<br>    &lt;#if !field.nullable&gt;$&#123;&quot;\n&quot;&#125;&lt;/#if&gt;@Size(max= $&#123;field.columnLength?c&#125;,message=&quot;编码长度不能超过$&#123;field.columnLength?c&#125;&quot;)&lt;/#if&gt;<br>    @ApiModelProperty(&quot;$&#123;field.remark!&#125;&quot;)<br>    private $&#123;field.shortTypeName&#125; $&#123;field.fieldName&#125;;<br>    &lt;/#list&gt;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="mapperInterface-ftl"><a href="#mapperInterface-ftl" class="headerlink" title="mapperInterface.ftl"></a>mapperInterface.ftl</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs ftl">package $&#123;mapperInterface.packageName&#125;;<br><br>import org.apache.ibatis.annotations.Mapper;<br>import $&#123;tableClass.fullClassName&#125;;<br>&lt;#if tableClass.pkFields??&gt;<br>    &lt;#list tableClass.pkFields as field&gt;&lt;#assign pkName&gt;$&#123;field.shortTypeName&#125;&lt;/#assign&gt;&lt;/#list&gt;<br>&lt;/#if&gt;<br>import com.baomidou.mybatisplus.core.mapper.BaseMapper;<br><br>/**<br>* @author JMIN<br>* @description 针对表【$&#123;tableClass.tableName&#125;&lt;#if tableClass.remark?has_content&gt;($&#123;tableClass.remark!&#125;)&lt;/#if&gt;】的数据库操作Mapper<br>* @createDate $&#123;.now?string(&#x27;yyyy-MM-dd HH:mm:ss&#x27;)&#125;<br>* @Entity $&#123;tableClass.fullClassName&#125;<br>*/<br>@Mapper<br>public interface $&#123;mapperInterface.fileName&#125; extends BaseMapper&lt;$&#123;tableClass.shortClassName&#125;&gt; &#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="mapperXml-ftl"><a href="#mapperXml-ftl" class="headerlink" title="mapperXml.ftl"></a>mapperXml.ftl</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ftl">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;<br>&lt;!DOCTYPE mapper<br>        PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;<br>        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;<br>&lt;mapper namespace=&quot;$&#123;mapperInterface.packageName&#125;.$&#123;baseInfo.fileName&#125;&quot;&gt;<br><br>&lt;/mapper&gt;<br><br></code></pre></td></tr></table></figure><h2 id="serviceImpl"><a href="#serviceImpl" class="headerlink" title="serviceImpl"></a>serviceImpl</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs ftl">package $&#123;baseInfo.packageName&#125;;<br><br>import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;<br>import $&#123;tableClass.fullClassName&#125;;<br>import $&#123;serviceInterface.packageName&#125;.$&#123;serviceInterface.fileName&#125;;<br>import $&#123;mapperInterface.packageName&#125;.$&#123;mapperInterface.fileName&#125;;<br>&lt;#if baseService??&amp;&amp;baseService!=&quot;&quot;&gt;<br>import $&#123;baseService&#125;;<br>    &lt;#list baseService?split(&quot;.&quot;) as simpleName&gt;<br>        &lt;#if !simpleName_has_next&gt;<br>            &lt;#assign serviceSimpleName&gt;$&#123;simpleName&#125;&lt;/#assign&gt;<br>        &lt;/#if&gt;<br>    &lt;/#list&gt;<br>&lt;/#if&gt;<br>import org.springframework.stereotype.Service;<br><br>/**<br>* @author JMIN<br>* @description 针对表【$&#123;tableClass.tableName&#125;&lt;#if tableClass.remark?has_content&gt;($&#123;tableClass.remark!&#125;)&lt;/#if&gt;】的数据库操作Service实现<br>* @createDate $&#123;.now?string(&#x27;yyyy-MM-dd HH:mm:ss&#x27;)&#125;<br>*/<br>@Service<br>public class $&#123;baseInfo.fileName&#125; extends ServiceImpl&lt;$&#123;mapperInterface.fileName&#125;, $&#123;tableClass.shortClassName&#125;&gt;<br>    implements $&#123;serviceInterface.fileName&#125;&#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="serviceInterface-ftl"><a href="#serviceInterface-ftl" class="headerlink" title="serviceInterface.ftl"></a>serviceInterface.ftl</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs ftl">package $&#123;baseInfo.packageName&#125;;<br><br>import $&#123;tableClass.fullClassName&#125;;<br>&lt;#if baseService??&amp;&amp;baseService!=&quot;&quot;&gt;<br>import $&#123;baseService&#125;;<br>    &lt;#list baseService?split(&quot;.&quot;) as simpleName&gt;<br>        &lt;#if !simpleName_has_next&gt;<br>            &lt;#assign serviceSimpleName&gt;$&#123;simpleName&#125;&lt;/#assign&gt;<br>        &lt;/#if&gt;<br>    &lt;/#list&gt;<br>&lt;/#if&gt;<br>import com.baomidou.mybatisplus.extension.service.IService;<br><br>/**<br>* @author JMIN<br>* @description 针对表【$&#123;tableClass.tableName&#125;&lt;#if tableClass.remark?has_content&gt;($&#123;tableClass.remark!&#125;)&lt;/#if&gt;】的数据库操作Service<br>* @createDate $&#123;.now?string(&#x27;yyyy-MM-dd HH:mm:ss&#x27;)&#125;<br>*/<br>public interface $&#123;baseInfo.fileName&#125; extends IService&lt;$&#123;tableClass.shortClassName&#125;&gt; &#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>将上面的文件分别导入，建议不要改动格式</p><p><img src="/assets/image-20240121174852584.png" alt="image-20240121174852584"></p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>单独创建实体类</p><p><img src="/assets/image-20240121174942150.png" alt="image-20240121174942150"></p><p><img src="/assets/image-20240121175005033.png" alt="image-20240121175005033"></p><p>生成service，mapper</p><p><img src="/assets/image-20240121175106287.png" alt="image-20240121175106287"></p><p><img src="/assets/image-20240121175118701.png" alt="image-20240121175118701"></p><p><img src="/assets/image-20240121175129735.png" alt="image-20240121175129735"></p>]]></content>
    
    
    <categories>
      
      <category>mybatisplus</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>1_uni-app基础</title>
    <link href="/2024/01/09/uniapp/%E5%9F%BA%E7%A1%80/%E5%BC%B9%E5%B0%84%E8%B5%B7%E6%AD%A5/"/>
    <url>/2024/01/09/uniapp/%E5%9F%BA%E7%A1%80/%E5%BC%B9%E5%B0%84%E8%B5%B7%E6%AD%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="uni-app基础"><a href="#uni-app基础" class="headerlink" title="uni-app基础"></a>uni-app基础</h1>]]></content>
    
    
    <categories>
      
      <category>Uniapp</category>
      
      <category>基础</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>2_Linux常用命令</title>
    <link href="/2024/01/08/Linux%E5%9F%BA%E7%A1%80/2_Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <url>/2024/01/08/Linux%E5%9F%BA%E7%A1%80/2_Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h1 id="Linux常用命令"><a href="#Linux常用命令" class="headerlink" title="Linux常用命令"></a>Linux常用命令</h1><p>参考</p><p><a href="https://www.runoob.com/w3cnote/linux-common-command-2.html">https://www.runoob.com/w3cnote/linux-common-command-2.html</a></p><p><a href="https://www.runoob.com/linux/linux-command-manual.html">https://www.runoob.com/linux/linux-command-manual.html</a></p><h2 id="ls命令"><a href="#ls命令" class="headerlink" title="ls命令"></a>ls命令</h2><p>全称list，不仅可以查看linux文件夹包含的文件，而且可以查看文件权限（目录，文件夹，文件权限），查看目录信息等等。</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-keyword">ls</span> -a 列出目录所有文件，包含以.开始的隐藏文件<br><span class="hljs-keyword">ls</span> -A 列出除.及<span class="hljs-string">..</span>的其它文件<br><span class="hljs-keyword">ls</span> -r 反序排列<br><span class="hljs-keyword">ls</span> -t 以文件修改时间排序<br><span class="hljs-keyword">ls</span> -S 以文件大小排序<br><span class="hljs-keyword">ls</span> -h 以易读大小显示<br><span class="hljs-keyword">ls</span> -l 除了文件名之外，还将文件的权限、所有者、文件大小等信息详细列出来<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20240109123916684.png" alt="image-20240109123916684"></p><p><img src="/assets/image-20240109124234251.png" alt="image-20240109124234251"></p><p>(1) 按易读方式按时间反序排序，并显示文件详细信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ls</span> -lhrt<br></code></pre></td></tr></table></figure><p>(2) 按大小反序显示文件详细信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ls</span> -lrS<br></code></pre></td></tr></table></figure><p>(3)列出当前目录中所有以”t”开头的目录的详细内容</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">ls</span> <span class="hljs-literal">-l</span> <span class="hljs-built_in">h</span>*<br></code></pre></td></tr></table></figure><p>(4) 列出文件绝对路径（不包含隐藏文件）</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">ls | sed <span class="hljs-string">&quot;s:^:`pwd`/:&quot;</span><br></code></pre></td></tr></table></figure><p>(5) 列出文件绝对路径（包含隐藏文件）</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">find</span> <span class="hljs-variable">$pwd</span> -maxdepth 1 | xargs ls -ld<br></code></pre></td></tr></table></figure><h2 id="cd命令"><a href="#cd命令" class="headerlink" title="cd命令"></a>cd命令</h2><p>全称changeDirectory，切换当前目录至指定目录。</p><p>（1）进入要目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /<br></code></pre></td></tr></table></figure><p>（2）进入 “home” 目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ~<br></code></pre></td></tr></table></figure><p>（3）进入上一次工作路径</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> -<br></code></pre></td></tr></table></figure><p>（4）把上个命令的参数作为cd参数使用。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">cd</span> !<span class="hljs-variable">$</span><br></code></pre></td></tr></table></figure><p><img src="/assets/image-20240109124807514.png" alt="image-20240109124807514"></p><h2 id="pwd命令"><a href="#pwd命令" class="headerlink" title="pwd命令"></a>pwd命令</h2><p>全称 print work directory，用于显示工作目录，可立刻得知目前所在的工作目录的绝对路径名称。</p><p>（1）查看当前路径</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">pwd</span><br></code></pre></td></tr></table></figure><p>（2）查看软链接的实际路径</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">pwd</span> -P<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20240109125144756.png" alt="image-20240109125144756"></p><h2 id="mkdir命令"><a href="#mkdir命令" class="headerlink" title="mkdir命令"></a>mkdir命令</h2><p>全称 make directory，用于创建文件夹。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">mkdir [-p] dirName<br></code></pre></td></tr></table></figure><p>-p 确保目录名称存在，不存在就创建一个，存在则不报错</p><p><img src="/assets/image-20240109141017435.png" alt="image-20240109141017435"></p><h2 id="rm-命令"><a href="#rm-命令" class="headerlink" title="rm 命令"></a>rm 命令</h2><p>全称 remove，删除一个目录中的一个或多个文件或目录，注意没有-r不能单独删除一个目录</p><ul><li>-i 删除前逐一询问确认。</li><li>-f 即使原档案属性设为唯读，亦直接删除，无需逐一确认。</li><li>-r 将目录及以下文件或目录亦逐一删除。</li></ul><p><img src="/assets/image-20240109142228202.png" alt="image-20240109142228202"></p><p>删除以aa开头的模糊名称的文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">rm</span> aa*<br></code></pre></td></tr></table></figure><h2 id="rmdir-命令"><a href="#rmdir-命令" class="headerlink" title="rmdir 命令"></a>rmdir 命令</h2><p>全称 remove directory，从一个目录中删除一个或多个子目录项，删除某目录时也必须具有对其父目录的写权限。<strong>注意</strong>：不能删除<strong>非空</strong>目录</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">rmdir [-p] dirName<br></code></pre></td></tr></table></figure><ul><li>-p 是当子目录被删除后使它也成为空目录的话，则顺便一并删除。</li></ul><p><img src="/assets/image-20240109142858035.png" alt="image-20240109142858035"></p><p><img src="/assets/image-20240109143055719.png" alt="image-20240109143055719"></p><h2 id="mv-命令"><a href="#mv-命令" class="headerlink" title="mv 命令"></a>mv 命令</h2><p>全称 move，移动文件或修改文件名，根据第二参数类型（如目录，则移动文件；如为文件则重命令该文件）。</p><p>当第二个参数为目录时，第一个参数可以是多个以空格分隔的文件或目录，然后移动第一个参数指定的多个文件到第二个参数指定的目录中。</p><p>（1）将文件 test.log 重命名为 test1.txt</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata">mv <span class="hljs-keyword">test</span>.<span class="hljs-keyword">log</span> test1.txt<br></code></pre></td></tr></table></figure><p>（2）将文件 log1.txt,log2.txt,log3.txt 移动到根的 test3 目录中</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">mv llo<span class="hljs-name">g1.</span>txt lo<span class="hljs-name">g2.</span>txt lo<span class="hljs-name">g3.</span>txt /test<span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p>（3）将文件 file1 改名为 file2，如果 file2 已经存在，则询问是否覆盖</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">mv -i lo<span class="hljs-name">g1.</span>txt lo<span class="hljs-name">g2.</span>txt<br></code></pre></td></tr></table></figure><p>（4）移动当前文件夹下的所有文件到上一级目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mv</span> * ../<br></code></pre></td></tr></table></figure><h2 id="cp-命令"><a href="#cp-命令" class="headerlink" title="cp 命令"></a>cp 命令</h2><p>全称 copy，将源文件复制至目标文件，或将多个源文件复制至目标目录。</p><p><strong>注意</strong>：命令行复制，如果目标文件已经存在会提示是否覆盖，而在 shell 脚本中，如果不加 -i 参数，则不会提示，而是直接覆盖！</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-i 提示</span><br><span class="hljs-deletion">-r 复制目录及目录内所有项目</span><br><span class="hljs-deletion">-a 复制的文件与原文件时间一样</span><br><span class="hljs-deletion">-s 复制创建链接</span><br></code></pre></td></tr></table></figure><p>（1）复制 a.txt 到 test 目录下，保持原文件时间，如果原文件存在提示是否覆盖。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cp</span> -ai a.txt <span class="hljs-built_in">test</span><br></code></pre></td></tr></table></figure><p>（2）为 a.txt 建立一个链接（快捷方式）</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">cp -s <span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.txt</span> link_a.txt<br></code></pre></td></tr></table></figure><h2 id="cat-命令"><a href="#cat-命令" class="headerlink" title="cat 命令"></a>cat 命令</h2><p>全称 concatenate（连接），用于连接文件并打印到标准输出设备上。</p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>1_Linux目录</title>
    <link href="/2024/01/08/Linux%E5%9F%BA%E7%A1%80/1_Linux%E7%9B%AE%E5%BD%95/"/>
    <url>/2024/01/08/Linux%E5%9F%BA%E7%A1%80/1_Linux%E7%9B%AE%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h1 id="Linux基础入门"><a href="#Linux基础入门" class="headerlink" title="Linux基础入门"></a>Linux基础入门</h1><h2 id="Linux系统启动过程"><a href="#Linux系统启动过程" class="headerlink" title="Linux系统启动过程"></a>Linux系统启动过程</h2><p>过程可以分为5个阶段：</p><ul><li>内核的引导。</li><li>运行init。</li><li>系统初始化。</li><li>建立终端 。</li><li>用户登录系统。</li></ul><h3 id="内核引导"><a href="#内核引导" class="headerlink" title="内核引导"></a>内核引导</h3><p>当计算机打开电源后，首先是BIOS开机自检，按照BIOS中设置的启动设备（通常是硬盘）来启动。</p><p>操作系统接管硬件以后，首先读入 &#x2F;boot 目录下的内核文件。</p><h3 id="运行init"><a href="#运行init" class="headerlink" title="运行init"></a>运行init</h3><p>init 进程是系统所有进程的起点，可以把它比拟成系统所有进程的老祖宗，没有这个进程，系统中任何进程都不会启动。</p><p>init 程序首先是需要读取配置文件 &#x2F;etc&#x2F;inittab。</p><h3 id="运行级别"><a href="#运行级别" class="headerlink" title="运行级别"></a>运行级别</h3><p>许多程序需要开机启动。它们在Windows叫做”服务”（service），在Linux就叫做”守护进程”（daemon）。init进程的一大任务，就是去运行这些开机启动的程序。但是，不同的场合需要启动不同的程序，比如用作服务器时，需要启动Apache，用作桌面就不需要。</p><p><strong>Linux允许为不同的场合，分配不同的开机启动程序</strong>，这就叫做”运行级别”（runlevel）。也就是说，启动时根据”运行级别”，确定要运行哪些程序。</p><p>Linux系统有7个运行级别(runlevel)：</p><ul><li>运行级别0：系统停机状态，系统默认运行级别不能设为0，否则不能正常启动</li><li>运行级别1：单用户工作状态，root权限，用于系统维护，禁止远程登陆</li><li>运行级别2：多用户状态(没有NFS)</li><li>运行级别3：完全的多用户状态(有NFS)，登陆后进入控制台命令行模式</li><li>运行级别4：系统未使用，保留</li><li>运行级别5：X11控制台，登陆后进入图形GUI模式</li><li>运行级别6：系统正常关闭并重启，默认运行级别不能设为6，否则不能正常启动</li></ul><h3 id="系统初始化"><a href="#系统初始化" class="headerlink" title="系统初始化"></a>系统初始化</h3><p>在init的配置文件中有这么一行： si::sysinit:&#x2F;etc&#x2F;rc.d&#x2F;rc.sysinit　它调用执行了&#x2F;etc&#x2F;rc.d&#x2F;rc.sysinit，而rc.sysinit是一个bash shell的脚本，它主要是完成一些系统初始化的工作，rc.sysinit是每一个运行级别都要首先运行的重要脚本。</p><p>它主要完成的工作有：激活交换分区，检查磁盘，加载硬件模块以及其它一些需要优先执行任务。</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-symbol">l5:</span><span class="hljs-number">5</span><span class="hljs-symbol">:wait</span><span class="hljs-symbol">:/etc/rc</span>.d/rc <span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><p>这一行表示以5为参数运行&#x2F;etc&#x2F;rc.d&#x2F;rc，&#x2F;etc&#x2F;rc.d&#x2F;rc是一个Shell脚本，它接受5作为参数，去执行&#x2F;etc&#x2F;rc.d&#x2F;rc5.d&#x2F;目录下的所有的rc启动脚本，&#x2F;etc&#x2F;rc.d&#x2F;rc5.d&#x2F;目录中的这些启动脚本实际上都是一些连接文件，而不是真正的rc启动脚本，真正的rc启动脚本实际上都是放在&#x2F;etc&#x2F;rc.d&#x2F;init.d&#x2F;目录下。</p><p>而这些rc启动脚本有着类似的用法，它们一般能接受start、stop、restart、status等参数。</p><p>&#x2F;etc&#x2F;rc.d&#x2F;rc5.d&#x2F;中的rc启动脚本通常是K或S开头的连接文件，对于以S开头的启动脚本，将以start参数来运行。</p><p>而如果发现存在相应的脚本也存在K打头的连接，而且已经处于运行态了(以&#x2F;var&#x2F;lock&#x2F;subsys&#x2F;下的文件作为标志)，则将首先以stop为参数停止这些已经启动了的守护进程，然后再重新运行。</p><p>这样做是为了保证是当init改变运行级别时，所有相关的守护进程都将重启。</p><p>至于在每个运行级中将运行哪些守护进程，用户可以通过chkconfig或setup中的”System Services”来自行设定。</p><h3 id="建立终端"><a href="#建立终端" class="headerlink" title="建立终端"></a>建立终端</h3><p>rc执行完毕后，返回init。这时基本系统环境已经设置好了，各种守护进程也已经启动了。</p><p>init接下来会打开6个终端，以便用户登录系统。在inittab中的以下6行就是定义了6个终端：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-number">1</span><span class="hljs-symbol">:</span><span class="hljs-number">2345</span><span class="hljs-symbol">:respawn</span><span class="hljs-symbol">:/sbin/mingetty</span> tty1<br><span class="hljs-number">2</span><span class="hljs-symbol">:</span><span class="hljs-number">2345</span><span class="hljs-symbol">:respawn</span><span class="hljs-symbol">:/sbin/mingetty</span> tty2<br><span class="hljs-number">3</span><span class="hljs-symbol">:</span><span class="hljs-number">2345</span><span class="hljs-symbol">:respawn</span><span class="hljs-symbol">:/sbin/mingetty</span> tty3<br><span class="hljs-number">4</span><span class="hljs-symbol">:</span><span class="hljs-number">2345</span><span class="hljs-symbol">:respawn</span><span class="hljs-symbol">:/sbin/mingetty</span> tty4<br><span class="hljs-number">5</span><span class="hljs-symbol">:</span><span class="hljs-number">2345</span><span class="hljs-symbol">:respawn</span><span class="hljs-symbol">:/sbin/mingetty</span> tty5<br><span class="hljs-number">6</span><span class="hljs-symbol">:</span><span class="hljs-number">2345</span><span class="hljs-symbol">:respawn</span><span class="hljs-symbol">:/sbin/mingetty</span> tty6<br></code></pre></td></tr></table></figure><p>从上面可以看出在2、3、4、5的运行级别中都将以respawn方式运行mingetty程序，mingetty程序能打开终端、设置模式。</p><p>同时它会显示一个文本登录界面，这个界面就是我们经常看到的登录界面，在这个登录界面中会提示用户输入用户名，而用户输入的用户将作为参数传给login程序来验证用户的身份。</p><h3 id="用户登录系统"><a href="#用户登录系统" class="headerlink" title="用户登录系统"></a>用户登录系统</h3><p>一般来说，用户的登录方式有三种：</p><ul><li>（1）命令行登录</li><li>（2）ssh登录</li><li>（3）图形界面登录</li></ul><p>对于运行级别为5的图形方式用户来说，他们的登录是通过一个图形化的登录界面。登录成功后可以直接进入KDE、Gnome等窗口管理器。而本文主要讲的还是文本方式登录的情况：当我们看到mingetty的登录界面时，我们就可以输入用户名和密码来登录系统了。</p><p>Linux的账号验证程序是login，login会接收mingetty传来的用户名作为用户名参数。然后login会对用户名进行分析：如果用户名不是root，且存在&#x2F;etc&#x2F;nologin文件，login将输出nologin文件的内容，然后退出。</p><p>这通常用来系统维护时防止非root用户登录。只有&#x2F;etc&#x2F;securetty中登记了的终端才允许root用户登录，如果不存在这个文件，则root可以在任何终端上登录。</p><p>&#x2F;etc&#x2F;usertty文件用于对用户作出附加访问限制，如果不存在这个文件，则没有其他限制。</p><p>在分析完用户名后，login将搜索&#x2F;etc&#x2F;passwd以及&#x2F;etc&#x2F;shadow来验证密码以及设置账户的其它信息，比如：主目录是什么、使用何种shell。如果没有指定主目录，将默认为根目录；如果没有指定shell，将默认为&#x2F;bin&#x2F;bash。</p><h2 id="Linux目录结构"><a href="#Linux目录结构" class="headerlink" title="Linux目录结构"></a>Linux目录结构</h2><p><img src="/assets/image-20240108120715328.png" alt="image-20240108120715328"></p><p>例如&#x2F;bin 是 &#x2F;usr&#x2F;bin的快捷访问目录</p><p>以下是对这些目录的解释：</p><ul><li><p><strong>&#x2F;bin</strong>：<br>bin 是 Binaries (二进制文件) 的缩写, 这个目录存放着最经常使用的命令。</p></li><li><p><strong>&#x2F;dev ：</strong><br>dev 是 Device(设备) 的缩写, 该目录下存放的是 Linux 的外部设备，在 Linux 中访问设备的方式和访问文件的方式是相同的。</p></li><li><p><strong>&#x2F;lib</strong>：<br>lib 是 Library(库) 的缩写这个目录里存放着系统最基本的动态连接共享库，其作用类似于 Windows 里的 DLL 文件。几乎所有的应用程序都需要用到这些共享库。</p></li><li><p><strong>&#x2F;boot：</strong><br>这里存放的是启动 Linux 时使用的一些核心文件，包括一些连接文件以及镜像文件。</p></li><li><p><strong>&#x2F;etc：</strong><br>etc 是 Etcetera(等等) 的缩写,这个目录用来存放所有的系统管理所需要的配置文件和子目录。</p></li><li><p><strong>&#x2F;mnt</strong>：<br>系统提供该目录是为了让用户临时挂载别的文件系统的，我们可以将光驱挂载在 &#x2F;mnt&#x2F; 上，然后进入该目录就可以查看光驱里的内容了。</p></li><li><p><strong>&#x2F;root</strong>：<br>该目录为系统管理员，也称作超级权限者的用户主目录。</p></li><li><p><strong>&#x2F;home</strong>：<br>用户的主目录，在 Linux 中，每个用户都有一个自己的目录，一般该目录名是以用户的账号命名的，如上图中的 alice、bob 和 eve。</p></li><li><p><strong>&#x2F;lost+found</strong>：<br>这个目录一般情况下是空的，当系统非法关机后，这里就存放了一些文件。</p></li><li><p><strong>&#x2F;media</strong>：<br>linux 系统会自动识别一些设备，例如U盘、光驱等等，当识别后，Linux 会把识别的设备挂载到这个目录下。</p></li><li><p><strong>&#x2F;opt</strong>：<br>opt 是 optional(可选) 的缩写，这是给主机额外安装软件所摆放的目录。比如你安装一个ORACLE数据库则就可以放到这个目录下。默认是空的。</p></li><li><p><strong>&#x2F;proc</strong>：<br>proc 是 Processes(进程) 的缩写，&#x2F;proc 是一种伪文件系统（也即虚拟文件系统），存储的是当前内核运行状态的一系列特殊文件，这个目录是一个虚拟的目录，它是系统内存的映射，我们可以通过直接访问这个目录来获取系统信息。<br>这个目录的内容不在硬盘上而是在内存里，我们也可以直接修改里面的某些文件，比如可以通过下面的命令来屏蔽主机的ping命令，使别人无法ping你的机器：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">echo <span class="hljs-number">1</span> &gt; <span class="hljs-regexp">/proc/</span>sys<span class="hljs-regexp">/net/i</span>pv4/icmp_echo_ignore_all<br></code></pre></td></tr></table></figure></li><li><p><strong>&#x2F;sbin</strong>：<br>s 就是 Super User 的意思，是 Superuser Binaries (超级用户的二进制文件) 的缩写，这里存放的是系统管理员使用的系统管理程序。</p></li><li><p><strong>&#x2F;selinux</strong>：<br> 这个目录是 Redhat&#x2F;CentOS 所特有的目录，Selinux 是一个安全机制，类似于 windows 的防火墙，但是这套机制比较复杂，这个目录就是存放selinux相关的文件的。</p></li><li><p><strong>&#x2F;srv</strong>：<br> 该目录存放一些服务启动之后需要提取的数据。</p></li><li><p><strong>&#x2F;sys</strong>：</p><p>这是 Linux2.6 内核的一个很大的变化。该目录下安装了 2.6 内核中新出现的一个文件系统 sysfs 。</p><p>sysfs 文件系统集成了下面3种文件系统的信息：针对进程信息的 proc 文件系统、针对设备的 devfs 文件系统以及针对伪终端的 devpts 文件系统。</p><p>该文件系统是内核设备树的一个直观反映。</p><p>当一个内核对象被创建的时候，对应的文件和目录也在内核对象子系统中被创建。</p></li><li><p><strong>&#x2F;tmp</strong>：<br>tmp 是 temporary(临时) 的缩写这个目录是用来存放一些临时文件的。</p></li><li><p><strong>&#x2F;usr</strong>：<br> usr 是 unix shared resources(共享资源) 的缩写，这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似于 windows 下的 program files 目录。</p></li><li><p><strong>&#x2F;usr&#x2F;bin：</strong><br>系统用户使用的应用程序。</p></li><li><p><strong>&#x2F;usr&#x2F;sbin：</strong><br>超级用户使用的比较高级的管理程序和系统守护程序。</p></li><li><p><strong>&#x2F;usr&#x2F;src：</strong><br>内核源代码默认的放置目录。</p></li><li><p><strong>&#x2F;var</strong>：<br>var 是 variable(变量) 的缩写，这个目录中存放着在不断扩充着的东西，我们习惯将那些经常被修改的目录放在这个目录下。包括各种日志文件。</p></li><li><p><strong>&#x2F;run</strong>：<br>是一个临时文件系统，存储系统启动以来的信息。当系统重启时，这个目录下的文件应该被删掉或清除。如果你的系统上有 &#x2F;var&#x2F;run 目录，应该让它指向 run。</p></li></ul><h2 id="目录规则"><a href="#目录规则" class="headerlink" title="目录规则"></a>目录规则</h2><ul><li>&#x2F;，根目录是最顶级的目录</li><li>路径描述的层次关系同样适用&#x2F;来表示</li></ul>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>4_范型判断</title>
    <link href="/2023/12/31/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80/4_%E8%8C%83%E5%9E%8B%E5%88%A4%E6%96%AD/"/>
    <url>/2023/12/31/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80/4_%E8%8C%83%E5%9E%8B%E5%88%A4%E6%96%AD/</url>
    
    <content type="html"><![CDATA[<h1 id="范型判断"><a href="#范型判断" class="headerlink" title="范型判断"></a>范型判断</h1><h2 id="范型判断-1"><a href="#范型判断-1" class="headerlink" title="范型判断"></a>范型判断</h2><ul><li><p>当关系模式R的所有属性都不能分解为更基本的数据单位时，称R是满足第1范式的，简记为1NF。</p></li><li><p>如果关系模式R满足第1范式，并且R的所有非主属性都完全依赖于R的每一个候选关键属性，称R满足第2范式，简记为2NF。</p></li><li><p>设R是一个满足2NF条件的关系模式，X是R的任意属性集，如果X非传递依赖于R的任意一个候选关键字，称R满足第3范式，简记为3NF。</p><p>关系模式分解既要符合范式，还要遵守以下两个原则：</p><ol><li>无损连接：意思是分解后的多个关系，经过连接运算，能够还原为分解前的关系。</li><li>依赖保持：分解前的关系中的函数依赖，在分解后仍然得以保留。</li></ol></li></ul><p>例：有关系模式R(U,F)，属性集U&#x3D;{A,B,C,D,E}， 函数依赖集合F&#x3D;{C-&gt;A, BC-&gt;D, D-&gt;E}， 请回答如下的问题：<br>(1) R最高属于第几范式? 说明理由；<br>(2) 请分解R为符合第三范式的关系模式集合，并给出每个关系的主码：<br><code>答：</code><br><code>（1）R最高属于1NF。 理由：关系模式R(U,F)的主码是(B,C)，属性之间存在部分函数依赖C-&gt;A，同时存在传递函数依赖BC-&gt;D, D-&gt;E。</code><br><code>（2） 符合第三范式的关系模式集合：R1(C,A)，R2(B,C ,D)，R3(D,E)。</code></p><p>  1NF原子性</p><p>  2NF完全依赖</p><p>  3NF无传递依赖</p><ul><li><p>第一范式 (1NF) 要求：每个表中的每个单元格中只能包含一个值，不能包含多个值或重复的值。表中的每个列都必须有一个唯一的名称。表中的每一行必须具有唯一的标识符，通常是一个主键。</p></li><li><p>第二范式 (2NF) 要求：满足第一范式 (1NF) 的要求。所有非主键列必须完全依赖于整个主键，即非主键列不能部分依赖于主键。这意味着每个非主键列必须与主键相关，而不是仅与主键的一部分相关。</p></li><li><p>第三范式 (3NF) 要求：满足第二范式 (2NF) 的要求。所有非主键列之间不能存在传递依赖关系</p></li></ul><p><img src="/assets/8638e44479f7aa258b9acf3ff6e6684.png" alt="8638e44479f7aa258b9acf3ff6e6684"></p>]]></content>
    
    
    <categories>
      
      <category>数据库理论基础</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>1_数据库系统基础</title>
    <link href="/2023/12/23/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80/1_%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%80/"/>
    <url>/2023/12/23/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80/1_%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="数据库系统基础"><a href="#数据库系统基础" class="headerlink" title="数据库系统基础"></a>数据库系统基础</h1><h2 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h2><p>数据模型，是数据特征的抽象，它从抽象层次上描述了系统的静态特征、动态行为和约束条件，为数据库系统的信息表示与操作提供一个抽象的框架。数据模型所描述的内容有三部分，分别是数据结构、数据操作和数据约束。</p><h3 id="数据模型的分类"><a href="#数据模型的分类" class="headerlink" title="数据模型的分类"></a>数据模型的分类</h3><ul><li><p>概念模型</p><ul><li><p><strong>概念模型用于信息世界的建模，是现实世界到信息世界的第一层抽象</strong></p><p>典型的表示方法：E-R模型</p></li></ul></li><li><p>逻辑模型和物理模型</p><ul><li><p><strong>逻辑模型是将概念模型转化为具体的数据模型的过程</strong></p><p>按照概念结构设计阶段建立的基本E一R图，按选定的管理系统软件支持的数据模型（层次&#x2F;网状&#x2F;关系&#x2F;面向对象)，转换成相应的逻辑模型，这种转换要符合关系数据模型的原则</p></li><li><p><strong>物理模型是对真实数据库的描述。</strong></p></li></ul></li></ul><h2 id="三级模式结构"><a href="#三级模式结构" class="headerlink" title="三级模式结构"></a>三级模式结构</h2><ul><li>外模式</li><li>模式</li><li>内模式</li></ul><p><img src="/assets/image-20231223004301855.png" alt="image-20231223004301855"></p><p>模式：也称为<strong>逻辑模式</strong>（Logic Schema),它是由数据库设计者综合所有的数据需求，从全局的角度对数据库中全部数据的逻辑结构和特征的总体描述，是所有用户的公共数据视图即全局视图。定义模式时不仅要定义数据的逻辑结构（如数据的型、数据类型、取值范围等)，而且要定义与数据有关的安全性、完整性要求，定义这些数据之间的联系。</p><p>外模式：也称为子模式(Subschema),或用户模式（User Schema),是程序员和最终用户能看见和使用的局部数据的逻辑结构和特征的描述，是与某一应用有关的数据的逻辑表示。</p><p>内模式，又叫做存储模式(Storage Schema)或物理模式(Physical Schema),它是数据物理结构和存储方式的底层描述，包括记录的存储方式、索引组织方式、数据是否压缩和加密。</p><h2 id="二级映像功能与数据独立性"><a href="#二级映像功能与数据独立性" class="headerlink" title="二级映像功能与数据独立性"></a>二级映像功能与数据独立性</h2><p>二级映像的主要作用是保证数据库系统中数据的独立性，即数据的物理组织改变与逻辑概念级改变相互独立，使得只要调整映射方式而不必改变用户模式。</p><p>数据独立性分为<strong>数据逻辑独立性</strong>和<strong>数据物理独立性</strong></p><p><img src="/assets/image-20231223005452804.png" alt="image-20231223005452804"></p><h3 id="外模式-模式映像"><a href="#外模式-模式映像" class="headerlink" title="外模式&#x2F;模式映像"></a>外模式&#x2F;模式映像</h3><p>对每一个外模式，有一个外模式&#x2F;模式映像，定义外模式与模式之间的对应关系，映像定义通常包含在各外模式的描述中，从而保证数据的逻辑独立性。<br>当模式改变时，数据库管理员对外模式&#x2F;模式映像作相应改变，使外模式不变。应用程序是依据数据的外模式编写的，应用程序不必修改，保证了数据与程序的逻辑独立性，简称数据的逻辑独立性。</p><h3 id="模式-内模式映像"><a href="#模式-内模式映像" class="headerlink" title="模式&#x2F;内模式映像"></a>模式&#x2F;内模式映像</h3><p>定义了数据全局逻辑结构与存储结构之间的对应关系。数据库中模式&#x2F;内模式映像是唯一的。该映像定义通常包含在模式描述中，从而保证数据的物理独立性。当数据库的存储结构改变了（例如选用了另一种存储结构)，数据库管理员修改模式&#x2F;内模式映像，使模式保持不变。</p>]]></content>
    
    
    <categories>
      
      <category>数据库理论基础</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>3_关系模型及关系运算</title>
    <link href="/2023/12/23/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80/3_%E5%85%B3%E7%B3%BB%E6%A8%A1%E5%9E%8B%E5%8F%8A%E5%85%B3%E7%B3%BB%E8%BF%90%E7%AE%97/"/>
    <url>/2023/12/23/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80/3_%E5%85%B3%E7%B3%BB%E6%A8%A1%E5%9E%8B%E5%8F%8A%E5%85%B3%E7%B3%BB%E8%BF%90%E7%AE%97/</url>
    
    <content type="html"><![CDATA[<h1 id="关系模型及关系运算"><a href="#关系模型及关系运算" class="headerlink" title="关系模型及关系运算"></a>关系模型及关系运算</h1><p>概念模型（实体-联系）只能反映信息世界的抽象表示，还没有反应组织数据和操作数据的方式。逻辑模型完成这项任务。   逻辑模型要体现三个方面的特征：</p><ul><li>数据结构，描述数据用什么结构组织起来。(层次，网状、关系)</li><li>数据操作，描述可以对数据进行哪些操作。（增、删，改，查）</li><li>数据约束，描述数据规则从而保证数据完整。(正确、有效、相容)</li></ul><h2 id="ER图"><a href="#ER图" class="headerlink" title="ER图"></a>ER图</h2><ul><li>两个概念：实体（E）、联系（R）</li><li>联系有1:1，1:n， n:n三种</li><li>E-R模型是一种概念模型表示方法</li></ul><h2 id="关系模型"><a href="#关系模型" class="headerlink" title="关系模型"></a>关系模型</h2><p>设计关系型数据库中，要明确给出数据库需要哪些关系（表），每个关系有哪些属性，把这些称为数据库的关系模式。逻辑模型设计阶段的任务就是设计出整个数据库的关系模式。       </p><p>从概念模型设计的结果——E-R图中，可以导出关系模式，导出方法遵循两点原则：</p><ol><li>ER图中的每个实体，都转换成一个关系模式。</li><li>ER图中的每个联系，根据联系的类型，采取不同的方法加以处理。</li></ol><h3 id="两实体集间1-1联系"><a href="#两实体集间1-1联系" class="headerlink" title="两实体集间1:1联系"></a>两实体集间1:1联系</h3><p>联系不单独转换为关系，有二种转换方案</p><ol><li>将实体集A主键放到实体集B中作为外键。</li><li>将实体集B主键放到实体集A中作为外键。</li></ol><p><img src="/assets/image-20240101145344472.png" alt="image-20240101145344472"></p><h3 id="两实体集之间的1-n联系"><a href="#两实体集之间的1-n联系" class="headerlink" title="两实体集之间的1: n联系"></a>两实体集之间的1: n联系</h3><p>无需转换为一个关系模式。可将“1”方关系的主键纳入“N”方关系中作为外键，同时把联系的属性也一起纳入“N”方关系中。</p><p><img src="/assets/image-20240101145421758.png" alt="image-20240101145421758"></p><h3 id="两实体集之间的m-n联系"><a href="#两实体集之间的m-n联系" class="headerlink" title="两实体集之间的m: n联系"></a>两实体集之间的m: n联系</h3><p>要单独建立一个关系模式，其属性至少包含双方实体的主键，若联系自身有属性，也要一起纳入“联系”关系中。即单独建表</p><p><img src="/assets/image-20240101145446436.png" alt="image-20240101145446436"></p><h3 id="多个实体集间m-n联系"><a href="#多个实体集间m-n联系" class="headerlink" title="多个实体集间m: n联系"></a>多个实体集间m: n联系</h3><p>必须为“联系”单独建一个关系模式。该关系中至少应包含被它联系的实体的“主键”，若“联系”有属性，也要纳入该关系中。</p><p><img src="/assets/image-20240101145527703.png" alt="image-20240101145527703"></p><p><img src="/assets/image-20240101145536258.png" alt="image-20240101145536258"></p><h2 id="关系运算"><a href="#关系运算" class="headerlink" title="关系运算"></a>关系运算</h2><p><img src="/assets/image-20231229002206650.png" alt="image-20231229002206650"></p><p><a href="https://www.cnblogs.com/vvlj/p/12750730.html">https://www.cnblogs.com/vvlj/p/12750730.html</a></p>]]></content>
    
    
    <categories>
      
      <category>数据库理论基础</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>2_模型及其设计</title>
    <link href="/2023/12/23/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80/2_%E6%A6%82%E5%BF%B5%E6%A8%A1%E5%9E%8B%E5%8F%8A%E5%85%B6%E8%AE%BE%E8%AE%A1/"/>
    <url>/2023/12/23/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80/2_%E6%A6%82%E5%BF%B5%E6%A8%A1%E5%9E%8B%E5%8F%8A%E5%85%B6%E8%AE%BE%E8%AE%A1/</url>
    
    <content type="html"><![CDATA[<h1 id="ER模型及其设计"><a href="#ER模型及其设计" class="headerlink" title="ER模型及其设计"></a>ER模型及其设计</h1><h2 id="概念模型"><a href="#概念模型" class="headerlink" title="概念模型"></a>概念模型</h2><p>概念模型是对现实世界的抽象，通过抽象得到信息实体及实体集之间的联系，所以概念模型也称为实体-联系模型。</p><p><strong>概念模型(E-R)给出了一组基本概念，用这组概念可以刻画信息世界</strong></p><ul><li>实体&#x2F;实体集:可以相互区分的事物&#x2F;同类实体的集合</li><li>属性&#x2F;值域：属性是实体(或联系)所具有的特征，值域是属性的取值范围。</li><li>联系:实体集之间的相互关联</li><li>关键字&#x2F;码</li><li>型&#x2F;值</li></ul><p><img src="/assets/image-20231228215317850.png" alt="image-20231228215317850"></p><p><img src="/assets/image-20231228215408563.png" alt="image-20231228215408563"></p><h3 id="联系"><a href="#联系" class="headerlink" title="联系"></a>联系</h3><ul><li>一对一联系(1:1)，例：学校——管理 —— 校长 </li><li>一对多联系(1:n)，例：公司——聘用—— 职员</li><li>多对多联系(n:n)，例：读者——借阅—— 图书</li></ul><p>一对一写成1:1，一对多写成1:n，多对多写成n:n</p><h3 id="候选码-关键字-、主码（主关键字）"><a href="#候选码-关键字-、主码（主关键字）" class="headerlink" title="候选码(关键字)、主码（主关键字）"></a>候选码(关键字)、主码（主关键字）</h3><p>候选码是在一个实体集（或联系集）中可以用于区分不同实体（或联系）的单个属性或若干属性的组合。唯一标识一个实体。</p><p>当一个实体集中有多个候选码，可以选定其中的一个作为主码。</p><p><img src="/assets/image-20231228215533463.png" alt="image-20231228215533463"></p><h3 id="型和值"><a href="#型和值" class="headerlink" title="型和值"></a>型和值</h3><p>型是实体或联系的结构描述，值是一组属性值的组合。</p><p><img src="/assets/image-20231228215616675.png" alt="image-20231228215616675"></p><p>注意：联系跟实体一样也具有属性，这些属性一部分取自于与联系相关的实体，一部分是联系自身的特征。</p><h3 id="实体"><a href="#实体" class="headerlink" title="实体"></a>实体</h3><p><strong>能够用一个个、一件件、一串串等重叠量词形容。</strong></p><p><img src="/assets/image-20231228215849775.png" alt="image-20231228215849775"></p><ul><li><p>公司（公司注册号，地址，法人代表，规模，经营范围） 这个实体可剔除</p></li><li><p>部门（部门名，经理）</p></li><li><p>员工（员工号，姓名，性别，入职日期，部门名）</p></li><li><p>供应商（供应商编号，名称，地址，联系人）</p></li><li><p>客户（客户编号，名称，地址，联系人）</p></li><li><p>商品（商品号，商品名，规格）</p></li></ul><h3 id="联系-1"><a href="#联系-1" class="headerlink" title="联系"></a>联系</h3><ul><li>销售（员工号，商品号，客户编号，日期，数量，单价）</li><li>采购（员工号，商品号，供应商编号，日期，数量，单价</li><li>部门_员工（员工号，部门名）_</li><li>公司_部门（部门名，公司注册号）这个联系可剔除</li></ul><h2 id="概念模型的设计"><a href="#概念模型的设计" class="headerlink" title="概念模型的设计"></a>概念模型的设计</h2><p>E-R模型的几种图示表达方法</p><ul><li><strong>chen方法</strong></li><li>Crow’s Foot方法</li><li>IDEF1X方法（工程化方法）</li></ul><img src="/2023/12/23/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80/2_%E6%A6%82%E5%BF%B5%E6%A8%A1%E5%9E%8B%E5%8F%8A%E5%85%B6%E8%AE%BE%E8%AE%A1/image-20231228220225181.png" alt="image-20231228220225181" style="zoom:33%;"><p><img src="/assets/image-20231228220243187.png" alt="image-20231228220243187"></p><p><img src="/assets/image-20231228220306446.png" alt="image-20231228220306446"></p><p>画E-R图步骤：</p><ul><li><p>第一步：理解需求，寻找实体</p><ul><li>E-R图建模首先要找出问题领域的实体，即找出有哪些类&#x2F;实体</li><li>能够用一个个、一件件、一串串等重叠量词形容</li></ul></li><li><p>第二步：用属性刻画每一个实体</p></li><li><p>第三步：确定每一个实体的关键字&#x2F;码</p></li><li><p>第四步：数据建模的重点是分析实体之间的联系</p></li><li><p>第五步：检查是否覆盖了需求</p></li></ul><p><img src="/assets/image-20231228222242917.png" alt="image-20231228222242917"></p>]]></content>
    
    
    <categories>
      
      <category>数据库理论基础</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>1_File类</title>
    <link href="/2023/12/16/JavaSe%E5%9F%BA%E7%A1%80/File_IO%E6%B5%81/1_File%E7%B1%BB/"/>
    <url>/2023/12/16/JavaSe%E5%9F%BA%E7%A1%80/File_IO%E6%B5%81/1_File%E7%B1%BB/</url>
    
    <content type="html"><![CDATA[<h1 id="File类与IO流"><a href="#File类与IO流" class="headerlink" title="File类与IO流"></a>File类与IO流</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ul><li>File类和相关流都定义在java.io包下</li><li>File对象代表硬盘或网络中可能存在的一个文件或文件目录</li><li>File能新建、删除、重命名文件和目录，但File不能访问文件内容本身（需要使用输入输出流）<ul><li>File对象可以作为参数传递给流的构造器，成为流对象</li></ul></li></ul><h2 id="File类的常用方法"><a href="#File类的常用方法" class="headerlink" title="File类的常用方法"></a>File类的常用方法</h2><h3 id="获取文件和目录基本信息"><a href="#获取文件和目录基本信息" class="headerlink" title="获取文件和目录基本信息"></a>获取文件和目录基本信息</h3><p><img src="/assets/image-20231216203412941.png" alt="image-20231216203412941"></p><h3 id="列出目录的下一级"><a href="#列出目录的下一级" class="headerlink" title="列出目录的下一级"></a><strong>列出目录的下一级</strong></h3><ul><li>public String[] list() ：返回一个 String 数组，表示该 File 目录中的所有子文件或目录。</li><li>public File[] listFiles() ：返回一个 File 数组，表示该 File 目录中的所有的子文件或目录。</li></ul><h3 id="File-类的重命名功能"><a href="#File-类的重命名功能" class="headerlink" title="File 类的重命名功能"></a><strong>File 类的重命名功能</strong></h3><ul><li>public boolean renameTo(File dest):把文件重命名为指定的文件路径。</li></ul><h3 id="判断功能的方法"><a href="#判断功能的方法" class="headerlink" title="判断功能的方法"></a><strong>判断功能的方法</strong></h3><p><img src="/assets/image-20231216203708311.png" alt="image-20231216203708311"></p><h3 id="创建、删除功能"><a href="#创建、删除功能" class="headerlink" title="创建、删除功能"></a><strong>创建、删除功能</strong></h3><p><img src="/assets/image-20231216203921183.png" alt="image-20231216203921183"></p>]]></content>
    
    
    <categories>
      
      <category>JavaSe</category>
      
      <category>File/IO</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>3_layout页面</title>
    <link href="/2023/11/18/%E7%A1%85%E8%B0%B7%E7%94%84%E9%80%89/3_layout/"/>
    <url>/2023/11/18/%E7%A1%85%E8%B0%B7%E7%94%84%E9%80%89/3_layout/</url>
    
    <content type="html"><![CDATA[<h1 id="layout页面布局"><a href="#layout页面布局" class="headerlink" title="layout页面布局"></a>layout页面布局</h1><h2 id="基本布局"><a href="#基本布局" class="headerlink" title="基本布局"></a>基本布局</h2><p><img src="/assets/image-20231118020712559.png" alt="image-20231118020712559"></p><p>@&#x2F;layout&#x2F;index.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br><br>  &lt;div class=&quot;layout_container&quot;&gt;<br>&lt;!--    左侧菜单--&gt;<br>    &lt;div class=&quot;layout_slider&quot;&gt;<br>      123<br>    &lt;/div&gt;<br>&lt;!--    顶部导航栏--&gt;<br>    &lt;div class=&quot;layout_navigationBar&quot;&gt;<br>      123<br>    &lt;/div&gt;<br>&lt;!--    主要内容--&gt;<br>    &lt;div class=&quot;layout_main&quot;&gt;<br>      &lt;p style=&quot;height: 2000px;background-color: #c45656&quot;&gt;weq&lt;/p&gt;<br>    &lt;/div&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script setup lang=&quot;ts&quot;&gt;<br><br>&lt;/script&gt;<br><br>&lt;style scoped lang=&quot;scss&quot;&gt;<br>.layout_container&#123;<br>  width: 100%;<br>  height: 100vh;<br>  background-color: #606266;<br>  .layout_slider&#123;<br>    width: $base-menu-width;<br>    background-color: $base-menu-background-color;<br>    height: 100vh;<br>  &#125;<br>  .layout_navigationBar&#123;<br>    //fixed可以使元素固定在视口的某个位置，不随页面滚动而移动<br>    position: fixed;<br>    top: 0;<br>    left: $base-menu-width;<br>    width: calc(100% - $base-menu-width);<br>    height: $base-navigationBar-height;<br>    background-color: $base-navigationBar-color;<br>  &#125;<br>  .layout_main&#123;<br>    position: absolute;<br>    left: $base-menu-width;<br>    top: $base-navigationBar-height;<br>    width: calc(100% - $base-menu-width);<br>    height: calc(100vh - $base-navigationBar-height);<br>    padding: 20px;<br>    overflow: auto;<br>    background-color: #1b2531;<br>  &#125;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><h2 id="scss项目全局变量"><a href="#scss项目全局变量" class="headerlink" title="scss项目全局变量"></a>scss项目全局变量</h2><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-comment">//项目提供scss全局变量</span><br><span class="hljs-comment">//定义项目主题颜色</span><br><br><span class="hljs-comment">//左侧的菜单的宽度</span><br><span class="hljs-variable">$base-menu-width</span>:<span class="hljs-number">260px</span>;<br><span class="hljs-comment">//左侧菜单的背景颜色</span><br><span class="hljs-variable">$base-menu-background-color</span>: <span class="hljs-number">#92c5f6</span>;<br><span class="hljs-variable">$base-menu-min-width</span>:<span class="hljs-number">50px</span>;<br><span class="hljs-comment">// 顶部导航的高度</span><br><span class="hljs-variable">$base-navigationBar-height</span>:<span class="hljs-number">50px</span>;<br><span class="hljs-comment">// 顶部导航的高度颜色</span><br><span class="hljs-variable">$base-navigationBar-color</span>: <span class="hljs-number">#5bf1e5</span>;<br><span class="hljs-comment">//左侧菜单logo高度设置</span><br><span class="hljs-variable">$base-menu-logo-height</span>:<span class="hljs-number">50px</span>;<br><br><span class="hljs-comment">//左侧菜单logo右侧文字大小</span><br><span class="hljs-variable">$base-logo-title-fontSize</span>:<span class="hljs-number">20px</span>;<br></code></pre></td></tr></table></figure><h2 id="logo小组件"><a href="#logo小组件" class="headerlink" title="logo小组件"></a>logo小组件</h2><h3 id="项目的logo标题等配置-二次开发"><a href="#项目的logo标题等配置-二次开发" class="headerlink" title="项目的logo标题等配置(二次开发)"></a>项目的logo标题等配置(二次开发)</h3><p>@&#x2F;setting.ts</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// 用于项目的logo标题等配置</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;StudyMG&#x27;</span>, <span class="hljs-comment">// 项目的标题</span><br>    <span class="hljs-attr">logo</span>: <span class="hljs-string">&#x27;/logo.png&#x27;</span>, <span class="hljs-comment">// 项目的logo图片</span><br>    <span class="hljs-attr">logoHidden</span>: <span class="hljs-literal">false</span>, <span class="hljs-comment">// 项目logo是否隐藏</span><br>&#125;<br></code></pre></td></tr></table></figure><p>@&#x2F;layout&#x2F;logo&#x2F;index.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;logo&quot; v-if=&quot;!setting.logoHidden&quot;&gt;<br>    &lt;img :src=&quot;setting.logo&quot; alt=&quot;&quot;&gt;<br>    &lt;p&gt;&#123;&#123;setting.title&#125;&#125;&lt;/p&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script setup lang=&quot;ts&quot;&gt;<br>import setting from &quot;@/setting.ts&quot;<br>&lt;/script&gt;<br><br>&lt;style scoped lang=&quot;scss&quot;&gt;<br>.logo &#123;<br>  width: 100%;<br>  height: $base-menu-logo-height;<br>  display: flex;<br>  align-items: center;<br>  padding: 20px;<br>  img &#123;<br>    margin-top: 15px;<br>    height: 55px;<br>    width: 55px;<br>    border-radius: 13px;<br>  &#125;<br>  p &#123;<br>    margin-top: 15px;<br>    color: white;<br>    font-weight: bolder;<br>    margin-left: 10px;<br>    font-size: $base-logo-title-fontSize;<br>  &#125;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><p>@&#x2F;layout&#x2F;index.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vue">  &lt;div class=&quot;layout_container&quot;&gt;<br>&lt;!--    左侧菜单--&gt;<br>    &lt;div class=&quot;layout_slider&quot;&gt;<br>      &lt;Logo&gt;&lt;/Logo&gt;<br>    &lt;/div&gt;<br></code></pre></td></tr></table></figure><p>@&#x2F;style&#x2F;settting.ts</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// 用于项目的logo标题等配置</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;StudyMG&#x27;</span>, <span class="hljs-comment">// 项目的标题</span><br>    <span class="hljs-attr">logo</span>: <span class="hljs-string">&#x27;/logo.png&#x27;</span>, <span class="hljs-comment">// 项目的logo图片</span><br>    <span class="hljs-attr">logoHidden</span>: <span class="hljs-literal">false</span>, <span class="hljs-comment">// 项目logo是否隐藏</span><br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20231118021405607.png" alt="image-20231118021405607"></p><h2 id="左侧菜单滚动防止溢出"><a href="#左侧菜单滚动防止溢出" class="headerlink" title="左侧菜单滚动防止溢出"></a>左侧菜单滚动防止溢出</h2><p>@&#x2F;layout&#x2F;index.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs vue">  &lt;div class=&quot;layout_container&quot;&gt;<br>&lt;!--    左侧菜单--&gt;<br>    &lt;div class=&quot;layout_slider&quot;&gt;<br>      &lt;Logo&gt;&lt;/Logo&gt;<br>&lt;!--      内容展示区域--&gt;<br>      &lt;el-scrollbar class=&quot;scrollbar&quot;&gt;<br>        &lt;p v-for=&quot;item in 2000&quot; :key=&quot;item&quot; class=&quot;scrollbar-demo-item&quot;&gt;&#123;&#123; item &#125;&#125;&lt;/p&gt;<br>&lt;!--        底下出现白条问题--&gt;<br>      &lt;/el-scrollbar&gt;<br>    &lt;/div&gt;<br></code></pre></td></tr></table></figure><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-selector-class">.scrollbar</span>&#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-variable">$base-menu-width</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-built_in">calc</span>(<span class="hljs-number">100vh</span> - <span class="hljs-variable">$base-menu-logo-height</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20231118021628240.png" alt="image-20231118021628240"></p><p><img src="/assets/image-20231118021634748.png" alt="image-20231118021634748"></p><h2 id="静态菜单搭建"><a href="#静态菜单搭建" class="headerlink" title="静态菜单搭建"></a>静态菜单搭建</h2><p>@&#x2F;layout&#x2F;index.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!--      滚动组件--&gt;<br>      &lt;el-scrollbar class=&quot;scrollbar&quot;&gt;<br>&lt;!--        展示菜单--&gt;<br>        &lt;el-menu background-color=&quot;#92c5f6&quot; text-color=&quot;#ffffff&quot;&gt;<br>          &lt;el-menu-item index=&quot;1&quot;&gt;首页&lt;/el-menu-item&gt;<br>          &lt;el-menu-item index=&quot;2&quot;&gt;数据大屏&lt;/el-menu-item&gt;<br>&lt;!--          折叠菜单--&gt;<br>          &lt;el-sub-menu index=&quot;3&quot;&gt;<br>            &lt;template #title&gt;<br>              权限管理<br>            &lt;/template&gt;<br>            &lt;el-menu-item index=&quot;3-1&quot;&gt;用户管理&lt;/el-menu-item&gt;<br>            &lt;el-menu-item index=&quot;3-2&quot;&gt;角色管理&lt;/el-menu-item&gt;<br>            &lt;el-menu-item index=&quot;3-3&quot;&gt;菜单管理&lt;/el-menu-item&gt;<br>          &lt;/el-sub-menu&gt;<br>        &lt;/el-menu&gt;<br>      &lt;/el-scrollbar&gt;<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20231118022300412.png" alt="image-20231118022300412"></p><p><img src="/assets/image-20231118124721036.png" alt="image-20231118124721036"></p><h2 id="根据路由配置生成菜单"><a href="#根据路由配置生成菜单" class="headerlink" title="根据路由配置生成菜单"></a>根据路由配置生成菜单</h2><p>菜单组件需要根据路由动态生成，考虑到可能需要异步不建议直接引出，而是交由存储仓库（pinia）管理，因此先引出到store&#x2F;modules&#x2F;user.ts</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// 引入常量路由</span><br><span class="hljs-keyword">import</span> &#123; constantRoute &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/router/routes.ts&quot;</span>;<br><br><span class="hljs-comment">// 小仓库存储数据的地方</span><br><span class="hljs-attr">state</span>: (): <span class="hljs-function"><span class="hljs-params">UserState</span> =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-attr">token</span>: <span class="hljs-title function_">GET_TOKEN</span>(),<br>    <span class="hljs-attr">menuRoutes</span>: constantRoute, <span class="hljs-comment">//仓库存储生成菜单需要的数组（路由）</span><br>  &#125;;<br>&#125;,<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>硅谷甄选</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>2_登录页面</title>
    <link href="/2023/11/17/%E7%A1%85%E8%B0%B7%E7%94%84%E9%80%89/2_%E7%99%BB%E5%BD%95%E9%A1%B5%E9%9D%A2/"/>
    <url>/2023/11/17/%E7%A1%85%E8%B0%B7%E7%94%84%E9%80%89/2_%E7%99%BB%E5%BD%95%E9%A1%B5%E9%9D%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="登录页面"><a href="#登录页面" class="headerlink" title="登录页面"></a>登录页面</h1><h2 id="静态页面搭建"><a href="#静态页面搭建" class="headerlink" title="静态页面搭建"></a>静态页面搭建</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;login_container&quot;&gt;<br>    &lt;el-row&gt;<br>      &lt;!--      xs指的是当浏览器宽度小于768px时，占位指数--&gt;<br>      &lt;!--      占位--&gt;<br>      &lt;el-col :span=&quot;12&quot; :xs=&quot;0&quot;&gt;&lt;/el-col&gt;<br>      &lt;el-col :span=&quot;12&quot; :xs=&quot;24&quot;&gt;<br>        &lt;el-form class=&quot;login_form&quot;&gt;<br>          &lt;h1&gt;HELLO!&lt;/h1&gt;<br>&lt;!--          此处可以考虑config配置管理系统的全局命名--&gt;<br>          &lt;h2&gt;xxx后台管理系统&lt;/h2&gt;<br>&lt;!--          账号--&gt;<br>          &lt;el-form-item&gt;<br>            &lt;el-input class=&quot;h-60 tp&quot;<br>                      type=&quot;text&quot;<br>                      placeholder=&quot;请输入用户名或电话&quot;<br>                      :prefix-icon=&quot;User&quot;<br>                      size=&quot;large&quot; v-model=&quot;loginForm.username&quot;&gt;&lt;/el-input&gt;<br>          &lt;/el-form-item&gt;<br>&lt;!--          密码--&gt;<br>          &lt;el-form-item&gt;<br>            &lt;el-input class=&quot;h-60 tp&quot;<br>                      type=&quot;password&quot;<br>                      placeholder=&quot;请输入密码&quot;<br>                      :prefix-icon=&quot;Lock&quot;<br>                      size=&quot;large&quot;<br>                      v-model=&quot;loginForm.password&quot;<br>                      show-password&gt;&lt;/el-input&gt;<br>          &lt;/el-form-item&gt;<br>&lt;!--          按钮--&gt;<br>          &lt;el-form-item&gt;<br>            &lt;el-button class=&quot;login_btn&quot; type=&quot;primary&quot; size=&quot;default&quot; @click=&quot;login&quot;&gt;登录&lt;/el-button&gt;<br>          &lt;/el-form-item&gt;<br>        &lt;/el-form&gt;<br>      &lt;/el-col&gt;<br>    &lt;/el-row&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script setup lang=&quot;ts&quot;&gt;<br>import &#123;User,Lock&#125; from &quot;@element-plus/icons-vue&quot;;<br>import &#123;reactive&#125; from &quot;vue&quot;;<br><br>// 收集账号密码的数据,并提供初始值<br>let loginForm = reactive(&#123;username:&#x27;admin&#x27;,password:&#x27;111111&#x27;&#125;);<br>// 登录按钮回调<br>const login = () =&gt; &#123;<br>  // 通知仓库发送登录请求<br><br>  // 成功跳转首页<br><br>  // 失败弹出失败信息<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style scoped lang=&quot;scss&quot;&gt;<br>.login_container &#123;<br>  width: 100%;<br>  height: 100vh;<br>  background: url(&quot;@/assets/images/background.jpg&quot;) no-repeat;<br>  background-size: cover;<br>&#125;<br>.login_form&#123;<br>  position: relative;<br>  width: 80%;<br>  top: 30vh;<br>  //background: url(&quot;@/assets/images/login_form.png&quot;) no-repeat;<br>  background-size: cover;<br>  padding: 30px;<br>  h1&#123;<br>    text-align: center;<br>    color: #1b2531;<br>    font-weight: bolder;<br>    font-size: 60px;<br>    margin-bottom: 20px;<br>    user-select: none;<br>  &#125;<br>  h2&#123;<br>    font-weight: bolder;<br>    color: #1b2531;<br>    text-align: center;<br>    font-size: 40px;<br>    margin-bottom: 40px;<br>    user-select: none;<br>  &#125;<br>  .tp&#123;<br>    /* 使input框的背景变透明 */<br>    background-color: transparent;<br>    /* 使边框也变透明 */<br>    border-color: transparent;<br>  &#125;<br>  .h-60&#123;<br>    height: 50px;<br>    /* 使input框的背景变透明 */<br>    //background-color: transparent;<br>    /* 使边框也变透明 */<br>    //border-color: transparent;<br>  &#125;<br>  .login_btn&#123;<br>    width: 100%;<br>  &#125;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><h2 id="引入pinia"><a href="#引入pinia" class="headerlink" title="引入pinia"></a>引入pinia</h2><p><code>pnpm i pinia</code></p><p>&#x2F;store&#x2F;index.ts</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// 大仓库</span><br><span class="hljs-keyword">import</span> &#123;createPinia&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;pinia&quot;</span>;<br><span class="hljs-keyword">let</span> pinia = <span class="hljs-title function_">createPinia</span>();<br><span class="hljs-comment">// 对外暴露pinia</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> pinia;<br></code></pre></td></tr></table></figure><p>main.ts导入略</p><p>&#x2F;store&#x2F;modules&#x2F;user.ts</p><p>选项式写法</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// 创建用户相关的小仓库</span><br><span class="hljs-keyword">import</span> &#123;defineStore&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;pinia&quot;</span>;<br><span class="hljs-comment">// 创建用户的小仓库</span><br><span class="hljs-keyword">let</span> useUserStore = <span class="hljs-title function_">defineStore</span>(<span class="hljs-string">&#x27;User&#x27;</span>,&#123;<br>    <span class="hljs-comment">// 小仓库存储数据的地方</span><br>    <span class="hljs-attr">state</span>:<span class="hljs-function">()=&gt;</span>&#123;<br>        <span class="hljs-keyword">return</span> &#123;<br><br>        &#125;<br>    &#125;,<br>    <span class="hljs-comment">// 异步逻辑</span><br>    <span class="hljs-attr">actions</span>:&#123;<br><br>    &#125;,<br>    <span class="hljs-attr">getters</span>:&#123;<br><br>    &#125;<br>&#125;)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> useUserStore;<br></code></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// 创建用户相关的小仓库</span><br><span class="hljs-keyword">import</span> &#123; defineStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;pinia&quot;</span>;<br><span class="hljs-comment">// 引入接口</span><br><span class="hljs-keyword">import</span> &#123; reqLogin &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/apis/user&quot;</span>;<br><span class="hljs-comment">// 引入数据格式</span><br><span class="hljs-keyword">import</span> <span class="hljs-keyword">type</span> &#123;loginForm, loginResponseData&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/apis/user/type.ts&quot;</span>;<br><span class="hljs-keyword">import</span> &#123;<span class="hljs-title class_">UserState</span>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/store/modules/type/type.ts&quot;</span>;<br><span class="hljs-keyword">import</span> &#123;<span class="hljs-variable constant_">GET_TOKEN</span>, <span class="hljs-variable constant_">SET_TOKEN</span>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/utils/token.ts&quot;</span>;<br><span class="hljs-comment">// 创建用户的小仓库</span><br><span class="hljs-keyword">let</span> useUserStore = <span class="hljs-title function_">defineStore</span>(<br>  <span class="hljs-string">&quot;User&quot;</span>,<br>  &#123;<br>    <span class="hljs-comment">// 小仓库存储数据的地方</span><br>    <span class="hljs-attr">state</span>: ():<span class="hljs-function"><span class="hljs-params">UserState</span> =&gt;</span> &#123;<br>      <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-attr">token</span>: <span class="hljs-title function_">GET_TOKEN</span>()<br>      &#125;;<br>    &#125;,<br>    <span class="hljs-comment">// 异步逻辑</span><br>    <span class="hljs-attr">actions</span>: &#123;<br>      <span class="hljs-comment">//用户登录方法</span><br>      <span class="hljs-comment">//   返回promise对象，成功失败</span><br>      <span class="hljs-keyword">async</span> <span class="hljs-title function_">userLogin</span>(<span class="hljs-params">data: loginForm</span>) &#123;<br>        <span class="hljs-comment">//登录请求</span><br>        <span class="hljs-keyword">let</span> <span class="hljs-attr">result</span>:loginResponseData= <span class="hljs-keyword">await</span> <span class="hljs-title function_">reqLogin</span>(data);<br>        <span class="hljs-comment">//登录成功获取token,并存储到pinia仓库中和持久化</span><br>        <span class="hljs-comment">//注意：由于pinia/vuex存储数据利用js对象，需要本地存储持久化存储数据</span><br>        <span class="hljs-keyword">if</span> (result.<span class="hljs-property">code</span> === <span class="hljs-number">200</span>) &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">token</span> = (result.<span class="hljs-property">data</span>.<span class="hljs-property">token</span> <span class="hljs-keyword">as</span> <span class="hljs-built_in">string</span>);<br>          <span class="hljs-comment">// localStorage.setItem(&quot;TOKEN&quot;, (result.data.token as string));</span><br>            <span class="hljs-title function_">SET_TOKEN</span>(result.<span class="hljs-property">data</span>.<span class="hljs-property">token</span> <span class="hljs-keyword">as</span> <span class="hljs-built_in">string</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;登陆成功&quot;</span><br>        &#125;<br>        <span class="hljs-comment">//登录失败将错误信息封装到Promise对象中</span><br>        <span class="hljs-keyword">if</span> (result.<span class="hljs-property">code</span> === <span class="hljs-number">201</span>) &#123;<br>          <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(result.<span class="hljs-property">data</span>.<span class="hljs-property">message</span>))<br>        &#125;<br>      &#125;,<br>    &#125;,<br>    <span class="hljs-attr">getters</span>: &#123;&#125;,<br>  &#125;<br>);<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> useUserStore;<br><br></code></pre></td></tr></table></figure><p>views&#x2F;login&#x2F;index.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;login_container&quot;&gt;<br>    &lt;el-row&gt;<br>      &lt;!--      xs指的是当浏览器宽度小于768px时，占位指数--&gt;<br>      &lt;!--      占位--&gt;<br>      &lt;el-col :span=&quot;12&quot; :xs=&quot;0&quot;&gt;&lt;/el-col&gt;<br>      &lt;el-col :span=&quot;12&quot; :xs=&quot;24&quot;&gt;<br>        &lt;el-form class=&quot;login_form&quot;&gt;<br>          &lt;h1&gt;HELLO!&lt;/h1&gt;<br>          &lt;!--          此处可以考虑config配置管理系统的全局命名--&gt;<br>          &lt;h2&gt;xxx后台管理系统&lt;/h2&gt;<br>          &lt;!--          账号--&gt;<br>          &lt;el-form-item&gt;<br>            &lt;el-input<br>              class=&quot;h-60 tp&quot;<br>              type=&quot;text&quot;<br>              placeholder=&quot;请输入用户名或电话&quot;<br>              :prefix-icon=&quot;User&quot;<br>              size=&quot;large&quot;<br>              v-model=&quot;loginForm.username&quot;<br>            &gt;&lt;/el-input&gt;<br>          &lt;/el-form-item&gt;<br>          &lt;!--          密码--&gt;<br>          &lt;el-form-item&gt;<br>            &lt;el-input<br>              class=&quot;h-60 tp&quot;<br>              type=&quot;password&quot;<br>              placeholder=&quot;请输入密码&quot;<br>              :prefix-icon=&quot;Lock&quot;<br>              size=&quot;large&quot;<br>              v-model=&quot;loginForm.password&quot;<br>              show-password<br>            &gt;&lt;/el-input&gt;<br>          &lt;/el-form-item&gt;<br>          &lt;!--          按钮--&gt;<br>          &lt;el-form-item&gt;<br>            &lt;el-button<br>              class=&quot;login_btn&quot;<br>              type=&quot;primary&quot;<br>              size=&quot;default&quot;<br>              @click=&quot;login&quot;<br>              :loading=&quot;loading&quot;<br>              &gt;登录&lt;/el-button<br>            &gt;<br>          &lt;/el-form-item&gt;<br>        &lt;/el-form&gt;<br>      &lt;/el-col&gt;<br>    &lt;/el-row&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script setup lang=&quot;ts&quot;&gt;<br>import &#123; User, Lock &#125; from &quot;@element-plus/icons-vue&quot;;<br>import &#123;reactive, ref&#125; from &quot;vue&quot;;<br>import useUserStore from &quot;@/store/modules/user.ts&quot;;<br>import &#123;useRouter&#125; from &quot;vue-router&quot;;<br>import &#123;ElNotification&#125; from &quot;element-plus&quot;;<br><br>// 收集账号密码的数据,并提供初始值<br>let loginForm = reactive(&#123; username: &quot;admin&quot;, password: &quot;111111&quot; &#125;);<br>// 引入用户相关的小仓库<br>let useStore = useUserStore();<br>// 获取路由<br>let $router = useRouter();<br>// 定义变量控制按钮加载效果<br>let loading = ref(false)<br>// 登录按钮回调<br>const login = async () =&gt; &#123;<br>  // 通知仓库发送登录请求<br>  loading.value = true<br>  try &#123;<br>    await useStore.userLogin(loginForm);<br>    $router.push(&quot;/&quot;);<br>    ElNotification(&#123;<br>      type: &#x27;success&#x27;,<br>      message: &#x27;登录成功&#x27;<br>    &#125;)<br>    loading.value = false<br>  &#125;catch (error)&#123;<br>    loading.value = false<br>    ElNotification(&#123;<br>      type: &#x27;error&#x27;,<br>      message: (error as Error).message<br>    &#125;)<br>  &#125;<br>  // 成功跳转首页<br><br>  // 失败弹出失败信息<br>&#125;;<br>&lt;/script&gt;<br><br>&lt;style scoped lang=&quot;scss&quot;&gt;<br>.login_container &#123;<br>  width: 100%;<br>  height: 100vh;<br>  background: url(&quot;@/assets/images/background.jpg&quot;) no-repeat;<br>  background-size: cover;<br>&#125;<br>.login_form &#123;<br>  position: relative;<br>  width: 80%;<br>  top: 30vh;<br>  //background: url(&quot;@/assets/images/login_form.png&quot;) no-repeat;<br>  background-size: cover;<br>  padding: 30px;<br>  h1 &#123;<br>    text-align: center;<br>    color: #1b2531;<br>    font-weight: bolder;<br>    font-size: 60px;<br>    margin-bottom: 20px;<br>    user-select: none;<br>  &#125;<br>  h2 &#123;<br>    font-weight: bolder;<br>    color: #1b2531;<br>    text-align: center;<br>    font-size: 40px;<br>    margin-bottom: 40px;<br>    user-select: none;<br>  &#125;<br>  .tp &#123;<br>    /* 使input框的背景变透明 */<br>    background-color: transparent;<br>    /* 使边框也变透明 */<br>    border-color: transparent;<br>  &#125;<br>  .h-60 &#123;<br>    height: 50px;<br>    /* 使input框的背景变透明 */<br>    //background-color: transparent;<br>    /* 使边框也变透明 */<br>    //border-color: transparent;<br>  &#125;<br>  .login_btn &#123;<br>    width: 100%;<br>  &#125;<br>&#125;<br>&lt;/style&gt;<br><br></code></pre></td></tr></table></figure><p>apis&#x2F;user&#x2F;&#x2F;type.ts</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// 登录接口需要携带参数ts类型</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">interface</span> loginForm &#123;<br>  <span class="hljs-attr">username</span>: <span class="hljs-built_in">string</span>;<br>  <span class="hljs-attr">password</span>: <span class="hljs-built_in">string</span>;<br>&#125;<br><span class="hljs-keyword">interface</span> dataType &#123;<br>  <span class="hljs-comment">//登录成功返回token</span><br>  token?: <span class="hljs-built_in">string</span>;<br>  <span class="hljs-comment">//登录失败返回message</span><br>  message?: <span class="hljs-built_in">string</span>;<br>&#125;<br><span class="hljs-comment">// 登录接口返回数据类型</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">interface</span> loginResponseData &#123;<br>  <span class="hljs-attr">code</span>: <span class="hljs-built_in">number</span>;<br>  <span class="hljs-attr">data</span>: dataType;<br>&#125;<br><span class="hljs-keyword">interface</span> userInfo &#123;<br>  <span class="hljs-attr">userId</span>: <span class="hljs-built_in">number</span>;<br>  <span class="hljs-attr">avatar</span>: <span class="hljs-built_in">string</span>;<br>  <span class="hljs-attr">username</span>: <span class="hljs-built_in">string</span>;<br>  <span class="hljs-attr">password</span>: <span class="hljs-built_in">string</span>;<br>  <span class="hljs-attr">desc</span>: <span class="hljs-built_in">string</span>;<br>  <span class="hljs-attr">roles</span>: <span class="hljs-built_in">string</span>[];<br>  <span class="hljs-attr">buttons</span>: <span class="hljs-built_in">string</span>[];<br>  <span class="hljs-attr">routes</span>: <span class="hljs-built_in">string</span>[];<br>  <span class="hljs-attr">token</span>: <span class="hljs-built_in">string</span>;<br>&#125;<br><span class="hljs-comment">// 定义服务器返回用户信息相关的数据类型</span><br><span class="hljs-keyword">interface</span> user &#123;<br>  <span class="hljs-attr">checkUser</span>: userInfo;<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">interface</span> userResponseData &#123;<br>  <span class="hljs-attr">code</span>: <span class="hljs-built_in">number</span>;<br>  <span class="hljs-attr">data</span>: user;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="对token存储和获取封装"><a href="#对token存储和获取封装" class="headerlink" title="对token存储和获取封装"></a>对token存储和获取封装</h2><p>utils&#x2F;token.ts</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// 封装本地存储数据和读取数据方法</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">SET_TOKEN</span> = (<span class="hljs-params">token:<span class="hljs-built_in">string</span></span>) =&gt;&#123;<br>    <span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">setItem</span>(<span class="hljs-string">&quot;TOKEN&quot;</span>,token)<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">GET_TOKEN</span> = (<span class="hljs-params"></span>) =&gt;<br>    <span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">&quot;TOKEN&quot;</span>)<br><br></code></pre></td></tr></table></figure><p><img src="/assets/image-20231118015853664.png" alt="image-20231118015853664"></p><h2 id="登录成功后，判断当前时间再友好弹窗"><a href="#登录成功后，判断当前时间再友好弹窗" class="headerlink" title="登录成功后，判断当前时间再友好弹窗"></a>登录成功后，判断当前时间再友好弹窗</h2><p>@&#x2F;utils&#x2F;time.ts</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// 封装一个函数，判断时间 </span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">getTime</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    <span class="hljs-keyword">let</span> time = <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-comment">// 通过内置构造函数</span><br>    <span class="hljs-keyword">let</span> hours = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().<span class="hljs-title function_">getHours</span>()<br>    <span class="hljs-keyword">if</span> (hours &lt;= <span class="hljs-number">11</span>) &#123;<br>        time = <span class="hljs-string">&#x27;早上好&#x27;</span><br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-number">11</span> &lt; hours &amp;&amp; hours &lt;= <span class="hljs-number">12</span>) &#123;<br>        time = <span class="hljs-string">&#x27;中午好&#x27;</span><br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-number">12</span> &lt; hours &amp;&amp; hours &lt;= <span class="hljs-number">17</span>) &#123;<br>        time = <span class="hljs-string">&#x27;下午好&#x27;</span><br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-number">17</span> &lt; hours &amp;&amp; hours &lt;= <span class="hljs-number">23</span>) &#123;<br>        time = <span class="hljs-string">&#x27;晚上好&#x27;</span><br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        time = <span class="hljs-string">&#x27;这么晚还在卷？？？&#x27;</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> time<br>&#125;<br></code></pre></td></tr></table></figure><p>@&#x2F;views&#x2F;login&#x2F;index.vue</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// 登录按钮回调</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">login</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-comment">// 通知仓库发送登录请求</span><br>  loading.<span class="hljs-property">value</span> = <span class="hljs-literal">true</span><br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-keyword">await</span> useStore.<span class="hljs-title function_">userLogin</span>(loginForm);<br>    $router.<span class="hljs-title function_">push</span>(<span class="hljs-string">&quot;/&quot;</span>);<br>    <span class="hljs-title class_">ElNotification</span>(&#123;<br>      <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;success&#x27;</span>,<br>      <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;登录成功&#x27;</span><br>    &#125;)<br>    loading.<span class="hljs-property">value</span> = <span class="hljs-literal">false</span><br>  &#125;<span class="hljs-keyword">catch</span> (error)&#123;<br>    loading.<span class="hljs-property">value</span> = <span class="hljs-literal">false</span><br>    <span class="hljs-title class_">ElNotification</span>(&#123;<br>      <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;error&#x27;</span>,<br>      <span class="hljs-attr">message</span>: (error <span class="hljs-keyword">as</span> <span class="hljs-title class_">Error</span>).<span class="hljs-property">message</span><br>    &#125;)<br>  &#125;<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20231118020230462.png" alt="image-20231118020230462"></p><h2 id="登录表单校验"><a href="#登录表单校验" class="headerlink" title="登录表单校验"></a>登录表单校验</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;el-form class=&quot;login_form&quot;<br>         :model=&quot;loginForm&quot;<br>         :rules=&quot;rules&quot;<br>         ref=&quot;loginRef&quot;&gt;<br>  &lt;h1&gt;HELLO!&lt;/h1&gt;<br>  &lt;!--          此处可以考虑config配置管理系统的全局命名--&gt;<br>  &lt;h2&gt;xxx后台管理系统&lt;/h2&gt;<br>  &lt;!--          账号--&gt;<br>  &lt;el-form-item prop=&quot;username&quot;&gt;<br>    &lt;el-input<br>      class=&quot;h-60 tp&quot;<br>      type=&quot;text&quot;<br>      placeholder=&quot;请输入用户名或电话&quot;<br>      :prefix-icon=&quot;User&quot;<br>      size=&quot;large&quot;<br>      v-model=&quot;loginForm.username&quot;<br>    &gt;&lt;/el-input&gt;<br>  &lt;/el-form-item&gt;<br>  &lt;!--          密码--&gt;<br>  &lt;el-form-item prop=&quot;password&quot;&gt;<br>    &lt;el-input<br>      class=&quot;h-60 tp&quot;<br>      type=&quot;password&quot;<br>      placeholder=&quot;请输入密码&quot;<br>      :prefix-icon=&quot;Lock&quot;<br>      size=&quot;large&quot;<br>      v-model=&quot;loginForm.password&quot;<br>      show-password<br>    &gt;&lt;/el-input&gt;<br>  &lt;/el-form-item&gt;<br>  &lt;!--          按钮--&gt;<br>  &lt;el-form-item&gt;<br>    &lt;el-button<br>      class=&quot;login_btn&quot;<br>      type=&quot;primary&quot;<br>      size=&quot;default&quot;<br>      @click=&quot;login&quot;<br>      :loading=&quot;loading&quot;<br>      &gt;登录&lt;/el-button<br>    &gt;<br>  &lt;/el-form-item&gt;<br>&lt;/el-form&gt;<br></code></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// 收集账号密码的数据,并提供初始值</span><br><span class="hljs-keyword">let</span> loginForm = <span class="hljs-title function_">reactive</span>(&#123; <span class="hljs-attr">username</span>: <span class="hljs-string">&quot;admin&quot;</span>, <span class="hljs-attr">password</span>: <span class="hljs-string">&quot;111111&quot;</span> &#125;);<br><span class="hljs-comment">// 定义表单校验需要的配置对象</span><br><span class="hljs-keyword">const</span> rules = &#123;<br>  <span class="hljs-attr">username</span>: [<br>    <span class="hljs-comment">//规则对象属性：</span><br>    <span class="hljs-comment">//required,代表这个字段务必要校验的</span><br>    <span class="hljs-comment">//min:文本长度至少多少位</span><br>    <span class="hljs-comment">//max:文本长度最多多少位</span><br>    <span class="hljs-comment">//message:错误的提示信息</span><br>    <span class="hljs-comment">//trigger:触发校验表单的时机change-&gt;文本发生变化触发校验，blur:失去焦点的时候触发校验规则</span><br>    &#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&quot;账号不能为空&quot;</span>, <span class="hljs-attr">trigger</span>: <span class="hljs-string">&quot;blur&quot;</span> &#125;,<br>    &#123; <span class="hljs-attr">min</span>: <span class="hljs-number">5</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&quot;账号长度至少五位&quot;</span>, <span class="hljs-attr">trigger</span>: <span class="hljs-string">&quot;change&quot;</span> &#125;,<br>  ],<br>  <span class="hljs-attr">password</span>: [<br>    &#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&quot;密码不能为空&quot;</span>, <span class="hljs-attr">trigger</span>: <span class="hljs-string">&quot;blur&quot;</span> &#125;,<br>    &#123; <span class="hljs-attr">min</span>: <span class="hljs-number">5</span>, <span class="hljs-attr">max</span>: <span class="hljs-number">13</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&quot;密码长度至少五位&quot;</span>, <span class="hljs-attr">trigger</span>: <span class="hljs-string">&quot;change&quot;</span> &#125;,<br>  ],<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>硅谷甄选</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>1_硅谷甄选运营平台</title>
    <link href="/2023/11/13/%E7%A1%85%E8%B0%B7%E7%94%84%E9%80%89/1_%E7%A1%85%E8%B0%B7%E7%94%84%E9%80%89%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/11/13/%E7%A1%85%E8%B0%B7%E7%94%84%E9%80%89/1_%E7%A1%85%E8%B0%B7%E7%94%84%E9%80%89%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="硅谷甄选运营平台"><a href="#硅谷甄选运营平台" class="headerlink" title="硅谷甄选运营平台"></a>硅谷甄选运营平台</h1><p>此次教学课程为硅谷甄选运营平台项目,包含运营平台项目模板从0到1开发，以及数据大屏幕、权限等业务。</p><p>此次教学课程涉及到技术栈包含***:vue3+TypeScript+vue-router+pinia+element-plus+axios+echarts***等技术栈。</p><h2 id="一、vue3组件通信方式"><a href="#一、vue3组件通信方式" class="headerlink" title="一、vue3组件通信方式"></a>一、vue3组件通信方式</h2><p><strong>通信仓库地址:<a href="https://gitee.com/jch1011/vue3_communication.git">https://gitee.com/jch1011/vue3_communication.git</a></strong></p><p>不管是vue2还是vue3,组件通信方式很重要,不管是项目还是面试都是经常用到的知识点。</p><p><strong>比如:vue2组件通信方式</strong></p><p>**props:**可以实现父子组件、子父组件、甚至兄弟组件通信</p><p><strong>自定义事件</strong>:可以实现子父组件通信</p><p><strong>全局事件总线$bus</strong>:可以实现任意组件通信</p><p>**pubsub:**发布订阅模式实现任意组件通信</p><p><strong>vuex</strong>:集中式状态管理容器，实现任意组件通信</p><p><strong>ref</strong>:父组件获取子组件实例VC,获取子组件的响应式数据以及方法</p><p>**slot:**插槽(默认插槽、具名插槽、作用域插槽)实现父子组件通信……..</p><h3 id="1-1props"><a href="#1-1props" class="headerlink" title="1.1props"></a>1.1props</h3><p>props可以实现父子组件通信,在vue3中我们可以通过defineProps获取父组件传递的数据。且在组件内部不需要引入defineProps方法可以直接使用！</p><p><strong>父组件给子组件传递数据</strong></p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir">&lt;<span class="hljs-title class_">Child</span> info=<span class="hljs-string">&quot;我爱祖国&quot;</span> <span class="hljs-symbol">:money=<span class="hljs-string">&quot;money&quot;</span>&gt;&lt;/Child&gt;</span><br></code></pre></td></tr></table></figure><p><strong>子组件获取父组件传递数据:方式1</strong></p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs fsharp"><span class="hljs-keyword">let</span> props <span class="hljs-operator">=</span> defineProps(&#123;<br>  info<span class="hljs-operator">:</span>&#123;<br>   <span class="hljs-keyword">type</span><span class="hljs-operator">:</span>String,<span class="hljs-comment">//接受的数据类型</span><br>   <span class="hljs-keyword">default</span><span class="hljs-operator">:</span>&#x27;默认参数&#x27;,<span class="hljs-comment">//接受默认数据</span><br>  &#125;,<br>  money<span class="hljs-operator">:</span>&#123;<br>   <span class="hljs-keyword">type</span><span class="hljs-operator">:</span>Number,<br>   <span class="hljs-keyword">default</span><span class="hljs-operator">:</span>0<br>&#125;&#125;)<br></code></pre></td></tr></table></figure><p><strong>子组件获取父组件传递数据:方式2</strong></p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">let props</span> = defineProps([<span class="hljs-string">&quot;info&quot;</span>,<span class="hljs-string">&#x27;money&#x27;</span>]);<br></code></pre></td></tr></table></figure><p>子组件获取到props数据就可以在模板中使用了,但是切记props是只读的(只能读取，不能修改)</p><h3 id="1-2自定义事件"><a href="#1-2自定义事件" class="headerlink" title="1.2自定义事件"></a>1.2自定义事件</h3><p>在vue框架中事件分为两种:一种是原生的DOM事件，另外一种自定义事件。</p><p>原生DOM事件可以让用户与网页进行交互，比如click、dbclick、change、mouseenter、mouseleave….</p><p>自定义事件可以实现子组件给父组件传递数据</p><h4 id="1-2-1原生DOM事件"><a href="#1-2-1原生DOM事件" class="headerlink" title="1.2.1原生DOM事件"></a>1.2.1原生DOM事件</h4><p>代码如下:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">pre</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;handler&quot;</span>&gt;</span><br>     我是祖国的老花骨朵<br><span class="hljs-tag">&lt;/<span class="hljs-name">pre</span>&gt;</span><br></code></pre></td></tr></table></figure><p>当前代码级给pre标签绑定原生DOM事件点击事件,默认会给事件回调注入event事件对象。当然点击事件想注入多个参数可以按照下图操作。但是切记注入的事件对象务必叫做$event.</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;div @<span class="hljs-attribute">click</span>=<span class="hljs-string">&quot;handler1(1,2,3,<span class="hljs-variable">$event</span>)&quot;</span>&gt;我要传递多个参数&lt;/div&gt;<br></code></pre></td></tr></table></figure><p>在vue3框架click、dbclick、change(这类原生DOM事件),不管是在标签、自定义标签上(组件标签)都是原生DOM事件。</p><p><strong><!--vue2中却不是这样的,在vue2中组件标签需要通过native修饰符才能变为原生DOM事件--></strong></p><h4 id="1-2-2自定义事件"><a href="#1-2-2自定义事件" class="headerlink" title="1.2.2自定义事件"></a>1.2.2自定义事件</h4><p>自定义事件可以实现子组件给父组件传递数据.在项目中是比较常用的。</p><p>比如在父组件内部给子组件(Event2)绑定一个自定义事件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">Event2</span>  @<span class="hljs-attr">xxx</span>=<span class="hljs-string">&quot;handler3&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Event2</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在Event2子组件内部触发这个自定义事件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>我是子组件2<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;handler&quot;</span>&gt;</span>点击我触发xxx自定义事件<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">let</span> $emit = <span class="hljs-title function_">defineEmits</span>([<span class="hljs-string">&quot;xxx&quot;</span>]);</span><br><span class="language-javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">handler</span> = (<span class="hljs-params"></span>) =&gt; &#123;</span><br><span class="language-javascript">  $emit(<span class="hljs-string">&quot;xxx&quot;</span>, <span class="hljs-string">&quot;法拉利&quot;</span>, <span class="hljs-string">&quot;茅台&quot;</span>);</span><br><span class="language-javascript">&#125;;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><p>我们会发现在script标签内部,使用了defineEmits方法，此方法是vue3提供的方法,不需要引入直接使用。defineEmits方法执行，传递一个数组，数组元素即为将来组件需要触发的自定义事件类型，此方执行会返回一个$emit方法用于触发自定义事件。</p><p>当点击按钮的时候，事件回调内部调用$emit方法去触发自定义事件,第一个参数为触发事件类型，第二个、三个、N个参数即为传递给父组件的数据。</p><p>需要注意的是:代码如下</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;Event2  @<span class="hljs-attribute">xxx</span>=<span class="hljs-string">&quot;handler3&quot;</span> @<span class="hljs-attribute">click</span>=<span class="hljs-string">&quot;handler&quot;</span>&gt;&lt;/Event2&gt;<br></code></pre></td></tr></table></figure><p>正常说组件标签书写@click应该为原生DOM事件,但是如果子组件内部通过defineEmits定义就变为自定义事件了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">let</span> <span class="hljs-variable">$emit</span> = defineEmits([<span class="hljs-string">&quot;xxx&quot;</span>,<span class="hljs-string">&#x27;click&#x27;</span>]);<br></code></pre></td></tr></table></figure><h3 id="1-3全局事件总线"><a href="#1-3全局事件总线" class="headerlink" title="1.3全局事件总线"></a>1.3全局事件总线</h3><p>全局事件总线可以实现任意组件通信，在vue2中可以根据VM与VC关系推出全局事件总线。</p><p>但是在vue3中没有Vue构造函数，也就没有Vue.prototype.以及组合式API写法没有this，</p><p>那么在Vue3想实现全局事件的总线功能就有点不现实啦，如果想在Vue3中使用全局事件总线功能</p><p>可以使用插件mitt实现。</p><p><strong>mitt:官网地址:<a href="https://www.npmjs.com/package/mitt">https://www.npmjs.com/package/mitt</a></strong></p><h3 id="1-4v-model"><a href="#1-4v-model" class="headerlink" title="1.4v-model"></a>1.4v-model</h3><p>v-model指令可是收集表单数据(数据双向绑定)，除此之外它也可以实现父子组件数据同步。</p><p>而v-model实指利用props[modelValue]与自定义事件[update:modelValue]实现的。</p><p>下方代码:相当于给组件Child传递一个props(modelValue)与绑定一个自定义事件update:modelValue</p><p>实现父子组件数据同步</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">Child</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;msg&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Child</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在vue3中一个组件可以通过使用多个v-model,让父子组件多个数据同步,下方代码相当于给组件Child传递两个props分别是pageNo与pageSize，以及绑定两个自定义事件update:pageNo与update:pageSize实现父子数据同步</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">&lt;Child v-<span class="hljs-keyword">mode</span><span class="hljs-variable">l:pageNo</span>=<span class="hljs-string">&quot;msg&quot;</span> v-<span class="hljs-keyword">mode</span><span class="hljs-variable">l:pageSize</span>=<span class="hljs-string">&quot;msg1&quot;</span>&gt;&lt;/Child&gt;<br></code></pre></td></tr></table></figure><h3 id="1-5useAttrs"><a href="#1-5useAttrs" class="headerlink" title="1.5useAttrs"></a>1.5useAttrs</h3><p>在Vue3中可以利用useAttrs方法获取组件的属性与事件(包含:原生DOM事件或者自定义事件),次函数功能类似于Vue2框架中$attrs属性与$listeners方法。</p><p>比如:在父组件内部使用一个子组件my-button</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;my-button <span class="hljs-attribute">type</span>=<span class="hljs-string">&quot;success&quot;</span> <span class="hljs-attribute">size</span>=<span class="hljs-string">&quot;small&quot;</span> <span class="hljs-attribute">title</span>=<span class="hljs-string">&#x27;标题&#x27;</span> @<span class="hljs-attribute">click</span>=<span class="hljs-string">&quot;handler&quot;</span>&gt;&lt;/my-button&gt;<br></code></pre></td></tr></table></figure><p>子组件内部可以通过useAttrs方法获取组件属性与事件.因此你也发现了，它类似于props,可以接受父组件传递过来的属性与属性值。需要注意如果defineProps接受了某一个属性，useAttrs方法返回的对象身上就没有相应属性与属性值。</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> </span></span><span class="hljs-template-variable">&#123;useAttrs&#125;</span><span class="language-xml"><span class="language-javascript"> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">let</span> $attrs = <span class="hljs-title function_">useAttrs</span>();</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="1-6ref与-parent"><a href="#1-6ref与-parent" class="headerlink" title="1.6ref与$parent"></a>1.6ref与$parent</h3><p>ref,提及到ref可能会想到它可以获取元素的DOM或者获取子组件实例的VC。既然可以在父组件内部通过ref获取子组件实例VC，那么子组件内部的方法与响应式数据父组件可以使用的。</p><p>比如:在父组件挂载完毕获取组件实例</p><p>父组件内部代码:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>ref与$parent<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">Son</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;son&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Son</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Son</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./Son.vue&quot;</span>;</span><br><span class="language-javascript"><span class="hljs-keyword">import</span> &#123; onMounted, ref &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;</span><br><span class="language-javascript"><span class="hljs-keyword">const</span> son = <span class="hljs-title function_">ref</span>();</span><br><span class="language-javascript"><span class="hljs-title function_">onMounted</span>(<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="language-javascript">  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(son.<span class="hljs-property">value</span>);</span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>但是需要注意，如果想让父组件获取子组件的数据或者方法需要通过defineExpose对外暴露,因为vue3中组件内部的数据对外“关闭的”，外部不能访问</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> </span></span><span class="hljs-template-variable">&#123; ref &#125;</span><span class="language-xml"><span class="language-javascript"> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">//数据</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">let</span> money = <span class="hljs-title function_">ref</span>(<span class="hljs-number">1000</span>);</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">//方法</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> <span class="hljs-title function_">handler</span> = (<span class="hljs-params"></span>)=&gt;</span></span><span class="hljs-template-variable">&#123;</span><br><span class="hljs-template-variable">&#125;</span><span class="language-xml"></span><br><span class="language-xml">defineExpose(</span><span class="hljs-template-variable">&#123;</span><br><span class="hljs-template-variable">  money,</span><br><span class="hljs-template-variable">   handler</span><br><span class="hljs-template-variable">&#125;</span><span class="language-xml">)</span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>$parent可以获取某一个组件的父组件实例VC,因此可以使用父组件内部的数据与方法。必须子组件内部拥有一个按钮点击时候获取父组件实例，当然父组件的数据与方法需要通过defineExpose方法对外暴露</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;button @<span class="hljs-attribute">click</span>=<span class="hljs-string">&quot;handler(<span class="hljs-variable">$parent</span>)&quot;</span>&gt;点击我获取父组件实例&lt;/button&gt;<br></code></pre></td></tr></table></figure><h3 id="1-7provide与inject"><a href="#1-7provide与inject" class="headerlink" title="1.7provide与inject"></a>1.7provide与inject</h3><p><strong>provide[提供]</strong></p><p><strong>inject[注入]</strong></p><p>vue3提供两个方法provide与inject,可以实现隔辈组件传递参数</p><p>组件组件提供数据:</p><p>provide方法用于提供数据，此方法执需要传递两个参数,分别提供数据的key与提供数据value</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> </span></span><span class="hljs-template-variable">&#123;provide&#125;</span><span class="language-xml"><span class="language-javascript"> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-title function_">provide</span>(<span class="hljs-string">&#x27;token&#x27;</span>,<span class="hljs-string">&#x27;admin_token&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>后代组件可以通过inject方法获取数据,通过key获取存储的数值</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> </span></span><span class="hljs-template-variable">&#123;inject&#125;</span><span class="language-xml"><span class="language-javascript"> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">let</span> token = <span class="hljs-title function_">inject</span>(<span class="hljs-string">&#x27;token&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="1-8pinia"><a href="#1-8pinia" class="headerlink" title="1.8pinia"></a>1.8pinia</h3><p><strong>pinia官网:<a href="https://pinia.web3doc.top/">https://pinia.web3doc.top/</a></strong></p><p>pinia也是集中式管理状态容器,类似于vuex。但是核心概念没有mutation、modules,使用方式参照官网</p><h3 id="1-9slot"><a href="#1-9slot" class="headerlink" title="1.9slot"></a>1.9slot</h3><p>插槽：默认插槽、具名插槽、作用域插槽可以实现父子组件通信.</p><p><strong>默认插槽:</strong></p><p>在子组件内部的模板中书写slot全局组件标签</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">slot</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;ts&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在父组件内部提供结构：Todo即为子组件,在父组件内部使用的时候，在双标签内部书写结构传递给子组件</p><p>注意开发项目的时候默认插槽一般只有一个</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">Todo</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>我是默认插槽填充的结构<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">Todo</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>具名插槽：</strong></p><p>顾名思义，此插槽带有名字在组件内部留多个指定名字的插槽。</p><p>下面是一个子组件内部,模板中留两个插槽</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>todo<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;a&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;b&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;ts&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><p>父组件内部向指定的具名插槽传递结构。需要注意v-slot：可以替换为#</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>slot<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">Todo</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot:a</span>&gt;</span>  //可以用#a替换<br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>填入组件A部分的结构<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot:b</span>&gt;</span>//可以用#b替换<br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>填入组件B部分的结构<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">Todo</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Todo</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./Todo.vue&quot;</span>;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>作用域插槽</strong></p><p>作用域插槽：可以理解为，子组件数据由父组件提供，但是子组件内部决定不了自身结构与外观(样式)</p><p>子组件Todo代码如下:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>todo<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>     <span class="hljs-comment">&lt;!--组件内部遍历数组--&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item,index) in todos&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;item.id&quot;</span>&gt;</span><br>         <span class="hljs-comment">&lt;!--作用域插槽将数据回传给父组件--&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">:</span>$<span class="hljs-attr">row</span>=<span class="hljs-string">&quot;item&quot;</span> <span class="hljs-attr">:</span>$<span class="hljs-attr">index</span>=<span class="hljs-string">&quot;index&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-title function_">defineProps</span>([<span class="hljs-string">&#x27;todos&#x27;</span>]);<span class="hljs-comment">//接受父组件传递过来的数据</span></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><p>父组件内部代码如下:</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>slot<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">Todo</span> <span class="hljs-attr">:todos</span>=<span class="hljs-string">&quot;todos&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot</span>=<span class="hljs-string">&quot;&#123;$row,$index&#125;&quot;</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-comment">&lt;!--父组件决定子组件的结构与外观--&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">:style</span>=<span class="hljs-string">&quot;&#123;color:$row.done?&#x27;green&#x27;:&#x27;red&#x27;&#125;&quot;</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">$row.title</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">Todo</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Todo</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./Todo.vue&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> &#123; ref &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">//父组件内部数据</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">let</span> todos = <span class="hljs-title function_">ref</span>([</span></span><br><span class="language-javascript"><span class="language-xml">  &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;吃饭&quot;</span>, <span class="hljs-attr">done</span>: <span class="hljs-literal">true</span> &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">  &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;睡觉&quot;</span>, <span class="hljs-attr">done</span>: <span class="hljs-literal">false</span> &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">  &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;打豆豆&quot;</span>, <span class="hljs-attr">done</span>: <span class="hljs-literal">true</span> &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">]);</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h2 id="二、搭建后台管理系统模板"><a href="#二、搭建后台管理系统模板" class="headerlink" title="二、搭建后台管理系统模板"></a>二、搭建后台管理系统模板</h2><h3 id="2-1项目初始化"><a href="#2-1项目初始化" class="headerlink" title="2.1项目初始化"></a>2.1项目初始化</h3><p>今天来带大家从0开始搭建一个vue3版本的后台管理系统。一个项目要有统一的规范，需要使用eslint+stylelint+prettier来对我们的代码质量做检测和修复，需要使用husky来做commit拦截，需要使用commitlint来统一提交规范，需要使用preinstall来统一包管理工具。</p><p>下面我们就用这一套规范来初始化我们的项目，集成一个规范的模版。</p><h4 id="2-1-1环境准备"><a href="#2-1-1环境准备" class="headerlink" title="2.1.1环境准备"></a>2.1.1环境准备</h4><ul><li>node v16.14.2 </li><li>pnpm 8.0.0</li></ul><h4 id="2-1-2初始化项目"><a href="#2-1-2初始化项目" class="headerlink" title="2.1.2初始化项目"></a>2.1.2初始化项目</h4><p>本项目使用vite进行构建，vite官方中文文档参考：<a href="https://cn.vitejs.dev/guide/">cn.vitejs.dev&#x2F;guide&#x2F;</a></p><p><strong>pnpm:performant npm ，意味“高性能的 npm”。<a href="https://so.csdn.net/so/search?q=pnpm&spm=1001.2101.3001.7020">pnpm</a>由npm&#x2F;yarn衍生而来，解决了npm&#x2F;yarn内部潜在的bug，极大的优化了性能，扩展了使用场景。被誉为“最先进的包管理工具”</strong></p><p>pnpm安装指令</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span> i -g pnpm<br></code></pre></td></tr></table></figure><p>项目初始化命令:</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">pnpm create vite</span><br></code></pre></td></tr></table></figure><p>进入到项目根目录pnpm install安装全部依赖.安装完依赖运行程序:pnpm run dev</p><p>运行完毕项目跑在<a href="http://127.0.0.1:5173/,%E5%8F%AF%E4%BB%A5%E8%AE%BF%E9%97%AE%E4%BD%A0%E5%BE%97%E9%A1%B9%E7%9B%AE%E5%95%A6">http://127.0.0.1:5173/,可以访问你得项目啦</a></p><h3 id="2-2项目配置"><a href="#2-2项目配置" class="headerlink" title="2.2项目配置"></a>2.2项目配置</h3><h4 id="一、eslint配置"><a href="#一、eslint配置" class="headerlink" title="一、eslint配置"></a>一、eslint配置</h4><p><strong>eslint中文官网:<a href="http://eslint.cn/">http://eslint.cn/</a></strong></p><p>ESLint最初是由<a href="http://nczonline.net/">Nicholas C. Zakas</a> 于2013年6月创建的开源项目。它的目标是提供一个插件化的<strong>javascript代码检测工具</strong></p><p>首先安装eslint</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">pnpm <span class="hljs-selector-tag">i</span> eslint -D<br></code></pre></td></tr></table></figure><p>生成配置文件:.eslint.cjs</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npx eslint <span class="hljs-comment">--init</span><br></code></pre></td></tr></table></figure><p><strong>.eslint.cjs配置文件</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs awk">module.exports = &#123;<br>   <span class="hljs-regexp">//</span>运行环境<br>    <span class="hljs-string">&quot;env&quot;</span>: &#123; <br>        <span class="hljs-string">&quot;browser&quot;</span>: true,<span class="hljs-regexp">//</span>浏览器端<br>        <span class="hljs-string">&quot;es2021&quot;</span>: true,<span class="hljs-regexp">//</span>es2021<br>    &#125;,<br>    <span class="hljs-regexp">//</span>规则继承<br>    <span class="hljs-string">&quot;extends&quot;</span>: [ <br>       <span class="hljs-regexp">//</span>全部规则默认是关闭的,这个配置项开启推荐规则,推荐规则参照文档<br>       <span class="hljs-regexp">//</span>比如:函数不能重名、对象不能出现重复key<br>        <span class="hljs-string">&quot;eslint:recommended&quot;</span>,<br>        <span class="hljs-regexp">//</span>vue3语法规则<br>        <span class="hljs-string">&quot;plugin:vue/vue3-essential&quot;</span>,<br>        <span class="hljs-regexp">//</span>ts语法规则<br>        <span class="hljs-string">&quot;plugin:@typescript-eslint/recommended&quot;</span><br>    ],<br>    <span class="hljs-regexp">//</span>要为特定类型的文件指定处理器<br>    <span class="hljs-string">&quot;overrides&quot;</span>: [<br>    ],<br>    <span class="hljs-regexp">//</span>指定解析器:解析器<br>    <span class="hljs-regexp">//</span>Esprima 默认解析器<br>    <span class="hljs-regexp">//</span>Babel-ESLint babel解析器<br>    <span class="hljs-regexp">//</span>@typescript-eslint/parser ts解析器<br>    <span class="hljs-string">&quot;parser&quot;</span>: <span class="hljs-string">&quot;@typescript-eslint/parser&quot;</span>,<br>    <span class="hljs-regexp">//</span>指定解析器选项<br>    <span class="hljs-string">&quot;parserOptions&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;ecmaVersion&quot;</span>: <span class="hljs-string">&quot;latest&quot;</span>,<span class="hljs-regexp">//</span>校验ECMA最新版本<br>        <span class="hljs-string">&quot;sourceType&quot;</span>: <span class="hljs-string">&quot;module&quot;</span><span class="hljs-regexp">//</span>设置为<span class="hljs-string">&quot;script&quot;</span>（默认），或者<span class="hljs-string">&quot;module&quot;</span>代码在ECMAScript模块中<br>    &#125;,<br>    <span class="hljs-regexp">//</span>ESLint支持使用第三方插件。在使用插件之前，您必须使用npm安装它<br>    <span class="hljs-regexp">//</span>该eslint-plugin-前缀可以从插件名称被省略<br>    <span class="hljs-string">&quot;plugins&quot;</span>: [<br>        <span class="hljs-string">&quot;vue&quot;</span>,<br>        <span class="hljs-string">&quot;@typescript-eslint&quot;</span><br>    ],<br>    <span class="hljs-regexp">//</span>eslint规则<br>    <span class="hljs-string">&quot;rules&quot;</span>: &#123;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="1-1vue3环境代码校验插件"><a href="#1-1vue3环境代码校验插件" class="headerlink" title="1.1vue3环境代码校验插件"></a>1.1vue3环境代码校验插件</h5><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs clean"># 让所有与prettier规则存在冲突的Eslint rules失效，并使用prettier进行代码检查<br><span class="hljs-string">&quot;eslint-config-prettier&quot;</span>: <span class="hljs-string">&quot;^8.6.0&quot;</span>,<br><span class="hljs-string">&quot;eslint-plugin-import&quot;</span>: <span class="hljs-string">&quot;^2.27.5&quot;</span>,<br><span class="hljs-string">&quot;eslint-plugin-node&quot;</span>: <span class="hljs-string">&quot;^11.1.0&quot;</span>,<br># 运行更漂亮的Eslint，使prettier规则优先级更高，Eslint优先级低<br><span class="hljs-string">&quot;eslint-plugin-prettier&quot;</span>: <span class="hljs-string">&quot;^4.2.1&quot;</span>,<br># vue.js的Eslint插件（查找vue语法错误，发现错误指令，查找违规风格指南<br><span class="hljs-string">&quot;eslint-plugin-vue&quot;</span>: <span class="hljs-string">&quot;^9.9.0&quot;</span>,<br># 该解析器允许使用Eslint校验所有babel <span class="hljs-keyword">code</span><br><span class="hljs-string">&quot;@babel/eslint-parser&quot;</span>: <span class="hljs-string">&quot;^7.19.1&quot;</span>,<br></code></pre></td></tr></table></figure><p>安装指令</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">pnpm install -D eslint-plugin-import eslint-plugin-vue eslint-plugin-<span class="hljs-keyword">node</span> <span class="hljs-title">eslint-plugin-prettier</span> eslint-config-prettier eslint-plugin-<span class="hljs-keyword">node</span> <span class="hljs-title">@babel</span>/eslint-parser<br></code></pre></td></tr></table></figure><h5 id="1-2修改-eslintrc-cjs配置文件"><a href="#1-2修改-eslintrc-cjs配置文件" class="headerlink" title="1.2修改.eslintrc.cjs配置文件"></a>1.2修改.eslintrc.cjs配置文件</h5><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> @see https:<span class="hljs-regexp">//</span>eslint.bootcss.com<span class="hljs-regexp">/docs/</span>rules/<br><br>module.exports = &#123;<br>  env: &#123;<br>    browser: true,<br>    es2021: true,<br>    node: true,<br>    jest: true,<br>  &#125;,<br>  <span class="hljs-regexp">/* 指定如何解析语法 */</span><br>  parser: <span class="hljs-string">&#x27;vue-eslint-parser&#x27;</span>,<br>  <span class="hljs-regexp">/** 优先级低于 parse 的语法解析配置 */</span><br>  parserOptions: &#123;<br>    ecmaVersion: <span class="hljs-string">&#x27;latest&#x27;</span>,<br>    sourceType: <span class="hljs-string">&#x27;module&#x27;</span>,<br>    parser: <span class="hljs-string">&#x27;@typescript-eslint/parser&#x27;</span>,<br>    jsxPragma: <span class="hljs-string">&#x27;React&#x27;</span>,<br>    ecmaFeatures: &#123;<br>      jsx: true,<br>    &#125;,<br>  &#125;,<br>  <span class="hljs-regexp">/* 继承已有的规则 */</span><br>  extends: [<br>    <span class="hljs-string">&#x27;eslint:recommended&#x27;</span>,<br>    <span class="hljs-string">&#x27;plugin:vue/vue3-essential&#x27;</span>,<br>    <span class="hljs-string">&#x27;plugin:@typescript-eslint/recommended&#x27;</span>,<br>    <span class="hljs-string">&#x27;plugin:prettier/recommended&#x27;</span>,<br>  ],<br>  plugins: [<span class="hljs-string">&#x27;vue&#x27;</span>, <span class="hljs-string">&#x27;@typescript-eslint&#x27;</span>],<br>  /*<br>   * <span class="hljs-string">&quot;off&quot;</span> 或 <span class="hljs-number">0</span>    ==&gt;  关闭规则<br>   * <span class="hljs-string">&quot;warn&quot;</span> 或 <span class="hljs-number">1</span>   ==&gt;  打开的规则作为警告（不影响代码执行）<br>   * <span class="hljs-string">&quot;error&quot;</span> 或 <span class="hljs-number">2</span>  ==&gt;  规则作为一个错误（代码不能执行，界面报错）<br>   */<br>  rules: &#123;<br>    <span class="hljs-regexp">//</span> eslint（https:<span class="hljs-regexp">//</span>eslint.bootcss.com<span class="hljs-regexp">/docs/</span>rules/）<br>    <span class="hljs-string">&#x27;no-var&#x27;</span>: <span class="hljs-string">&#x27;error&#x27;</span>, <span class="hljs-regexp">//</span> 要求使用 let 或 const 而不是 var<br>    <span class="hljs-string">&#x27;no-multiple-empty-lines&#x27;</span>: [<span class="hljs-string">&#x27;warn&#x27;</span>, &#123; max: <span class="hljs-number">1</span> &#125;], <span class="hljs-regexp">//</span> 不允许多个空行<br>    <span class="hljs-string">&#x27;no-console&#x27;</span>: process.env.NODE_ENV === <span class="hljs-string">&#x27;production&#x27;</span> ? <span class="hljs-string">&#x27;error&#x27;</span> : <span class="hljs-string">&#x27;off&#x27;</span>,<br>    <span class="hljs-string">&#x27;no-debugger&#x27;</span>: process.env.NODE_ENV === <span class="hljs-string">&#x27;production&#x27;</span> ? <span class="hljs-string">&#x27;error&#x27;</span> : <span class="hljs-string">&#x27;off&#x27;</span>,<br>    <span class="hljs-string">&#x27;no-unexpected-multiline&#x27;</span>: <span class="hljs-string">&#x27;error&#x27;</span>, <span class="hljs-regexp">//</span> 禁止空余的多行<br>    <span class="hljs-string">&#x27;no-useless-escape&#x27;</span>: <span class="hljs-string">&#x27;off&#x27;</span>, <span class="hljs-regexp">//</span> 禁止不必要的转义字符<br><br>    <span class="hljs-regexp">//</span> typeScript (https:<span class="hljs-regexp">//</span>typescript-eslint.io/rules)<br>    <span class="hljs-string">&#x27;@typescript-eslint/no-unused-vars&#x27;</span>: <span class="hljs-string">&#x27;error&#x27;</span>, <span class="hljs-regexp">//</span> 禁止定义未使用的变量<br>    <span class="hljs-string">&#x27;@typescript-eslint/prefer-ts-expect-error&#x27;</span>: <span class="hljs-string">&#x27;error&#x27;</span>, <span class="hljs-regexp">//</span> 禁止使用 @ts-ignore<br>    <span class="hljs-string">&#x27;@typescript-eslint/no-explicit-any&#x27;</span>: <span class="hljs-string">&#x27;off&#x27;</span>, <span class="hljs-regexp">//</span> 禁止使用 any 类型<br>    <span class="hljs-string">&#x27;@typescript-eslint/no-non-null-assertion&#x27;</span>: <span class="hljs-string">&#x27;off&#x27;</span>,<br>    <span class="hljs-string">&#x27;@typescript-eslint/no-namespace&#x27;</span>: <span class="hljs-string">&#x27;off&#x27;</span>, <span class="hljs-regexp">//</span> 禁止使用自定义 TypeScript 模块和命名空间。<br>    <span class="hljs-string">&#x27;@typescript-eslint/semi&#x27;</span>: <span class="hljs-string">&#x27;off&#x27;</span>,<br><br>    <span class="hljs-regexp">//</span> eslint-plugin-vue (https:<span class="hljs-regexp">//</span>eslint.vuejs.org<span class="hljs-regexp">/rules/</span>)<br>    <span class="hljs-string">&#x27;vue/multi-word-component-names&#x27;</span>: <span class="hljs-string">&#x27;off&#x27;</span>, <span class="hljs-regexp">//</span> 要求组件名称始终为 “-” 链接的单词<br>    <span class="hljs-string">&#x27;vue/script-setup-uses-vars&#x27;</span>: <span class="hljs-string">&#x27;error&#x27;</span>, <span class="hljs-regexp">//</span> 防止&lt;script setup&gt;使用的变量&lt;template&gt;被标记为未使用<br>    <span class="hljs-string">&#x27;vue/no-mutating-props&#x27;</span>: <span class="hljs-string">&#x27;off&#x27;</span>, <span class="hljs-regexp">//</span> 不允许组件 prop的改变<br>    <span class="hljs-string">&#x27;vue/attribute-hyphenation&#x27;</span>: <span class="hljs-string">&#x27;off&#x27;</span>, <span class="hljs-regexp">//</span> 对模板中的自定义组件强制执行属性命名样式<br>  &#125;,<br>&#125;<br><br></code></pre></td></tr></table></figure><h5 id="1-3-eslintignore忽略文件"><a href="#1-3-eslintignore忽略文件" class="headerlink" title="1.3.eslintignore忽略文件"></a>1.3.eslintignore忽略文件</h5><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">dist</span><br><span class="hljs-attribute">node_modules</span><br></code></pre></td></tr></table></figure><h5 id="1-4运行脚本"><a href="#1-4运行脚本" class="headerlink" title="1.4运行脚本"></a>1.4运行脚本</h5><p>package.json新增两个运行脚本</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;scripts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;lint&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;eslint src&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;fix&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;eslint src --fix&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h4 id="二、配置prettier"><a href="#二、配置prettier" class="headerlink" title="二、配置prettier"></a>二、配置<strong>prettier</strong></h4><p>有了eslint，为什么还要有prettier？eslint针对的是javascript，他是一个检测工具，包含js语法以及少部分格式问题，在eslint看来，语法对了就能保证代码正常运行，格式问题属于其次；</p><p>而prettier属于格式化工具，它看不惯格式不统一，所以它就把eslint没干好的事接着干，另外，prettier支持</p><p>包含js在内的多种语言。</p><p>总结起来，<strong>eslint和prettier这俩兄弟一个保证js代码质量，一个保证代码美观。</strong></p><h5 id="2-1安装依赖包"><a href="#2-1安装依赖包" class="headerlink" title="2.1安装依赖包"></a>2.1安装依赖包</h5><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">pnpm <span class="hljs-keyword">install </span>-D eslint-plugin-prettier prettier eslint-<span class="hljs-built_in">config</span>-prettier<br></code></pre></td></tr></table></figure><h5 id="2-2-prettierrc-json添加规则"><a href="#2-2-prettierrc-json添加规则" class="headerlink" title="2.2.prettierrc.json添加规则"></a>2.2.prettierrc.json添加规则</h5><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;singleQuote&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;semi&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;bracketSpacing&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;htmlWhitespaceSensitivity&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ignore&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;endOfLine&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;auto&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;trailingComma&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;all&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;tabWidth&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h5 id="2-3-prettierignore忽略文件"><a href="#2-3-prettierignore忽略文件" class="headerlink" title="2.3.prettierignore忽略文件"></a>2.3.prettierignore忽略文件</h5><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-regexp">/dist/</span>*<br><span class="hljs-regexp">/html/</span>*<br>.local<br><span class="hljs-regexp">/node_modules/</span>**<br>**<span class="hljs-comment">/*.svg</span><br><span class="hljs-comment">**/</span>*.sh<br><span class="hljs-regexp">/public/</span>*<br></code></pre></td></tr></table></figure><p><strong>通过pnpm run lint去检测语法，如果出现不规范格式,通过pnpm run fix 修改</strong></p><h4 id="三、配置stylelint"><a href="#三、配置stylelint" class="headerlink" title="三、配置stylelint"></a>三、配置stylelint</h4><p><a href="https://stylelint.io/">stylelint</a>为css的lint工具。可格式化css代码，检查css语法错误与不合理的写法，指定css书写顺序等。</p><p>我们的项目中使用scss作为预处理器，安装以下依赖：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">pnpm <span class="hljs-keyword">add </span>sass sass-loader stylelint postcss postcss-<span class="hljs-keyword">scss </span>postcss-html stylelint-<span class="hljs-built_in">config</span>-prettier stylelint-<span class="hljs-built_in">config</span>-recess-<span class="hljs-keyword">order </span>stylelint-<span class="hljs-built_in">config</span>-recommended-<span class="hljs-keyword">scss </span>stylelint-<span class="hljs-built_in">config</span>-standard stylelint-<span class="hljs-built_in">config</span>-standard-vue stylelint-<span class="hljs-keyword">scss </span>stylelint-<span class="hljs-keyword">order </span>stylelint-<span class="hljs-built_in">config</span>-standard-<span class="hljs-keyword">scss </span>-D<br></code></pre></td></tr></table></figure><h5 id="3-1-stylelintrc-cjs配置文件"><a href="#3-1-stylelintrc-cjs配置文件" class="headerlink" title="3.1.stylelintrc.cjs配置文件"></a>3.1<code>.stylelintrc.cjs</code><strong>配置文件</strong></h5><p><strong>官网:<a href="https://stylelint.bootcss.com/">https://stylelint.bootcss.com/</a></strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> @see https:<span class="hljs-regexp">//</span>stylelint.bootcss.com/<br><br>module.exports = &#123;<br>  extends: [<br>    <span class="hljs-string">&#x27;stylelint-config-standard&#x27;</span>, <span class="hljs-regexp">//</span> 配置stylelint拓展插件<br>    <span class="hljs-string">&#x27;stylelint-config-html/vue&#x27;</span>, <span class="hljs-regexp">//</span> 配置 vue 中 template 样式格式化<br>    <span class="hljs-string">&#x27;stylelint-config-standard-scss&#x27;</span>, <span class="hljs-regexp">//</span> 配置stylelint scss插件<br>    <span class="hljs-string">&#x27;stylelint-config-recommended-vue/scss&#x27;</span>, <span class="hljs-regexp">//</span> 配置 vue 中 scss 样式格式化<br>    <span class="hljs-string">&#x27;stylelint-config-recess-order&#x27;</span>, <span class="hljs-regexp">//</span> 配置stylelint css属性书写顺序插件,<br>    <span class="hljs-string">&#x27;stylelint-config-prettier&#x27;</span>, <span class="hljs-regexp">//</span> 配置stylelint和prettier兼容<br>  ],<br>  overrides: [<br>    &#123;<br>      files: [<span class="hljs-string">&#x27;**/*.(scss|css|vue|html)&#x27;</span>],<br>      customSyntax: <span class="hljs-string">&#x27;postcss-scss&#x27;</span>,<br>    &#125;,<br>    &#123;<br>      files: [<span class="hljs-string">&#x27;**/*.(html|vue)&#x27;</span>],<br>      customSyntax: <span class="hljs-string">&#x27;postcss-html&#x27;</span>,<br>    &#125;,<br>  ],<br>  ignoreFiles: [<br>    <span class="hljs-string">&#x27;**/*.js&#x27;</span>,<br>    <span class="hljs-string">&#x27;**/*.jsx&#x27;</span>,<br>    <span class="hljs-string">&#x27;**/*.tsx&#x27;</span>,<br>    <span class="hljs-string">&#x27;**/*.ts&#x27;</span>,<br>    <span class="hljs-string">&#x27;**/*.json&#x27;</span>,<br>    <span class="hljs-string">&#x27;**/*.md&#x27;</span>,<br>    <span class="hljs-string">&#x27;**/*.yaml&#x27;</span>,<br>  ],<br>  /**<br>   * null  =&gt; 关闭该规则<br>   * always =&gt; 必须<br>   */<br>  rules: &#123;<br>    <span class="hljs-string">&#x27;value-keyword-case&#x27;</span>: null, <span class="hljs-regexp">//</span> 在 css 中使用 v-bind，不报错<br>    <span class="hljs-string">&#x27;no-descending-specificity&#x27;</span>: null, <span class="hljs-regexp">//</span> 禁止在具有较高优先级的选择器后出现被其覆盖的较低优先级的选择器<br>    <span class="hljs-string">&#x27;function-url-quotes&#x27;</span>: <span class="hljs-string">&#x27;always&#x27;</span>, <span class="hljs-regexp">//</span> 要求或禁止 URL 的引号 <span class="hljs-string">&quot;always(必须加上引号)&quot;</span>|<span class="hljs-string">&quot;never(没有引号)&quot;</span><br>    <span class="hljs-string">&#x27;no-empty-source&#x27;</span>: null, <span class="hljs-regexp">//</span> 关闭禁止空源码<br>    <span class="hljs-string">&#x27;selector-class-pattern&#x27;</span>: null, <span class="hljs-regexp">//</span> 关闭强制选择器类名的格式<br>    <span class="hljs-string">&#x27;property-no-unknown&#x27;</span>: null, <span class="hljs-regexp">//</span> 禁止未知的属性(true 为不允许)<br>    <span class="hljs-string">&#x27;block-opening-brace-space-before&#x27;</span>: <span class="hljs-string">&#x27;always&#x27;</span>, <span class="hljs-regexp">//</span>大括号之前必须有一个空格或不能有空白符<br>    <span class="hljs-string">&#x27;value-no-vendor-prefix&#x27;</span>: null, <span class="hljs-regexp">//</span> 关闭 属性值前缀 --webkit-box<br>    <span class="hljs-string">&#x27;property-no-vendor-prefix&#x27;</span>: null, <span class="hljs-regexp">//</span> 关闭 属性前缀 -webkit-mask<br>    <span class="hljs-string">&#x27;selector-pseudo-class-no-unknown&#x27;</span>: [<br>      <span class="hljs-regexp">//</span> 不允许未知的选择器<br>      true,<br>      &#123;<br>        ignorePseudoClasses: [<span class="hljs-string">&#x27;global&#x27;</span>, <span class="hljs-string">&#x27;v-deep&#x27;</span>, <span class="hljs-string">&#x27;deep&#x27;</span>], <span class="hljs-regexp">//</span> 忽略属性，修改element默认样式的时候能使用到<br>      &#125;,<br>    ],<br>  &#125;,<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="3-2-stylelintignore忽略文件"><a href="#3-2-stylelintignore忽略文件" class="headerlink" title="3.2.stylelintignore忽略文件"></a>3.2.stylelintignore忽略文件</h5><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/node_modules/</span>*<br><span class="hljs-regexp">/dist/</span>*<br><span class="hljs-regexp">/html/</span>*<br><span class="hljs-regexp">/public/</span>*<br></code></pre></td></tr></table></figure><h5 id="3-3运行脚本"><a href="#3-3运行脚本" class="headerlink" title="3.3运行脚本"></a>3.3运行脚本</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">&quot;scripts&quot;: &#123;<br>&quot;lint:style<span class="hljs-string">&quot;: &quot;</span>stylelint src<span class="hljs-comment">/**/</span>*.&#123;css,scss,vue&#125; <span class="hljs-attr">--cache</span> <span class="hljs-attr">--fix</span>&quot;<br>&#125;<br></code></pre></td></tr></table></figure><p>最后配置统一的prettier来格式化我们的js和css，html代码</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">&quot;scripts&quot;: &#123;<br>   &quot;dev&quot;: &quot;vite --open&quot;,<br>   &quot;build&quot;: &quot;vue-tsc &amp;&amp; vite build&quot;,<br>   &quot;preview&quot;: &quot;vite preview&quot;,<br>   &quot;lint&quot;: &quot;eslint src&quot;,<br>   &quot;fix&quot;: &quot;eslint src --fix&quot;,<br>   &quot;format&quot;: &quot;prettier --write \&quot;.<span class="hljs-comment">/**/</span>*.&#123;html,vue,ts,js,<span class="hljs-type">json</span>,md&#125;\&quot;&quot;,<br>   &quot;lint:eslint&quot;: &quot;eslint src/**/*.&#123;ts,vue&#125; --cache --fix&quot;,<br>   &quot;lint:style&quot;: &quot;stylelint src/**/*.&#123;css,scss,vue&#125; --cache --fix&quot;<br> &#125;,<br></code></pre></td></tr></table></figure><p><strong>当我们运行<code>pnpm run format</code>的时候，会把代码直接格式化</strong></p><h4 id="四、配置husky"><a href="#四、配置husky" class="headerlink" title="四、配置husky"></a>四、配置husky</h4><p>在上面我们已经集成好了我们代码校验工具，但是需要每次手动的去执行命令才会格式化我们的代码。如果有人没有格式化就提交了远程仓库中，那这个规范就没什么用。所以我们需要强制让开发人员按照代码规范来提交。</p><p>要做到这件事情，就需要利用husky在代码提交之前触发git hook(git在客户端的钩子)，然后执行<code>pnpm run format</code>来自动的格式化我们的代码。</p><p>安装<code>husky</code></p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">pnpm <span class="hljs-keyword">install</span> -D husky<br></code></pre></td></tr></table></figure><p>执行</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp">npx husky-<span class="hljs-keyword">init</span><br></code></pre></td></tr></table></figure><p>会在根目录下生成个一个.husky目录，在这个目录下面会有一个pre-commit文件，这个文件里面的命令在我们执行commit的时候就会执行</p><p>在<code>.husky/pre-commit</code>文件添加如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/usr/bin/env sh</span><br>. <span class="hljs-string">&quot;<span class="hljs-subst">$(dirname -- <span class="hljs-string">&quot;<span class="hljs-variable">$0</span>&quot;</span>)</span>/_/husky.sh&quot;</span><br>pnpm run format<br></code></pre></td></tr></table></figure><p>当我们对代码进行commit操作的时候，就会执行命令，对代码进行格式化，然后再提交。</p><h4 id="五、配置commitlint"><a href="#五、配置commitlint" class="headerlink" title="五、配置commitlint"></a>五、配置commitlint</h4><p>对于我们的commit信息，也是有统一规范的，不能随便写,要让每个人都按照统一的标准来执行，我们可以利用<strong>commitlint</strong>来实现。</p><p>安装包</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">pnpm <span class="hljs-keyword">add</span><span class="language-bash"> @commitlint/config-conventional @commitlint/cli -D</span><br></code></pre></td></tr></table></figure><p>添加配置文件，新建<code>commitlint.config.cjs</code>(注意是cjs)，然后添加下面的代码：</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs prolog">module.exports = &#123;<br>  extends: [<span class="hljs-string">&#x27;@commitlint/config-conventional&#x27;</span>],<br>  // 校验规则<br>  rules: &#123;<br>    <span class="hljs-string">&#x27;type-enum&#x27;</span>: [<br>      <span class="hljs-number">2</span>,<br>      <span class="hljs-string">&#x27;always&#x27;</span>,<br>      [<br>        <span class="hljs-string">&#x27;feat&#x27;</span>,<br>        <span class="hljs-string">&#x27;fix&#x27;</span>,<br>        <span class="hljs-string">&#x27;docs&#x27;</span>,<br>        <span class="hljs-string">&#x27;style&#x27;</span>,<br>        <span class="hljs-string">&#x27;refactor&#x27;</span>,<br>        <span class="hljs-string">&#x27;perf&#x27;</span>,<br>        <span class="hljs-string">&#x27;test&#x27;</span>,<br>        <span class="hljs-string">&#x27;chore&#x27;</span>,<br>        <span class="hljs-string">&#x27;revert&#x27;</span>,<br>        <span class="hljs-string">&#x27;build&#x27;</span>,<br>      ],<br>    ],<br>    <span class="hljs-string">&#x27;type-case&#x27;</span>: [<span class="hljs-number">0</span>],<br>    <span class="hljs-string">&#x27;type-empty&#x27;</span>: [<span class="hljs-number">0</span>],<br>    <span class="hljs-string">&#x27;scope-empty&#x27;</span>: [<span class="hljs-number">0</span>],<br>    <span class="hljs-string">&#x27;scope-case&#x27;</span>: [<span class="hljs-number">0</span>],<br>    <span class="hljs-string">&#x27;subject-full-stop&#x27;</span>: [<span class="hljs-number">0</span>, <span class="hljs-string">&#x27;never&#x27;</span>],<br>    <span class="hljs-string">&#x27;subject-case&#x27;</span>: [<span class="hljs-number">0</span>, <span class="hljs-string">&#x27;never&#x27;</span>],<br>    <span class="hljs-string">&#x27;header-max-length&#x27;</span>: [<span class="hljs-number">0</span>, <span class="hljs-string">&#x27;always&#x27;</span>, <span class="hljs-number">72</span>],<br>  &#125;,<br>&#125;<br></code></pre></td></tr></table></figure><p>在<code>package.json</code>中配置scripts命令</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-meta"># 在scrips中添加下面的代码</span><br>&#123;<br><span class="hljs-string">&quot;scripts&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;commitlint&quot;</span>: <span class="hljs-string">&quot;commitlint --config commitlint.config.cjs -e -V&quot;</span><br>  &#125;,<br>&#125;<br></code></pre></td></tr></table></figure><p>配置结束，现在当我们填写<code>commit</code>信息的时候，前面就需要带着下面的<code>subject</code></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-string">&#x27;feat&#x27;</span>,<span class="hljs-regexp">//</span>新特性、新功能<br><span class="hljs-string">&#x27;fix&#x27;</span>,<span class="hljs-regexp">//</span>修改bug<br><span class="hljs-string">&#x27;docs&#x27;</span>,<span class="hljs-regexp">//</span>文档修改<br><span class="hljs-string">&#x27;style&#x27;</span>,<span class="hljs-regexp">//</span>代码格式修改, 注意不是 css 修改<br><span class="hljs-string">&#x27;refactor&#x27;</span>,<span class="hljs-regexp">//</span>代码重构<br><span class="hljs-string">&#x27;perf&#x27;</span>,<span class="hljs-regexp">//</span>优化相关，比如提升性能、体验<br><span class="hljs-string">&#x27;test&#x27;</span>,<span class="hljs-regexp">//</span>测试用例修改<br><span class="hljs-string">&#x27;chore&#x27;</span>,<span class="hljs-regexp">//</span>其他修改, 比如改变构建流程、或者增加依赖库、工具等<br><span class="hljs-string">&#x27;revert&#x27;</span>,<span class="hljs-regexp">//</span>回滚到上一个版本<br><span class="hljs-string">&#x27;build&#x27;</span>,<span class="hljs-regexp">//</span>编译相关的修改，例如发布版本、对项目构建或者依赖的改动<br></code></pre></td></tr></table></figure><p>配置husky</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">npx husky <span class="hljs-keyword">add</span><span class="language-bash"> .husky/commit-msg </span><br></code></pre></td></tr></table></figure><p>在生成的commit-msg文件中添加下面的命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/usr/bin/env sh</span><br>. <span class="hljs-string">&quot;<span class="hljs-subst">$(dirname -- <span class="hljs-string">&quot;<span class="hljs-variable">$0</span>&quot;</span>)</span>/_/husky.sh&quot;</span><br>pnpm commitlint<br></code></pre></td></tr></table></figure><p>当我们 commit 提交信息时，就不能再随意写了，必须是 git commit -m ‘fix: xxx’ 符合类型的才可以，<strong>需要注意的是类型的后面需要用英文的 :，并且冒号后面是需要空一格的，这个是不能省略的</strong></p><h4 id="六、强制使用pnpm包管理器工具"><a href="#六、强制使用pnpm包管理器工具" class="headerlink" title="六、强制使用pnpm包管理器工具"></a>六、强制使用pnpm包管理器工具</h4><p>团队开发项目的时候，需要统一包管理器工具,因为不同包管理器工具下载同一个依赖,可能版本不一样,</p><p>导致项目出现bug问题,因此包管理器工具需要统一管理！！！</p><p>在根目录创建<code>scritps/preinstall.js</code>文件，添加下面的内容</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-keyword">if</span> (!<span class="hljs-regexp">/pnpm/</span>.test(process.env.npm_execpath || <span class="hljs-string">&#x27;&#x27;</span>)) &#123;<br>  console.warn(<br>    `\u001b[<span class="hljs-number">33</span>mThis repository must using pnpm as the package manager ` +<br>    ` <span class="hljs-keyword">for</span> scripts to work properly.\u001b[<span class="hljs-number">39</span>m\n`,<br>  )<br>  process.<span class="hljs-keyword">exit</span>(<span class="hljs-number">1</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>配置命令</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;scripts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;preinstall&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;node ./scripts/preinstall.js&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><strong>当我们使用npm或者yarn来安装包的时候，就会报错了。原理就是在install的时候会触发preinstall（npm提供的生命周期钩子）这个文件里面的代码。</strong></p><h2 id="三、项目集成"><a href="#三、项目集成" class="headerlink" title="三、项目集成"></a>三、项目集成</h2><h3 id="3-1集成element-plus"><a href="#3-1集成element-plus" class="headerlink" title="3.1集成element-plus"></a>3.1集成element-plus</h3><p>硅谷甄选运营平台,UI组件库采用的element-plus，因此需要集成element-plus插件！！！</p><p>官网地址:<a href="https://element-plus.gitee.io/zh-CN/">https://element-plus.gitee.io/zh-CN/</a></p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle">pnpm install element-<span class="hljs-keyword">plus</span> @element-<span class="hljs-keyword">plus</span>/icons-vue<br></code></pre></td></tr></table></figure><p><strong>入口文件main.ts全局安装element-plus,element-plus默认支持语言英语设置为中文</strong></p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs clean"><span class="hljs-keyword">import</span> ElementPlus <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;element-plus&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;element-plus/dist/index.css&#x27;</span><br><span class="hljs-comment">//@ts-ignore  忽略当前文件ts类型的检测否则有红色提示(打包会失败)</span><br><span class="hljs-keyword">import</span> zhCn <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;element-plus/dist/locale/zh-cn.mjs&#x27;</span><br>app.use(ElementPlus, &#123;<br>    locale: zhCn<br>&#125;)<br></code></pre></td></tr></table></figure><p><strong>Element Plus全局组件类型声明</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> tsconfig.json<br>&#123;<br>  <span class="hljs-string">&quot;compilerOptions&quot;</span>: &#123;<br>    <span class="hljs-regexp">//</span> ...<br>    <span class="hljs-string">&quot;types&quot;</span>: [<span class="hljs-string">&quot;element-plus/global&quot;</span>]<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>配置完毕可以测试element-plus组件与图标的使用.</p><h3 id="3-2src别名的配置"><a href="#3-2src别名的配置" class="headerlink" title="3.2src别名的配置"></a>3.2src别名的配置</h3><p>在开发项目的时候文件与文件关系可能很复杂，因此我们需要给src文件夹配置一个别名！！！</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// vite.config.ts</span><br><span class="hljs-keyword">import</span> &#123;defineConfig&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vite&#x27;</span><br><span class="hljs-keyword">import</span> vue <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@vitejs/plugin-vue&#x27;</span><br><span class="hljs-keyword">import</span> path <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;path&#x27;</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">defineConfig</span>(&#123;<br>    <span class="hljs-attr">plugins</span>: [<span class="hljs-title function_">vue</span>()],<br>    <span class="hljs-attr">resolve</span>: &#123;<br>        <span class="hljs-attr">alias</span>: &#123;<br>            <span class="hljs-string">&quot;@&quot;</span>: path.<span class="hljs-title function_">resolve</span>(<span class="hljs-string">&quot;./src&quot;</span>) <span class="hljs-comment">// 相对路径别名配置，使用 @ 代替 src</span><br>        &#125;<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p><strong>TypeScript 编译配置</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> tsconfig.json<br>&#123;<br>  <span class="hljs-string">&quot;compilerOptions&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;baseUrl&quot;</span>: <span class="hljs-string">&quot;./&quot;</span>, <span class="hljs-regexp">//</span> 解析非相对模块的基地址，默认是当前目录<br>    <span class="hljs-string">&quot;paths&quot;</span>: &#123; <span class="hljs-regexp">//</span>路径映射，相对于baseUrl<br>      <span class="hljs-string">&quot;@/*&quot;</span>: [<span class="hljs-string">&quot;src/*&quot;</span>] <br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-3环境变量的配置"><a href="#3-3环境变量的配置" class="headerlink" title="3.3环境变量的配置"></a>3.3环境变量的配置</h3><p><strong>项目开发过程中，至少会经历开发环境、测试环境和生产环境(即正式环境)三个阶段。不同阶段请求的状态(如接口地址等)不尽相同，若手动切换接口地址是相当繁琐且易出错的。于是环境变量配置的需求就应运而生，我们只需做简单的配置，把环境状态切换的工作交给代码。</strong></p><p>开发环境（development）<br>顾名思义，开发使用的环境，每位开发人员在自己的dev分支上干活，开发到一定程度，同事会合并代码，进行联调。</p><p>测试环境（testing）<br>测试同事干活的环境啦，一般会由测试同事自己来部署，然后在此环境进行测试</p><p>生产环境（production）<br>生产环境是指正式提供对外服务的，一般会关掉错误报告，打开错误日志。(正式提供给客户使用的环境。)</p><p>注意:一般情况下，一个环境对应一台服务器,也有的公司开发与测试环境是一台服务器！！！</p><p>项目根目录分别添加 开发、生产和测试环境的文件!</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-class">.env</span><span class="hljs-selector-class">.development</span><br><span class="hljs-selector-class">.env</span><span class="hljs-selector-class">.production</span><br><span class="hljs-selector-class">.env</span>.test<br></code></pre></td></tr></table></figure><p>文件内容</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment"># 变量必须以 VITE_ 为前缀才能暴露给外部读取</span><br><span class="hljs-attr">NODE_ENV</span> = <span class="hljs-string">&#x27;development&#x27;</span><br><span class="hljs-attr">VITE_APP_TITLE</span> = <span class="hljs-string">&#x27;硅谷甄选运营平台&#x27;</span><br><span class="hljs-attr">VITE_APP_BASE_API</span> = <span class="hljs-string">&#x27;/dev-api&#x27;</span><br></code></pre></td></tr></table></figure><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">NODE_ENV</span> = <span class="hljs-string">&#x27;production&#x27;</span><br><span class="hljs-attr">VITE_APP_TITLE</span> = <span class="hljs-string">&#x27;硅谷甄选运营平台&#x27;</span><br><span class="hljs-attr">VITE_APP_BASE_API</span> = <span class="hljs-string">&#x27;/prod-api&#x27;</span><br></code></pre></td></tr></table></figure><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment"># 变量必须以 VITE_ 为前缀才能暴露给外部读取</span><br><span class="hljs-attr">NODE_ENV</span> = <span class="hljs-string">&#x27;test&#x27;</span><br><span class="hljs-attr">VITE_APP_TITLE</span> = <span class="hljs-string">&#x27;硅谷甄选运营平台&#x27;</span><br><span class="hljs-attr">VITE_APP_BASE_API</span> = <span class="hljs-string">&#x27;/test-api&#x27;</span><br></code></pre></td></tr></table></figure><p>配置运行命令：package.json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;scripts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>   <span class="hljs-attr">&quot;dev&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;vite --open&quot;</span><span class="hljs-punctuation">,</span><br>   <span class="hljs-attr">&quot;build:test&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;vue-tsc &amp;&amp; vite build --mode test&quot;</span><span class="hljs-punctuation">,</span><br>   <span class="hljs-attr">&quot;build:pro&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;vue-tsc &amp;&amp; vite build --mode production&quot;</span><span class="hljs-punctuation">,</span><br>   <span class="hljs-attr">&quot;preview&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;vite preview&quot;</span><br> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br></code></pre></td></tr></table></figure><p>通过import.meta.env获取环境变量</p><h3 id="3-4SVG图标配置"><a href="#3-4SVG图标配置" class="headerlink" title="3.4SVG图标配置"></a>3.4SVG图标配置</h3><p>在开发项目的时候经常会用到svg矢量图,而且我们使用SVG以后，页面上加载的不再是图片资源,</p><p>这对页面性能来说是个很大的提升，而且我们SVG文件比img要小的很多，放在项目中几乎不占用资源。</p><p><strong>安装SVG依赖插件</strong></p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">pnpm <span class="hljs-keyword">install</span> vite-plugin-svg-icons -D<br></code></pre></td></tr></table></figure><p><strong>在<code>vite.config.ts</code>中配置插件</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; createSvgIconsPlugin &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vite-plugin-svg-icons&#x27;</span><br><span class="hljs-keyword">import</span> path <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;path&#x27;</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> () =&gt; &#123;<br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-attr">plugins</span>: [<br>      <span class="hljs-title function_">createSvgIconsPlugin</span>(&#123;<br>        <span class="hljs-comment">// Specify the icon folder to be cached</span><br>        <span class="hljs-attr">iconDirs</span>: [path.<span class="hljs-title function_">resolve</span>(process.<span class="hljs-title function_">cwd</span>(), <span class="hljs-string">&#x27;src/assets/icons&#x27;</span>)],<br>        <span class="hljs-comment">// Specify symbolId format</span><br>        <span class="hljs-attr">symbolId</span>: <span class="hljs-string">&#x27;icon-[dir]-[name]&#x27;</span>,<br>      &#125;),<br>    ],<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>入口文件导入</strong></p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs elm"><span class="hljs-comment">---main.ts</span><br><span class="hljs-keyword">import</span> &#x27;virtual:svg-icons-register&#x27;<br></code></pre></td></tr></table></figure><p>创建文件夹.&#x2F;src&#x2F;assets&#x2F;icons&#x2F;Svgname.svg</p><p>将svg地址拷贝进文件中</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--    测试svg图标--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">svg</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">use</span> <span class="hljs-attr">xlink:href</span>=<span class="hljs-string">&quot;#icon-phone&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">use</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">svg</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="3-4-1svg封装为全局组件"><a href="#3-4-1svg封装为全局组件" class="headerlink" title="3.4.1svg封装为全局组件"></a>3.4.1svg封装为全局组件</h4><p>因为项目很多模块需要使用图标,因此把它封装为全局组件！！！</p><p><strong>在src&#x2F;components目录下创建一个SvgIcon组件:代表如下</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">svg</span> <span class="hljs-attr">:style</span>=<span class="hljs-string">&quot;&#123; width: width, height: height &#125;&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">use</span> <span class="hljs-attr">:xlink:href</span>=<span class="hljs-string">&quot;prefix + name&quot;</span> <span class="hljs-attr">:fill</span>=<span class="hljs-string">&quot;color&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">use</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">svg</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-title function_">defineProps</span>(&#123;</span><br><span class="language-javascript">  <span class="hljs-comment">//xlink:href属性值的前缀</span></span><br><span class="language-javascript">  <span class="hljs-attr">prefix</span>: &#123;</span><br><span class="language-javascript">    <span class="hljs-attr">type</span>: <span class="hljs-title class_">String</span>,</span><br><span class="language-javascript">    <span class="hljs-attr">default</span>: <span class="hljs-string">&#x27;#icon-&#x27;</span></span><br><span class="language-javascript">  &#125;,</span><br><span class="language-javascript">  <span class="hljs-comment">//svg矢量图的名字</span></span><br><span class="language-javascript">  <span class="hljs-attr">name</span>: <span class="hljs-title class_">String</span>,</span><br><span class="language-javascript">  <span class="hljs-comment">//svg图标的颜色</span></span><br><span class="language-javascript">  <span class="hljs-attr">color</span>: &#123;</span><br><span class="language-javascript">    <span class="hljs-attr">type</span>: <span class="hljs-title class_">String</span>,</span><br><span class="language-javascript">    <span class="hljs-attr">default</span>: <span class="hljs-string">&quot;&quot;</span></span><br><span class="language-javascript">  &#125;,</span><br><span class="language-javascript">  <span class="hljs-comment">//svg宽度</span></span><br><span class="language-javascript">  <span class="hljs-attr">width</span>: &#123;</span><br><span class="language-javascript">    <span class="hljs-attr">type</span>: <span class="hljs-title class_">String</span>,</span><br><span class="language-javascript">    <span class="hljs-attr">default</span>: <span class="hljs-string">&#x27;16px&#x27;</span></span><br><span class="language-javascript">  &#125;,</span><br><span class="language-javascript">  <span class="hljs-comment">//svg高度</span></span><br><span class="language-javascript">  <span class="hljs-attr">height</span>: &#123;</span><br><span class="language-javascript">    <span class="hljs-attr">type</span>: <span class="hljs-title class_">String</span>,</span><br><span class="language-javascript">    <span class="hljs-attr">default</span>: <span class="hljs-string">&#x27;16px&#x27;</span></span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">&#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在src文件夹目录下创建一个index.ts文件：用于注册components文件夹内部全部全局组件！！！</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">SvgIcon</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./SvgIcon/index.vue&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-keyword">type</span> &#123; <span class="hljs-title class_">App</span>, <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-attr">components</span>: &#123; [<span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>]: <span class="hljs-title class_">Component</span> &#125; = &#123; <span class="hljs-title class_">SvgIcon</span> &#125;;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>    <span class="hljs-title function_">install</span>(<span class="hljs-params">app: App</span>) &#123;<br>        <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(components).<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">key: <span class="hljs-built_in">string</span></span>) =&gt;</span> &#123;<br>            app.<span class="hljs-title function_">component</span>(key, components[key]);<br>        &#125;)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在入口文件引入src&#x2F;index.ts文件,通过app.use方法安装自定义插件</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs clean"><span class="hljs-keyword">import</span> gloablComponent <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./components/index&#x27;</span>;<br>app.use(gloablComponent);<br></code></pre></td></tr></table></figure><h3 id="3-5集成sass"><a href="#3-5集成sass" class="headerlink" title="3.5集成sass"></a>3.5集成sass</h3><p>我们目前在组件内部已经可以使用scss样式,因为在配置styleLint工具的时候，项目当中已经安装过sass sass-loader,因此我们再组件内可以使用scss语法！！！需要加上lang&#x3D;”scss”</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;scss&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><p>接下来我们为项目添加一些全局的样式</p><p>在src&#x2F;styles目录下创建一个index.scss文件，当然项目中需要用到清除默认样式，因此在index.scss引入reset.scss</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elm">@<span class="hljs-keyword">import</span> reset.scss<br></code></pre></td></tr></table></figure><p>在入口文件引入</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;@/styles&#x27;</span><br></code></pre></td></tr></table></figure><p>但是你会发现在src&#x2F;styles&#x2F;index.scss全局样式文件中没有办法使用$变量.因此需要给项目中引入全局变量$.</p><p>在style&#x2F;variable.scss创建一个variable.scss文件！</p><p>在vite.config.ts文件配置如下:</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> defineConfig(<span class="hljs-function"><span class="hljs-params">(config)</span> =&gt;</span> &#123;<br>css: &#123;<br>      preprocessorOptions: &#123;<br>        scss: &#123;<br>          javascriptEnabled: <span class="hljs-literal">true</span>,<br>          additionalData: <span class="hljs-string">&#x27;@import &quot;./src/styles/variable.scss&quot;;&#x27;</span>,<br>        &#125;,<br>      &#125;,<br>    &#125;,<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong><code>@import &quot;./src/styles/variable.less&quot;;</code>后面的<code>;</code>不要忘记，不然会报错</strong>!</p><p>配置完毕你会发现scss提供这些全局变量可以在组件样式中使用了！！！</p><h3 id="3-6mock数据"><a href="#3-6mock数据" class="headerlink" title="3.6mock数据"></a>3.6mock数据</h3><p>安装依赖:<a href="https://www.npmjs.com/package/vite-plugin-mock">https://www.npmjs.com/package/vite-plugin-mock</a></p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">pnpm <span class="hljs-keyword">install</span> -D vite-plugin-mock mockjs<br></code></pre></td></tr></table></figure><p>在 vite.config.js 配置文件启用插件。</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs livescript"><span class="hljs-keyword">import</span> &#123; UserConfigExport, ConfigEnv &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vite&#x27;</span><br><span class="hljs-keyword">import</span> &#123; viteMockServe &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vite-plugin-mock&#x27;</span><br><span class="hljs-keyword">import</span> vue <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@vitejs/plugin-vue&#x27;</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> (&#123; command &#125;)=&gt; &#123;<br>  <span class="hljs-keyword">return</span> &#123;<br>    plugins: [<br>      vue(),<br>      viteMockServe(&#123;<br>        localEnabled: command === <span class="hljs-string">&#x27;serve&#x27;</span>,<br>      &#125;),<br>    ],<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>mock3.0.0可能会报错</p><p>解决方法：</p><p><a href="https://blog.csdn.net/weixin_44533794/article/details/130897995">https://blog.csdn.net/weixin_44533794/article/details/130897995</a></p><p>在根目录创建mock文件夹:去创建我们需要mock数据与接口！！！</p><p>在mock文件夹内部创建一个user.ts文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//用户信息数据</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">createUserList</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> [<br>        &#123;<br>            <span class="hljs-attr">userId</span>: <span class="hljs-number">1</span>,<br>            <span class="hljs-attr">avatar</span>:<br>                <span class="hljs-string">&#x27;https://wpimg.wallstcn.com/f778738c-e4f8-4870-b634-56703b4acafe.gif&#x27;</span>,<br>            <span class="hljs-attr">username</span>: <span class="hljs-string">&#x27;admin&#x27;</span>,<br>            <span class="hljs-attr">password</span>: <span class="hljs-string">&#x27;111111&#x27;</span>,<br>            <span class="hljs-attr">desc</span>: <span class="hljs-string">&#x27;平台管理员&#x27;</span>,<br>            <span class="hljs-attr">roles</span>: [<span class="hljs-string">&#x27;平台管理员&#x27;</span>],<br>            <span class="hljs-attr">buttons</span>: [<span class="hljs-string">&#x27;cuser.detail&#x27;</span>],<br>            <span class="hljs-attr">routes</span>: [<span class="hljs-string">&#x27;home&#x27;</span>],<br>            <span class="hljs-attr">token</span>: <span class="hljs-string">&#x27;Admin Token&#x27;</span>,<br>        &#125;,<br>        &#123;<br>            <span class="hljs-attr">userId</span>: <span class="hljs-number">2</span>,<br>            <span class="hljs-attr">avatar</span>:<br>                <span class="hljs-string">&#x27;https://wpimg.wallstcn.com/f778738c-e4f8-4870-b634-56703b4acafe.gif&#x27;</span>,<br>            <span class="hljs-attr">username</span>: <span class="hljs-string">&#x27;system&#x27;</span>,<br>            <span class="hljs-attr">password</span>: <span class="hljs-string">&#x27;111111&#x27;</span>,<br>            <span class="hljs-attr">desc</span>: <span class="hljs-string">&#x27;系统管理员&#x27;</span>,<br>            <span class="hljs-attr">roles</span>: [<span class="hljs-string">&#x27;系统管理员&#x27;</span>],<br>            <span class="hljs-attr">buttons</span>: [<span class="hljs-string">&#x27;cuser.detail&#x27;</span>, <span class="hljs-string">&#x27;cuser.user&#x27;</span>],<br>            <span class="hljs-attr">routes</span>: [<span class="hljs-string">&#x27;home&#x27;</span>],<br>            <span class="hljs-attr">token</span>: <span class="hljs-string">&#x27;System Token&#x27;</span>,<br>        &#125;,<br>    ]<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> [<br>    <span class="hljs-comment">// 用户登录接口</span><br>    &#123;<br>        <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;/api/user/login&#x27;</span>,<span class="hljs-comment">//请求地址</span><br>        <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;post&#x27;</span>,<span class="hljs-comment">//请求方式</span><br>        <span class="hljs-attr">response</span>: <span class="hljs-function">(<span class="hljs-params">&#123; body &#125;</span>) =&gt;</span> &#123;<br>            <span class="hljs-comment">//获取请求体携带过来的用户名与密码</span><br>            <span class="hljs-keyword">const</span> &#123; username, password &#125; = body;<br>            <span class="hljs-comment">//调用获取用户信息函数,用于判断是否有此用户</span><br>            <span class="hljs-keyword">const</span> checkUser = <span class="hljs-title function_">createUserList</span>().<span class="hljs-title function_">find</span>(<br>                <span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> item.<span class="hljs-property">username</span> === username &amp;&amp; item.<span class="hljs-property">password</span> === password,<br>            )<br>            <span class="hljs-comment">//没有用户返回失败信息</span><br>            <span class="hljs-keyword">if</span> (!checkUser) &#123;<br>                <span class="hljs-keyword">return</span> &#123; <span class="hljs-attr">code</span>: <span class="hljs-number">201</span>, <span class="hljs-attr">data</span>: &#123; <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;账号或者密码不正确&#x27;</span> &#125; &#125;<br>            &#125;<br>            <span class="hljs-comment">//如果有返回成功信息</span><br>            <span class="hljs-keyword">const</span> &#123; token &#125; = checkUser<br>            <span class="hljs-keyword">return</span> &#123; <span class="hljs-attr">code</span>: <span class="hljs-number">200</span>, <span class="hljs-attr">data</span>: &#123; token &#125; &#125;<br>        &#125;,<br>    &#125;,<br>    <span class="hljs-comment">// 获取用户信息</span><br>    &#123;<br>        <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;/api/user/info&#x27;</span>,<br>        <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;get&#x27;</span>,<br>        <span class="hljs-attr">response</span>: <span class="hljs-function">(<span class="hljs-params">request</span>) =&gt;</span> &#123;<br>            <span class="hljs-comment">//获取请求头携带token</span><br>            <span class="hljs-keyword">const</span> token = request.<span class="hljs-property">headers</span>.<span class="hljs-property">token</span>;<br>            <span class="hljs-comment">//查看用户信息是否包含有次token用户</span><br>            <span class="hljs-keyword">const</span> checkUser = <span class="hljs-title function_">createUserList</span>().<span class="hljs-title function_">find</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> item.<span class="hljs-property">token</span> === token)<br>            <span class="hljs-comment">//没有返回失败的信息</span><br>            <span class="hljs-keyword">if</span> (!checkUser) &#123;<br>                <span class="hljs-keyword">return</span> &#123; <span class="hljs-attr">code</span>: <span class="hljs-number">201</span>, <span class="hljs-attr">data</span>: &#123; <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;获取用户信息失败&#x27;</span> &#125; &#125;<br>            &#125;<br>            <span class="hljs-comment">//如果有返回成功信息</span><br>            <span class="hljs-keyword">return</span> &#123; <span class="hljs-attr">code</span>: <span class="hljs-number">200</span>, <span class="hljs-attr">data</span>: &#123;checkUser&#125; &#125;<br>        &#125;,<br>    &#125;,<br>]<br></code></pre></td></tr></table></figure><p><strong>安装axios</strong></p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">pnpm <span class="hljs-keyword">install</span> axios<br></code></pre></td></tr></table></figure><p>最后通过axios测试接口！！！</p><h3 id="3-7axios二次封装"><a href="#3-7axios二次封装" class="headerlink" title="3.7axios二次封装"></a>3.7axios二次封装</h3><p>在开发项目的时候避免不了与后端进行交互,因此我们需要使用axios插件实现发送网络请求。在开发项目的时候</p><p>我们经常会把axios进行二次封装。</p><p>目的:</p><p>1:使用请求拦截器，可以在请求拦截器中处理一些业务(开始进度条、请求头携带公共参数)</p><p>2:使用响应拦截器，可以在响应拦截器中处理一些业务(进度条结束、简化服务器返回的数据、处理http网络错误)</p><p>在根目录下创建utils&#x2F;request.ts</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;axios&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">ElMessage</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;element-plus&quot;</span>;<br><span class="hljs-comment">//创建axios实例</span><br><span class="hljs-keyword">let</span> request = axios.<span class="hljs-title function_">create</span>(&#123;<br>    <span class="hljs-attr">baseURL</span>: <span class="hljs-keyword">import</span>.<span class="hljs-property">meta</span>.<span class="hljs-property">env</span>.<span class="hljs-property">VITE_APP_BASE_API</span>,<br>    <span class="hljs-attr">timeout</span>: <span class="hljs-number">5000</span><br>&#125;)<br><span class="hljs-comment">//请求拦截器</span><br>request.<span class="hljs-property">interceptors</span>.<span class="hljs-property">request</span>.<span class="hljs-title function_">use</span>(<span class="hljs-function"><span class="hljs-params">config</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> config;<br>&#125;);<br><span class="hljs-comment">//响应拦截器</span><br>request.<span class="hljs-property">interceptors</span>.<span class="hljs-property">response</span>.<span class="hljs-title function_">use</span>(<span class="hljs-function">(<span class="hljs-params">response</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> response.<span class="hljs-property">data</span>;<br>&#125;, <span class="hljs-function">(<span class="hljs-params">error</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">//处理网络错误</span><br>    <span class="hljs-keyword">let</span> msg = <span class="hljs-string">&#x27;&#x27;</span>;<br>    <span class="hljs-keyword">let</span> status = error.<span class="hljs-property">response</span>.<span class="hljs-property">status</span>;<br>    <span class="hljs-keyword">switch</span> (status) &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">401</span>:<br>            msg = <span class="hljs-string">&quot;token过期&quot;</span>;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">403</span>:<br>            msg = <span class="hljs-string">&#x27;无权访问&#x27;</span>;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">404</span>:<br>            msg = <span class="hljs-string">&quot;请求地址错误&quot;</span>;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">500</span>:<br>            msg = <span class="hljs-string">&quot;服务器出现问题&quot;</span>;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-attr">default</span>:<br>            msg = <span class="hljs-string">&quot;无网络&quot;</span>;<br><br>    &#125;<br>    <span class="hljs-title class_">ElMessage</span>(&#123;<br>        <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;error&#x27;</span>,<br>        <span class="hljs-attr">message</span>: msg<br>    &#125;)<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>(error);<br>&#125;);<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> request;<br></code></pre></td></tr></table></figure><h3 id="3-8API接口统一管理"><a href="#3-8API接口统一管理" class="headerlink" title="3.8API接口统一管理"></a>3.8API接口统一管理</h3><p>在开发项目的时候,接口可能很多需要统一管理。在src目录下去创建api文件夹去统一管理项目的接口；</p><p>比如:下面方式</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">//统一管理咱们项目用户相关的接口</span><br><br><span class="hljs-keyword">import</span> request <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/utils/request&#x27;</span><br><br><span class="hljs-keyword">import</span> <span class="hljs-keyword">type</span> &#123;<br><br> loginFormData,<br><br> loginResponseData,<br><br> userInfoReponseData,<br><br>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./type&#x27;</span><br><br><span class="hljs-comment">//项目用户相关的请求地址</span><br><br><span class="hljs-keyword">enum</span> <span class="hljs-variable constant_">API</span> &#123;<br><br> <span class="hljs-variable constant_">LOGIN_URL</span> = <span class="hljs-string">&#x27;/admin/acl/index/login&#x27;</span>,<br><br> <span class="hljs-variable constant_">USERINFO_URL</span> = <span class="hljs-string">&#x27;/admin/acl/index/info&#x27;</span>,<br><br> <span class="hljs-variable constant_">LOGOUT_URL</span> = <span class="hljs-string">&#x27;/admin/acl/index/logout&#x27;</span>,<br><br>&#125;<br><span class="hljs-comment">//登录接口</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">reqLogin</span> = (<span class="hljs-params">data: loginFormData</span>) =&gt;<br> request.<span class="hljs-property">post</span>&lt;<span class="hljs-built_in">any</span>, loginResponseData&gt;(<span class="hljs-variable constant_">API</span>.<span class="hljs-property">LOGIN_URL</span>, data)<br><span class="hljs-comment">//获取用户信息</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">reqUserInfo</span> = (<span class="hljs-params"></span>) =&gt;<br><br> request.<span class="hljs-property">get</span>&lt;<span class="hljs-built_in">any</span>, userInfoReponseData&gt;(<span class="hljs-variable constant_">API</span>.<span class="hljs-property">USERINFO_URL</span>)<br><br><span class="hljs-comment">//退出登录</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">reqLogout</span> = (<span class="hljs-params"></span>) =&gt; request.<span class="hljs-property">post</span>&lt;<span class="hljs-built_in">any</span>, <span class="hljs-built_in">any</span>&gt;(<span class="hljs-variable constant_">API</span>.<span class="hljs-property">LOGOUT_URL</span>)<br></code></pre></td></tr></table></figure><h3 id="3-9路由搭建"><a href="#3-9路由搭建" class="headerlink" title="3.9路由搭建"></a>3.9路由搭建</h3><p>index.ts</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> &#123;createRouter, createWebHashHistory&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue-router&quot;</span>;<br><span class="hljs-keyword">import</span> &#123;constantRoute&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/router/routes.ts&quot;</span>;<br><br><span class="hljs-comment">// 创建路由</span><br><span class="hljs-keyword">let</span> router = <span class="hljs-title function_">createRouter</span>(&#123;<br><span class="hljs-comment">//     路由模式hash</span><br>    <span class="hljs-attr">history</span>: <span class="hljs-title function_">createWebHashHistory</span>(),<br>    <span class="hljs-attr">routes</span>: constantRoute,<br>    <span class="hljs-comment">//滚动行为</span><br>    <span class="hljs-title function_">scrollBehavior</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-keyword">return</span>&#123;<br>            <span class="hljs-attr">left</span>:<span class="hljs-number">0</span>,<br>            <span class="hljs-attr">top</span>:<span class="hljs-number">0</span><br>        &#125;<br>    &#125;<br><br>&#125;);<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> router;<br></code></pre></td></tr></table></figure><p>routers.ts</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// 对外暴露配置常量路由</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> constantRoute = [<br>    &#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/login&#x27;</span>,<br>        <span class="hljs-attr">component</span>:<span class="hljs-function">() =&gt;</span><span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;@/views/login/index.vue&quot;</span>),<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;login&#x27;</span>,<br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/&#x27;</span>,<br>        <span class="hljs-attr">component</span>:<span class="hljs-function">()=&gt;</span><span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;@/views/home/index.vue&quot;</span>),<br>        <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;layout&#x27;</span>,<br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/404&#x27;</span>,<br>        <span class="hljs-attr">component</span>:<span class="hljs-function">()=&gt;</span><span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;@/views/404/index.vue&quot;</span>),<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;404&#x27;</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/:pathMatch(.*)*&#x27;</span>, <span class="hljs-comment">//未知路径则重定向至404</span><br>        <span class="hljs-attr">redirect</span>: <span class="hljs-string">&#x27;/404&#x27;</span>,<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Any&#x27;</span><br>    &#125;<br>]<br></code></pre></td></tr></table></figure><h2 id="四、项目的资源地址"><a href="#四、项目的资源地址" class="headerlink" title="四、项目的资源地址"></a>四、项目的资源地址</h2><p>贾成豪老师代码仓库地址:<a href="https://gitee.com/jch1011/vue3_admin_template-bj1.git">https://gitee.com/jch1011/vue3_admin_template-bj1.git</a></p><p>项目在线文档:</p><p>服务器域名:<a href="http://sph-api.atguigu.cn/">http://sph-api.atguigu.cn</a></p><p>swagger文档:</p><p><a href="http://139.198.104.58:8209/swagger-ui.html">http://139.198.104.58:8209/swagger-ui.html</a></p><p><a href="http://139.198.104.58:8212/swagger-ui.html#/">http://139.198.104.58:8212/swagger-ui.html#/</a></p><p>echarts:国内镜像网站</p><p><a href="https://www.isqqw.com/echarts-doc/zh/option.html#title">https://www.isqqw.com/echarts-doc/zh/option.html#title</a></p><p><a href="http://datav.aliyun.com/portal/school/atlas/area_selector">http://datav.aliyun.com/portal/school/atlas/area_selector</a></p>]]></content>
    
    
    <categories>
      
      <category>硅谷甄选</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>9_Vue3</title>
    <link href="/2023/11/10/Vue3/9_%E5%9B%9E%E9%A1%BE%E5%B7%A9%E5%9B%BA/"/>
    <url>/2023/11/10/Vue3/9_%E5%9B%9E%E9%A1%BE%E5%B7%A9%E5%9B%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="基础回顾"><a href="#基础回顾" class="headerlink" title="基础回顾"></a>基础回顾</h1><h2 id="props"><a href="#props" class="headerlink" title="props"></a>props</h2><p>PropsTest.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;box&quot;&gt;<br>    &lt;h1&gt;props:我是父组件曹操&lt;/h1&gt;<br>    &lt;hr/&gt;<br>    &lt;Child info=&quot;我是曹操&quot; :money=&quot;money&quot;&gt;&lt;/Child&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script setup lang=&quot;ts&quot;&gt;<br>//props:可以实现父子组件通信,props数据还是只读的！！！<br>import Child from &quot;./Child.vue&quot;;<br>import &#123;ref&#125; from &quot;vue&quot;;<br><br>let money = ref(10000);<br>&lt;/script&gt;<br><br>&lt;style scoped&gt;<br>.box &#123;<br>  width: 100vw;<br>  height: 400px;<br>  background: yellowgreen;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><p>Child.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;son&quot;&gt;<br>       &lt;h1&gt;我是子组件:曹植&lt;/h1&gt;<br>       &lt;p&gt;&#123;&#123;props.info&#125;&#125;&lt;/p&gt;<br>       &lt;p&gt;&#123;&#123;props.money&#125;&#125;&lt;/p&gt;<br>      &lt;!--props可以省略前面的名字---&gt;<br>       &lt;p&gt;&#123;&#123;info&#125;&#125;&lt;/p&gt;<br>       &lt;p&gt;&#123;&#123;money&#125;&#125;&lt;/p&gt;<br>       &lt;button @click=&quot;updateProps&quot;&gt;修改props数据&lt;/button&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script setup lang=&quot;ts&quot;&gt;<br>//需要使用到defineProps方法去接受父组件传递过来的数据<br>//defineProps是Vue3提供方法,不需要引入直接使用<br>let props = defineProps([&#x27;info&#x27;,&#x27;money&#x27;]); //数组|对象写法都可以<br>//按钮点击的回调<br>const updateProps = ()=&gt;&#123;<br>  // props.money+=10;  props:只读的<br>  console.log(props.info)<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style scoped&gt;<br>.son&#123;<br>  width: 400px;<br>  height: 200px;<br>  background: hotpink;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><h2 id="自定义事件"><a href="#自定义事件" class="headerlink" title="自定义事件"></a>自定义事件</h2><p>EventTest.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;h1&gt;事件&lt;/h1&gt;<br>    &lt;!-- 原生DOM事件 --&gt;<br>    &lt;pre @click=&quot;handler&quot;&gt;<br>      大江东去浪淘尽,千古分流人物<br>    &lt;/pre&gt;<br>    &lt;button @click=&quot;handler1(1, 2, 3, $event)&quot;&gt;点击我传递多个参数&lt;/button&gt;<br>    &lt;hr&gt;<br>    &lt;!--<br>        vue2框架当中:这种写法自定义事件,可以通过.native修饰符变为原生DOM事件<br>        vue3框架下面写法其实即为原生DOM事件<br><br>        vue3:原生的DOM事件不管是放在标签身上、组件标签身上都是原生DOM事件<br>      --&gt;<br>    &lt;Event1 @click=&quot;handler2&quot;&gt;&lt;/Event1&gt;<br>    &lt;hr&gt;<br>    &lt;!-- 绑定自定义事件xxx:实现子组件给父组件传递数据 --&gt;<br>    &lt;Event2 @xxx=&quot;handler3&quot; @click=&quot;handler4&quot;&gt;&lt;/Event2&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script setup lang=&quot;ts&quot;&gt;<br>//引入子组件<br>import Event1 from &#x27;./Event1.vue&#x27;;<br>//引入子组件<br>import Event2 from &#x27;./Event2.vue&#x27;;<br>//事件回调--1<br>const handler = (event) =&gt; &#123;<br>  //event即为事件对象<br>  console.log(event);<br>&#125;<br>//事件回调--2<br>const handler1 = (a, b, c, $event) =&gt; &#123;<br>  console.log(a, b, c, $event)<br>&#125;<br>//事件回调---3<br>const handler2 = () =&gt; &#123;<br>  console.log(123);<br>&#125;<br>//事件回调---4<br>const handler3 = (param1, param2) =&gt; &#123;<br>  console.log(param1, param2);<br>&#125;<br>//事件回调--5<br>const handler4 = (param1, param2) =&gt; &#123;<br>  console.log(param1, param2);<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style scoped&gt;&lt;/style&gt;<br></code></pre></td></tr></table></figure><p>Event1.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;son&quot;&gt;<br>    &lt;p&gt;我是子组件1&lt;/p&gt;<br>    &lt;button&gt;点击我也执行&lt;/button&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script setup lang=&quot;ts&quot;&gt;<br><br>&lt;/script&gt;<br><br>&lt;style scoped&gt;<br>.son &#123;<br>  width: 400px;<br>  height: 200px;<br>  background: skyblue;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><p>Event2.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;child&quot;&gt;<br>    &lt;p&gt;我是子组件2&lt;/p&gt;<br>    &lt;button @click=&quot;handler&quot;&gt;点击我触发自定义事件xxx&lt;/button&gt;<br>    &lt;!-- 向父组件传值 --&gt;<br>    &lt;button @click=&quot;$emit(&#x27;click&#x27;,&#x27;AK47&#x27;,&#x27;J20&#x27;)&quot;&gt;点击我触发自定义事件click&lt;/button&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script setup lang=&quot;ts&quot;&gt;<br>//利用defineEmits方法返回函数触发自定义事件<br>//defineEmits方法不需要引入直接使用<br>let $emit = defineEmits([&#x27;xxx&#x27;,&#x27;click&#x27;]);<br>//按钮点击回调<br>const handler = () =&gt; &#123;<br>  //第一个参数:事件类型 第二个|三个|N参数即为注入数据<br>    $emit(&#x27;xxx&#x27;,&#x27;东风导弹&#x27;,&#x27;航母&#x27;);<br>&#125;;<br>&lt;/script&gt;<br><br>&lt;style scoped&gt;<br>.child &#123;<br>  width: 400px;<br>  height: 200px;<br>  background: pink;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><h2 id="全局事件总线-bus-（组件通信）"><a href="#全局事件总线-bus-（组件通信）" class="headerlink" title="全局事件总线$bus （组件通信）"></a>全局事件总线$bus （组件通信）</h2><p>EventBusTest</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;box&quot;&gt;<br>    &lt;h1&gt;全局事件总线$bus 组件通信&lt;/h1&gt;<br>    &lt;hr /&gt;<br>    &lt;div class=&quot;container&quot;&gt;<br>      &lt;Child1&gt;&lt;/Child1&gt;<br>      &lt;Child2&gt;&lt;/Child2&gt;<br>    &lt;/div&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script setup lang=&quot;ts&quot;&gt;<br>//引入子组件<br>import Child1 from &quot;./Child1.vue&quot;;<br>import Child2 from &quot;./Child2.vue&quot;;<br>&lt;/script&gt;<br><br>&lt;style scoped&gt;<br>.box &#123;<br>  width: 100vw;<br>  height: 400px;<br>  background: yellowgreen;<br>&#125;<br>.container&#123;<br>  display: flex;<br>  justify-content: space-between;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><p>bus&#x2F;index.ts</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">//引入mitt插件:mitt一个方法,方法执行会返回bus对象</span><br><span class="hljs-keyword">import</span> mitt <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;mitt&#x27;</span>;<br><span class="hljs-keyword">const</span> $bus = <span class="hljs-title function_">mitt</span>();<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> $bus;<br></code></pre></td></tr></table></figure><p>Child2.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;child2&quot;&gt;<br>     &lt;h2&gt;我是子组件2:曹丕&lt;/h2&gt;<br>     &lt;button @click=&quot;handler&quot;&gt;点击我给兄弟送一台法拉利&lt;/button&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script setup lang=&quot;ts&quot;&gt;<br>//引入$bus对象<br>import $bus from &#x27;../../bus&#x27;;<br>//点击按钮回调<br>const handler = ()=&gt;&#123;<br>  $bus.emit(&#x27;car&#x27;,&#123;car:&quot;法拉利&quot;&#125;);<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style scoped&gt;<br>.child2&#123;<br>  width: 300px;<br>  height: 300px;<br>  background: skyblue;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><p>Child1.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;child1&quot;&gt;<br>    &lt;h3&gt;我是子组件1:曹植&lt;/h3&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script setup lang=&quot;ts&quot;&gt;<br>import $bus from &quot;../../bus&quot;;<br>//组合式API函数<br>import &#123; onMounted &#125; from &quot;vue&quot;;<br>//组件挂载完毕的时候,当前组件绑定一个事件,接受将来兄弟组件传递的数据<br>onMounted(() =&gt; &#123;<br>  //第一个参数:即为事件类型  第二个参数:即为事件回调<br>  $bus.on(&quot;car&quot;, (car) =&gt; &#123;<br>    console.log(car);<br>  &#125;);<br>&#125;);<br>&lt;/script&gt;<br><br>&lt;style scoped&gt;<br>.child1 &#123;<br>  width: 300px;<br>  height: 300px;<br>  background: hotpink;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><h2 id="v-model双向绑定"><a href="#v-model双向绑定" class="headerlink" title="v-model双向绑定"></a>v-model双向绑定</h2><p>ModelTest.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;h1&gt;v-model:钱数&#123;&#123; money &#125;&#125;&#123;&#123;pageNo&#125;&#125;&#123;&#123;pageSize&#125;&#125;&lt;/h1&gt;<br>    &lt;input type=&quot;text&quot; v-model=&quot;info&quot; /&gt;<br>    &lt;hr /&gt;<br>    &lt;!-- props:父亲给儿子数据 --&gt;<br>    &lt;Child :modelValue=&quot;money&quot; @update:modelValue=&quot;handler&quot;&gt;&lt;/Child&gt;<br>    &lt;!-- <br>       v-model组件身上使用<br>       第一:相当有给子组件传递props[modelValue] = 10000<br>       第二:相当于给子组件绑定自定义事件update:modelValue<br>     --&gt;<br>    &lt;Child v-model=&quot;money&quot;&gt;&lt;/Child&gt;<br>    &lt;hr /&gt;<br>    &lt;Child1 v-model:pageNo=&quot;pageNo&quot; v-model:pageSize=&quot;pageSize&quot;&gt;&lt;/Child1&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script setup lang=&quot;ts&quot;&gt;<br>//v-model指令:收集表单数据,数据双向绑定<br>//v-model也可以实现组件之间的通信,实现父子组件数据同步的业务<br>//父亲给子组件数据 props<br>//子组件给父组件数据 自定义事件<br>//引入子组件<br>import Child from &quot;./Child.vue&quot;;<br>import Child1 from &quot;./Child1.vue&quot;;<br>import &#123; ref &#125; from &quot;vue&quot;;<br>let info = ref(&quot;&quot;);<br>//父组件的数据钱数<br>let money = ref(10000);<br>//自定义事件的回调<br>const handler = (num) =&gt; &#123;<br>  //将来接受子组件传递过来的数据<br>  money.value = num;<br>&#125;;<br><br>//父亲的数据<br>let pageNo = ref(1);<br>let pageSize = ref(3);<br>&lt;/script&gt;<br><br>&lt;style scoped&gt;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><p>Child.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;child&quot;&gt;<br>    &lt;h3&gt;钱数:&#123;&#123; modelValue &#125;&#125;&lt;/h3&gt;<br>    &lt;button @click=&quot;handler&quot;&gt;父子组件数据同步&lt;/button&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script setup lang=&quot;ts&quot;&gt;<br>//接受props<br>let props = defineProps([&quot;modelValue&quot;]);<br>let $emit = defineEmits([&#x27;update:modelValue&#x27;]);<br>//子组件内部按钮的点击回调<br>const handler = ()=&gt;&#123;<br>   //触发自定义事件<br>   $emit(&#x27;update:modelValue&#x27;,props.modelValue+1000);<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style scoped&gt;<br>.child &#123;<br>  width: 600px;<br>  height: 300px;<br>  background: skyblue;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><p>Child1.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;child2&quot;&gt;<br>    &lt;h1&gt;同时绑定多个v-model&lt;/h1&gt;<br>    &lt;button @click=&quot;handler&quot;&gt;pageNo&#123;&#123; pageNo &#125;&#125;&lt;/button&gt;<br>    &lt;button @click=&quot;$emit(&#x27;update:pageSize&#x27;, pageSize + 4)&quot;&gt;<br>      pageSize&#123;&#123; pageSize &#125;&#125;<br>    &lt;/button&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script setup lang=&quot;ts&quot;&gt;<br>let props = defineProps([&quot;pageNo&quot;, &quot;pageSize&quot;]);<br>let $emit = defineEmits([&quot;update:pageNo&quot;, &quot;update:pageSize&quot;]);<br>//第一个按钮的事件回调<br>const handler = () =&gt; &#123;<br>  $emit(&quot;update:pageNo&quot;, props.pageNo + 3);<br>&#125;;<br>&lt;/script&gt;<br><br>&lt;style scoped&gt;<br>.child2 &#123;<br>  width: 300px;<br>  height: 300px;<br>  background: hotpink;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><h2 id="获取组件的属性和事件"><a href="#获取组件的属性和事件" class="headerlink" title="获取组件的属性和事件"></a>获取组件的属性和事件</h2><p>AttrsListenersTest.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;h1&gt;useAttrs&lt;/h1&gt;<br>    &lt;el-button type=&quot;primary&quot; size=&quot;small&quot; :icon=&quot;Edit&quot;&gt;&lt;/el-button&gt;<br>    &lt;!-- 自定义组件 --&gt;<br>    &lt;HintButton type=&quot;primary&quot; size=&quot;small&quot; :icon=&quot;Edit&quot; title=&quot;编辑按钮&quot; @click=&quot;handler&quot; @xxx=&quot;handler&quot;&gt;&lt;/HintButton&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script setup lang=&quot;ts&quot;&gt;<br>//vue3框架提供一个方法useAttrs方法,它可以获取组件身上的属性与事件！！！<br>//图标组件<br>import &#123;<br>  Check,<br>  Delete,<br>  Edit,<br>  Message,<br>  Search,<br>  Star,<br>&#125; from &quot;@element-plus/icons-vue&quot;;<br>import HintButton from &quot;./HintButton.vue&quot;;<br>const num = 12306;<br>//按钮点击的回调<br>const handler = ()=&gt;&#123;<br>  alert(num);<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style scoped&gt;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><p>HintButton.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div :title=&quot;title&quot;&gt;<br>    &lt;el-button :=&quot;$attrs&quot;&gt;&lt;/el-button&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script setup lang=&quot;ts&quot;&gt;<br>//引入useAttrs方法:获取组件标签身上属性与事件<br>import &#123; useAttrs &#125; from &#x27;vue&#x27;;<br>//此方法执行会返回一个对象<br>let $attrs = useAttrs();<br><br>//万一用props接受title<br>let props = defineProps([&#x27;title&#x27;]);<br>//props与useAttrs方法都可以获取父组件传递过来的属性与属性值<br>//但是props接受了 useAttrs方法就获取不到了<br>console.log($attrs);<br>&lt;/script&gt;<br><br>&lt;style scoped&gt;&lt;/style&gt;<br></code></pre></td></tr></table></figure><h2 id="父子组件联调"><a href="#父子组件联调" class="headerlink" title="父子组件联调"></a>父子组件联调</h2><p>RefChildrenParentTest.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;box&quot;&gt;<br>    &lt;h1&gt;我是父亲曹操:&#123;&#123;money&#125;&#125;&lt;/h1&gt;<br>    &lt;button @click=&quot;handler&quot;&gt;找我的儿子曹植借10元&lt;/button&gt;<br>    &lt;hr&gt;<br>    &lt;Son ref=&quot;son&quot;&gt;&lt;/Son&gt;<br>    &lt;hr&gt;<br>    &lt;Dau&gt;&lt;/Dau&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script setup lang=&quot;ts&quot;&gt;<br>//ref:可以获取真实的DOM节点,可以获取到子组件实例VC<br>//$parent:可以在子组件内部获取到父组件的实例<br>//引入子组件<br>import Son from &#x27;./Son.vue&#x27;<br>import Dau from &#x27;./Daughter.vue&#x27;<br>import &#123;ref&#125; from &#x27;vue&#x27;;<br>//父组件钱数<br>let money = ref(100000000);<br>//获取子组件的实例<br>let son = ref();<br>//父组件内部按钮点击回调<br>const handler = ()=&gt;&#123;<br>   money.value+=10;<br>   //儿子钱数减去10<br>   son.value.money-=10;<br>   son.value.fly();<br>&#125;<br>//对外暴露<br>defineExpose(&#123;<br>   money<br>&#125;)<br>&lt;/script&gt;<br><br>&lt;style scoped&gt;<br>.box&#123;<br>  width: 100vw;<br>  height: 500px;<br>  background: skyblue;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><p>Son.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;son&quot;&gt;<br>    &lt;h3&gt;我是子组件:曹植&#123;&#123;money&#125;&#125;&lt;/h3&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script setup lang=&quot;ts&quot;&gt;<br>import &#123;ref&#125; from &#x27;vue&#x27;;<br>//儿子钱数<br>let money = ref(666);<br>const fly = ()=&gt;&#123;<br>  console.log(&#x27;我可以飞&#x27;);<br>&#125;<br>//组件内部数据对外关闭的，别人不能访问<br>//如果想让外部访问需要通过defineExpose方法对外暴露<br>defineExpose(&#123;<br>  money,<br>  fly<br>&#125;)<br>&lt;/script&gt;<br><br>&lt;style scoped&gt;<br>.son &#123;<br>  width: 300px;<br>  height: 200px;<br>  background: cyan;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><p>Daughter.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;dau&quot;&gt;<br>     &lt;h1&gt;我是闺女曹杰&#123;&#123;money&#125;&#125;&lt;/h1&gt;<br>     &lt;button @click=&quot;handler($parent)&quot;&gt;点击我爸爸给我10000元&lt;/button&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script setup lang=&quot;ts&quot;&gt;<br>import &#123;ref&#125; from &#x27;vue&#x27;;<br>//闺女钱数<br>let money = ref(999999);<br>//闺女按钮点击回调<br>const handler = ($parent)=&gt;&#123;<br>   money.value+=10000;<br>   $parent.money-=10000;<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style scoped&gt;<br>.dau&#123;<br>  width: 300px;<br>  height: 300px;<br>  background: hotpink;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><h2 id="隔代联调"><a href="#隔代联调" class="headerlink" title="隔代联调"></a>隔代联调</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;box&quot;&gt;<br>    &lt;h1&gt;Provide与Inject&#123;&#123;car&#125;&#125;&lt;/h1&gt;<br>    &lt;hr /&gt;<br>    &lt;Child&gt;&lt;/Child&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script setup lang=&quot;ts&quot;&gt;<br>import Child from &quot;./Child.vue&quot;;<br>//vue3提供provide(提供)与inject(注入),可以实现隔辈组件传递数据<br>import &#123; ref, provide &#125; from &quot;vue&quot;;<br>let car = ref(&quot;法拉利&quot;);<br>//祖先组件给后代组件提供数据<br>//两个参数:第一个参数就是提供的数据key<br>//第二个参数:祖先组件提供数据<br>provide(&quot;TOKEN&quot;, car);<br>&lt;/script&gt;<br><br>&lt;style scoped&gt;<br>.box &#123;<br>  width: 100vw;<br>  height: 600px;<br>  background: skyblue;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><p>Child.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;child&quot;&gt;<br>     &lt;h1&gt;我是子组件1&lt;/h1&gt;<br>     &lt;Child&gt;&lt;/Child&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script setup lang=&quot;ts&quot;&gt;<br>import Child from &#x27;./GrandChild.vue&#x27;;<br>&lt;/script&gt;<br><br>&lt;style scoped&gt;<br>.child&#123;<br>  width: 300px;<br>  height: 400px;<br>  background: yellowgreen;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><p>GrandChild.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;child1&quot;&gt;<br>    &lt;h1&gt;孙子组件&lt;/h1&gt;<br>    &lt;p&gt;&#123;&#123;car&#125;&#125;&lt;/p&gt;<br>    &lt;button @click=&quot;updateCar&quot;&gt;更新数据&lt;/button&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script setup lang=&quot;ts&quot;&gt;<br>import &#123;inject&#125; from &#x27;vue&#x27;;<br>//注入祖先组件提供数据<br>//需要参数:即为祖先提供数据的key<br>let car = inject(&#x27;TOKEN&#x27;);<br>const updateCar = ()=&gt;&#123;<br>   car.value  = &#x27;自行车&#x27;;<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style scoped&gt;<br>.child1 &#123;<br>  width: 200px;<br>  height: 200px;<br>  background: red;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><h2 id="Pinia"><a href="#Pinia" class="headerlink" title="Pinia"></a>Pinia</h2><p>store&#x2F;index.ts</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">//创建大仓库</span><br><span class="hljs-keyword">import</span> &#123; createPinia &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;pinia&#x27;</span>;<br><span class="hljs-comment">//createPinia方法可以用于创建大仓库</span><br><span class="hljs-keyword">let</span> store = <span class="hljs-title function_">createPinia</span>();<br><span class="hljs-comment">//对外暴露,安装仓库</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> store;<br></code></pre></td></tr></table></figure><p>store&#x2F;modiules&#x2F;info.ts</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">//定义info小仓库</span><br><span class="hljs-keyword">import</span> &#123; defineStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;pinia&quot;</span>;<br><span class="hljs-comment">//第一个仓库:小仓库名字  第二个参数:小仓库配置对象</span><br><span class="hljs-comment">//defineStore方法执行会返回一个函数,函数作用就是让组件可以获取到仓库数据</span><br><span class="hljs-keyword">let</span> useInfoStore = <span class="hljs-title function_">defineStore</span>(<span class="hljs-string">&quot;info&quot;</span>, &#123;<br>    <span class="hljs-comment">//存储数据:state</span><br>    <span class="hljs-attr">state</span>: <span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-keyword">return</span> &#123;<br>            <span class="hljs-attr">count</span>: <span class="hljs-number">99</span>,<br>            <span class="hljs-attr">arr</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>]<br>        &#125;<br>    &#125;,<br>    <span class="hljs-attr">actions</span>: &#123;<br>        <span class="hljs-comment">//注意:函数没有context上下文对象</span><br>        <span class="hljs-comment">//没有commit、没有mutations去修改数据</span><br>        <span class="hljs-title function_">updateNum</span>(<span class="hljs-params">a: <span class="hljs-built_in">number</span>, b: <span class="hljs-built_in">number</span></span>) &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">count</span> += a;<br>        &#125;<br>    &#125;,<br>    <span class="hljs-attr">getters</span>: &#123;<br>        <span class="hljs-title function_">total</span>(<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-keyword">let</span> <span class="hljs-attr">result</span>:<span class="hljs-built_in">any</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">arr</span>.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">prev: <span class="hljs-built_in">number</span>, next: <span class="hljs-built_in">number</span></span>) =&gt;</span> &#123;<br>                <span class="hljs-keyword">return</span> prev + next;<br>            &#125;, <span class="hljs-number">0</span>);<br>            <span class="hljs-keyword">return</span> result;<br>        &#125;<br>    &#125;<br>&#125;);<br><span class="hljs-comment">//对外暴露方法</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> useInfoStore;<br></code></pre></td></tr></table></figure><p>store&#x2F;modiules&#x2F;todo.ts</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">//定义组合式API仓库</span><br><span class="hljs-keyword">import</span> &#123; defineStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;pinia&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; ref, computed,watch&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;<br><span class="hljs-comment">//创建小仓库</span><br><span class="hljs-keyword">let</span> useTodoStore = <span class="hljs-title function_">defineStore</span>(<span class="hljs-string">&#x27;todo&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">let</span> todos = <span class="hljs-title function_">ref</span>([&#123; <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;吃饭&#x27;</span> &#125;, &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;睡觉&#x27;</span> &#125;, &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;打豆豆&#x27;</span> &#125;]);<br>    <span class="hljs-keyword">let</span> arr = <span class="hljs-title function_">ref</span>([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]);<br><br>    <span class="hljs-keyword">const</span> total = <span class="hljs-title function_">computed</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-keyword">return</span> arr.<span class="hljs-property">value</span>.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">prev, next</span>) =&gt;</span> &#123;<br>            <span class="hljs-keyword">return</span> prev + next;<br>        &#125;, <span class="hljs-number">0</span>)<br>    &#125;)<br>    <span class="hljs-comment">//务必要返回一个对象:属性与方法可以提供给组件使用</span><br>    <span class="hljs-keyword">return</span> &#123;<br>        todos,<br>        arr,<br>        total,<br>        <span class="hljs-title function_">updateTodo</span>(<span class="hljs-params"></span>) &#123;<br>            todos.<span class="hljs-property">value</span>.<span class="hljs-title function_">push</span>(&#123; <span class="hljs-attr">id</span>: <span class="hljs-number">4</span>, <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;组合式API方法&#x27;</span> &#125;);<br>        &#125;<br>    &#125;<br>&#125;);<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> useTodoStore;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;box&quot;&gt;<br>    &lt;h1&gt;pinia&lt;/h1&gt;<br>    &lt;div class=&quot;container&quot;&gt;<br>      &lt;Child&gt;&lt;/Child&gt;<br>      &lt;Child1&gt;&lt;/Child1&gt;<br>    &lt;/div&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script setup lang=&quot;ts&quot;&gt;<br>import Child from &quot;./Child.vue&quot;;<br>import Child1 from &quot;./Child1.vue&quot;;<br>//vuex:集中式管理状态容器,可以实现任意组件之间通信！！！<br>//核心概念:state、mutations、actions、getters、modules<br><br>//pinia:集中式管理状态容器,可以实现任意组件之间通信！！！<br>//核心概念:state、actions、getters<br>//pinia写法:选择器API、组合式API<br>&lt;/script&gt;<br><br>&lt;style scoped&gt;<br>.box &#123;<br>  width: 600px;<br>  height: 400px;<br>  background: skyblue;<br>&#125;<br>.container&#123;<br>  display: flex;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><p>Child.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;child&quot;&gt;<br>    &lt;h1&gt;&#123;&#123; infoStore.count &#125;&#125;---&#123;&#123;infoStore.total&#125;&#125;&lt;/h1&gt;<br>    &lt;button @click=&quot;updateCount&quot;&gt;点击我修改仓库数据&lt;/button&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script setup lang=&quot;ts&quot;&gt;<br>import useInfoStore from &quot;../../store/modules/info&quot;;<br>//获取小仓库对象<br>let infoStore = useInfoStore();<br>console.log(infoStore);<br>//修改数据方法<br>const updateCount = () =&gt; &#123;<br>  //仓库调用自身的方法去修改仓库的数据<br>  infoStore.updateNum(66,77);<br>&#125;;<br>&lt;/script&gt;<br><br>&lt;style scoped&gt;<br>.child &#123;<br>  width: 200px;<br>  height: 200px;<br>  background: yellowgreen;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><p>Child1.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;child1&quot;&gt;<br>    &#123;&#123; infoStore.count &#125;&#125;<br>    &lt;p @click=&quot;updateTodo&quot;&gt;&#123;&#123; todoStore.arr &#125;&#125;&#123;&#123;todoStore.total&#125;&#125;&lt;/p&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script setup lang=&quot;ts&quot;&gt;<br>import useInfoStore from &quot;../../store/modules/info&quot;;<br>//获取小仓库对象<br>let infoStore = useInfoStore();<br><br>//引入组合式API函数仓库<br>import useTodoStore from &quot;../../store/modules/todo&quot;;<br>let todoStore = useTodoStore();<br><br>//点击p段落去修改仓库的数据<br>const updateTodo = () =&gt; &#123;<br>  todoStore.updateTodo();<br>&#125;;<br>&lt;/script&gt;<br><br>&lt;style scoped&gt;<br>.child1 &#123;<br>  width: 200px;<br>  height: 200px;<br>  background: hotpink;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><h2 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h2><p>SlotTest.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;h1&gt;slot&lt;/h1&gt;<br>    &lt;Test1 :todos=&quot;todos&quot;&gt;<br>      &lt;template v-slot=&quot;&#123; $row, $index &#125;&quot;&gt;<br>        &lt;p :style=&quot;&#123; color: $row.done ? &#x27;green&#x27; : &#x27;red&#x27; &#125;&quot;&gt;<br>          &#123;&#123; $row.title &#125;&#125;--&#123;&#123; $index &#125;&#125;<br>        &lt;/p&gt;<br>      &lt;/template&gt;<br>    &lt;/Test1&gt;<br>    &lt;Test&gt;<br>      &lt;div&gt;<br>        &lt;pre&gt;大江东去浪淘尽,千古分流人物&lt;/pre&gt;<br>      &lt;/div&gt;<br>      &lt;!-- 具名插槽填充a --&gt;<br>      &lt;template #a&gt;<br>        &lt;div&gt;我是填充具名插槽a位置结构&lt;/div&gt;<br>      &lt;/template&gt;<br>      &lt;!-- 具名插槽填充b v-slot指令可以简化为# --&gt;<br>      &lt;template #b&gt;<br>        &lt;div&gt;我是填充具名插槽b位置结构&lt;/div&gt;<br>      &lt;/template&gt;<br>    &lt;/Test&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script setup lang=&quot;ts&quot;&gt;<br>import Test from &quot;./Test.vue&quot;;<br>import Test1 from &quot;./Test1.vue&quot;;<br>//插槽:默认插槽、具名插槽、作用域插槽<br>//作用域插槽:就是可以传递数据的插槽,子组件可以讲数据回传给父组件,父组件可以决定这些回传的<br>//数据是以何种结构或者外观在子组件内部去展示！！！<br><br>import &#123; ref &#125; from &quot;vue&quot;;<br>//todos数据<br>let todos = ref([<br>  &#123; id: 1, title: &quot;吃饭&quot;, done: true &#125;,<br>  &#123; id: 2, title: &quot;睡觉&quot;, done: false &#125;,<br>  &#123; id: 3, title: &quot;打豆豆&quot;, done: true &#125;,<br>  &#123; id: 4, title: &quot;打游戏&quot;, done: false &#125;,<br>]);<br>&lt;/script&gt;<br><br>&lt;style scoped&gt;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><p>Test.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;box&quot;&gt;<br>    &lt;h1&gt;我是子组件默认插槽&lt;/h1&gt;<br>    &lt;!-- 默认插槽 --&gt;<br>    &lt;slot&gt;&lt;/slot&gt;<br>    &lt;h1&gt;我是子组件默认插槽&lt;/h1&gt;<br>    &lt;h1&gt;具名插槽填充数据&lt;/h1&gt;<br>    &lt;slot name=&quot;a&quot;&gt;&lt;/slot&gt;<br>    &lt;h1&gt;具名插槽填充数据&lt;/h1&gt;<br>    &lt;h1&gt;具名插槽填充数据&lt;/h1&gt;<br>    &lt;slot name=&quot;b&quot;&gt;&lt;/slot&gt;<br>    &lt;h1&gt;具名插槽填充数据&lt;/h1&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script setup lang=&quot;ts&quot;&gt;<br>&lt;/script&gt;<br><br>&lt;style scoped&gt;<br>.box &#123;<br>  width: 100vw;<br>  height: 500px;<br>  background: skyblue;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;box&quot;&gt;<br>    &lt;h1&gt;作用域插槽&lt;/h1&gt;<br>    &lt;ul&gt;<br>      &lt;li v-for=&quot;(item, index) in todos&quot; :key=&quot;item.id&quot;&gt;<br>        &lt;!--作用域插槽:可以讲数据回传给父组件--&gt;<br>        &lt;slot :$row=&quot;item&quot; :$index=&quot;index&quot;&gt;&lt;/slot&gt;<br>      &lt;/li&gt;<br>    &lt;/ul&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script setup lang=&quot;ts&quot;&gt;<br>//通过props接受父组件传递数据<br>defineProps([&quot;todos&quot;]);<br>&lt;/script&gt;<br><br>&lt;style scoped&gt;<br>.box &#123;<br>  width: 100vw;<br>  height: 400px;<br>  background: skyblue;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><p>router&#x2F;index.ts</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> &#123; createRouter, createWebHistory &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span><br><span class="hljs-keyword">import</span> routes <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./routes&#x27;</span><br><br><span class="hljs-keyword">const</span> router = <span class="hljs-title function_">createRouter</span>(&#123;<br>  <span class="hljs-attr">history</span>: <span class="hljs-title function_">createWebHistory</span>(<span class="hljs-keyword">import</span>.<span class="hljs-property">meta</span>.<span class="hljs-property">env</span>.<span class="hljs-property">BASE_URL</span>),<br>  <span class="hljs-attr">routes</span>: routes<br>&#125;)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> router<br><br></code></pre></td></tr></table></figure><p>router&#x2F;routes.ts</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">/*</span><br><span class="hljs-comment">所有路由配置的数组</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> [<br>  <br><br>  <span class="hljs-comment">/* --------------------------------------- */</span><br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/props_pre&#x27;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;@/views/01_props/PropsTest.vue&#x27;</span>),<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/event_pre&#x27;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;@/views/02_custom-event/EventTest.vue&#x27;</span>),<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/bus_pre&#x27;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;@/views/03_event-bus/EventBusTest.vue&#x27;</span>),<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/model_pre&#x27;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;@/views/04_v-model/ModelTest.vue&#x27;</span>),<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/attrs-listeners_pre&#x27;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;@/views/05_attrs-listeners/AttrsListenersTest.vue&#x27;</span>),<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/ref-parent_pre&#x27;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;@/views/06_ref-children-parent/RefChildrenParentTest.vue&#x27;</span>),<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/provide-inject_pre&#x27;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;@/views/07_provide-inject/ProvideInjectTest.vue&#x27;</span>),<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/vuex_pre&#x27;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;@/views/08_pinia/index.vue&#x27;</span>),<br>  &#125;,<br>   &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/slot_pre&#x27;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;@/views/09_slot/SlotTest.vue&#x27;</span>),<br>  &#125;,<br>]<br><br></code></pre></td></tr></table></figure><h2 id="main-ts"><a href="#main-ts" class="headerlink" title="main.ts"></a>main.ts</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// 引入实例化上下文的api方法createApp</span><br><span class="hljs-keyword">import</span> &#123; createApp &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-comment">// 引入element ui</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">ElementPlus</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;element-plus&#x27;</span><br><span class="hljs-comment">// 引入element ui的样式</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;element-plus/dist/index.css&#x27;</span><br><span class="hljs-comment">// 引入App组件</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App.vue&#x27;</span><br><span class="hljs-comment">// 引入路由器</span><br><span class="hljs-keyword">import</span> router <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./router&#x27;</span><br><span class="hljs-comment">//引入仓库</span><br><span class="hljs-keyword">import</span> store <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./store&#x27;</span><br><span class="hljs-comment">// 创建app</span><br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">createApp</span>(<span class="hljs-title class_">App</span>)<br>app.<span class="hljs-title function_">use</span>(store)<br>app.<span class="hljs-title function_">use</span>(router) <span class="hljs-comment">// 注册路由器</span><br>app.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">ElementPlus</span>) <span class="hljs-comment">// 使用element-ui</span><br><span class="hljs-comment">// 挂载</span><br>app.<span class="hljs-title function_">mount</span>(<span class="hljs-string">&#x27;#app&#x27;</span>);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Vue3</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>12_Apache_POI</title>
    <link href="/2023/11/07/%E9%BB%91%E9%A9%AC-%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/12_Apache_POI/"/>
    <url>/2023/11/07/%E9%BB%91%E9%A9%AC-%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/12_Apache_POI/</url>
    
    <content type="html"><![CDATA[<h1 id="Apache-POI"><a href="#Apache-POI" class="headerlink" title="Apache_POI"></a>Apache_POI</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Apache POI 是一个处理Miscrosoft Office各种文件格式的开源项目。简单来说就是，我们可以使用 POI 在 Java 程序中对Miscrosoft Office各种文件进行读写操作。<br>一般情况下，POI 都是用于操作 Excel 文件。</p><h2 id="maven坐标"><a href="#maven坐标" class="headerlink" title="maven坐标"></a>maven坐标</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.poi<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>poi<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.16<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.poi<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>poi-ooxml<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.16<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在苍穹外卖中，先在windows可视化系统中编辑好excel模板文件，再通过poi处理将数据导入excel模板中</p><h2 id="小案例"><a href="#小案例" class="headerlink" title="小案例"></a>小案例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.sky.POItest;<br><br><span class="hljs-keyword">import</span> org.apache.poi.xssf.usermodel.XSSFCell;<br><span class="hljs-keyword">import</span> org.apache.poi.xssf.usermodel.XSSFRow;<br><span class="hljs-keyword">import</span> org.apache.poi.xssf.usermodel.XSSFSheet;<br><span class="hljs-keyword">import</span> org.apache.poi.xssf.usermodel.XSSFWorkbook;<br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * ClassName: POItest</span><br><span class="hljs-comment"> * Package: com.sky.POItest</span><br><span class="hljs-comment"> * Description:</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> Jmin</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Create</span> 2023/11/7 15:38</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">POItest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">write</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br><span class="hljs-comment">//        内存中创建一个Excel文件</span><br>        <span class="hljs-type">XSSFWorkbook</span> <span class="hljs-variable">excel</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">XSSFWorkbook</span>();<br>        <span class="hljs-type">XSSFSheet</span> <span class="hljs-variable">sheet</span> <span class="hljs-operator">=</span> excel.createSheet(<span class="hljs-string">&quot;info&quot;</span>);<br>        <span class="hljs-type">XSSFRow</span> <span class="hljs-variable">row0</span> <span class="hljs-operator">=</span> sheet.createRow(<span class="hljs-number">0</span>);<br>        row0.createCell(<span class="hljs-number">0</span>).setCellValue(<span class="hljs-string">&quot;helloWorld&quot;</span>);<br>        <span class="hljs-type">XSSFRow</span> <span class="hljs-variable">row1</span> <span class="hljs-operator">=</span> sheet.createRow(<span class="hljs-number">1</span>);<br>        row1.createCell(<span class="hljs-number">0</span>).setCellValue(<span class="hljs-string">&quot;我爱你&quot;</span>);<br>        row1.createCell(<span class="hljs-number">1</span>).setCellValue(<span class="hljs-string">&quot;好爱你&quot;</span>);<br>        row1.createCell(<span class="hljs-number">2</span>).setCellValue(<span class="hljs-string">&quot;对不起 谢谢&quot;</span>);<br>        <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fileOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;D:\\Employment_Readiness\\广软作业\\hello.xlsx&quot;</span>));<br>        excel.write(fileOutputStream);<br>        fileOutputStream.close();<br>        excel.close();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">read</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;D:\\Employment_Readiness\\广软作业\\hello.xlsx&quot;</span>));<br>        <span class="hljs-type">XSSFWorkbook</span> <span class="hljs-variable">excel</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">XSSFWorkbook</span>(inputStream);<br>        <span class="hljs-type">XSSFSheet</span> <span class="hljs-variable">sheet0</span> <span class="hljs-operator">=</span> excel.getSheetAt(<span class="hljs-number">0</span>);<br><span class="hljs-comment">//        获取sheet页中最后的行号</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">lastRowNum</span> <span class="hljs-operator">=</span> sheet0.getLastRowNum();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= lastRowNum; i++) &#123;<br>            <span class="hljs-type">XSSFRow</span> <span class="hljs-variable">row</span> <span class="hljs-operator">=</span> sheet0.getRow(i);<br>            System.out.println(row.getCell(<span class="hljs-number">0</span>).getStringCellValue());<br>            System.out.println(row.getCell(<span class="hljs-number">1</span>).getStringCellValue());<br>            System.out.println(row.getCell(<span class="hljs-number">2</span>).getStringCellValue());<br>        &#125;<br>    &#125;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        write();<br>    &#125;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        read();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>项目练习</category>
      
      <category>苍穹外卖</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>11_WebSocket</title>
    <link href="/2023/11/03/%E9%BB%91%E9%A9%AC-%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/11_WebSocket/"/>
    <url>/2023/11/03/%E9%BB%91%E9%A9%AC-%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/11_WebSocket/</url>
    
    <content type="html"><![CDATA[<h1 id="WebSocket"><a href="#WebSocket" class="headerlink" title="WebSocket"></a>WebSocket</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>WebSocket 是基于 TCP 的一种新的<strong>网络协议</strong>。它实现了浏览器与服务器全双工通信——浏览器和服务器只需要完成一次握手，两者之间就可以创建<strong>持久性</strong>的连接， 并进行<strong>双向</strong>数据传输。</p><p><strong>HTTP协议和WebSocket协议对比：</strong></p><ul><li>HTTP是<strong>短连接</strong></li><li>WebSocket是<strong>长连接</strong></li><li>HTTP通信是<strong>单向</strong>的，基于请求响应模式</li><li>WebSocket支持<strong>双向</strong>通信</li><li>HTTP和WebSocket底层都是TCP连接</li></ul><p><img src="/assets/image-20231103001025483.png" alt="image-20231103001025483"></p><p><strong>思考：</strong>既然WebSocket支持双向通信，功能看似比HTTP强大，那么我们是不是可以基于WebSocket开发所有的业务功能？</p><p><strong>WebSocket缺点：</strong></p><p>服务器长期维护长连接需要一定的成本<br>各个浏览器支持程度不一<br>WebSocket 是长连接，受网络限制比较大，需要处理好重连</p><p><strong>结论：</strong>WebSocket并不能完全取代HTTP，它只适合在特定的场景下使用</p><h2 id="入门案例"><a href="#入门案例" class="headerlink" title="入门案例"></a>入门案例</h2><h4 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h4><p>实现浏览器与服务器全双工通信。浏览器既可以向服务器发送消息，服务器也可主动向浏览器推送消息。</p><h4 id="代码开发"><a href="#代码开发" class="headerlink" title="代码开发"></a>代码开发</h4><p>1). 定义websocket.html页面(资料中已提供)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">HTML</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>WebSocket Demo<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;send()&quot;</span>&gt;</span>发送消息<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;closeWebSocket()&quot;</span>&gt;</span>关闭连接<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;message&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> websocket = <span class="hljs-literal">null</span>;</span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> clientId = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>().<span class="hljs-title function_">toString</span>(<span class="hljs-number">36</span>).<span class="hljs-title function_">substr</span>(<span class="hljs-number">2</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//判断当前浏览器是否支持WebSocket</span></span><br><span class="language-javascript">    <span class="hljs-keyword">if</span>(<span class="hljs-string">&#x27;WebSocket&#x27;</span> <span class="hljs-keyword">in</span> <span class="hljs-variable language_">window</span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-comment">//连接WebSocket节点</span></span><br><span class="language-javascript">        websocket = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WebSocket</span>(<span class="hljs-string">&quot;ws://localhost:8080/ws/&quot;</span>+clientId);</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    <span class="hljs-keyword">else</span>&#123;</span><br><span class="language-javascript">        <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;Not support websocket&#x27;</span>)</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//连接发生错误的回调方法</span></span><br><span class="language-javascript">    websocket.<span class="hljs-property">onerror</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-title function_">setMessageInnerHTML</span>(<span class="hljs-string">&quot;error&quot;</span>);</span><br><span class="language-javascript">    &#125;;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//连接成功建立的回调方法</span></span><br><span class="language-javascript">    websocket.<span class="hljs-property">onopen</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-title function_">setMessageInnerHTML</span>(<span class="hljs-string">&quot;连接成功&quot;</span>);</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//接收到消息的回调方法</span></span><br><span class="language-javascript">    websocket.<span class="hljs-property">onmessage</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-title function_">setMessageInnerHTML</span>(event.<span class="hljs-property">data</span>);</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//连接关闭的回调方法</span></span><br><span class="language-javascript">    websocket.<span class="hljs-property">onclose</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-title function_">setMessageInnerHTML</span>(<span class="hljs-string">&quot;close&quot;</span>);</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//监听窗口关闭事件，当窗口关闭时，主动去关闭websocket连接，防止连接还没断开就关闭窗口，server端会抛异常。</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">window</span>.<span class="hljs-property">onbeforeunload</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">        websocket.<span class="hljs-title function_">close</span>();</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//将消息显示在网页上</span></span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">setMessageInnerHTML</span>(<span class="hljs-params">innerHTML</span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;message&#x27;</span>).<span class="hljs-property">innerHTML</span> += innerHTML + <span class="hljs-string">&#x27;&lt;br/&gt;&#x27;</span>;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//发送消息</span></span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">send</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> message = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;text&#x27;</span>).<span class="hljs-property">value</span>;</span><br><span class="language-javascript">        websocket.<span class="hljs-title function_">send</span>(message);</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">//关闭连接</span></span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">closeWebSocket</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        websocket.<span class="hljs-title function_">close</span>();</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2). 导入maven坐标</p><p>在sky-server模块pom.xml中已定义</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-websocket<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>3). 定义WebSocket服务端组件(资料中已提供)</p><p>直接导入到sky-server模块即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.sky.websocket;<br><br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><span class="hljs-keyword">import</span> javax.websocket.OnClose;<br><span class="hljs-keyword">import</span> javax.websocket.OnMessage;<br><span class="hljs-keyword">import</span> javax.websocket.OnOpen;<br><span class="hljs-keyword">import</span> javax.websocket.Session;<br><span class="hljs-keyword">import</span> javax.websocket.server.PathParam;<br><span class="hljs-keyword">import</span> javax.websocket.server.ServerEndpoint;<br><span class="hljs-keyword">import</span> java.util.Collection;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * WebSocket服务</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@ServerEndpoint(&quot;/ws/&#123;sid&#125;&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebSocketServer</span> &#123;<br><br>    <span class="hljs-comment">//存放会话对象</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Map&lt;String, Session&gt; sessionMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 连接建立成功调用的方法</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@OnOpen</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onOpen</span><span class="hljs-params">(Session session, <span class="hljs-meta">@PathParam(&quot;sid&quot;)</span> String sid)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;客户端：&quot;</span> + sid + <span class="hljs-string">&quot;建立连接&quot;</span>);<br>        sessionMap.put(sid, session);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 收到客户端消息后调用的方法</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> message 客户端发送过来的消息</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@OnMessage</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onMessage</span><span class="hljs-params">(String message, <span class="hljs-meta">@PathParam(&quot;sid&quot;)</span> String sid)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;收到来自客户端：&quot;</span> + sid + <span class="hljs-string">&quot;的信息:&quot;</span> + message);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 连接关闭调用的方法</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> sid</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@OnClose</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onClose</span><span class="hljs-params">(<span class="hljs-meta">@PathParam(&quot;sid&quot;)</span> String sid)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;连接断开:&quot;</span> + sid);<br>        sessionMap.remove(sid);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 群发</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> message</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendToAllClient</span><span class="hljs-params">(String message)</span> &#123;<br>        Collection&lt;Session&gt; sessions = sessionMap.values();<br>        <span class="hljs-keyword">for</span> (Session session : sessions) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-comment">//服务器向客户端发送消息</span><br>                session.getBasicRemote().sendText(message);<br>            &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>4). 定义配置类，注册WebSocket的服务端组件(从资料中直接导入即可)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.sky.config;<br><br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.web.socket.server.standard.ServerEndpointExporter;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * WebSocket配置类，用于注册WebSocket的Bean</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebSocketConfiguration</span> &#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> ServerEndpointExporter <span class="hljs-title function_">serverEndpointExporter</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerEndpointExporter</span>();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>5). 定义定时任务类，定时向客户端推送数据(从资料中直接导入即可)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.sky.task;<br><br><span class="hljs-keyword">import</span> com.sky.websocket.WebSocketServer;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.scheduling.annotation.Scheduled;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><span class="hljs-keyword">import</span> java.time.LocalDateTime;<br><span class="hljs-keyword">import</span> java.time.format.DateTimeFormatter;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebSocketTask</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> WebSocketServer webSocketServer;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 通过WebSocket每隔5秒向客户端发送消息</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Scheduled(cron = &quot;0/5 * * * * ?&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendMessageToClient</span><span class="hljs-params">()</span> &#123;<br>        webSocketServer.sendToAllClient(<span class="hljs-string">&quot;这是来自服务端的消息：&quot;</span> + DateTimeFormatter.ofPattern(<span class="hljs-string">&quot;HH:mm:ss&quot;</span>).format(LocalDateTime.now()));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>项目练习</category>
      
      <category>苍穹外卖</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>10_SpringTask</title>
    <link href="/2023/11/02/%E9%BB%91%E9%A9%AC-%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/10_SpringTask/"/>
    <url>/2023/11/02/%E9%BB%91%E9%A9%AC-%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/10_SpringTask/</url>
    
    <content type="html"><![CDATA[<h1 id="SpringTask"><a href="#SpringTask" class="headerlink" title="SpringTask"></a>SpringTask</h1><h2 id="Spring-Task"><a href="#Spring-Task" class="headerlink" title="Spring Task"></a>Spring Task</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p><strong>Spring Task</strong> 是Spring框架提供的任务调度工具，可以按照约定的时间自动执行某个代码逻辑。</p><p><strong>定位：</strong>定时任务框架</p><p><strong>作用：</strong>定时自动执行某段Java代码</p><h2 id="cron表达式"><a href="#cron表达式" class="headerlink" title="cron表达式"></a>cron表达式</h2><p><strong>cron表达式</strong>其实就是一个字符串，通过cron表达式可以<strong>定义任务触发的时间</strong></p><p><strong>构成规则：</strong>分为6或7个域，由空格分隔开，每个域代表一个含义</p><p>每个域的含义分别为：秒、分钟、小时、日、月、周、年(可选)</p><p><strong>举例：</strong></p><p>2022年10月12日上午9点整 对应的cron表达式为：<strong>0 0 9 12 10 ? 2022</strong></p><img src="/2023/11/02/%E9%BB%91%E9%A9%AC-%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/10_SpringTask/image-20221218184412491.png" alt="image-20221218184412491" style="zoom:50%;"> <p><strong>说明：</strong>一般<strong>日</strong>和<strong>周</strong>的值不同时设置，其中一个设置，另一个用？表示。</p><p><strong>比如：</strong>描述2月份的最后一天，最后一天具体是几号呢？可能是28号，也有可能是29号，所以就不能写具体数字。</p><p>为了描述这些信息，提供一些特殊的字符。这些具体的细节，我们就不用自己去手写，因为这个cron表达式，它其实有在线生成器。</p><p>cron表达式在线生成器：<a href="https://cron.qqe2.com/">https://cron.qqe2.com/</a></p><p>可以直接在这个网站上面，只要根据自己的要求去生成corn表达式即可。所以一般就不用自己去编写这个表达式。</p><p><strong>通配符：</strong></p><p>* 表示所有值； </p><p>? 表示未说明的值，即不关心它为何值； </p><p>- 表示一个指定的范围； </p><p>, 表示附加一个可能值； </p><p>&#x2F; 符号前表示开始时间，符号后表示每次递增的值；</p><p><strong>cron表达式案例：</strong></p><p>*&#x2F;5 * * * * ? 每隔5秒执行一次</p><p>0 *&#x2F;1 * * * ? 每隔1分钟执行一次</p><p>0 0 5-15 * * ? 每天5-15点整点触发</p><p>0 0&#x2F;3 * * * ? 每三分钟触发一次</p><p>0 0-5 14 * * ? 在每天下午2点到下午2:05期间的每1分钟触发 </p><p>0 0&#x2F;5 14 * * ? 在每天下午2点到下午2:55期间的每5分钟触发</p><p>0 0&#x2F;5 14,18 * * ? 在每天下午2点到2:55期间和下午6点到6:55期间的每5分钟触发</p><p>0 0&#x2F;30 9-17 * * ? 朝九晚五工作时间内每半小时</p><p>0 0 10,14,16 * * ? 每天上午10点，下午2点，4点 </p><h2 id="入门案例"><a href="#入门案例" class="headerlink" title="入门案例"></a>入门案例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableScheduling</span> <span class="hljs-comment">//开启SpringTask</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SkyApplication</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(SkyApplication.class, args);<br>        log.info(<span class="hljs-string">&quot;server started&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyTask</span> &#123;<br>    <span class="hljs-meta">@Scheduled(cron = &quot;0/5 * * * * ?&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">executeTask</span><span class="hljs-params">()</span>&#123;<br>        log.info(<span class="hljs-string">&quot;定时任务开始&#123;&#125;&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>项目练习</category>
      
      <category>苍穹外卖</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>9_百度地图api</title>
    <link href="/2023/11/02/%E9%BB%91%E9%A9%AC-%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/9_%E7%99%BE%E5%BA%A6%E5%9C%B0%E5%9B%BEapi/"/>
    <url>/2023/11/02/%E9%BB%91%E9%A9%AC-%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/9_%E7%99%BE%E5%BA%A6%E5%9C%B0%E5%9B%BEapi/</url>
    
    <content type="html"><![CDATA[<h1 id="百度地图api导入"><a href="#百度地图api导入" class="headerlink" title="百度地图api导入"></a>百度地图api导入</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">checkOutOfRange</span><span class="hljs-params">(String address)</span> &#123;<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedHashMap</span>();<br>        map.put(<span class="hljs-string">&quot;address&quot;</span>,shopAddress);<br>        map.put(<span class="hljs-string">&quot;output&quot;</span>,<span class="hljs-string">&quot;json&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;ak&quot;</span>,ak);<br><span class="hljs-comment">//        https://api.map.baidu.com/geocoding/v3/?address=北京市海淀区上地十街10号&amp;output=json&amp;ak=您的ak&amp;callback=showLocation</span><br>        <span class="hljs-comment">//GET请求 获取店铺的经纬度坐标</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">shopCoordinate</span> <span class="hljs-operator">=</span> HttpClientUtil.doGet(<span class="hljs-string">&quot;https://api.map.baidu.com/geocoding/v3&quot;</span>, map);<br>        <span class="hljs-type">JSONObject</span> <span class="hljs-variable">jsonObject</span> <span class="hljs-operator">=</span> JSON.parseObject(shopCoordinate);<br>        <span class="hljs-keyword">if</span> (!jsonObject.getString(<span class="hljs-string">&quot;status&quot;</span>).equals(<span class="hljs-string">&quot;0&quot;</span>)) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OrderBusinessException</span>(<span class="hljs-string">&quot;店铺地址解析失败&quot;</span>);<br>        &#125;<br><span class="hljs-comment">//    数据解析</span><br>        <span class="hljs-type">JSONObject</span> <span class="hljs-variable">location</span> <span class="hljs-operator">=</span> jsonObject.getJSONObject(<span class="hljs-string">&quot;result&quot;</span>).getJSONObject(<span class="hljs-string">&quot;location&quot;</span>);<br><span class="hljs-comment">//        经度</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">lat</span> <span class="hljs-operator">=</span> String.format(<span class="hljs-string">&quot;%.6f&quot;</span>, location.getDouble(<span class="hljs-string">&quot;lat&quot;</span>));<br><span class="hljs-comment">//        纬度</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">lng</span> <span class="hljs-operator">=</span> String.format(<span class="hljs-string">&quot;%.6f&quot;</span>, location.getDouble(<span class="hljs-string">&quot;lng&quot;</span>));<br><span class="hljs-comment">//        店铺经纬度坐标</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">shopLatLng</span> <span class="hljs-operator">=</span> lat + <span class="hljs-string">&quot;,&quot;</span> + lng;<br><span class="hljs-comment">//        String shopLngLat = &quot;40.01116,116.339303&quot;;</span><br>        map.put(<span class="hljs-string">&quot;address&quot;</span>,address);<br><span class="hljs-comment">//        获取用户经纬度坐标</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">userCoordinate</span> <span class="hljs-operator">=</span> HttpClientUtil.doGet(<span class="hljs-string">&quot;https://api.map.baidu.com/geocoding/v3&quot;</span>, map);<br>        <span class="hljs-type">JSONObject</span> <span class="hljs-variable">userJsonObject</span> <span class="hljs-operator">=</span> JSON.parseObject(userCoordinate);<br>        <span class="hljs-keyword">if</span> (!userJsonObject.getString(<span class="hljs-string">&quot;status&quot;</span>).equals(<span class="hljs-string">&quot;0&quot;</span>)) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OrderBusinessException</span>(<span class="hljs-string">&quot;用户地址解析失败&quot;</span>);<br>        &#125;<br>        <span class="hljs-type">JSONObject</span> <span class="hljs-variable">userLocation</span> <span class="hljs-operator">=</span> userJsonObject.getJSONObject(<span class="hljs-string">&quot;result&quot;</span>).getJSONObject(<span class="hljs-string">&quot;location&quot;</span>);<br><span class="hljs-comment">//        经度</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">userLat</span> <span class="hljs-operator">=</span> String.format(<span class="hljs-string">&quot;%.6f&quot;</span>,userLocation.getDouble(<span class="hljs-string">&quot;lat&quot;</span>));<br><span class="hljs-comment">//        纬度</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">userLng</span> <span class="hljs-operator">=</span> String.format(<span class="hljs-string">&quot;%.6f&quot;</span>,userLocation.getDouble(<span class="hljs-string">&quot;lng&quot;</span>));<br>        <span class="hljs-type">String</span> <span class="hljs-variable">userLatLng</span> <span class="hljs-operator">=</span> userLat+ <span class="hljs-string">&quot;,&quot;</span> + userLng;<br><span class="hljs-comment">//        String userLngLat = &quot;39.936404,116.452562&quot;;</span><br><span class="hljs-comment">//        路线规划</span><br>        <span class="hljs-type">LinkedHashMap</span> <span class="hljs-variable">linkedHashMap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedHashMap</span>();<br>        linkedHashMap.put(<span class="hljs-string">&quot;origin&quot;</span>,shopLatLng);<br>        linkedHashMap.put(<span class="hljs-string">&quot;destination&quot;</span>,userLatLng);<br>        linkedHashMap.put(<span class="hljs-string">&quot;ak&quot;</span>,ak);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">json</span> <span class="hljs-operator">=</span> HttpClientUtil.doGet(<span class="hljs-string">&quot;https://api.map.baidu.com/direction/v2/riding&quot;</span>, linkedHashMap);<br>        jsonObject = JSON.parseObject(json);<br>        <span class="hljs-keyword">if</span> (!jsonObject.getString(<span class="hljs-string">&quot;status&quot;</span>).equals(<span class="hljs-string">&quot;0&quot;</span>)) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OrderBusinessException</span>(<span class="hljs-string">&quot;配送路线规划失败&quot;</span>);<br>        &#125;<br>        <span class="hljs-type">JSONObject</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> jsonObject.getJSONObject(<span class="hljs-string">&quot;result&quot;</span>);<br>        <span class="hljs-type">JSONArray</span> <span class="hljs-variable">jsonArray</span> <span class="hljs-operator">=</span> (JSONArray) result.get(<span class="hljs-string">&quot;routes&quot;</span>);<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">distance</span> <span class="hljs-operator">=</span> (Integer) ((JSONObject) jsonArray.get(<span class="hljs-number">0</span>)).get(<span class="hljs-string">&quot;distance&quot;</span>);<br>        <span class="hljs-keyword">if</span> (distance &gt; <span class="hljs-number">5000</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OrderBusinessException</span>(<span class="hljs-string">&quot;超出配送范围&quot;</span>);<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>HttpClientUtil</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HttpClientUtil</span> &#123;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span>  <span class="hljs-type">int</span> <span class="hljs-variable">TIMEOUT_MSEC</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span> * <span class="hljs-number">1000</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 发送GET方式请求</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> url</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> paramMap</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">doGet</span><span class="hljs-params">(String url,Map&lt;String,String&gt; paramMap)</span>&#123;<br>        <span class="hljs-comment">// 创建Httpclient对象</span><br>        <span class="hljs-type">CloseableHttpClient</span> <span class="hljs-variable">httpClient</span> <span class="hljs-operator">=</span> HttpClients.createDefault();<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-type">CloseableHttpResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>        <span class="hljs-keyword">try</span>&#123;<br>            <span class="hljs-type">URIBuilder</span> <span class="hljs-variable">builder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">URIBuilder</span>(url);<br>            <span class="hljs-keyword">if</span>(paramMap != <span class="hljs-literal">null</span>)&#123;<br>                <span class="hljs-keyword">for</span> (String key : paramMap.keySet()) &#123;<br>                    builder.addParameter(key,paramMap.get(key));<br>                &#125;<br>            &#125;<br>            <span class="hljs-type">URI</span> <span class="hljs-variable">uri</span> <span class="hljs-operator">=</span> builder.build();<br><br>            <span class="hljs-comment">//创建GET请求</span><br>            <span class="hljs-type">HttpGet</span> <span class="hljs-variable">httpGet</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpGet</span>(uri);<br><br>            <span class="hljs-comment">//发送请求</span><br>            response = httpClient.execute(httpGet);<br><br>            <span class="hljs-comment">//判断响应状态</span><br>            <span class="hljs-keyword">if</span>(response.getStatusLine().getStatusCode() == <span class="hljs-number">200</span>)&#123;<br>                result = EntityUtils.toString(response.getEntity(),<span class="hljs-string">&quot;UTF-8&quot;</span>);<br>            &#125;<br>        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            e.printStackTrace();<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                response.close();<br>                httpClient.close();<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 发送POST方式请求</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> url</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> paramMap</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> IOException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">doPost</span><span class="hljs-params">(String url, Map&lt;String, String&gt; paramMap)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">// 创建Httpclient对象</span><br>        <span class="hljs-type">CloseableHttpClient</span> <span class="hljs-variable">httpClient</span> <span class="hljs-operator">=</span> HttpClients.createDefault();<br>        <span class="hljs-type">CloseableHttpResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">resultString</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 创建Http Post请求</span><br>            <span class="hljs-type">HttpPost</span> <span class="hljs-variable">httpPost</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpPost</span>(url);<br><br>            <span class="hljs-comment">// 创建参数列表</span><br>            <span class="hljs-keyword">if</span> (paramMap != <span class="hljs-literal">null</span>) &#123;<br>                List&lt;NameValuePair&gt; paramList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>                <span class="hljs-keyword">for</span> (Map.Entry&lt;String, String&gt; param : paramMap.entrySet()) &#123;<br>                    paramList.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BasicNameValuePair</span>(param.getKey(), param.getValue()));<br>                &#125;<br>                <span class="hljs-comment">// 模拟表单</span><br>                <span class="hljs-type">UrlEncodedFormEntity</span> <span class="hljs-variable">entity</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UrlEncodedFormEntity</span>(paramList);<br>                httpPost.setEntity(entity);<br>            &#125;<br><br>            httpPost.setConfig(builderRequestConfig());<br><br>            <span class="hljs-comment">// 执行http请求</span><br>            response = httpClient.execute(httpPost);<br><br>            resultString = EntityUtils.toString(response.getEntity(), <span class="hljs-string">&quot;UTF-8&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-keyword">throw</span> e;<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                response.close();<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> resultString;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 发送POST方式请求</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> url</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> paramMap</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> IOException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">doPost4Json</span><span class="hljs-params">(String url, Map&lt;String, String&gt; paramMap)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">// 创建Httpclient对象</span><br>        <span class="hljs-type">CloseableHttpClient</span> <span class="hljs-variable">httpClient</span> <span class="hljs-operator">=</span> HttpClients.createDefault();<br>        <span class="hljs-type">CloseableHttpResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">resultString</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 创建Http Post请求</span><br>            <span class="hljs-type">HttpPost</span> <span class="hljs-variable">httpPost</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpPost</span>(url);<br><br>            <span class="hljs-keyword">if</span> (paramMap != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-comment">//构造json格式数据</span><br>                <span class="hljs-type">JSONObject</span> <span class="hljs-variable">jsonObject</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONObject</span>();<br>                <span class="hljs-keyword">for</span> (Map.Entry&lt;String, String&gt; param : paramMap.entrySet()) &#123;<br>                    jsonObject.put(param.getKey(),param.getValue());<br>                &#125;<br>                <span class="hljs-type">StringEntity</span> <span class="hljs-variable">entity</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringEntity</span>(jsonObject.toString(),<span class="hljs-string">&quot;utf-8&quot;</span>);<br>                <span class="hljs-comment">//设置请求编码</span><br>                entity.setContentEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<br>                <span class="hljs-comment">//设置数据类型</span><br>                entity.setContentType(<span class="hljs-string">&quot;application/json&quot;</span>);<br>                httpPost.setEntity(entity);<br>            &#125;<br><br>            httpPost.setConfig(builderRequestConfig());<br><br>            <span class="hljs-comment">// 执行http请求</span><br>            response = httpClient.execute(httpPost);<br><br>            resultString = EntityUtils.toString(response.getEntity(), <span class="hljs-string">&quot;UTF-8&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-keyword">throw</span> e;<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                response.close();<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> resultString;<br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> RequestConfig <span class="hljs-title function_">builderRequestConfig</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> RequestConfig.custom()<br>                .setConnectTimeout(TIMEOUT_MSEC)<br>                .setConnectionRequestTimeout(TIMEOUT_MSEC)<br>                .setSocketTimeout(TIMEOUT_MSEC).build();<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>项目练习</category>
      
      <category>苍穹外卖</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>8_Redis实现缓存和购物车存储</title>
    <link href="/2023/10/28/%E9%BB%91%E9%A9%AC-%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/8_Redis%E5%AE%9E%E7%8E%B0%E7%BC%93%E5%AD%98%E5%92%8C%E8%B4%AD%E7%89%A9%E8%BD%A6%E5%AD%98%E5%82%A8/"/>
    <url>/2023/10/28/%E9%BB%91%E9%A9%AC-%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/8_Redis%E5%AE%9E%E7%8E%B0%E7%BC%93%E5%AD%98%E5%92%8C%E8%B4%AD%E7%89%A9%E8%BD%A6%E5%AD%98%E5%82%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="Redis实现缓存和购物车存储"><a href="#Redis实现缓存和购物车存储" class="headerlink" title="Redis实现缓存和购物车存储"></a>Redis实现缓存和购物车存储</h1><h2 id="缓存菜品"><a href="#缓存菜品" class="headerlink" title="缓存菜品"></a>缓存菜品</h2><p>用户端小程序展示的菜品数据都是通过查询数据库获得，如果用户端访问量过于频繁，数据库访问压力随之增大。此时需要通过redis，缓存菜品数据，减少数据库查询操作。</p><h3 id="逻辑"><a href="#逻辑" class="headerlink" title="逻辑"></a>逻辑</h3><ul><li>每个分类下的菜品保存一份缓存数据</li><li>数据库中菜品数据有增删变更时清理所有缓存数据</li></ul><h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><p>以菜品查询为例，用户端需要根据菜品的分类id频繁查询菜品信息，先通过判断redis中是否存在相关信息，存在则返回redis的信息，否则从数据库中查询信息并缓存到redis中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> DishService dishService;<br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> RedisTemplate redisTemplate;<br>    <span class="hljs-meta">@GetMapping(&quot;/list&quot;)</span><br>    <span class="hljs-meta">@ApiOperation(&quot;根据分类id查询菜品&quot;)</span><br>    <span class="hljs-keyword">public</span> Result&lt;List&lt;DishVO&gt;&gt; <span class="hljs-title function_">getDishList</span><span class="hljs-params">(Long categoryId)</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;dish_categoryId_&quot;</span> + categoryId;<br>        List&lt;DishVO&gt; redisVal  = (List&lt;DishVO&gt;) redisTemplate.opsForValue().get(key);<br><span class="hljs-comment">//        先从redis缓存中查找数据，假如存在数据，则以缓存数据返回，否则创建缓存</span><br>        <span class="hljs-keyword">if</span> (redisVal != <span class="hljs-literal">null</span> &amp;&amp; redisVal.size() &gt; <span class="hljs-number">0</span>) &#123;<br>            log.info(<span class="hljs-string">&quot;通过redis缓存查询得到菜品分类id为&#123;&#125;的菜品&quot;</span>,categoryId);<br>            <span class="hljs-keyword">return</span> Result.success(redisVal);<br>        &#125;<br>        <span class="hljs-type">Dish</span> <span class="hljs-variable">dish</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dish</span>();<br>        dish.setCategoryId(categoryId);<br>        dish.setStatus(StatusConstant.ENABLE);<br>        List&lt;DishVO&gt; dishVOList = dishService.getDishList(dish);<br>        redisTemplate.opsForValue().set(key,dishVOList);<br>        log.info(<span class="hljs-string">&quot;通过数据库查询得到菜品分类id为&#123;&#125;的菜品&quot;</span>,categoryId);<br>        <span class="hljs-keyword">return</span> Result.success(dishVOList);<br>    &#125;<br></code></pre></td></tr></table></figure><p>增删操作时，为保证数据的实时性，清理所有相关的缓存数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 清理redis缓存</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">cleanCache</span><span class="hljs-params">(String pattern)</span>&#123;<br>        <span class="hljs-type">Set</span> <span class="hljs-variable">keys</span> <span class="hljs-operator">=</span> redisTemplate.keys(pattern);<br>        redisTemplate.delete(keys);<br>        log.info(<span class="hljs-string">&quot;成功删除&#123;&#125;的redis缓存&quot;</span>,pattern);<br>    &#125;<br><br><span class="hljs-comment">//        一旦更新数据，即删除所有dish缓存</span><br>        cleanCache(<span class="hljs-string">&quot;dish_*&quot;</span>);<br></code></pre></td></tr></table></figure><h2 id="Spring-Cache"><a href="#Spring-Cache" class="headerlink" title="Spring Cache"></a>Spring Cache</h2><p>Spring Cache 是一个框架，实现了基于注解的缓存功能，只需要简单地加一个注解，就能实现缓存功能。</p><p>Spring Cache 提供了一层抽象，底层可以切换不同的缓存实现，例如：</p><ul><li>EHCache</li><li>Caffeine</li><li>Redis(常用)</li></ul><h3 id="依赖导入"><a href="#依赖导入" class="headerlink" title="依赖导入"></a>依赖导入</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-cache<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>                      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.7.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span> <br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h3><p>在SpringCache中提供了很多缓存操作的注解，常见的是以下的几个：</p><table><thead><tr><th><strong>注解</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>@EnableCaching</td><td>开启缓存注解功能，通常加在启动类上</td></tr><tr><td>@Cacheable</td><td>在方法执行前先查询缓存中是否有数据，如果有数据，则直接返回缓存数据；如果没有缓存数据，调用方法并将方法返回值放到缓存中</td></tr><tr><td>@CachePut</td><td>将方法的返回值放到缓存中</td></tr><tr><td>@CacheEvict</td><td>将一条或多条数据从缓存中删除</td></tr></tbody></table><p>在spring boot项目中，使用缓存技术只需在项目中导入相关缓存技术的依赖包，并在启动类上使用@EnableCaching开启缓存支持即可。如果使用Redis作为缓存技术，只需要导入Spring data Redis的maven坐标即可。</p><h4 id="CachePut"><a href="#CachePut" class="headerlink" title="@CachePut"></a>@CachePut</h4><p><strong>@CachePut 说明</strong> </p><ul><li><p>作用: 将方法返回值，放入缓存</p></li><li><p>value: 缓存的名称, 每个缓存名称下面可以有很多key</p></li><li><p>key: 缓存的key  ———-&gt; 支持Spring的表达式语言SPEL语法</p><p>key的写法如下：</p><ul><li><p>#user.id : #user指的是方法形参的名称, id指的是user的id属性 , 也就是使用user的id属性作为key ;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping</span><br><span class="hljs-meta">@CachePut(cacheNames = &quot;userCache&quot;,key = &quot;#result.id&quot;)</span><span class="hljs-comment">// redis中生成的key格式为cacheNames::key</span><br><span class="hljs-keyword">public</span> User <span class="hljs-title function_">save</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> User user)</span>&#123;<br>    userMapper.insert(user);<br>    <span class="hljs-keyword">return</span> user;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20231028142709278.png" alt="image-20231028142709278"></p></li><li><p>#result.id : #result代表方法返回值，该表达式 代表以返回对象的id属性作为key ；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping</span><br><span class="hljs-meta">@CachePut(cacheNames = &quot;userCache&quot;,key = &quot;#result.id&quot;)</span><span class="hljs-comment">// 对象导航，可以获取返回值作为key</span><br><span class="hljs-keyword">public</span> User <span class="hljs-title function_">save</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> User user)</span>&#123;<br>    userMapper.insert(user);<br>    <span class="hljs-keyword">return</span> user;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>#p0.id：#p0指的是方法中的第一个参数，id指的是第一个参数的id属性,也就是使用第一个参数的id属性作为key ;</p></li><li><p>#a0.id：#a0指的是方法中的第一个参数，id指的是第一个参数的id属性,也就是使用第一个参数的id属性作为key ;</p></li><li><p>#root.args[0].id:#root.args[0]指的是方法中的第一个参数，id指的是第一个参数的id属性,也就是使用第一个参数的id属性作为key ;</p></li></ul></li></ul><h4 id="Cacheable"><a href="#Cacheable" class="headerlink" title="@Cacheable"></a>@Cacheable</h4><ul><li>作用: 在方法执行前，spring先查看缓存中是否有数据，如果有数据，则直接返回缓存数据；若没有数据，调用方法并将方法返回值放到缓存中</li><li>value: 缓存的名称，每个缓存名称下面可以有多个key</li><li>key: 缓存的key  ———-&gt; 支持Spring的表达式语言SPEL语法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping</span><br><span class="hljs-meta">@Cacheable(cacheNames = &quot;userCache&quot;,key = &quot;#id&quot;)</span><br><span class="hljs-keyword">public</span> User <span class="hljs-title function_">getById</span><span class="hljs-params">(Long id)</span>&#123;<br>    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> userMapper.getById(id);<br>    <span class="hljs-keyword">return</span> user;<br>&#125;<br></code></pre></td></tr></table></figure><p>SpringCache底层是基于代理技术，一旦使用@Cacheable之后，SpringCache将会为当前Controller类创建一个代理对象，在请求方法之前，会先进入代理对象，在代理对象中查询相关的redis数据。当redis中不存在该数据，则进入当前对象调用数据库查询数据并将数据缓存到redis中。</p><h4 id="CacheEvict"><a href="#CacheEvict" class="headerlink" title="@CacheEvict"></a>@CacheEvict</h4><ul><li>作用: 清理指定缓存</li><li>value: 缓存的名称，每个缓存名称下面可以有多个key</li><li>key: 缓存的key  ———-&gt; 支持Spring的表达式语言SPEL语法</li></ul><p>多删</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@DeleteMapping(&quot;/delAll&quot;)</span><br>   <span class="hljs-meta">@CacheEvict(cacheNames = &quot;userCache&quot;,allEntries = true)</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteAll</span><span class="hljs-params">()</span>&#123;<br>       userMapper.deleteAll();<br>   &#125;<br></code></pre></td></tr></table></figure><p>单删</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping</span><br><span class="hljs-meta">@Cacheable(cacheNames = &quot;userCache&quot;,key = &quot;#id&quot;)</span><br><span class="hljs-keyword">public</span> User <span class="hljs-title function_">getById</span><span class="hljs-params">(Long id)</span>&#123;<br>    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> userMapper.getById(id);<br>    <span class="hljs-keyword">return</span> user;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="购物车存储实现"><a href="#购物车存储实现" class="headerlink" title="购物车存储实现"></a>购物车存储实现</h2><p>用户可以将菜品或者套餐添加到购物车。对于菜品来说，如果设置了口味信息，则需要选择规格后才能加入购物车;对于套餐来说，可以直接选中将当前套餐加入购物车。在购物车中可以修改菜品和套餐的数量，也可以清空购物车。</p><p><strong>说明：</strong>添加购物车时，有可能添加菜品，也有可能添加套餐。故传入参数要么是菜品id，要么是套餐id。</p><p><img src="/assets/image-20231028175340412.png" alt="image-20231028175340412"></p><h2 id="微信支付介绍"><a href="#微信支付介绍" class="headerlink" title="微信支付介绍"></a>微信支付介绍</h2><p>【黑马程序员2023最新Java项目实战《苍穹外卖》，最适合新手的SpringBoot+SSM的企业级Java项目实战】<a href="https://www.bilibili.com/video/BV1TP411v7v6?p=119&vd_source=fd8400dedda3b66a22807dd475d7cfe2">https://www.bilibili.com/video/BV1TP411v7v6?p=119&amp;vd_source=fd8400dedda3b66a22807dd475d7cfe2</a></p><p>前面的课程已经实现了用户下单，那接下来就是订单支付，就是完成付款功能。支付大家应该都不陌生了，在现实生活中经常购买商品并且使用支付功能来付款，在付款的时候可能使用比较多的就是微信支付和支付宝支付了。在苍穹外卖项目中，选择的就是<strong>微信支付</strong>这种支付方式。</p><p>要实现微信支付就需要注册微信支付的一个商户号，这个商户号是必须要有一家企业并且有正规的营业执照。只有具备了这些资质之后，才可以去注册商户号，才能开通支付权限。</p><p>个人不具备这种资质，所以我们在学习微信支付时，最重要的是了解微信支付的流程，并且能够阅读微信官方提供的接口文档，能够和第三方支付平台对接起来就可以了。</p><p><strong>微信支付产品：</strong></p><img src="/2023/10/28/%E9%BB%91%E9%A9%AC-%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/8_Redis%E5%AE%9E%E7%8E%B0%E7%BC%93%E5%AD%98%E5%92%8C%E8%B4%AD%E7%89%A9%E8%BD%A6%E5%AD%98%E5%82%A8/image-20221214223302651.png" alt="image-20221214223302651" style="zoom:50%;"> <p>本项目选择<strong>小程序支付</strong></p><p>参考：<a href="https://pay.weixin.qq.com/static/product/product_index.shtml">https://pay.weixin.qq.com/static/product/product_index.shtml</a></p><p><strong>微信支付接入流程：</strong></p><img src="/2023/10/28/%E9%BB%91%E9%A9%AC-%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/8_Redis%E5%AE%9E%E7%8E%B0%E7%BC%93%E5%AD%98%E5%92%8C%E8%B4%AD%E7%89%A9%E8%BD%A6%E5%AD%98%E5%82%A8/image-20221214223509246.png" alt="image-20221214223509246" style="zoom:50%;"> <p><strong>微信小程序支付时序图：</strong></p><img src="/2023/10/28/%E9%BB%91%E9%A9%AC-%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/8_Redis%E5%AE%9E%E7%8E%B0%E7%BC%93%E5%AD%98%E5%92%8C%E8%B4%AD%E7%89%A9%E8%BD%A6%E5%AD%98%E5%82%A8/image-20221214223910840.png" alt="image-20221214223910840" style="zoom:50%;"> <p><strong>微信支付相关接口：</strong></p><p><strong>JSAPI下单：</strong>商户系统调用该接口在微信支付服务后台生成预支付交易单(对应时序图的第5步)</p><p><img src="/assets/image-20221214224409174.png" alt="image-20221214224409174"></p><p><strong>微信小程序调起支付：</strong>通过JSAPI下单接口获取到发起支付的必要参数prepay_id，然后使用微信支付提供的小程序方法调起小程序支付(对应时序图的第10步)</p><img src="/2023/10/28/%E9%BB%91%E9%A9%AC-%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/8_Redis%E5%AE%9E%E7%8E%B0%E7%BC%93%E5%AD%98%E5%92%8C%E8%B4%AD%E7%89%A9%E8%BD%A6%E5%AD%98%E5%82%A8/image-20221214224551220.png" alt="image-20221214224551220" style="zoom:50%;"> <h3 id="3-2-微信支付准备工作"><a href="#3-2-微信支付准备工作" class="headerlink" title="3.2 微信支付准备工作"></a>3.2 微信支付准备工作</h3><h4 id="3-2-1-如何保证数据安全？"><a href="#3-2-1-如何保证数据安全？" class="headerlink" title="3.2.1 如何保证数据安全？"></a>3.2.1 如何保证数据安全？</h4><p>完成微信支付有两个关键的步骤：</p><p><strong>第一个</strong>就是需要在商户系统当中调用微信后台的一个下单接口，就是生成预支付交易单。</p><p><strong>第二个</strong>就是支付成功之后微信后台会给推送消息。</p><p>这两个接口数据的安全性，要求其实是非常高的。</p><p><strong>解决：</strong>微信提供的方式就是对数据进行加密、解密、签名多种方式。要完成数据加密解密，需要提前准备相应的一些文件，其实就是一些证书。</p><p><strong>获取微信支付平台证书、商户私钥文件：</strong></p><img src="/2023/10/28/%E9%BB%91%E9%A9%AC-%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/8_Redis%E5%AE%9E%E7%8E%B0%E7%BC%93%E5%AD%98%E5%92%8C%E8%B4%AD%E7%89%A9%E8%BD%A6%E5%AD%98%E5%82%A8/image-20221214234038395.png" alt="image-20221214234038395" style="zoom:50%;"> <p>在后绪程序开发过程中，就会使用到这两个文件，需要提前把这两个文件准备好。</p><h4 id="3-2-2-如何调用到商户系统？"><a href="#3-2-2-如何调用到商户系统？" class="headerlink" title="3.2.2 如何调用到商户系统？"></a>3.2.2 如何调用到商户系统？</h4><p>微信后台会调用到商户系统给推送支付的结果，在这里我们就会遇到一个问题，就是微信后台怎么就能调用到我们这个商户系统呢？因为这个调用过程，其实本质上也是一个HTTP请求。</p><p>目前，商户系统它的ip地址就是当前自己电脑的ip地址，只是一个局域网内的ip地址，微信后台无法调用到。</p><p><strong>解决：</strong>内网穿透。通过<strong>cpolar软件</strong>可以获得一个临时域名，而这个临时域名是一个公网ip，这样，微信后台就可以请求到商户系统了。</p><p><strong>cpolar软件的使用：</strong></p><p><strong>1). 下载与安装</strong></p><p>下载地址：<a href="https://dashboard.cpolar.com/get-started">https://dashboard.cpolar.com/get-started</a></p><img src="/2023/10/28/%E9%BB%91%E9%A9%AC-%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/8_Redis%E5%AE%9E%E7%8E%B0%E7%BC%93%E5%AD%98%E5%92%8C%E8%B4%AD%E7%89%A9%E8%BD%A6%E5%AD%98%E5%82%A8/image-20221215184407217.png" alt="image-20221215184407217" style="zoom:50%;"> <p>在资料中已提供，可无需下载。</p><img src="/2023/10/28/%E9%BB%91%E9%A9%AC-%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/8_Redis%E5%AE%9E%E7%8E%B0%E7%BC%93%E5%AD%98%E5%92%8C%E8%B4%AD%E7%89%A9%E8%BD%A6%E5%AD%98%E5%82%A8/image-20221215184446260.png" alt="image-20221215184446260" style="zoom:80%;"> <p>安装过程中，一直下一步即可，不再演示。</p><p><strong>2). cpolar指定authtoken</strong></p><p>复制authtoken：</p><img src="/2023/10/28/%E9%BB%91%E9%A9%AC-%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/8_Redis%E5%AE%9E%E7%8E%B0%E7%BC%93%E5%AD%98%E5%92%8C%E8%B4%AD%E7%89%A9%E8%BD%A6%E5%AD%98%E5%82%A8/image-20221215184746092.png" alt="image-20221215184746092" style="zoom:50%;"> <p>执行命令：</p><img src="/2023/10/28/%E9%BB%91%E9%A9%AC-%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/8_Redis%E5%AE%9E%E7%8E%B0%E7%BC%93%E5%AD%98%E5%92%8C%E8%B4%AD%E7%89%A9%E8%BD%A6%E5%AD%98%E5%82%A8/image-20221215185152869.png" alt="image-20221215185152869" style="zoom:50%;"> <p><strong>3). 获取临时域名</strong></p><p>执行命令：</p><img src="/2023/10/28/%E9%BB%91%E9%A9%AC-%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/8_Redis%E5%AE%9E%E7%8E%B0%E7%BC%93%E5%AD%98%E5%92%8C%E8%B4%AD%E7%89%A9%E8%BD%A6%E5%AD%98%E5%82%A8/image-20221215185749163.png" alt="image-20221215185749163" style="zoom:50%;"> <p>获取域名：</p><img src="/2023/10/28/%E9%BB%91%E9%A9%AC-%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/8_Redis%E5%AE%9E%E7%8E%B0%E7%BC%93%E5%AD%98%E5%92%8C%E8%B4%AD%E7%89%A9%E8%BD%A6%E5%AD%98%E5%82%A8/image-20221215185833157.png" alt="image-20221215185833157" style="zoom:50%;"> <p><strong>4). 验证临时域名有效性</strong></p><p><strong>访问接口文档</strong></p><p>使用localhost:8080访问</p><img src="/2023/10/28/%E9%BB%91%E9%A9%AC-%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/8_Redis%E5%AE%9E%E7%8E%B0%E7%BC%93%E5%AD%98%E5%92%8C%E8%B4%AD%E7%89%A9%E8%BD%A6%E5%AD%98%E5%82%A8/image-20221215190440717.png" alt="image-20221215190440717" style="zoom:50%;"> <p>使用临时域名访问</p><img src="/2023/10/28/%E9%BB%91%E9%A9%AC-%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/8_Redis%E5%AE%9E%E7%8E%B0%E7%BC%93%E5%AD%98%E5%92%8C%E8%B4%AD%E7%89%A9%E8%BD%A6%E5%AD%98%E5%82%A8/image-20221215190525166.png" alt="image-20221215190525166" style="zoom:50%;"> <p>证明临时域名生效。</p>]]></content>
    
    
    <categories>
      
      <category>项目练习</category>
      
      <category>苍穹外卖</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>7_微信小程序后端开发</title>
    <link href="/2023/10/25/%E9%BB%91%E9%A9%AC-%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/7_%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    <url>/2023/10/25/%E9%BB%91%E9%A9%AC-%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/7_%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/</url>
    
    <content type="html"><![CDATA[<h1 id="微信小程序后端开发"><a href="#微信小程序后端开发" class="headerlink" title="微信小程序后端开发"></a>微信小程序后端开发</h1><p>微信登录：<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/login.html">https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/login.html</a></p><p><strong>流程图：</strong></p><p><img src="/assets/image-20231025002903500.png" alt="image-20231025002903500"></p><p><strong>步骤分析：</strong>(掌握复述)</p><ol><li>小程序端，调用wx.login()获取code，就是授权码。</li><li>小程序端，调用wx.request()发送请求并携带code，请求开发者服务器(自己编写的后端服务)。</li><li>开发者服务端，通过HttpClient向微信接口服务发送请求，并携带appId+appsecret+code三个参数。</li><li>开发者服务端，接收微信接口服务返回的数据，session_key+opendId等。opendId是微信用户的唯一标识。</li><li>开发者服务端，自定义登录态，生成令牌(token)和openid等数据返回给小程序端，方便后绪请求身份校验。</li><li>小程序端，收到自定义登录态，存储storage。</li><li>小程序端，后绪通过wx.request()发起业务请求时，携带token。</li><li>开发者服务端，收到请求后，通过携带的token，解析当前登录用户的id。</li><li>开发者服务端，身份校验通过后，继续相关的业务逻辑处理，最终返回业务数据。</li></ol><p><img src="/assets/image-20231025005748650.png" alt="image-20231025005748650"></p><p>openid是微信号的唯一标识</p>]]></content>
    
    
    <categories>
      
      <category>项目练习</category>
      
      <category>苍穹外卖</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>6_初识微信小程序</title>
    <link href="/2023/10/24/%E9%BB%91%E9%A9%AC-%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/6_%E5%88%9D%E8%AF%86%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    <url>/2023/10/24/%E9%BB%91%E9%A9%AC-%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/6_%E5%88%9D%E8%AF%86%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="初识微信小程序"><a href="#初识微信小程序" class="headerlink" title="初识微信小程序"></a>初识微信小程序</h1><h2 id="HttpClient"><a href="#HttpClient" class="headerlink" title="HttpClient"></a>HttpClient</h2><p>HttpClient 是Apache Jakarta Common 下的子项目，可以用来提供高效的、最新的、功能丰富的支持 HTTP 协议的客户端编程工具包，并且它支持 HTTP 协议最新的版本和建议。</p><h3 id="HttpClient作用"><a href="#HttpClient作用" class="headerlink" title="HttpClient作用"></a>HttpClient作用</h3><ul><li>发送HTTP请求</li><li>接收响应数据</li></ul><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p>扫描支付、查看地图、获取验证码、查看天气</p><p>应用程序本身并未实现这些功能，都是在应用程序里访问提供这些功能的服务，访问这些服务需要发送HTTP请求，并且接收响应数据，可通过HttpClient来实现。</p><p><img src="/assets/image-20231024145454378.png" alt="image-20231024145454378"></p><h3 id="maven依赖"><a href="#maven依赖" class="headerlink" title="maven依赖"></a>maven依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.httpcomponents<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>httpclient<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.5.13<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="HttpClient的核心API"><a href="#HttpClient的核心API" class="headerlink" title="HttpClient的核心API"></a>HttpClient的核心API</h3><ul><li>HttpClient：Http客户端对象类型，使用该类型对象可发起Http请求。</li><li>HttpClients：可认为是构建器，可创建HttpClient对象。</li><li>CloseableHttpClient：实现类，实现了HttpClient接口。</li><li>HttpGet：Get方式请求类型。</li><li>HttpPost：Post方式请求类型。</li></ul><h3 id="发送请求步骤"><a href="#发送请求步骤" class="headerlink" title="发送请求步骤"></a>发送请求步骤</h3><ul><li>创建HttpClient对象 </li><li>创建Http请求对象</li><li>调用HttpClient的execute方法发送请求</li></ul><p>练手</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.sky.HttpClientTest;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSONObject;<br><span class="hljs-keyword">import</span> org.apache.http.HttpEntity;<br><span class="hljs-keyword">import</span> org.apache.http.client.methods.CloseableHttpResponse;<br><span class="hljs-keyword">import</span> org.apache.http.client.methods.HttpGet;<br><span class="hljs-keyword">import</span> org.apache.http.client.methods.HttpPost;<br><span class="hljs-keyword">import</span> org.apache.http.entity.StringEntity;<br><span class="hljs-keyword">import</span> org.apache.http.impl.client.CloseableHttpClient;<br><span class="hljs-keyword">import</span> org.apache.http.impl.client.HttpClients;<br><span class="hljs-keyword">import</span> org.apache.http.util.EntityUtils;<br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * ClassName: HttpClientTest</span><br><span class="hljs-comment"> * Package: com.sky.HttpClientTest</span><br><span class="hljs-comment"> * Description:</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> Jmin</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Create</span> 2023/10/24 14:59</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HttpClientTest</span> &#123;<br>    <span class="hljs-comment">//        通过httpclient发送get请求</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testGet</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br><span class="hljs-comment">//        创建httpclient对象</span><br>        <span class="hljs-type">CloseableHttpClient</span> <span class="hljs-variable">httpClient</span> <span class="hljs-operator">=</span> HttpClients.createDefault();<br><span class="hljs-comment">//        创建请求对象</span><br>        <span class="hljs-type">HttpGet</span> <span class="hljs-variable">httpGet</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpGet</span>(<span class="hljs-string">&quot;http://localhost:8080/user/shop/status&quot;</span>);<br><span class="hljs-comment">//        发送请求,返回响应</span><br>        <span class="hljs-type">CloseableHttpResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> httpClient.execute(httpGet);<br><span class="hljs-comment">//        获取服务端返回的状态码</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">statusCode</span> <span class="hljs-operator">=</span> response.getStatusLine().getStatusCode();<br>        System.out.println(<span class="hljs-string">&quot;服务端返回的状态码：&quot;</span> + statusCode);<br>        System.out.println(<span class="hljs-string">&quot;////////////////////////////////////&quot;</span>);<br>        <span class="hljs-type">HttpEntity</span> <span class="hljs-variable">entity</span> <span class="hljs-operator">=</span> response.getEntity();<br>        System.out.println(EntityUtils.toString(entity));<br>        response.close();<br>        httpClient.close();<br>    &#125;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testPost</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException, CloneNotSupportedException &#123;<br><span class="hljs-comment">//        创建httpClient对象</span><br>        <span class="hljs-type">CloseableHttpClient</span> <span class="hljs-variable">httpClient</span> <span class="hljs-operator">=</span> HttpClients.createDefault();<br><span class="hljs-comment">//        创建请求对象</span><br>        <span class="hljs-type">HttpPost</span> <span class="hljs-variable">httpPost</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpPost</span>(<span class="hljs-string">&quot;http://localhost:8080/admin/employee/login&quot;</span>);<br>        <span class="hljs-type">JSONObject</span> <span class="hljs-variable">jsonObject</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONObject</span>();<br>        jsonObject.put(<span class="hljs-string">&quot;username&quot;</span>,<span class="hljs-string">&quot;admin&quot;</span>);<br>        jsonObject.put(<span class="hljs-string">&quot;password&quot;</span>,<span class="hljs-string">&quot;123456&quot;</span>);<br>        <span class="hljs-type">StringEntity</span> <span class="hljs-variable">stringEntity</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringEntity</span>(jsonObject.toString());<br><span class="hljs-comment">//        指定请求编码方式</span><br>        stringEntity.setContentEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<br>        stringEntity.setContentType(<span class="hljs-string">&quot;application/json&quot;</span>);<br>        httpPost.setEntity(stringEntity);<br><span class="hljs-comment">//        发送请求</span><br>        <span class="hljs-type">CloseableHttpResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> httpClient.execute(httpPost);<br>        <span class="hljs-type">HttpEntity</span> <span class="hljs-variable">entity</span> <span class="hljs-operator">=</span> response.getEntity();<br>        System.out.println(<span class="hljs-string">&quot;响应码：&quot;</span> + response.getStatusLine());<br><span class="hljs-comment">//        解析返回结果</span><br>        System.out.println(EntityUtils.toString(entity));<br>        response.close();<br>        httpClient.close();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><p>我的小程序appid wx187375baddb04dba</p><h3 id="设置不校验合法域名"><a href="#设置不校验合法域名" class="headerlink" title="设置不校验合法域名"></a>设置不校验合法域名</h3><p><strong>注：</strong>开发阶段，小程序发出请求到后端的Tomcat服务器，若不勾选，请求发送失败。</p><p><img src="/assets/image-20231024212147563.png" alt="image-20231024212147563"></p><h3 id="小程序目录结构"><a href="#小程序目录结构" class="headerlink" title="小程序目录结构"></a>小程序目录结构</h3><h4 id="小程序主体"><a href="#小程序主体" class="headerlink" title="小程序主体"></a>小程序主体</h4><p>小程序包含一个描述整体程序的 app 和多个描述各自页面的 page。一个小程序主体部分由三个文件组成，必须放在项目的根目录。</p><p><strong>app.js：</strong>必须存在，主要存放小程序的逻辑代码</p><p><strong>app.json：</strong>必须存在，小程序配置文件，主要存放小程序的公共配置</p><p><strong>app.wxss:</strong>  非必须存在，主要存放小程序公共样式表，类似于前端的CSS样式</p><p>小程序又有多个页面，比如说商品浏览页面、购物车的页面、订单支付的页面、商品的详情页面等等，会存放在pages目录。</p><h4 id="小程序页面"><a href="#小程序页面" class="headerlink" title="小程序页面"></a>小程序页面</h4><p><strong>js文件：</strong>必须存在，存放页面业务逻辑代码，编写的js代码。</p><p><strong>wxml文件：</strong>必须存在，存放页面结构，主要是做页面布局，页面效果展示的，类似于HTML页面。</p><p><strong>json文件：</strong>非必须，存放页面相关的配置。</p><p><strong>wxss文件：</strong>非必须，存放页面样式表，相当于CSS文件。</p><h4 id="发布小程序"><a href="#发布小程序" class="headerlink" title="发布小程序"></a>发布小程序</h4><p>小程序的代码都已经开发完毕，要将小程序发布上线，让所有的用户都能使用到这个小程序。</p><p>点击上传按钮：</p><img src="/2023/10/24/%E9%BB%91%E9%A9%AC-%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/6_%E5%88%9D%E8%AF%86%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/image-20221204225355015.png" alt="image-20221204225355015" style="zoom:50%;"> <p>指定版本号：</p><img src="/2023/10/24/%E9%BB%91%E9%A9%AC-%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/6_%E5%88%9D%E8%AF%86%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/image-20221204225502698.png" alt="image-20221204225502698" style="zoom:50%;"> <p>上传成功：</p><img src="/2023/10/24/%E9%BB%91%E9%A9%AC-%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/6_%E5%88%9D%E8%AF%86%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/image-20221204225557820.png" alt="image-20221204225557820" style="zoom:50%;"> <p>把代码上传到微信服务器就表示小程序已经发布了吗？<br><strong>其实并不是。</strong>当前小程序版本只是一个开发版本。</p><p>进到微信公众平台，打开版本管理页面。</p><p><img src="/assets/image-20231024235930396.png" alt="image-20231024235930396"> </p><p>需提交审核，变成审核版本，审核通过后，进行发布，变成线上版本。</p><p>一旦成为线上版本，这就说明小程序就已经发布上线了，微信用户就可以在微信里面去搜索和使用这个小程序了。</p>]]></content>
    
    
    <categories>
      
      <category>项目练习</category>
      
      <category>苍穹外卖</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>5_springboot项目Redis使用</title>
    <link href="/2023/10/22/%E9%BB%91%E9%A9%AC-%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/5_java%E6%93%8D%E4%BD%9Credis/"/>
    <url>/2023/10/22/%E9%BB%91%E9%A9%AC-%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/5_java%E6%93%8D%E4%BD%9Credis/</url>
    
    <content type="html"><![CDATA[<h1 id="Redis常用的java客户端"><a href="#Redis常用的java客户端" class="headerlink" title="Redis常用的java客户端"></a>Redis常用的java客户端</h1><ul><li>Jedis</li><li>Lettuce</li><li>SpringDataRedis</li></ul><h1 id="Spring-Data-Redis使用"><a href="#Spring-Data-Redis使用" class="headerlink" title="Spring Data Redis使用"></a>Spring Data Redis使用</h1><p>导包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>操作步骤：</p><ul><li>导入Spring Data Redis的maven坐标</li><li>配置Redis数据源</li><li>编写配置类，创建RedisTemplate对象</li><li>通过RedisTemplate对象操作Redis</li></ul><p>config配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.sky.config;<br><br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.core.RedisTemplate;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.serializer.StringRedisSerializer;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * ClassName: RedisConfiguration</span><br><span class="hljs-comment"> * Package: com.sky.config</span><br><span class="hljs-comment"> * Description:</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> Jmin</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Create</span> 2023/10/22 23:22</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisConfiguration</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> RedisTemplate <span class="hljs-title function_">redisTemplate</span><span class="hljs-params">(RedisConnectionFactory redisConnectionFactory)</span>&#123;<br>        log.info(<span class="hljs-string">&quot;redis模板对象&quot;</span>);<br>        <span class="hljs-type">RedisTemplate</span> <span class="hljs-variable">redisTemplate</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RedisTemplate</span>();<br><span class="hljs-comment">//        设置redis连接工厂对象</span><br>        redisTemplate.setConnectionFactory(redisConnectionFactory);<br><span class="hljs-comment">//        设置redis key序列化器 可以防止乱码</span><br>        redisTemplate.setKeySerializer(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRedisSerializer</span>());<br>        <span class="hljs-keyword">return</span> redisTemplate;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>test</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.sky.redisTest;<br><br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.connection.DataType;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.core.*;<br><br><span class="hljs-keyword">import</span> javax.annotation.Resource;<br><span class="hljs-keyword">import</span> java.util.Set;<br><span class="hljs-keyword">import</span> java.util.concurrent.TimeUnit;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * ClassName: RedisTest</span><br><span class="hljs-comment"> * Package: com.sky.redisTest</span><br><span class="hljs-comment"> * Description:</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> Jmin</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Create</span> 2023/10/23 0:17</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisTest</span> &#123;<br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> RedisTemplate redisTemplate;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testValue</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-comment">//        set</span><br>        redisTemplate.opsForValue().set(<span class="hljs-string">&quot;city&quot;</span>, <span class="hljs-string">&quot;北京&quot;</span>);<br><span class="hljs-comment">//        get</span><br>        System.out.println(redisTemplate.opsForValue().get(<span class="hljs-string">&quot;city&quot;</span>));<br><span class="hljs-comment">//        setex</span><br>        redisTemplate.opsForValue().set(<span class="hljs-string">&quot;TW_DPP&quot;</span>, <span class="hljs-string">&quot;台湾民进党&quot;</span>, <span class="hljs-number">30</span>, TimeUnit.MINUTES);<br><span class="hljs-comment">//        setnx</span><br>        redisTemplate.opsForValue().setIfAbsent(<span class="hljs-string">&quot;Only one&quot;</span>, <span class="hljs-number">111</span>);<br>        redisTemplate.opsForValue().setIfAbsent(<span class="hljs-string">&quot;Only one&quot;</span>, <span class="hljs-number">222</span>);<span class="hljs-comment">//不生效</span><br><br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testHash</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-comment">//        hset hget hkeys hvals hdel</span><br>        <span class="hljs-type">HashOperations</span> <span class="hljs-variable">hashOperations</span> <span class="hljs-operator">=</span> redisTemplate.opsForHash();<br>        hashOperations.put(<span class="hljs-string">&quot;student&quot;</span>, <span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;tom&quot;</span>);<br>        hashOperations.put(<span class="hljs-string">&quot;student&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>, <span class="hljs-number">20</span>);<br><span class="hljs-comment">//        System.out.println(hashOperations.get(&quot;student&quot;, &quot;age&quot;));</span><br><span class="hljs-comment">//        hashOperations.delete(&quot;student&quot;,&quot;name&quot;);</span><br>        System.out.println(hashOperations.keys(<span class="hljs-string">&quot;student&quot;</span>));<br>        System.out.println(hashOperations.values(<span class="hljs-string">&quot;student&quot;</span>));<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testList</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">ListOperations</span> <span class="hljs-variable">listOperations</span> <span class="hljs-operator">=</span> redisTemplate.opsForList();<br><span class="hljs-comment">//        lpush lrange rpop llen</span><br><span class="hljs-comment">//        listOperations.leftPushAll(&quot;myList&quot;,&quot;a&quot;,&quot;b&quot;,&quot;c&quot;);</span><br><span class="hljs-comment">//        listOperations.rightPushAll(&quot;myList&quot;,&quot;c&quot;,&quot;d&quot;);</span><br><span class="hljs-comment">//        listOperations.leftPushAll(&quot;myList&quot;,&quot;1&quot;,&quot;2&quot;,&quot;3&quot;);</span><br>        listOperations.rightPushAll(<span class="hljs-string">&quot;myList&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;2&quot;</span>, <span class="hljs-string">&quot;3&quot;</span>);<br>        System.out.println(listOperations.rightPop(<span class="hljs-string">&quot;myList&quot;</span>));<br>        System.out.println(listOperations.range(<span class="hljs-string">&quot;myList&quot;</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>));<br>    &#125;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testZset</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-comment">//        zadd zrange zincrby zrem</span><br>        <span class="hljs-type">ZSetOperations</span> <span class="hljs-variable">zSetOperations</span> <span class="hljs-operator">=</span> redisTemplate.opsForZSet();<br><span class="hljs-comment">//        zSetOperations.add(&quot;zset1&quot;,&quot;a&quot;,1);</span><br><span class="hljs-comment">//        zSetOperations.add(&quot;zset1&quot;,&quot;b&quot;,13);</span><br><span class="hljs-comment">//        zSetOperations.add(&quot;zset1&quot;,&quot;c&quot;,11);</span><br><span class="hljs-comment">//        zSetOperations.add(&quot;zset1&quot;,&quot;d&quot;,12);</span><br>        System.out.println(zSetOperations.range(<span class="hljs-string">&quot;zset1&quot;</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>));<br>        zSetOperations.incrementScore(<span class="hljs-string">&quot;zset1&quot;</span>,<span class="hljs-string">&quot;c&quot;</span>,<span class="hljs-number">20</span>);<br>        zSetOperations.remove(<span class="hljs-string">&quot;zset1&quot;</span>,<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;b&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testCommon</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-comment">//        keys exists type del</span><br>        <span class="hljs-type">Set</span> <span class="hljs-variable">keys</span> <span class="hljs-operator">=</span> redisTemplate.keys(<span class="hljs-string">&quot;*&quot;</span>);<br>        System.out.println(redisTemplate.hasKey(<span class="hljs-string">&quot;student&quot;</span>));<br>        <span class="hljs-keyword">for</span> (Object key : keys) &#123;<br>            <span class="hljs-type">DataType</span> <span class="hljs-variable">type</span> <span class="hljs-operator">=</span> redisTemplate.type(key);<br>            System.out.println(type.name());<br>        &#125;<br>        redisTemplate.delete(<span class="hljs-string">&quot;student&quot;</span>);<br>        System.out.println(redisTemplate.hasKey(<span class="hljs-string">&quot;student&quot;</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>项目练习</category>
      
      <category>苍穹外卖</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>4_redis使用</title>
    <link href="/2023/10/22/%E9%BB%91%E9%A9%AC-%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/4_redis/"/>
    <url>/2023/10/22/%E9%BB%91%E9%A9%AC-%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/4_redis/</url>
    
    <content type="html"><![CDATA[<h1 id="Redis基础"><a href="#Redis基础" class="headerlink" title="Redis基础"></a>Redis基础</h1><h2 id="Redis入门"><a href="#Redis入门" class="headerlink" title="Redis入门"></a>Redis入门</h2><p>Redis是一个基于内存的key-value结构数据库</p><p>Mysql是以数据文件形式存储于磁盘上，而Redis处于内存存储</p><h3 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h3><ul><li>基于内存存储，读写性能高</li><li>适合存储热点数据（热点商品，资讯，新闻）</li></ul><p><strong>中文网：</strong><a href="https://www.redis.net.cn/">https://www.redis.net.cn/</a></p><h2 id="windows安装"><a href="#windows安装" class="headerlink" title="windows安装"></a>windows安装</h2><p><img src="/assets/image-20231022203112625.png" alt="image-20231022203112625"></p><p><img src="/assets/image-20231022203516570.png" alt="image-20231022203516570"></p><h2 id="Redis数据类型"><a href="#Redis数据类型" class="headerlink" title="Redis数据类型"></a>Redis数据类型</h2><p><img src="/assets/image-20231022214213769.png" alt="image-20231022214213769"></p><p><strong>解释说明：</strong></p><ul><li>字符串(string)：普通字符串，Redis中最简单的数据类型</li><li>哈希(hash)：也叫散列，类似于Java中的HashMap结构</li><li>列表(list)：按照插入顺序排序，可以有重复元素，类似于Java中的LinkedList</li><li>集合(set)：无序集合，没有重复元素，类似于Java中的HashSet</li><li>有序集合(sorted set&#x2F;zset)：集合中每个元素关联一个分数(score)，根据分数升序排序，没有重复元素</li></ul><h2 id="Redis常用命令"><a href="#Redis常用命令" class="headerlink" title="Redis常用命令"></a>Redis常用命令</h2><h3 id="字符串操作命令"><a href="#字符串操作命令" class="headerlink" title="字符串操作命令"></a>字符串操作命令</h3><p>Redis 中字符串类型常用命令：</p><ul><li><strong>SET</strong> key value          设置指定key的值</li><li><strong>GET</strong> key                                        获取指定key的值</li><li><strong>SETEX</strong> key seconds value         设置指定key的值，并将 key 的过期时间设为 seconds 秒</li><li><strong>SETNX</strong> key value                        只有在 key    不存在时设置 key 的值</li></ul><p>更多命令可以参考Redis中文网：<a href="https://www.redis.net.cn/">https://www.redis.net.cn</a></p><h3 id="哈希操作命令"><a href="#哈希操作命令" class="headerlink" title="哈希操作命令"></a>哈希操作命令</h3><p>Redis hash 是一个string类型的 field 和 value 的映射表，hash特别适合用于存储对象，常用命令：</p><ul><li><strong>HSET</strong> key field value             将哈希表 key 中的字段 field 的值设为 value</li><li><strong>HGET</strong> key field                       获取存储在哈希表中指定字段的值</li><li><strong>HDEL</strong> key field                       删除存储在哈希表中的指定字段</li><li><strong>HKEYS</strong> key                              获取哈希表中所有字段</li><li><strong>HVALS</strong> key                              获取哈希表中所有值</li></ul><p><img src="/assets/image-20231022221052201.png" alt="image-20231022221052201"></p><h3 id="列表操作命令"><a href="#列表操作命令" class="headerlink" title="列表操作命令"></a>列表操作命令</h3><p>Redis 列表是简单的字符串列表，按照插入顺序排序(双向链表)，常用命令：</p><ul><li><strong>LPUSH</strong> key value1 [value2]         将一个或多个值插入到列表头部</li><li><strong>LRANGE</strong> key start stop                获取列表指定范围内的元素 获取所有元素 <code>lrange key 0 -1</code></li><li><strong>RPOP</strong> key                                       移除并获取列表最后一个元素</li><li><strong>LLEN</strong> key                                        获取列表长度</li><li><strong>BRPOP</strong> key1 [key2 ] timeout       移出并获取列表的最后一个元素， 如果列表没有元素会阻塞列表直到等待超    时或发现可弹出元素为止</li></ul><p><img src="/assets/image-20231022221058522.png" alt="image-20231022221058522"></p><h3 id="集合操作命令"><a href="#集合操作命令" class="headerlink" title="集合操作命令"></a>集合操作命令</h3><p>Redis set 是string类型的无序集合。集合成员是唯一的，这就意味着集合中不能出现重复的数据，常用命令：</p><ul><li><strong>SADD</strong> key member1 [member2]            向集合添加一个或多个成员</li><li><strong>SMEMBERS</strong> key                                         返回集合中的所有成员</li><li><strong>SCARD</strong> key                                                  获取集合的成员数</li><li><strong>SINTER</strong> key1 [key2]                                   返回给定所有集合的交集</li><li><strong>SUNION</strong> key1 [key2]                                 返回所有给定集合的并集</li><li><strong>SREM</strong> key member1 [member2]            移除集合中一个或多个成员</li></ul><p><img src="/assets/image-20231022223856427.png" alt="image-20231022223856427"></p><h3 id="有序集合操作命令"><a href="#有序集合操作命令" class="headerlink" title="有序集合操作命令"></a>有序集合操作命令</h3><p>Redis有序集合是string类型元素的集合，且不允许有重复成员。每个元素都会关联一个double类型的分数。常用命令：</p><p>常用命令：</p><ul><li><strong>ZADD</strong> key score1 member1 [score2 member2]     向有序集合添加一个或多个成员</li><li><strong>ZRANGE</strong> key start stop [WITHSCORES]                     通过索引区间返回有序集合中指定区间内的成员</li><li><strong>ZINCRBY</strong> key increment member                              有序集合中对指定成员的分数加上增量 increment</li><li><strong>ZREM</strong> key member [member …]                                移除有序集合中的一个或多个成员</li></ul><p><img src="/assets/image-20231022223928509.png" alt="image-20231022223928509"></p><h3 id="通用命令"><a href="#通用命令" class="headerlink" title="通用命令"></a>通用命令</h3><p>Redis的通用命令是不分数据类型的，都可以使用的命令：</p><ul><li><p>KEYS pattern 查找所有符合给定模式( pattern)的 key </p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-built_in">keys</span> *<br><span class="hljs-built_in">keys</span> *<span class="hljs-built_in">set</span><br></code></pre></td></tr></table></figure></li><li><p>EXISTS key 检查给定 key 是否存在</p></li><li><p>TYPE key 返回 key 所储存的值的类型</p></li><li><p>DEL key 该命令用于在 key 存在是删除 key</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>项目练习</category>
      
      <category>苍穹外卖</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>3_后端遇到的问题</title>
    <link href="/2023/10/21/%E9%BB%91%E9%A9%AC-%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/3_CRUD%E5%90%8E%E7%AB%AF%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <url>/2023/10/21/%E9%BB%91%E9%A9%AC-%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/3_CRUD%E5%90%8E%E7%AB%AF%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="CRUD后端出现的问题"><a href="#CRUD后端出现的问题" class="headerlink" title="CRUD后端出现的问题"></a>CRUD后端出现的问题</h1><h2 id="项目难点1：通过token解析出登录员工id后，如何传递给Service的save方法"><a href="#项目难点1：通过token解析出登录员工id后，如何传递给Service的save方法" class="headerlink" title="项目难点1：通过token解析出登录员工id后，如何传递给Service的save方法"></a>项目难点1：通过token解析出登录员工id后，如何传递给Service的save方法</h2><h3 id="TreadLocal"><a href="#TreadLocal" class="headerlink" title="TreadLocal"></a>TreadLocal</h3><p>ThreadLocal为每个线程提供单独一份存储空间，具有线程隔离的效果，只有在线程内才能获取到对应的值，线程外则不能访问。</p><p><strong>常用方法：</strong></p><ul><li>public void set(T value) 设置当前线程的线程局部变量的值</li><li>public T get() 返回当前线程所对应的线程局部变量的值</li><li>public void remove()        移除当前线程的线程局部变量</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.sky.context;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BaseContext</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ThreadLocal&lt;Long&gt; threadLocal = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadLocal</span>&lt;&gt;();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCurrentId</span><span class="hljs-params">(Long id)</span> &#123;<br>        threadLocal.set(id);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Long <span class="hljs-title function_">getCurrentId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> threadLocal.get();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">removeCurrentId</span><span class="hljs-params">()</span> &#123;<br>        threadLocal.remove();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>解决方案：在拦截器中获取token并解析出id值存放进threadLocal，在EmployeeService中将threadLocal中的id调出</p><h2 id="项目规范2：前端传递对象用EntityDTO封装，后端传递对象用EntityVO封装"><a href="#项目规范2：前端传递对象用EntityDTO封装，后端传递对象用EntityVO封装" class="headerlink" title="项目规范2：前端传递对象用EntityDTO封装，后端传递对象用EntityVO封装"></a>项目规范2：前端传递对象用EntityDTO封装，后端传递对象用EntityVO封装</h2><h2 id="项目特点3：分页采用PageHelper插件"><a href="#项目特点3：分页采用PageHelper插件" class="headerlink" title="项目特点3：分页采用PageHelper插件"></a>项目特点3：分页采用PageHelper插件</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> PageResult <span class="hljs-title function_">pageQuery</span><span class="hljs-params">(EmployeePageQueryDTO employeePageQueryDTO)</span> &#123;<br>    Page&lt;Employee&gt; page = employeeMapper.pageQuery(employeePageQueryDTO);<br>    PageHelper.startPage(employeePageQueryDTO.getPage(),employeePageQueryDTO.getPageSize());<br>    <span class="hljs-type">long</span> <span class="hljs-variable">total</span> <span class="hljs-operator">=</span> page.getTotal();<br>    List&lt;Employee&gt; records = page.getResult();<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PageResult</span>(total,records);<br>&#125;<br></code></pre></td></tr></table></figure><p>pagehelper 底层原理：借助threadlocal设置page变量，数据的隔离，同线程内的共享</p><h2 id="项目难点4：时间格式转换格式"><a href="#项目难点4：时间格式转换格式" class="headerlink" title="项目难点4：时间格式转换格式"></a>项目难点4：时间格式转换格式</h2><h3 id="1-属性上加注解"><a href="#1-属性上加注解" class="headerlink" title="1.属性上加注解"></a>1.属性上加注解</h3><p><img src="/assets/image-20231017234723139.png" alt="image-20231017234723139"></p><h3 id="2-消息转换器（推荐）"><a href="#2-消息转换器（推荐）" class="headerlink" title="2.消息转换器（推荐）"></a>2.消息转换器（推荐）</h3><p>WebMvcConfiguration中扩展SpringMVC的消息转换器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 扩展SpringMVC的消息转化器</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> converters</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">extendMessageConverters</span><span class="hljs-params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> &#123;<br>        log.info(<span class="hljs-string">&quot;扩展消息转化器...&quot;</span>);<br><span class="hljs-comment">//        创建一个消息转换器对象</span><br>        <span class="hljs-type">MappingJackson2HttpMessageConverter</span> <span class="hljs-variable">converter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MappingJackson2HttpMessageConverter</span>();<br><span class="hljs-comment">//        需要为消息转换器设置一个对象转换器，对象转换器可以将Java对象序列化为json数据</span><br>        converter.setObjectMapper(<span class="hljs-keyword">new</span> <span class="hljs-title class_">JacksonObjectMapper</span>());<br>        converters.add(<span class="hljs-number">0</span>,converter);<br>    &#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.sky.json;<br><br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.DeserializationFeature;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.<span class="hljs-keyword">module</span>.SimpleModule;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.datatype.jsr310.deser.LocalDateDeserializer;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.datatype.jsr310.deser.LocalDateTimeDeserializer;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.datatype.jsr310.deser.LocalTimeDeserializer;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.datatype.jsr310.ser.LocalDateSerializer;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.datatype.jsr310.ser.LocalDateTimeSerializer;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.datatype.jsr310.ser.LocalTimeSerializer;<br><br><span class="hljs-keyword">import</span> java.time.LocalDate;<br><span class="hljs-keyword">import</span> java.time.LocalDateTime;<br><span class="hljs-keyword">import</span> java.time.LocalTime;<br><span class="hljs-keyword">import</span> java.time.format.DateTimeFormatter;<br><br><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> com.fasterxml.jackson.databind.DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 对象映射器:基于jackson将Java对象转为json，或者将json转为Java对象</span><br><span class="hljs-comment"> * 将JSON解析为Java对象的过程称为 [从JSON反序列化Java对象]</span><br><span class="hljs-comment"> * 从Java对象生成JSON的过程称为 [序列化Java对象到JSON]</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JacksonObjectMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ObjectMapper</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">DEFAULT_DATE_FORMAT</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;yyyy-MM-dd&quot;</span>;<br>    <span class="hljs-comment">//public static final String DEFAULT_DATE_TIME_FORMAT = &quot;yyyy-MM-dd HH:mm:ss&quot;;</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">DEFAULT_DATE_TIME_FORMAT</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;yyyy-MM-dd HH:mm&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">DEFAULT_TIME_FORMAT</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;HH:mm:ss&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">JacksonObjectMapper</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">super</span>();<br>        <span class="hljs-comment">//收到未知属性时不报异常</span><br>        <span class="hljs-built_in">this</span>.configure(FAIL_ON_UNKNOWN_PROPERTIES, <span class="hljs-literal">false</span>);<br><br>        <span class="hljs-comment">//反序列化时，属性不存在的兼容处理</span><br>        <span class="hljs-built_in">this</span>.getDeserializationConfig().withoutFeatures(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);<br><br>        <span class="hljs-type">SimpleModule</span> <span class="hljs-variable">simpleModule</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleModule</span>()<br>                .addDeserializer(LocalDateTime.class, <span class="hljs-keyword">new</span> <span class="hljs-title class_">LocalDateTimeDeserializer</span>(DateTimeFormatter.ofPattern(DEFAULT_DATE_TIME_FORMAT)))<br>                .addDeserializer(LocalDate.class, <span class="hljs-keyword">new</span> <span class="hljs-title class_">LocalDateDeserializer</span>(DateTimeFormatter.ofPattern(DEFAULT_DATE_FORMAT)))<br>                .addDeserializer(LocalTime.class, <span class="hljs-keyword">new</span> <span class="hljs-title class_">LocalTimeDeserializer</span>(DateTimeFormatter.ofPattern(DEFAULT_TIME_FORMAT)))<br>                .addSerializer(LocalDateTime.class, <span class="hljs-keyword">new</span> <span class="hljs-title class_">LocalDateTimeSerializer</span>(DateTimeFormatter.ofPattern(DEFAULT_DATE_TIME_FORMAT)))<br>                .addSerializer(LocalDate.class, <span class="hljs-keyword">new</span> <span class="hljs-title class_">LocalDateSerializer</span>(DateTimeFormatter.ofPattern(DEFAULT_DATE_FORMAT)))<br>                .addSerializer(LocalTime.class, <span class="hljs-keyword">new</span> <span class="hljs-title class_">LocalTimeSerializer</span>(DateTimeFormatter.ofPattern(DEFAULT_TIME_FORMAT)));<br><br>        <span class="hljs-comment">//注册功能模块 例如，可以添加自定义序列化器和反序列化器</span><br>        <span class="hljs-built_in">this</span>.registerModule(simpleModule);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="项目BUG5：mybatisplus-id设置错误转bigint自增后已有数据过大问题"><a href="#项目BUG5：mybatisplus-id设置错误转bigint自增后已有数据过大问题" class="headerlink" title="项目BUG5：mybatisplus id设置错误转bigint自增后已有数据过大问题"></a>项目BUG5：mybatisplus id设置错误转bigint自增后已有数据过大问题</h2><p>mybatisplus自动递增采取雪花算法，需要手动配置递增规则</p><p>在application.yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">mybatis-plus:</span><br>  <span class="hljs-attr">global-config:</span><br>    <span class="hljs-attr">db-config:</span><br>      <span class="hljs-attr">id-type:</span> <span class="hljs-string">auto</span><br></code></pre></td></tr></table></figure><h2 id="项目规范6：公共字段自动填充"><a href="#项目规范6：公共字段自动填充" class="headerlink" title="项目规范6：公共字段自动填充"></a>项目规范6：公共字段自动填充</h2><p>完成了后台系统的<strong>员工管理功能</strong>和<strong>菜品分类功能</strong>的开发，在<strong>新增员工</strong>或者<strong>新增菜品分类</strong>时需要设置创建时间、创建人、修改时间、修改人等字段，在<strong>编辑员工</strong>或者<strong>编辑菜品分类</strong>时需要设置修改时间、修改人等字段。这些字段属于公共字段，也就是也就是在我们的系统中很多表中都会有这些字段</p><p>每一个业务方法中进行操作, 编码相对冗余、繁琐，需要对于这些公共字段在某个地方统一处理</p><h3 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h3><p>在实现公共字段自动填充，也就是在插入或者更新的时候为指定字段赋予指定的值，使用它的好处就是可以统一对这些字段进行处理，避免了重复代码。在上述的问题分析中，我们提到有四个公共字段，需要在新增&#x2F;更新中进行赋值操作, 具体情况如下: </p><table><thead><tr><th><strong>序号</strong></th><th><strong>字段名</strong></th><th><strong>含义</strong></th><th><strong>数据类型</strong></th><th><strong>操作类型</strong></th></tr></thead><tbody><tr><td>1</td><td>create_time</td><td>创建时间</td><td>datetime</td><td>insert</td></tr><tr><td>2</td><td>create_user</td><td>创建人id</td><td>bigint</td><td>insert</td></tr><tr><td>3</td><td>update_time</td><td>修改时间</td><td>datetime</td><td>insert、update</td></tr><tr><td>4</td><td>update_user</td><td>修改人id</td><td>bigint</td><td>insert、update</td></tr></tbody></table><p><strong>实现步骤：</strong></p><p>1). 自定义注解 AutoFill，用于标识需要进行公共字段自动填充的方法</p><p>2). 自定义切面类 AutoFillAspect，统一拦截加入了 AutoFill 注解的方法，通过反射为公共字段赋值</p><p>3). 在 Mapper 的方法上加入 AutoFill 注解</p><p><strong>技术点：</strong>枚举、注解、AOP、反射</p><p>枚举类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">OperationType</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 更新操作</span><br><span class="hljs-comment">     */</span><br>    UPDATE,<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 插入操作</span><br><span class="hljs-comment">     */</span><br>    INSERT<br><br>&#125;<br></code></pre></td></tr></table></figure><p>注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Target(ElementType.METHOD)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> AutoFill &#123;<br>    OperationType <span class="hljs-title function_">value</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>AOP 反射</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.sky.aspect;<br><br><span class="hljs-keyword">import</span> com.sky.annotation.AutoFill;<br><span class="hljs-keyword">import</span> com.sky.constant.AutoFillConstant;<br><span class="hljs-keyword">import</span> com.sky.context.BaseContext;<br><span class="hljs-keyword">import</span> com.sky.enumeration.OperationType;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.aspectj.lang.JoinPoint;<br><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.Aspect;<br><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.Before;<br><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.Pointcut;<br><span class="hljs-keyword">import</span> org.aspectj.lang.reflect.MethodSignature;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.time.LocalDateTime;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * ClassName: AutoFillAspect</span><br><span class="hljs-comment"> * Package: com.sky.aspect</span><br><span class="hljs-comment"> * Description:</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> Jmin</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Create</span> 2023/10/19 18:38</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Aspect</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AutoFillAspect</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 设置切入点</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Pointcut(&quot;execution(* com.sky.service.*.*(..)) &amp;&amp; @annotation(com.sky.annotation.AutoFill)&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">autoFillPointCut</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 前置通知，在通知中进行公共字段的赋值</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> joinPoint</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Before(&quot;autoFillPointCut()&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">autoFill</span><span class="hljs-params">(JoinPoint joinPoint)</span> &#123;<br>        log.info(<span class="hljs-string">&quot;开始进行公共字段自动填充...&quot;</span>);<br><span class="hljs-comment">//        获取到当前被拦截的方法上的数据库操作类型</span><br>        <span class="hljs-type">MethodSignature</span> <span class="hljs-variable">signature</span> <span class="hljs-operator">=</span> (MethodSignature) joinPoint.getSignature();<span class="hljs-comment">//方法签名对象</span><br>        <span class="hljs-type">AutoFill</span> <span class="hljs-variable">autoFill</span> <span class="hljs-operator">=</span> signature.getMethod().getAnnotation(AutoFill.class);<br>        <span class="hljs-type">OperationType</span> <span class="hljs-variable">operationType</span> <span class="hljs-operator">=</span> autoFill.value();<span class="hljs-comment">//获取数据库操作类型</span><br>        Object[] args = joinPoint.getArgs();<br>        <span class="hljs-keyword">if</span> (args == <span class="hljs-literal">null</span> || args.length == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">entity</span> <span class="hljs-operator">=</span> args[<span class="hljs-number">0</span>];<br><span class="hljs-comment">//        设置准备赋值的数据</span><br>        <span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">now</span> <span class="hljs-operator">=</span> LocalDateTime.now();<br>        <span class="hljs-type">Long</span> <span class="hljs-variable">currentId</span> <span class="hljs-operator">=</span> BaseContext.getCurrentId();<br><span class="hljs-comment">//        根据当前不同的操作类型，为对应的属性通过反射来赋值</span><br>        <span class="hljs-keyword">if</span> (operationType == OperationType.INSERT) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br><span class="hljs-comment">//                获取四个公共字段赋值</span><br>                <span class="hljs-type">Method</span> <span class="hljs-variable">setCreateTime</span> <span class="hljs-operator">=</span> entity.getClass().getDeclaredMethod(AutoFillConstant.SET_CREATE_TIME, LocalDateTime.class);<br>                <span class="hljs-type">Method</span> <span class="hljs-variable">setCreateUser</span> <span class="hljs-operator">=</span> entity.getClass().getDeclaredMethod(AutoFillConstant.SET_CREATE_USER, Long.class);<br>                <span class="hljs-type">Method</span> <span class="hljs-variable">setUpdateTime</span> <span class="hljs-operator">=</span> entity.getClass().getDeclaredMethod(AutoFillConstant.SET_UPDATE_TIME, LocalDateTime.class);<br>                <span class="hljs-type">Method</span> <span class="hljs-variable">setUpdateUser</span> <span class="hljs-operator">=</span> entity.getClass().getDeclaredMethod(AutoFillConstant.SET_UPDATE_USER, Long.class);<br>                setCreateTime.invoke(entity, now);<br>                setCreateUser.invoke(entity, currentId);<br>                setUpdateTime.invoke(entity, now);<br>                setUpdateUser.invoke(entity, currentId);<br>            &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (operationType == OperationType.UPDATE) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-type">Method</span> <span class="hljs-variable">setUpdateUser</span> <span class="hljs-operator">=</span> entity.getClass().getDeclaredMethod(AutoFillConstant.SET_UPDATE_USER, Long.class);<br>                <span class="hljs-type">Method</span> <span class="hljs-variable">setUpdateTime</span> <span class="hljs-operator">=</span> entity.getClass().getDeclaredMethod(AutoFillConstant.SET_UPDATE_TIME, LocalDateTime.class);<br>                setUpdateUser.invoke(entity,currentId);<br>                setUpdateTime.invoke(entity,now);<br>            &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="java可以通过反射类，给类添加新的属性并赋值吗？"><a href="#java可以通过反射类，给类添加新的属性并赋值吗？" class="headerlink" title="java可以通过反射类，给类添加新的属性并赋值吗？"></a>java可以通过反射类，给类添加新的属性并赋值吗？</h2><p>不可以！在Java中，不能通过反射直接为现有的类添加新属性。类的结构在编译时就被确定了，无法在运行时动态地添加新属性。然而，您可以通过其他方式实现类似的功能，例如使用Map、动态代理或者使用第三方库来扩展对象的功能。</p><h2 id="技能点：存储文件方式"><a href="#技能点：存储文件方式" class="headerlink" title="技能点：存储文件方式"></a>技能点：存储文件方式</h2><h3 id="本地文件上传"><a href="#本地文件上传" class="headerlink" title="本地文件上传"></a>本地文件上传</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/admin/common&quot;)</span><br><span class="hljs-meta">@Api(tags = &quot;通用接口&quot;)</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CommonController</span> &#123;<br>    <span class="hljs-meta">@PostMapping(&quot;/upload&quot;)</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">upload</span><span class="hljs-params">(MultipartFile file)</span>&#123;<br>        <span class="hljs-keyword">if</span> (!file.isEmpty())&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-type">byte</span>[] bytes = file.getBytes();<br>                <span class="hljs-type">Path</span> <span class="hljs-variable">path</span> <span class="hljs-operator">=</span> Paths.get(<span class="hljs-string">&quot;sky-server/src/main/resources/image/&quot;</span> + file.getOriginalFilename());<br>                Files.write(path,bytes);<br>                log.info(<span class="hljs-string">&quot;文件上传成功&quot;</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                log.info(<span class="hljs-string">&quot;文件上传失败&quot;</span>);<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>            &#125;<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            log.info(<span class="hljs-string">&quot;文件为空&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> Result.success();<br>    &#125;<br>&#125;s<br></code></pre></td></tr></table></figure><h3 id="七牛云文件上传"><a href="#七牛云文件上传" class="headerlink" title="七牛云文件上传"></a>七牛云文件上传</h3><p>OSS（Object Storage Service）：</p><ul><li><strong>用途</strong>：OSS是一种云存储服务，用于存储和管理大量的非结构化数据，如图片、音频、视频文件等。它旨在提供可伸缩、耐用和安全的数据存储。</li><li><strong>工作原理</strong>：OSS将数据存储在云中，用户可以通过API或Web界面上传、下载和管理数据。数据通常以对象（Object）的形式存储，每个对象都有唯一的URL或键。OSS提供了数据冗余和备份机制，确保数据的持久性和可靠性。</li><li><strong>优势</strong>：OSS具有高可扩展性，可以存储大规模数据。它还提供了强大的访问控制和权限管理，以确保数据的安全性和隐私保护。</li><li><strong>使用场景</strong>：OSS通常用于存储媒体文件、备份数据、日志文件和其他非结构化数据。流行的OSS提供商包括Amazon S3、Google Cloud Storage、阿里云OSS等。</li></ul><p><img src="/assets/image-20231020172603432.png" alt="image-20231020172603432"></p><p>application-dev.yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">sky:</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-string">localhost</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">3306</span><br>    <span class="hljs-attr">database:</span> <span class="hljs-string">sky_take_out</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">lzm123456</span><br>  <span class="hljs-attr">qiniu:</span><br>    <span class="hljs-attr">AK:</span> <span class="hljs-string">9KMvGFBqirIJollZrjqZ_ZhpUvtOhVyqm88vpl3F</span><br>    <span class="hljs-attr">SK:</span> <span class="hljs-string">UsMZeIR4VOrQZTFX86vPwMZCEKm2ZxgHdb9FCy_H</span><br>    <span class="hljs-attr">zoom_name:</span> <span class="hljs-string">web-ezg</span><br></code></pre></td></tr></table></figure><p>读取yml</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java">sky:<br>  datasource:<br>    driver-class-name: com.mysql.cj.jdbc.Driver<br>    host: localhost<br>    port: <span class="hljs-number">3306</span><br>    database: sky_take_out<br>    username: root<br>    password: lzm123456<br>qiniu:<br>  accessKey: 9KMvGFBqirIJollZrjqZ_ZhpUvtOhVyqm88vpl3F<br>  secretKey: UsMZeIR4VOrQZTFX86vPwMZCEKm2ZxgHdb9FCy_H<br>  bucket: web-ezg<br>  domain: http:<span class="hljs-comment">//s2tmng6sy.hn-bkt.clouddn.com/</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.sky.qiniuTest;<br><br><span class="hljs-keyword">import</span> com.google.gson.Gson;<br><span class="hljs-keyword">import</span> com.qiniu.common.QiniuException;<br><span class="hljs-keyword">import</span> com.qiniu.http.Response;<br><span class="hljs-keyword">import</span> com.qiniu.storage.Configuration;<br><span class="hljs-keyword">import</span> com.qiniu.storage.Region;<br><span class="hljs-keyword">import</span> com.qiniu.storage.UploadManager;<br><span class="hljs-keyword">import</span> com.qiniu.storage.model.DefaultPutRet;<br><span class="hljs-keyword">import</span> com.qiniu.util.Auth;<br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * ClassName: QiniuTest</span><br><span class="hljs-comment"> * Package: com.sky.qiniuTest</span><br><span class="hljs-comment"> * Description:</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> Jmin</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Create</span> 2023/10/20 19:53</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">QiniuTest</span> &#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-comment">//构造一个带指定 Region 对象的配置类</span><br>        <span class="hljs-type">Configuration</span> <span class="hljs-variable">cfg</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Configuration</span>(Region.huanan());<br>        cfg.resumableUploadAPIVersion = Configuration.ResumableUploadAPIVersion.V2;<span class="hljs-comment">// 指定分片上传版本</span><br><span class="hljs-comment">//...其他参数参考类注释</span><br><br>        <span class="hljs-type">UploadManager</span> <span class="hljs-variable">uploadManager</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UploadManager</span>(cfg);<br><span class="hljs-comment">//...生成上传凭证，然后准备上传</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">accessKey</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;9KMvGFBqirIJollZrjqZ_ZhpUvtOhVyqm88vpl3F&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">secretKey</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;UsMZeIR4VOrQZTFX86vPwMZCEKm2ZxgHdb9FCy_H&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">bucket</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;web-ezg&quot;</span>;<br><br><span class="hljs-comment">//默认不指定key的情况下，以文件内容的hash值作为文件名</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;D:\\Employment_Readiness\\canqiong_takeaway\\project\\sky-take-out\\sky-server\\src\\main\\resources\\image\\anya.jpg&quot;</span>);<br>            <span class="hljs-type">Auth</span> <span class="hljs-variable">auth</span> <span class="hljs-operator">=</span> Auth.create(accessKey, secretKey);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">upToken</span> <span class="hljs-operator">=</span> auth.uploadToken(bucket);<br><br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-type">Response</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> uploadManager.put(inputStream,key,upToken,<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br>                <span class="hljs-comment">//解析上传成功的结果</span><br>                <span class="hljs-type">DefaultPutRet</span> <span class="hljs-variable">putRet</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Gson</span>().fromJson(response.bodyString(), DefaultPutRet.class);<br>                System.out.println(putRet.key);<br>                System.out.println(putRet.hash);<br>            &#125; <span class="hljs-keyword">catch</span> (QiniuException ex) &#123;<br>                ex.printStackTrace();<br>                <span class="hljs-keyword">if</span> (ex.response != <span class="hljs-literal">null</span>) &#123;<br>                    System.err.println(ex.response);<br><br>                    <span class="hljs-keyword">try</span> &#123;<br>                        <span class="hljs-type">String</span> <span class="hljs-variable">body</span> <span class="hljs-operator">=</span> ex.response.toString();<br>                        System.err.println(body);<br>                    &#125; <span class="hljs-keyword">catch</span> (Exception ignored) &#123;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception ex) &#123;<br>            <span class="hljs-comment">//ignore</span><br>        &#125;<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>思路：在configuration配置类返回一个携带云服务基本属性值的对象（组件），在controller类中调用该对象的上传方法</p><p>properties读取yml</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.sky.properties;<br><br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * ClassName: QiniuZoneProperties</span><br><span class="hljs-comment"> * Package: com.sky.properties</span><br><span class="hljs-comment"> * Description:</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> Jmin</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Create</span> 2023/10/20 20:44</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;qiniu&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">QiniuZoneProperties</span> &#123;<br>    <span class="hljs-keyword">private</span> String accessKey;<br>    <span class="hljs-keyword">private</span> String secretKey;<br>    <span class="hljs-keyword">private</span> String bucket;<br>    <span class="hljs-keyword">private</span> String domain;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>工具类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.sky.utils;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSONObject;<br><span class="hljs-keyword">import</span> com.google.gson.Gson;<br><span class="hljs-keyword">import</span> com.qiniu.common.QiniuException;<br><span class="hljs-keyword">import</span> com.qiniu.http.Response;<br><span class="hljs-keyword">import</span> com.qiniu.storage.Configuration;<br><span class="hljs-keyword">import</span> com.qiniu.storage.Region;<br><span class="hljs-keyword">import</span> com.qiniu.storage.UploadManager;<br><span class="hljs-keyword">import</span> com.qiniu.storage.model.DefaultPutRet;<br><span class="hljs-keyword">import</span> com.qiniu.util.Auth;<br><span class="hljs-keyword">import</span> lombok.AllArgsConstructor;<br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * ClassName: QiniuZoneUtil</span><br><span class="hljs-comment"> * Package: com.sky.utils</span><br><span class="hljs-comment"> * Description:</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> Jmin</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Create</span> 2023/10/20 20:52</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">QiniuZoneUtil</span> &#123;<br>    <span class="hljs-keyword">private</span> String accessKey;<br>    <span class="hljs-keyword">private</span> String secretKey;<br>    <span class="hljs-keyword">private</span> String bucket;<br>    <span class="hljs-keyword">private</span> String domain;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">upload</span><span class="hljs-params">(String key,InputStream inputStream)</span>&#123;<br>        <span class="hljs-comment">//构造一个带指定 Region 对象的配置类</span><br>        <span class="hljs-type">Configuration</span> <span class="hljs-variable">cfg</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Configuration</span>(Region.huanan());<br>        cfg.resumableUploadAPIVersion = Configuration.ResumableUploadAPIVersion.V2;<span class="hljs-comment">// 指定分片上传版本</span><br>        <span class="hljs-comment">//...其他参数参考类注释</span><br>        <span class="hljs-type">UploadManager</span> <span class="hljs-variable">uploadManager</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UploadManager</span>(cfg);<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Auth</span> <span class="hljs-variable">auth</span> <span class="hljs-operator">=</span> Auth.create(accessKey, secretKey);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">upToken</span> <span class="hljs-operator">=</span> auth.uploadToken(bucket);<br><br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-type">Response</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> uploadManager.put(inputStream,key,upToken,<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br>                <span class="hljs-comment">//解析上传成功的结果</span><br>                <span class="hljs-type">DefaultPutRet</span> <span class="hljs-variable">putRet</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Gson</span>().fromJson(response.bodyString(), DefaultPutRet.class);<br>                <span class="hljs-keyword">if</span> (response.isOK() &amp;&amp; response.isJson())&#123;<br>                    <span class="hljs-keyword">return</span> domain + key;<br>                &#125;<br>                log.info(<span class="hljs-string">&quot;上传文件成功：&#123;&#125;&quot;</span>,putRet.key);<br>            &#125; <span class="hljs-keyword">catch</span> (QiniuException ex) &#123;<br>                ex.printStackTrace();<br>                <span class="hljs-keyword">if</span> (ex.response != <span class="hljs-literal">null</span>) &#123;<br>                    System.err.println(ex.response);<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        <span class="hljs-type">String</span> <span class="hljs-variable">body</span> <span class="hljs-operator">=</span> ex.response.toString();<br>                        System.err.println(body);<br>                    &#125; <span class="hljs-keyword">catch</span> (Exception ignored) &#123;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception ex) &#123;<br>            <span class="hljs-comment">//ignore</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>boot启动配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.sky.config;<br><br><br><span class="hljs-keyword">import</span> com.sky.properties.QiniuZoneProperties;<br><span class="hljs-keyword">import</span> com.sky.utils.QiniuZoneUtil;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * ClassName: QiniuZoneConfiguration</span><br><span class="hljs-comment"> * Package: com.sky.config</span><br><span class="hljs-comment"> * Description:</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> Jmin</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Create</span> 2023/10/20 20:46</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">QiniuZoneConfiguration</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-meta">@ConditionalOnMissingBean</span><span class="hljs-comment">//保证项目仅有一个对象</span><br>    <span class="hljs-keyword">public</span> QiniuZoneUtil <span class="hljs-title function_">qiniuZoneUtil</span><span class="hljs-params">(QiniuZoneProperties qiniuZoneProperties)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">QiniuZoneUtil</span>(qiniuZoneProperties.getAccessKey(), qiniuZoneProperties.getSecretKey(), qiniuZoneProperties.getBucket(),qiniuZoneProperties.getDomain());<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>Controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.sky.controller.admin;<br><br><span class="hljs-keyword">import</span> com.sky.result.Result;<br><span class="hljs-keyword">import</span> com.sky.utils.QiniuZoneUtil;<br><span class="hljs-keyword">import</span> io.swagger.annotations.Api;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.PostMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><span class="hljs-keyword">import</span> org.springframework.web.multipart.MultipartFile;<br><br><span class="hljs-keyword">import</span> javax.annotation.Resource;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.nio.file.Files;<br><span class="hljs-keyword">import</span> java.nio.file.Path;<br><span class="hljs-keyword">import</span> java.nio.file.Paths;<br><span class="hljs-keyword">import</span> java.util.UUID;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * ClassName: CommonController</span><br><span class="hljs-comment"> * Package: com.sky.controller.admin</span><br><span class="hljs-comment"> * Description:</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> Jmin</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Create</span> 2023/10/20 12:55</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/admin/common&quot;)</span><br><span class="hljs-meta">@Api(tags = &quot;通用接口&quot;)</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CommonController</span> &#123;<br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> QiniuZoneUtil qiniuZoneUtil;<br>    <span class="hljs-meta">@PostMapping(&quot;/upload&quot;)</span><br>    <span class="hljs-keyword">public</span> Result&lt;String&gt; <span class="hljs-title function_">upload</span><span class="hljs-params">(MultipartFile file)</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">uploadUrl</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">if</span> (!file.isEmpty())&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br><span class="hljs-comment">//                获取原始文件名</span><br>                <span class="hljs-type">String</span> <span class="hljs-variable">originalFilename</span> <span class="hljs-operator">=</span> file.getOriginalFilename();<br><span class="hljs-comment">//                获取原始文件名的后缀</span><br>                <span class="hljs-type">String</span> <span class="hljs-variable">extension</span> <span class="hljs-operator">=</span> originalFilename.substring(originalFilename.lastIndexOf(<span class="hljs-string">&quot;.&quot;</span>));<br><span class="hljs-comment">//                构造新文件名称</span><br>                <span class="hljs-type">String</span> <span class="hljs-variable">objectName</span> <span class="hljs-operator">=</span> UUID.randomUUID() + extension;<br><span class="hljs-comment">//                防止上传文件重名导致图片覆盖，因此uuid可以做到唯一标识</span><br>                uploadUrl = qiniuZoneUtil.upload(objectName, file.getInputStream());<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>            &#125;<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            log.error(<span class="hljs-string">&quot;文件为空&quot;</span>);<br>        &#125;<br>        log.info(<span class="hljs-string">&quot;上传文件的地址为：&#123;&#125;&quot;</span>,uploadUrl);<br>        <span class="hljs-keyword">return</span> Result.success(uploadUrl);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="技能点：多表操作如何保持原子性"><a href="#技能点：多表操作如何保持原子性" class="headerlink" title="技能点：多表操作如何保持原子性"></a>技能点：多表操作如何保持原子性</h2><p>@Transactional注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping</span><br><span class="hljs-meta">@ApiOperation(&quot;新增菜品&quot;)</span><br><span class="hljs-meta">@Transactional</span> <span class="hljs-comment">//保证多表操作时数据的一致性，原子性，如果其中有一个表出现操作错误，则回滚到所有表操作之前的状态</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">save</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> DishDTO dishDTO)</span>&#123;<br>    log.info(<span class="hljs-string">&quot;新增菜品：&#123;&#125;&quot;</span>,dishDTO);<br>    <span class="hljs-type">Dish</span> <span class="hljs-variable">dish</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dish</span>();<br>    BeanUtils.copyProperties(dishDTO,dish);<br>    <span class="hljs-comment">//表一操作</span><br>    dishService.saveDish(dish);<br>    dishDTO.getFlavors().forEach(dishFlavor -&gt; &#123;<br>        dishFlavor.setDishId(dish.getId());<br>           <span class="hljs-comment">//表二操作</span><br>        dishFlavorService.save(dishFlavor);<br>    &#125;);<br>    <span class="hljs-keyword">return</span> Result.success();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="问题：mybatisplus可以根据某一实体类返回出vo实体吗？"><a href="#问题：mybatisplus可以根据某一实体类返回出vo实体吗？" class="headerlink" title="问题：mybatisplus可以根据某一实体类返回出vo实体吗？"></a>问题：mybatisplus可以根据某一实体类返回出vo实体吗？</h2><p>用mybatis写xml,配合Pagehelper</p>]]></content>
    
    
    <categories>
      
      <category>项目练习</category>
      
      <category>苍穹外卖</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>2_数据库设计文档</title>
    <link href="/2023/10/15/%E9%BB%91%E9%A9%AC-%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/2_%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1/"/>
    <url>/2023/10/15/%E9%BB%91%E9%A9%AC-%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/2_%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1/</url>
    
    <content type="html"><![CDATA[<h1 id="数据库设计文档"><a href="#数据库设计文档" class="headerlink" title="数据库设计文档"></a>数据库设计文档</h1><table><thead><tr><th>序号</th><th>数据表名</th><th>中文名称</th></tr></thead><tbody><tr><td>1</td><td>employee</td><td>员工表</td></tr><tr><td>2</td><td>category</td><td>分类表</td></tr><tr><td>3</td><td>dish</td><td>菜品表</td></tr><tr><td>4</td><td>dish_flavor</td><td>菜品口味表</td></tr><tr><td>5</td><td>setmeal</td><td>套餐表</td></tr><tr><td>6</td><td>setmeal_dish</td><td>套餐菜品关系表</td></tr><tr><td>7</td><td>user</td><td>用户表</td></tr><tr><td>8</td><td>address_book</td><td>地址表</td></tr><tr><td>9</td><td>shopping_cart</td><td>购物车表</td></tr><tr><td>10</td><td>orders</td><td>订单表</td></tr><tr><td>11</td><td>order_detail</td><td>订单明细表</td></tr></tbody></table><h3 id="1-employee"><a href="#1-employee" class="headerlink" title="1. employee"></a>1. employee</h3><p>employee表为员工表，用于存储商家内部的员工信息。具体表结构如下：</p><table><thead><tr><th>字段名</th><th>数据类型</th><th>说明</th><th>备注</th></tr></thead><tbody><tr><td>id</td><td>bigint</td><td>主键</td><td>自增</td></tr><tr><td>name</td><td>varchar(32)</td><td>姓名</td><td></td></tr><tr><td>username</td><td>varchar(32)</td><td>用户名</td><td>唯一</td></tr><tr><td>password</td><td>varchar(64)</td><td>密码</td><td></td></tr><tr><td>phone</td><td>varchar(11)</td><td>手机号</td><td></td></tr><tr><td>sex</td><td>varchar(2)</td><td>性别</td><td></td></tr><tr><td>id_number</td><td>varchar(18)</td><td>身份证号</td><td></td></tr><tr><td>status</td><td>int</td><td>账号状态</td><td>1正常 0锁定</td></tr><tr><td>create_time</td><td>datetime</td><td>创建时间</td><td></td></tr><tr><td>update_time</td><td>datetime</td><td>最后修改时间</td><td></td></tr><tr><td>create_user</td><td>bigint</td><td>创建人id</td><td></td></tr><tr><td>update_user</td><td>bigint</td><td>最后修改人id</td><td></td></tr></tbody></table><h3 id="2-category"><a href="#2-category" class="headerlink" title="2. category"></a>2. category</h3><p>category表为分类表，用于存储商品的分类信息。具体表结构如下：</p><table><thead><tr><th>字段名</th><th>数据类型</th><th>说明</th><th>备注</th></tr></thead><tbody><tr><td>id</td><td>bigint</td><td>主键</td><td>自增</td></tr><tr><td>name</td><td>varchar(32)</td><td>分类名称</td><td>唯一</td></tr><tr><td>type</td><td>int</td><td>分类类型</td><td>1菜品分类  2套餐分类</td></tr><tr><td>sort</td><td>int</td><td>排序字段</td><td>用于分类数据的排序</td></tr><tr><td>status</td><td>int</td><td>状态</td><td>1启用 0禁用</td></tr><tr><td>create_time</td><td>datetime</td><td>创建时间</td><td></td></tr><tr><td>update_time</td><td>datetime</td><td>最后修改时间</td><td></td></tr><tr><td>create_user</td><td>bigint</td><td>创建人id</td><td></td></tr><tr><td>update_user</td><td>bigint</td><td>最后修改人id</td><td></td></tr></tbody></table><h3 id="3-dish"><a href="#3-dish" class="headerlink" title="3. dish"></a>3. dish</h3><p>dish表为菜品表，用于存储菜品的信息。具体表结构如下：</p><table><thead><tr><th>字段名</th><th>数据类型</th><th>说明</th><th>备注</th></tr></thead><tbody><tr><td>id</td><td>bigint</td><td>主键</td><td>自增</td></tr><tr><td>name</td><td>varchar(32)</td><td>菜品名称</td><td>唯一</td></tr><tr><td>category_id</td><td>bigint</td><td>分类id</td><td>逻辑外键</td></tr><tr><td>price</td><td>decimal(10,2)</td><td>菜品价格</td><td></td></tr><tr><td>image</td><td>varchar(255)</td><td>图片路径</td><td></td></tr><tr><td>description</td><td>varchar(255)</td><td>菜品描述</td><td></td></tr><tr><td>status</td><td>int</td><td>售卖状态</td><td>1起售 0停售</td></tr><tr><td>create_time</td><td>datetime</td><td>创建时间</td><td></td></tr><tr><td>update_time</td><td>datetime</td><td>最后修改时间</td><td></td></tr><tr><td>create_user</td><td>bigint</td><td>创建人id</td><td></td></tr><tr><td>update_user</td><td>bigint</td><td>最后修改人id</td><td></td></tr></tbody></table><h3 id="4-dish-flavor"><a href="#4-dish-flavor" class="headerlink" title="4. dish_flavor"></a>4. dish_flavor</h3><p>dish_flavor表为菜品口味表，用于存储菜品的口味信息。具体表结构如下：</p><table><thead><tr><th>字段名</th><th>数据类型</th><th>说明</th><th>备注</th></tr></thead><tbody><tr><td>id</td><td>bigint</td><td>主键</td><td>自增</td></tr><tr><td>dish_id</td><td>bigint</td><td>菜品id</td><td>逻辑外键</td></tr><tr><td>name</td><td>varchar(32)</td><td>口味名称</td><td></td></tr><tr><td>value</td><td>varchar(255)</td><td>口味值</td><td></td></tr></tbody></table><h3 id="5-setmeal"><a href="#5-setmeal" class="headerlink" title="5. setmeal"></a>5. setmeal</h3><p>setmeal表为套餐表，用于存储套餐的信息。具体表结构如下：</p><table><thead><tr><th>字段名</th><th>数据类型</th><th>说明</th><th>备注</th></tr></thead><tbody><tr><td>id</td><td>bigint</td><td>主键</td><td>自增</td></tr><tr><td>name</td><td>varchar(32)</td><td>套餐名称</td><td>唯一</td></tr><tr><td>category_id</td><td>bigint</td><td>分类id</td><td>逻辑外键</td></tr><tr><td>price</td><td>decimal(10,2)</td><td>套餐价格</td><td></td></tr><tr><td>image</td><td>varchar(255)</td><td>图片路径</td><td></td></tr><tr><td>description</td><td>varchar(255)</td><td>套餐描述</td><td></td></tr><tr><td>status</td><td>int</td><td>售卖状态</td><td>1起售 0停售</td></tr><tr><td>create_time</td><td>datetime</td><td>创建时间</td><td></td></tr><tr><td>update_time</td><td>datetime</td><td>最后修改时间</td><td></td></tr><tr><td>create_user</td><td>bigint</td><td>创建人id</td><td></td></tr><tr><td>update_user</td><td>bigint</td><td>最后修改人id</td><td></td></tr></tbody></table><h3 id="6-setmeal-dish"><a href="#6-setmeal-dish" class="headerlink" title="6. setmeal_dish"></a>6. setmeal_dish</h3><p>setmeal_dish表为套餐菜品关系表，用于存储套餐和菜品的关联关系。具体表结构如下：</p><table><thead><tr><th>字段名</th><th>数据类型</th><th>说明</th><th>备注</th></tr></thead><tbody><tr><td>id</td><td>bigint</td><td>主键</td><td>自增</td></tr><tr><td>setmeal_id</td><td>bigint</td><td>套餐id</td><td>逻辑外键</td></tr><tr><td>dish_id</td><td>bigint</td><td>菜品id</td><td>逻辑外键</td></tr><tr><td>name</td><td>varchar(32)</td><td>菜品名称</td><td>冗余字段</td></tr><tr><td>price</td><td>decimal(10,2)</td><td>菜品单价</td><td>冗余字段</td></tr><tr><td>copies</td><td>int</td><td>菜品份数</td><td></td></tr></tbody></table><h3 id="7-user"><a href="#7-user" class="headerlink" title="7. user"></a>7. user</h3><p>user表为用户表，用于存储C端用户的信息。具体表结构如下：</p><table><thead><tr><th>字段名</th><th>数据类型</th><th>说明</th><th>备注</th></tr></thead><tbody><tr><td>id</td><td>bigint</td><td>主键</td><td>自增</td></tr><tr><td>openid</td><td>varchar(45)</td><td>微信用户的唯一标识</td><td></td></tr><tr><td>name</td><td>varchar(32)</td><td>用户姓名</td><td></td></tr><tr><td>phone</td><td>varchar(11)</td><td>手机号</td><td></td></tr><tr><td>sex</td><td>varchar(2)</td><td>性别</td><td></td></tr><tr><td>id_number</td><td>varchar(18)</td><td>身份证号</td><td></td></tr><tr><td>avatar</td><td>varchar(500)</td><td>微信用户头像路径</td><td></td></tr><tr><td>create_time</td><td>datetime</td><td>注册时间</td><td></td></tr></tbody></table><h3 id="8-address-book"><a href="#8-address-book" class="headerlink" title="8. address_book"></a>8. address_book</h3><p>address_book表为地址表，用于存储C端用户的收货地址信息。具体表结构如下：</p><table><thead><tr><th>字段名</th><th>数据类型</th><th>说明</th><th>备注</th></tr></thead><tbody><tr><td>id</td><td>bigint</td><td>主键</td><td>自增</td></tr><tr><td>user_id</td><td>bigint</td><td>用户id</td><td>逻辑外键</td></tr><tr><td>consignee</td><td>varchar(50)</td><td>收货人</td><td></td></tr><tr><td>sex</td><td>varchar(2)</td><td>性别</td><td></td></tr><tr><td>phone</td><td>varchar(11)</td><td>手机号</td><td></td></tr><tr><td>province_code</td><td>varchar(12)</td><td>省份编码</td><td></td></tr><tr><td>province_name</td><td>varchar(32)</td><td>省份名称</td><td></td></tr><tr><td>city_code</td><td>varchar(12)</td><td>城市编码</td><td></td></tr><tr><td>city_name</td><td>varchar(32)</td><td>城市名称</td><td></td></tr><tr><td>district_code</td><td>varchar(12)</td><td>区县编码</td><td></td></tr><tr><td>district_name</td><td>varchar(32)</td><td>区县名称</td><td></td></tr><tr><td>detail</td><td>varchar(200)</td><td>详细地址信息</td><td>具体到门牌号</td></tr><tr><td>label</td><td>varchar(100)</td><td>标签</td><td>公司、家、学校</td></tr><tr><td>is_default</td><td>tinyint(1)</td><td>是否默认地址</td><td>1是 0否</td></tr></tbody></table><h3 id="9-shopping-cart"><a href="#9-shopping-cart" class="headerlink" title="9. shopping_cart"></a>9. shopping_cart</h3><p>shopping_cart表为购物车表，用于存储C端用户的购物车信息。具体表结构如下：</p><table><thead><tr><th>字段名</th><th>数据类型</th><th>说明</th><th>备注</th></tr></thead><tbody><tr><td>id</td><td>bigint</td><td>主键</td><td>自增</td></tr><tr><td>name</td><td>varchar(32)</td><td>商品名称</td><td></td></tr><tr><td>image</td><td>varchar(255)</td><td>商品图片路径</td><td></td></tr><tr><td>user_id</td><td>bigint</td><td>用户id</td><td>逻辑外键</td></tr><tr><td>dish_id</td><td>bigint</td><td>菜品id</td><td>逻辑外键</td></tr><tr><td>setmeal_id</td><td>bigint</td><td>套餐id</td><td>逻辑外键</td></tr><tr><td>dish_flavor</td><td>varchar(50)</td><td>菜品口味</td><td></td></tr><tr><td>number</td><td>int</td><td>商品数量</td><td></td></tr><tr><td>amount</td><td>decimal(10,2)</td><td>商品单价</td><td></td></tr><tr><td>create_time</td><td>datetime</td><td>创建时间</td><td></td></tr></tbody></table><h3 id="10-orders"><a href="#10-orders" class="headerlink" title="10. orders"></a>10. orders</h3><p>orders表为订单表，用于存储C端用户的订单数据。具体表结构如下：</p><table><thead><tr><th>字段名</th><th>数据类型</th><th>说明</th><th>备注</th></tr></thead><tbody><tr><td>id</td><td>bigint</td><td>主键</td><td>自增</td></tr><tr><td>number</td><td>varchar(50)</td><td>订单号</td><td></td></tr><tr><td>status</td><td>int</td><td>订单状态</td><td>1待付款 2待接单 3已接单 4派送中 5已完成 6已取消</td></tr><tr><td>user_id</td><td>bigint</td><td>用户id</td><td>逻辑外键</td></tr><tr><td>address_book_id</td><td>bigint</td><td>地址id</td><td>逻辑外键</td></tr><tr><td>order_time</td><td>datetime</td><td>下单时间</td><td></td></tr><tr><td>checkout_time</td><td>datetime</td><td>付款时间</td><td></td></tr><tr><td>pay_method</td><td>int</td><td>支付方式</td><td>1微信支付 2支付宝支付</td></tr><tr><td>pay_status</td><td>tinyint</td><td>支付状态</td><td>0未支付 1已支付 2退款</td></tr><tr><td>amount</td><td>decimal(10,2)</td><td>订单金额</td><td></td></tr><tr><td>remark</td><td>varchar(100)</td><td>备注信息</td><td></td></tr><tr><td>phone</td><td>varchar(11)</td><td>手机号</td><td></td></tr><tr><td>address</td><td>varchar(255)</td><td>详细地址信息</td><td></td></tr><tr><td>user_name</td><td>varchar(32)</td><td>用户姓名</td><td></td></tr><tr><td>consignee</td><td>varchar(32)</td><td>收货人</td><td></td></tr><tr><td>cancel_reason</td><td>varchar(255)</td><td>订单取消原因</td><td></td></tr><tr><td>rejection_reason</td><td>varchar(255)</td><td>拒单原因</td><td></td></tr><tr><td>cancel_time</td><td>datetime</td><td>订单取消时间</td><td></td></tr><tr><td>estimated_delivery_time</td><td>datetime</td><td>预计送达时间</td><td></td></tr><tr><td>delivery_status</td><td>tinyint</td><td>配送状态</td><td>1立即送出  0选择具体时间</td></tr><tr><td>delivery_time</td><td>datetime</td><td>送达时间</td><td></td></tr><tr><td>pack_amount</td><td>int</td><td>打包费</td><td></td></tr><tr><td>tableware_number</td><td>int</td><td>餐具数量</td><td></td></tr><tr><td>tableware_status</td><td>tinyint</td><td>餐具数量状态</td><td>1按餐量提供  0选择具体数量</td></tr></tbody></table><h3 id="11-order-detail"><a href="#11-order-detail" class="headerlink" title="11. order_detail"></a>11. order_detail</h3><p>order_detail表为订单明细表，用于存储C端用户的订单明细数据。具体表结构如下：</p><table><thead><tr><th>字段名</th><th>数据类型</th><th>说明</th><th>备注</th></tr></thead><tbody><tr><td>id</td><td>bigint</td><td>主键</td><td>自增</td></tr><tr><td>name</td><td>varchar(32)</td><td>商品名称</td><td></td></tr><tr><td>image</td><td>varchar(255)</td><td>商品图片路径</td><td></td></tr><tr><td>order_id</td><td>bigint</td><td>订单id</td><td>逻辑外键</td></tr><tr><td>dish_id</td><td>bigint</td><td>菜品id</td><td>逻辑外键</td></tr><tr><td>setmeal_id</td><td>bigint</td><td>套餐id</td><td>逻辑外键</td></tr><tr><td>dish_flavor</td><td>varchar(50)</td><td>菜品口味</td><td></td></tr><tr><td>number</td><td>int</td><td>商品数量</td><td></td></tr><tr><td>amount</td><td>decimal(10,2)</td><td>商品单价</td><td></td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>项目练习</category>
      
      <category>苍穹外卖</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>1_项目准备</title>
    <link href="/2023/10/15/%E9%BB%91%E9%A9%AC-%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/1_%E9%A1%B9%E7%9B%AE%E5%87%86%E5%A4%87/"/>
    <url>/2023/10/15/%E9%BB%91%E9%A9%AC-%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/1_%E9%A1%B9%E7%9B%AE%E5%87%86%E5%A4%87/</url>
    
    <content type="html"><![CDATA[<h1 id="项目准备"><a href="#项目准备" class="headerlink" title="项目准备"></a>项目准备</h1><h2 id="前端环境搭建"><a href="#前端环境搭建" class="headerlink" title="前端环境搭建"></a>前端环境搭建</h2><p>前端：移动到<strong>非中文目录</strong>下，双击 nginx.exe 即可启动 nginx 服务，访问端口号为 80</p><p><img src="/assets/image-20231015163832036.png" alt="image-20231015163832036"></p><p><strong>sky</strong>目录中存放了管理端的前端资源</p><img src="/2023/10/15/%E9%BB%91%E9%A9%AC-%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/1_%E9%A1%B9%E7%9B%AE%E5%87%86%E5%A4%87/image-20231016150153131.png" alt="image-20231016150153131" style="zoom:50%;"><p>导入springboot项目思路：导入模块，创建新模块，替换pom</p><h2 id="后端环境搭建"><a href="#后端环境搭建" class="headerlink" title="后端环境搭建"></a>后端环境搭建</h2><p>后端工程基于 maven 进行项目构建，并且进行分模块开发。</p><p><img src="/assets/image-20231016150209919.png" alt="image-20231016150209919"></p><p>对工程的每个模块作用说明：</p><table><thead><tr><th><strong>序号</strong></th><th><strong>名称</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>1</td><td>sky-take-out</td><td>maven父工程，统一管理依赖版本，聚合其他子模块</td></tr><tr><td>2</td><td>sky-common</td><td>子模块，存放公共类，例如：工具类、常量类、异常类等</td></tr><tr><td>3</td><td>sky-pojo</td><td>子模块，存放实体类、VO、DTO等</td></tr><tr><td>4</td><td>sky-server</td><td>子模块，后端服务，存放配置文件、Controller、Service、Mapper等</td></tr></tbody></table><p>对项目整体结构了解后，接下来我们详细分析上述的每个子模块：</p><p><strong>sky-common:</strong> 模块中存放的是一些公共类，可以供其他模块使用</p><img src="/2023/10/15/%E9%BB%91%E9%A9%AC-%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/1_%E9%A1%B9%E7%9B%AE%E5%87%86%E5%A4%87/image-20231016150227910.png" alt="image-20231016150227910" style="zoom:50%;"><ul><li><p>分析sky-common模块的每个包的作用：</p><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>constant</td><td>存放相关常量类</td></tr><tr><td>context</td><td>存放上下文类</td></tr><tr><td>enumeration</td><td>项目的枚举类存储</td></tr><tr><td>exception</td><td>存放自定义异常类</td></tr><tr><td>json</td><td>处理json转换的类</td></tr><tr><td>properties</td><td>存放SpringBoot相关的配置属性类</td></tr><tr><td>result</td><td>返回结果类的封装</td></tr><tr><td>utils</td><td>常用工具类</td></tr></tbody></table></li><li><p><strong>sky-pojo:</strong> 模块中存放的是一些 entity、DTO、VO</p><img src="/2023/10/15/%E9%BB%91%E9%A9%AC-%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/1_%E9%A1%B9%E7%9B%AE%E5%87%86%E5%A4%87/image-20231016150248991.png" alt="image-20231016150248991" style="zoom:50%;"><p>分析sky-pojo模块的每个包的作用：</p><table><thead><tr><th><strong>名称</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>Entity</td><td>实体，通常和数据库中的表对应</td></tr><tr><td>DTO</td><td>数据传输对象，通常用于程序中各层之间传递数据</td></tr><tr><td>VO</td><td>视图对象，为前端展示数据提供的对象</td></tr><tr><td>POJO</td><td>普通Java对象，只有属性和对应的getter和setter</td></tr></tbody></table></li><li><p><strong>sky-server:</strong> 模块中存放的是 配置文件、配置类、拦截器、controller、service、mapper、启动类等</p><img src="/2023/10/15/%E9%BB%91%E9%A9%AC-%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/1_%E9%A1%B9%E7%9B%AE%E5%87%86%E5%A4%87/../canqiong_takeaway/讲义/day01/assets/image-20221107094852361.png" alt="image-20221107094852361" style="zoom:50%;"><p>分析sky-server模块的每个包的作用：</p><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>config</td><td>存放配置类</td></tr><tr><td>controller</td><td>存放controller类</td></tr><tr><td>interceptor</td><td>存放拦截器类</td></tr><tr><td>mapper</td><td>存放mapper接口</td></tr><tr><td>service</td><td>存放service类</td></tr><tr><td>SkyApplication</td><td>启动类</td></tr></tbody></table></li></ul><h2 id="Git版本控制"><a href="#Git版本控制" class="headerlink" title="Git版本控制"></a>Git版本控制</h2><p>创建Git本地仓库</p><p><img src="/assets/image-20231016150323413.png" alt="image-20231016150323413"></p><p>本地仓库创建成功。</p><p>.gitignore文件是忽略推送相关文件的模板</p><p><img src="/assets/image-20231016150344096.png" alt="image-20231016150344096"></p><p>尝试提交代码到git本地仓库</p><p><img src="/assets/image-20231016150353957.png" alt="image-20231016150353957"></p><p>gitee创建私有仓库</p><p><img src="/assets/image-20231015170630515.png" alt="image-20231015170630515"></p><p><a href="https://gitee.com/xin-sanmu-Ming/canqiong_takeout.git%E5%BE%97%E5%88%B0git%E5%9C%B0%E5%9D%80">https://gitee.com/xin-sanmu-Ming/canqiong_takeout.git得到git地址</a></p><p><img src="/assets/image-20231016150410660.png" alt="image-20231016150410660"></p><p><img src="/assets/image-20231016150420050.png" alt="image-20231016150420050"></p><p><img src="/assets/image-20231016150427568.png" alt="image-20231016150427568"></p><p>推送成功！！！</p><h2 id="数据库环境搭建"><a href="#数据库环境搭建" class="headerlink" title="数据库环境搭建"></a>数据库环境搭建</h2><p>数据库建表语句创建数据库表结构</p><p><img src="/assets/image-20231016150444452.png" alt="image-20231016150444452"></p><h2 id="前后端联调测试"><a href="#前后端联调测试" class="headerlink" title="前后端联调测试"></a>前后端联调测试</h2><p>后端compile编译 略</p><p>后端初始功能实现了登录功能</p><p>思路：<img src="/assets/image-20231015225732267.png" alt="image-20231015225732267"></p><h2 id="nginx反向代理和负载均衡"><a href="#nginx反向代理和负载均衡" class="headerlink" title="nginx反向代理和负载均衡"></a>nginx反向代理和负载均衡</h2><blockquote><p>思考：前端发送的请求是如何请求到后端服务？</p></blockquote><p>前端发出的请求：</p><img src="/2023/10/15/%E9%BB%91%E9%A9%AC-%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/1_%E9%A1%B9%E7%9B%AE%E5%87%86%E5%A4%87/image-20231015233309162.png" alt="image-20231015233309162" style="zoom:33%;"><p>而后端接收的请求：</p><img src="/2023/10/15/%E9%BB%91%E9%A9%AC-%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/1_%E9%A1%B9%E7%9B%AE%E5%87%86%E5%A4%87/image-20231015231026583.png" alt="image-20231015231026583" style="zoom:33%;"><p>前端请求地址：<a href="http://localhost/api/employee/login">http://localhost/api/employee/login</a></p><p>后端接口地址：<a href="http://localhost:8080/admin/employee/login">http://localhost:8080/admin/employee/login</a></p><p>发现两端地址并不匹配，但是前端请求成功。其原因是本项目启用了nginx反向代理，将前端发送的动态请求由nginx转发到后端服务器！！nginx还可以作为反向代理服务器</p><p><img src="/assets/image-20231015233855606.png" alt="image-20231015233855606"></p><p><strong>为什么不直接通过浏览器直接请求后台服务端，需要通过nginx反向代理呢？</strong></p><h3 id="nginx反向代理的好处"><a href="#nginx反向代理的好处" class="headerlink" title="nginx反向代理的好处"></a>nginx反向代理的好处</h3><ul><li><p>提高访问速度</p><p>因为nginx本身可以进行缓存，如果访问的同一接口，并且做了数据缓存，nginx就直接可把数据返回，不需要真正地访问服务端，从而提高访问速度。</p></li><li><p>负载均衡</p><p>将大量的请求按照我们指定的方式均衡分配给集群中的每台服务器。</p><img src="/2023/10/15/%E9%BB%91%E9%A9%AC-%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/1_%E9%A1%B9%E7%9B%AE%E5%87%86%E5%A4%87/image-20231015234352013.png" alt="image-20231015234352013" style="zoom:33%;"></li><li><p>保证后端服务安全</p><p>在真实企业项目中很多后端接口并没有暴露于互联网，而是存在于企业内网，前端是无法直接请求到后端，因此前端发送的请求必须经过nginx服务器，让nginx服务器走内网将请求转发给后端，从而保证后端服务的安全。</p></li></ul><h3 id="nginx反向代理配置方式"><a href="#nginx反向代理配置方式" class="headerlink" title="nginx反向代理配置方式"></a>nginx反向代理配置方式</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs nginx">server&#123;<br>    <span class="hljs-attribute">listen</span> <span class="hljs-number">80</span>;<br>    <span class="hljs-attribute">server_name</span> localhost;<br>    <br>    <span class="hljs-section">location</span> /api/&#123;<br>        <span class="hljs-attribute">proxy_pass</span> http://localhost:8080/admin/; <span class="hljs-comment">#反向代理</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><img src="/2023/10/15/%E9%BB%91%E9%A9%AC-%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/1_%E9%A1%B9%E7%9B%AE%E5%87%86%E5%A4%87/image-20231015235546269.png" alt="image-20231015235546269" style="zoom:50%;"><p><strong>proxy_pass</strong>该指令是用来设置代理服务器的地址，可以是主机名称，IP地址加端口号等形式。</p><p>上面代码含义是：nginx监听80端口号，服务名为localhost的请求， 然后当我们访问 <a href="http://localhost/..%E8%BF%99%E6%A0%B7%E7%9A%84%E6%8E%A5%E5%8F%A3%E7%9A%84%E6%97%B6%E5%80%99%EF%BC%8C%E5%AE%83%E4%BC%9A%E9%80%9A%E8%BF%87">http://localhost:80/api/../..这样的接口的时候，它会通过</a> location &#x2F;api&#x2F; {} 这样的反向代理到 <a href="http://localhost:8080/admin/%E4%B8%8A%E6%9D%A5%E3%80%82">http://localhost:8080/admin/上来。</a></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">nginx 配置：http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">80</span><span class="hljs-regexp">/api/</span>&#123;代理地址&#125;<br>代理地址： http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">8080</span><span class="hljs-regexp">/admin/</span><br>当前端发送请求：http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">80</span><span class="hljs-regexp">/api/</span>employee/login<br>nginx 将前端请求地址裁切出<span class="hljs-regexp">/employee/</span>login<br>拼接到代理地址<span class="hljs-regexp">/employee/</span>login 即http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">8080</span><span class="hljs-regexp">/admin/</span>employee/login<br></code></pre></td></tr></table></figure><p>配置文件在nginx-1.20.2\conf，打开nginx配置</p><h3 id="nginx负载均衡"><a href="#nginx负载均衡" class="headerlink" title="nginx负载均衡"></a>nginx负载均衡</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">upstream</span> webservers&#123;<br><span class="hljs-attribute">server</span> <span class="hljs-number">127.0.0.1:8080</span> weight=<span class="hljs-number">90</span> ;<br><span class="hljs-comment">#server 127.0.0.1:8088 weight=10 ;</span><br>&#125;<br>server&#123;<br>    <span class="hljs-attribute">listen</span> <span class="hljs-number">80</span>;<br>    <span class="hljs-attribute">server_name</span> localhost;<br>  <br>    <span class="hljs-section">location</span> /api/&#123;<br>        <span class="hljs-attribute">proxy_pass</span> http://webservers/admin;<span class="hljs-comment">#负载均衡</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>upstream：</strong>如果代理服务器是一组服务器的话，我们可以使用upstream指令配置后端服务器组。</p><p>根据webservers名称找到一组服务器，根据设置的负载均衡策略(默认是轮询)转发到具体的服务器。<strong>注：</strong>upstream后面的名称可自定义，但要上下保持一致。</p><p><strong>nginx 负载均衡策略：</strong></p><table><thead><tr><th><strong>名称</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>轮询</td><td>默认方式</td></tr><tr><td>weight</td><td>权重方式，默认为1，权重越高，被分配的客户端请求就越多</td></tr><tr><td>ip_hash</td><td>依据ip分配方式，这样每个访客可以固定访问一个后端服务</td></tr><tr><td>least_conn</td><td>依据最少连接方式，把请求优先分配给连接数少的后端服务</td></tr><tr><td>url_hash</td><td>依据url分配方式，这样相同的url会被分配到同一个后端服务</td></tr><tr><td>fair</td><td>依据响应时间方式，响应时间短的服务将会被优先分配</td></tr></tbody></table><p>具体配置方式：</p><p><strong>轮询：</strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">upstream</span> webservers&#123;<br>    <span class="hljs-attribute">server</span> <span class="hljs-number">192.168.100.128:8080</span>;<br>    <span class="hljs-attribute">server</span> <span class="hljs-number">192.168.100.129:8080</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>weight:</strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">upstream</span> webservers&#123;<br>    <span class="hljs-attribute">server</span> <span class="hljs-number">192.168.100.128:8080</span> weight=<span class="hljs-number">90</span>;<br>    <span class="hljs-attribute">server</span> <span class="hljs-number">192.168.100.129:8080</span> weight=<span class="hljs-number">10</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>ip_hash:</strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">upstream</span> webservers&#123;<br>    ip_hash;<br>    <span class="hljs-attribute">server</span> <span class="hljs-number">192.168.100.128:8080</span>;<br>    <span class="hljs-attribute">server</span> <span class="hljs-number">192.168.100.129:8080</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>least_conn:</strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">upstream</span> webservers&#123;<br>    least_conn;<br>    <span class="hljs-attribute">server</span> <span class="hljs-number">192.168.100.128:8080</span>;<br>    <span class="hljs-attribute">server</span> <span class="hljs-number">192.168.100.129:8080</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>url_hash:</strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">upstream</span> webservers&#123;<br>    <span class="hljs-attribute">hash</span> &amp;request_uri;<br>    <span class="hljs-attribute">server</span> <span class="hljs-number">192.168.100.128:8080</span>;<br>    <span class="hljs-attribute">server</span> <span class="hljs-number">192.168.100.129:8080</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>fair:</strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">upstream</span> webservers&#123;<br>    <span class="hljs-attribute">server</span> <span class="hljs-number">192.168.100.128:8080</span>;<br>    <span class="hljs-attribute">server</span> <span class="hljs-number">192.168.100.129:8080</span>;<br>    fair;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="登录功能完善"><a href="#登录功能完善" class="headerlink" title="登录功能完善"></a>登录功能完善</h2><p><strong>问题：</strong>员工表中的密码是明文存储，安全性太低。</p><p><img src="/assets/image-20221107160529803-1697387148262-7.png" alt="image-20221107160529803"></p><p><strong>解决思路：</strong></p><ol><li><p>将密码加密后存储，提高安全性</p><img src="/2023/10/15/%E9%BB%91%E9%A9%AC-%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/1_%E9%A1%B9%E7%9B%AE%E5%87%86%E5%A4%87/image-20221107161918913-1697387148263-8.png" alt="image-20221107161918913" style="zoom:50%;"></li><li><p>使用MD5加密方式对明文密码加密</p><img src="/2023/10/15/%E9%BB%91%E9%A9%AC-%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/1_%E9%A1%B9%E7%9B%AE%E5%87%86%E5%A4%87/image-20221107160739680-1697387148263-9.png" alt="image-20221107160739680" style="zoom:50%;"></li></ol><p><strong>实现步骤：</strong></p><ol><li><p>修改数据库中明文密码，改为MD5加密后的密文</p><p>打开employee表，修改密码</p><p><img src="/assets/image-20221107161446710-1697387148263-10.png" alt="image-20221107161446710"></p></li><li><p>修改Java代码，前端提交的密码进行MD5加密后再跟数据库中密码比对</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">password = DigestUtils.md5DigestAsHex(password.getBytes());<br><span class="hljs-keyword">if</span> (!password.equals(employee.getPassword())) &#123;<br>    <span class="hljs-comment">//密码错误</span><br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PasswordErrorException</span>(MessageConstant.PASSWORD_ERROR);<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><img src="/2023/10/15/%E9%BB%91%E9%A9%AC-%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/1_%E9%A1%B9%E7%9B%AE%E5%87%86%E5%A4%87/image-20231016005039628.png" alt="image-20231016005039628" style="zoom:50%;"><h2 id="导入接口文档"><a href="#导入接口文档" class="headerlink" title="导入接口文档"></a>导入接口文档</h2><h3 id="前后端分离开发流程"><a href="#前后端分离开发流程" class="headerlink" title="前后端分离开发流程"></a>前后端分离开发流程</h3><img src="/2023/10/15/%E9%BB%91%E9%A9%AC-%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/1_%E9%A1%B9%E7%9B%AE%E5%87%86%E5%A4%87/image-20231016094356004.png" alt="image-20231016094356004" style="zoom:33%;"><p>第一步：定义接口，确定接口的路径、请求方式、传入参数、返回参数。</p><p>第二步：前端开发人员和后端开发人员并行开发，同时，也可自测。</p><p>第三步：前后端人员进行连调测试。</p><p>第四步：提交给测试人员进行最终测试。</p><h3 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h3><p><a href="https://app.apifox.com/%E5%AF%BC%E5%85%A5json">https://app.apifox.com/导入json</a></p><h2 id="Swagger"><a href="#Swagger" class="headerlink" title="Swagger"></a>Swagger</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>Swagger 是一个规范和完整的框架，用于生成、描述、调用和可视化 RESTful 风格的 Web 服务(<a href="https://swagger.io/">https://swagger.io/</a>)。 它的主要作用是：</p><ol><li><p>使得前后端分离开发更加方便，有利于团队协作</p></li><li><p>接口的文档在线自动生成，降低后端开发人员编写接口文档的负担</p></li><li><p>功能测试 </p><p>Spring已经将Swagger纳入自身的标准，建立了Spring-swagger项目，现在叫Springfox。通过在项目中引入Springfox ，即可非常简单快捷的使用Swagger。</p></li></ol><p>knife4j是为Java MVC框架集成Swagger生成Api文档的增强解决方案,前身是swagger-bootstrap-ui,取名kni4j是希望它能像一把匕首一样小巧,轻量,并且功能强悍!</p><p>目前，一般都使用knife4j框架。</p><h3 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h3><ol><li><p>导入knife4j的maven依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.github.xiaoymin<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>knife4j-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>配置类中加入knife4j的相关配置</p><p>WebMvcConfiguration.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 通过knife4j生成接口文档</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">*/</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Docket <span class="hljs-title function_">docket</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">ApiInfo</span> <span class="hljs-variable">apiInfo</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ApiInfoBuilder</span>()<br>                .title(<span class="hljs-string">&quot;苍穹外卖项目接口文档&quot;</span>)<br>                .version(<span class="hljs-string">&quot;2.0&quot;</span>)<br>                .description(<span class="hljs-string">&quot;苍穹外卖项目接口文档&quot;</span>)<br>                .build();<br>        <span class="hljs-type">Docket</span> <span class="hljs-variable">docket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Docket</span>(DocumentationType.SWAGGER_2)<br>                .apiInfo(apiInfo)<br>                .select()<br>                .apis(RequestHandlerSelectors.basePackage(<span class="hljs-string">&quot;com.sky.controller&quot;</span>))<br>                .paths(PathSelectors.any())<br>                .build();<br>        <span class="hljs-keyword">return</span> docket;<br>    &#125;<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20231016115444678.png" alt="image-20231016115444678"></p></li><li><p>设置静态资源映射，否则接口文档页面无法访问</p><p>WebMvcConfiguration.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 设置静态资源映射</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> registry</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addResourceHandlers</span><span class="hljs-params">(ResourceHandlerRegistry registry)</span> &#123;<br>        registry.addResourceHandler(<span class="hljs-string">&quot;/doc.html&quot;</span>).addResourceLocations(<span class="hljs-string">&quot;classpath:/META-INF/resources/&quot;</span>);<br>        registry.addResourceHandler(<span class="hljs-string">&quot;/webjars/**&quot;</span>).addResourceLocations(<span class="hljs-string">&quot;classpath:/META-INF/resources/webjars/&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>访问测试</p><p> <a href="http://localhost:8080/doc.html">http://localhost:8080/doc.html</a></p></li></ol><p><strong>思考：</strong>通过 Swagger 就可以生成接口文档，那么我们就不需要 Yapi 了？</p><blockquote><p>1.Yapi 是设计阶段使用的工具，管理和维护接口</p><p>2.Swagger 在开发阶段使用的框架，帮助后端开发人员做后端的接口测试</p></blockquote><h3 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h3><p>通过注解可以控制生成的接口文档，使接口文档拥有更好的可读性，常用注解如下：</p><table><thead><tr><th><strong>注解</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>@Api</td><td>用在类上，例如Controller，表示对类的说明</td></tr><tr><td>@ApiModel</td><td>用在类上，例如entity、DTO、VO</td></tr><tr><td>@ApiModelProperty</td><td>用在属性上，描述属性信息</td></tr><tr><td>@ApiOperation</td><td>用在方法上，例如Controller的方法，说明方法的用途、作用</td></tr></tbody></table><p>使用上述注解，生成可读性更好的接口文档</p><h4 id="Api-tag"><a href="#Api-tag" class="headerlink" title="@Api(tag=&quot;???&quot;)"></a><code>@Api(tag=&quot;???&quot;)</code></h4><img src="/2023/10/15/%E9%BB%91%E9%A9%AC-%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/1_%E9%A1%B9%E7%9B%AE%E5%87%86%E5%A4%87/image-20231016114715911.png" alt="image-20231016114715911" style="zoom:50%;"><img src="/2023/10/15/%E9%BB%91%E9%A9%AC-%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/1_%E9%A1%B9%E7%9B%AE%E5%87%86%E5%A4%87/image-20231016114652265.png" alt="image-20231016114652265" style="zoom: 33%;"><h4 id="ApiOperation-value"><a href="#ApiOperation-value" class="headerlink" title="@ApiOperation(value=&quot;???&quot;)"></a><code>@ApiOperation(value=&quot;???&quot;)</code></h4><img src="/2023/10/15/%E9%BB%91%E9%A9%AC-%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/1_%E9%A1%B9%E7%9B%AE%E5%87%86%E5%A4%87/image-20231016114826475.png" alt="image-20231016114826475" style="zoom:50%;"><img src="/2023/10/15/%E9%BB%91%E9%A9%AC-%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/1_%E9%A1%B9%E7%9B%AE%E5%87%86%E5%A4%87/image-20231016114857570.png" alt="image-20231016114857570" style="zoom: 33%;"><h4 id="ApiModel-description"><a href="#ApiModel-description" class="headerlink" title="@ApiModel(description=&quot;???&quot;)"></a><code>@ApiModel(description=&quot;???&quot;)</code></h4><img src="/2023/10/15/%E9%BB%91%E9%A9%AC-%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/1_%E9%A1%B9%E7%9B%AE%E5%87%86%E5%A4%87/image-20231016115058610.png" alt="image-20231016115058610" style="zoom:50%;"><img src="/2023/10/15/%E9%BB%91%E9%A9%AC-%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/1_%E9%A1%B9%E7%9B%AE%E5%87%86%E5%A4%87/image-20231016115116162.png" alt="image-20231016115116162" style="zoom: 50%;"><img src="/2023/10/15/%E9%BB%91%E9%A9%AC-%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/1_%E9%A1%B9%E7%9B%AE%E5%87%86%E5%A4%87/image-20231016115211009.png" alt="image-20231016115211009" style="zoom: 33%;"><h4 id="ApiModelProperty-value"><a href="#ApiModelProperty-value" class="headerlink" title="@ApiModelProperty(value=&quot;???&quot;)"></a><code>@ApiModelProperty(value=&quot;???&quot;)</code></h4><img src="/2023/10/15/%E9%BB%91%E9%A9%AC-%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/1_%E9%A1%B9%E7%9B%AE%E5%87%86%E5%A4%87/image-20231016115318107.png" alt="image-20231016115318107" style="zoom:50%;"><img src="/2023/10/15/%E9%BB%91%E9%A9%AC-%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/1_%E9%A1%B9%E7%9B%AE%E5%87%86%E5%A4%87/image-20231016115350204.png" alt="image-20231016115350204" style="zoom: 33%;">]]></content>
    
    
    <categories>
      
      <category>项目练习</category>
      
      <category>苍穹外卖</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>8_Vue3大事件_文章分类页面</title>
    <link href="/2023/10/06/Vue3/8_Vue3%E5%A4%A7%E4%BA%8B%E4%BB%B6_%E6%96%87%E7%AB%A0%E5%88%86%E7%B1%BB%E9%A1%B5%E9%9D%A2/"/>
    <url>/2023/10/06/Vue3/8_Vue3%E5%A4%A7%E4%BA%8B%E4%BB%B6_%E6%96%87%E7%AB%A0%E5%88%86%E7%B1%BB%E9%A1%B5%E9%9D%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="Vue3大事件-文章分类页面-element-plus-表格"><a href="#Vue3大事件-文章分类页面-element-plus-表格" class="headerlink" title="Vue3大事件_文章分类页面[element-plus 表格]"></a>Vue3大事件_文章分类页面[element-plus 表格]</h1><h2 id="基本架子-PageContainer"><a href="#基本架子-PageContainer" class="headerlink" title="基本架子 - PageContainer"></a>基本架子 - PageContainer</h2><ol><li>基本结构样式，用到了 el-card 组件</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">el-card</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;page-container&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">header</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;header&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>文章分类<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;extra&quot;</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;primary&quot;</span>&gt;</span>添加分类<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">     ...</span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">el-card</span>&gt;</span></span><br>&lt;/template&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;scss&quot;</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-class">.page-container</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">min-height</span>: <span class="hljs-number">100%</span>;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">box-sizing</span>: border-box;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-selector-class">.header</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-attribute">display</span>: flex;</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-attribute">align-items</span>: center;</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-attribute">justify-content</span>: space-between;</span></span><br><span class="language-css"><span class="language-xml">  &#125;</span></span><br><span class="language-css"><span class="language-xml">&#125;</span></span><br><span class="language-css"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br></code></pre></td></tr></table></figure><ol start="2"><li>考虑到多个页面复用，封装成组件<ul><li>props 定制标题</li><li>默认插槽 default 定制内容主体</li><li>具名插槽 extra  定制头部右侧额外的按钮</li></ul></li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">el-card</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;page-container&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">header</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;header&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;&#123;title&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;extra&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-comment">&lt;!--          具名插槽--&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;extra&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-comment">&lt;!--          &lt;el-button type=&quot;primary&quot;&gt;添加分类&lt;/el-button&gt;--&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-comment">&lt;!--    定义内容--&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">slot</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">el-card</span>&gt;</span></span><br>&lt;/template&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;scss&quot;</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-class">.page-container</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">min-height</span>: <span class="hljs-number">100%</span>;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">box-sizing</span>: border-box;</span></span><br><span class="language-css"><span class="language-xml"></span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-selector-class">.header</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-attribute">display</span>: flex;</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-attribute">align-items</span>: center;</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-attribute">justify-content</span>: space-between;</span></span><br><span class="language-css"><span class="language-xml">  &#125;</span></span><br><span class="language-css"><span class="language-xml">&#125;</span></span><br><span class="language-css"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-title function_">defineProps</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">title</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">type</span>: <span class="hljs-title class_">String</span></span></span><br><span class="language-javascript"><span class="language-xml">  &#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;)</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><ol start="3"><li>页面中直接使用测试 ( unplugin-vue-components 会自动注册)</li></ol><ul><li>文章分类测试：</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">page-container</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;文章分类&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">extra</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;primary&quot;</span>&gt;</span> 添加分类 <span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">    主体部分</span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">page-container</span>&gt;</span></span><br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><ul><li>文章管理测试：</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">page-container</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;文章管理&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">extra</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;primary&quot;</span>&gt;</span>发布文章<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">    主体部分</span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">page-container</span>&gt;</span></span><br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20231006160440636.png" alt="image-20231006160440636"></p><p><img src="/assets/image-20231006160524000.png" alt="image-20231006160524000"></p><h2 id="文章分类渲染-element-plus-表table"><a href="#文章分类渲染-element-plus-表table" class="headerlink" title="文章分类渲染[element-plus  表table]"></a>文章分类渲染[element-plus  表table]</h2><h3 id="封装API-请求获取表格数据"><a href="#封装API-请求获取表格数据" class="headerlink" title="封装API - 请求获取表格数据"></a>封装API - 请求获取表格数据</h3><ol><li>新建 <code>api/article.js</code> 封装获取频道列表的接口</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> request <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/utils/request&#x27;</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">artGetChannelsService</span> = (<span class="hljs-params"></span>) =&gt; request.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/my/cate/list&#x27;</span>)<br></code></pre></td></tr></table></figure><ol start="2"><li>页面中调用接口，获取数据存储</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> channelList = <span class="hljs-title function_">ref</span>([])<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">getChannelList</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> <span class="hljs-title function_">artGetChannelsService</span>()<br>  channelList.<span class="hljs-property">value</span> = res.<span class="hljs-property">data</span>.<span class="hljs-property">data</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="el-table-表格动态渲染"><a href="#el-table-表格动态渲染" class="headerlink" title="el-table 表格动态渲染"></a>el-table 表格动态渲染</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;el-table :data=<span class="hljs-string">&quot;channelList&quot;</span> style=<span class="hljs-string">&quot;width: 100%&quot;</span>&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">el-table-column</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;序号&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;100&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;index&quot;</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">el-table-column</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">el-table-column</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;分类名称&quot;</span> <span class="hljs-attr">prop</span>=<span class="hljs-string">&quot;cate_name&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-table-column</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">el-table-column</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;分类别名&quot;</span> <span class="hljs-attr">prop</span>=<span class="hljs-string">&quot;cate_alias&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-table-column</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">el-table-column</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;操作&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;100&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">default</span>=<span class="hljs-string">&quot;&#123; row &#125;&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">:icon</span>=<span class="hljs-string">&quot;Edit&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">circle</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">plain</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;primary&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;onEditChannel(row)&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">:icon</span>=<span class="hljs-string">&quot;Delete&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">circle</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">plain</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;danger&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;onDelChannel(row)&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">el-table-column</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">empty</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">el-empty</span> <span class="hljs-attr">description</span>=<span class="hljs-string">&quot;没有数据&quot;</span> /&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br>&lt;/el-table&gt;<br><br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">onEditChannel</span> = (<span class="hljs-params">row</span>) =&gt; &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(row)<br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-title function_">onDelChannel</span> = (<span class="hljs-params">row</span>) =&gt; &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(row)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="el-table-表格-loading-效果"><a href="#el-table-表格-loading-效果" class="headerlink" title="el-table 表格 loading 效果"></a>el-table 表格 loading 效果</h3><ol><li>定义变量，v-loading绑定</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> loading = <span class="hljs-title function_">ref</span>(<span class="hljs-literal">false</span>)<br><br>&lt;el-table v-loading=<span class="hljs-string">&quot;loading&quot;</span>&gt;<br></code></pre></td></tr></table></figure><ol start="2"><li>发送请求前开启，请求结束关闭</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> <span class="hljs-title function_">getChannelList</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params"></span>) =&gt; &#123;<br>  loading.<span class="hljs-property">value</span> = <span class="hljs-literal">true</span><br>  <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> <span class="hljs-title function_">articleGetChannelsService</span>()<br>  channelList.<span class="hljs-property">value</span> = res.<span class="hljs-property">data</span>.<span class="hljs-property">data</span><br>  loading.<span class="hljs-property">value</span> = <span class="hljs-literal">false</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="el-table表格空数据"><a href="#el-table表格空数据" class="headerlink" title="el-table表格空数据"></a>el-table表格空数据</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;el-table&gt;<br>    &lt;template #empty&gt;<br>    &lt;el-empty description=&quot;没有数据&quot; /&gt;<br>  &lt;/template&gt;<br>&lt;/el-table&gt;<br></code></pre></td></tr></table></figure><h2 id="文章分类添加编辑-element-plus-弹层"><a href="#文章分类添加编辑-element-plus-弹层" class="headerlink" title="文章分类添加编辑 [element-plus 弹层]"></a>文章分类添加编辑 [element-plus 弹层]</h2><p><a href="https://element-plus.org/zh-CN/component/dialog.html#%E5%9F%BA%E7%A1%80%E7%94%A8%E6%B3%95">Dialog 对话框 | Element Plus (element-plus.org)</a></p><h3 id="点击显示弹层"><a href="#点击显示弹层" class="headerlink" title="点击显示弹层"></a>点击显示弹层</h3><ol><li>准备弹层</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> dialogVisible = <span class="hljs-title function_">ref</span>(<span class="hljs-literal">false</span>)<br><br>&lt;el-dialog v-model=<span class="hljs-string">&quot;dialogVisible&quot;</span> title=<span class="hljs-string">&quot;添加弹层&quot;</span> width=<span class="hljs-string">&quot;30%&quot;</span>&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>我是内容部分<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">footer</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;dialog-footer&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;dialogVisible = false&quot;</span>&gt;</span>取消<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;primary&quot;</span>&gt;</span> 确认 <span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br>&lt;/el-dialog&gt;<br></code></pre></td></tr></table></figure><ol start="2"><li>点击事件</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;template #extra&gt;<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;primary&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;onAddChannel&quot;</span>&gt;</span>添加分类<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span></span>&lt;/template&gt;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">onAddChannel</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  dialogVisible.<span class="hljs-property">value</span> = <span class="hljs-literal">true</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="封装弹层组件-ChannelEdit"><a href="#封装弹层组件-ChannelEdit" class="headerlink" title="封装弹层组件 ChannelEdit"></a>封装弹层组件 ChannelEdit</h3><p>添加 和 编辑，可以共用一个弹层，所以可以将弹层封装成一个组件</p><p>组件对外暴露一个方法 open,  基于 open 的参数，初始化表单数据，并判断区分是添加 还是 编辑</p><ol><li>open({ })                   &#x3D;&gt;  添加操作，添加表单初始化无数据</li><li>open({ id: xx,  …  })  &#x3D;&gt;  编辑操作，编辑表单初始化需回显</li></ol><p>具体实现：</p><ol><li>封装组件 <code>article/components/ChannelEdit.vue</code></li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;script setup&gt;<br><span class="hljs-keyword">import</span> &#123; ref &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">const</span> dialogVisible = <span class="hljs-title function_">ref</span>(<span class="hljs-literal">false</span>)<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">open</span> = (<span class="hljs-params">row</span>) =&gt; &#123;<br>  dialogVisible.<span class="hljs-property">value</span> = <span class="hljs-literal">true</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(row)<br>&#125;<br><br><span class="hljs-title function_">defineExpose</span>(&#123;<br>  open<br>&#125;)<br>&lt;/script&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">el-dialog</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;dialogVisible&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;添加弹层&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;30%&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>我是内容部分<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">footer</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;dialog-footer&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;dialogVisible = false&quot;</span>&gt;</span>取消<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;primary&quot;</span>&gt;</span> 确认 <span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">el-dialog</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br></code></pre></td></tr></table></figure><ol start="2"><li>通过 ref 绑定</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> dialog = <span class="hljs-title function_">ref</span>()<br><br>&lt;!-- 弹窗 --&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">channel-edit</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dialog&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">channel-edit</span>&gt;</span></span><br></code></pre></td></tr></table></figure><ol start="3"><li>点击调用方法显示弹窗</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> <span class="hljs-title function_">onAddChannel</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  dialog.<span class="hljs-property">value</span>.<span class="hljs-title function_">open</span>(&#123;&#125;)<br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-title function_">onEditChannel</span> = (<span class="hljs-params">row</span>) =&gt; &#123;<br>  dialog.<span class="hljs-property">value</span>.<span class="hljs-title function_">open</span>(row)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="准备弹层表单"><a href="#准备弹层表单" class="headerlink" title="准备弹层表单"></a>准备弹层表单</h3><ol><li>准备数据 和 校验规则</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> formModel = <span class="hljs-title function_">ref</span>(&#123;<br>  <span class="hljs-attr">cate_name</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>  <span class="hljs-attr">cate_alias</span>: <span class="hljs-string">&#x27;&#x27;</span><br>&#125;)<br><span class="hljs-keyword">const</span> rules = &#123;<br>  <span class="hljs-attr">cate_name</span>: [<br>    &#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入分类名称&#x27;</span>, <span class="hljs-attr">trigger</span>: <span class="hljs-string">&#x27;blur&#x27;</span> &#125;,<br>    &#123;<br>      <span class="hljs-attr">pattern</span>: <span class="hljs-regexp">/^\S&#123;1,10&#125;$/</span>,<br>      <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;分类名必须是1-10位的非空字符&#x27;</span>,<br>      <span class="hljs-attr">trigger</span>: <span class="hljs-string">&#x27;blur&#x27;</span><br>    &#125;<br>  ],<br>  <span class="hljs-attr">cate_alias</span>: [<br>    &#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入分类别名&#x27;</span>, <span class="hljs-attr">trigger</span>: <span class="hljs-string">&#x27;blur&#x27;</span> &#125;,<br>    &#123;<br>      <span class="hljs-attr">pattern</span>: <span class="hljs-regexp">/^[a-zA-Z0-9]&#123;1,15&#125;$/</span>,<br>      <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;分类别名必须是1-15位的字母数字&#x27;</span>,<br>      <span class="hljs-attr">trigger</span>: <span class="hljs-string">&#x27;blur&#x27;</span><br>    &#125;<br>  ]<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>准备表单</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;el-form<br>  :model=<span class="hljs-string">&quot;formModel&quot;</span><br>  :rules=<span class="hljs-string">&quot;rules&quot;</span><br>  label-width=<span class="hljs-string">&quot;100px&quot;</span><br>  style=<span class="hljs-string">&quot;padding-right: 30px&quot;</span><br>&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;分类名称&quot;</span> <span class="hljs-attr">prop</span>=<span class="hljs-string">&quot;cate_name&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">el-input</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;formModel.cate_name&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">minlength</span>=<span class="hljs-string">&quot;1&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">maxlength</span>=<span class="hljs-string">&quot;10&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-input</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;分类别名&quot;</span> <span class="hljs-attr">prop</span>=<span class="hljs-string">&quot;cate_alias&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">el-input</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;formModel.cate_alias&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">minlength</span>=<span class="hljs-string">&quot;1&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">maxlength</span>=<span class="hljs-string">&quot;15&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-input</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span></span><br>&lt;/el-form&gt;<br></code></pre></td></tr></table></figure><ol start="3"><li>编辑需要回显，表单数据需要初始化</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> <span class="hljs-title function_">open</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params">row</span>) =&gt; &#123;<br>  dialogVisible.<span class="hljs-property">value</span> = <span class="hljs-literal">true</span><br>  formModel.<span class="hljs-property">value</span> = &#123; ...row &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="4"><li>基于传过来的表单数据，进行标题控制，有 id 的是编辑</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx">:title=<span class="hljs-string">&quot;formModel.id ? &#x27;编辑分类&#x27; : &#x27;添加分类&#x27;&quot;</span><br></code></pre></td></tr></table></figure><h3 id="确认提交"><a href="#确认提交" class="headerlink" title="确认提交"></a>确认提交</h3><ol><li><code>api/article.js  </code>  封装请求 API</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">// 添加文章分类</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">artAddChannelService</span> = (<span class="hljs-params">data</span>) =&gt; request.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/my/cate/add&#x27;</span>, data)<br><span class="hljs-comment">// 编辑文章分类</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">artEditChannelService</span> = (<span class="hljs-params">data</span>) =&gt;<br>  request.<span class="hljs-title function_">put</span>(<span class="hljs-string">&#x27;/my/cate/info&#x27;</span>, data)<br></code></pre></td></tr></table></figure><ol start="2"><li>页面中校验，判断，提交请求</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;el-form ref=<span class="hljs-string">&quot;formRef&quot;</span>&gt;<br></code></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> formRef = <span class="hljs-title function_">ref</span>()<br><span class="hljs-keyword">const</span> <span class="hljs-title function_">onSubmit</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">await</span> formRef.<span class="hljs-property">value</span>.<span class="hljs-title function_">validate</span>()<br>  formModel.<span class="hljs-property">value</span>.<span class="hljs-property">id</span><br>    ? <span class="hljs-keyword">await</span> <span class="hljs-title function_">artEditChannelService</span>(formModel.<span class="hljs-property">value</span>)<br>    : <span class="hljs-keyword">await</span> <span class="hljs-title function_">artAddChannelService</span>(formModel.<span class="hljs-property">value</span>)<br>  <span class="hljs-title class_">ElMessage</span>(&#123;<br>    <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;success&#x27;</span>,<br>    <span class="hljs-attr">message</span>: formModel.<span class="hljs-property">value</span>.<span class="hljs-property">id</span> ? <span class="hljs-string">&#x27;编辑成功&#x27;</span> : <span class="hljs-string">&#x27;添加成功&#x27;</span><br>  &#125;)<br>  dialogVisible.<span class="hljs-property">value</span> = <span class="hljs-literal">false</span><br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>通知父组件进行回显</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> emit = <span class="hljs-title function_">defineEmits</span>([<span class="hljs-string">&#x27;success&#x27;</span>])<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">onSubmit</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params"></span>) =&gt; &#123;<br>  ...<br>  <span class="hljs-title function_">emit</span>(<span class="hljs-string">&#x27;success&#x27;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><ol start="4"><li>父组件监听 success 事件，进行调用回显</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;channel-edit ref=<span class="hljs-string">&quot;dialog&quot;</span> @success=<span class="hljs-string">&quot;onSuccess&quot;</span>&gt;&lt;/channel-edit&gt;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">onSuccess</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-title function_">getChannelList</span>()<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="文章分类删除"><a href="#文章分类删除" class="headerlink" title="文章分类删除"></a>文章分类删除</h2><ol><li><code>api/article.js</code>封装接口 api</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">// 删除文章分类</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">artDelChannelService</span> = (<span class="hljs-params">id</span>) =&gt;<br>  request.<span class="hljs-title function_">delete</span>(<span class="hljs-string">&#x27;/my/cate/del&#x27;</span>, &#123;<br>    <span class="hljs-attr">params</span>: &#123; id &#125;<br>  &#125;)<br></code></pre></td></tr></table></figure><ol start="2"><li>页面中添加确认框，调用接口进行提示</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> <span class="hljs-title function_">onDelChannel</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params">row</span>) =&gt; &#123;<br>  <span class="hljs-keyword">await</span> <span class="hljs-title class_">ElMessageBox</span>.<span class="hljs-title function_">confirm</span>(<span class="hljs-string">&#x27;你确认删除该分类信息吗？&#x27;</span>, <span class="hljs-string">&#x27;温馨提示&#x27;</span>, &#123;<br>    <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;warning&#x27;</span>,<br>    <span class="hljs-attr">confirmButtonText</span>: <span class="hljs-string">&#x27;确认&#x27;</span>,<br>    <span class="hljs-attr">cancelButtonText</span>: <span class="hljs-string">&#x27;取消&#x27;</span><br>  &#125;)<br>  <span class="hljs-keyword">await</span> <span class="hljs-title function_">artDelChannelService</span>(row.<span class="hljs-property">id</span>)<br>  <span class="hljs-title class_">ElMessage</span>(&#123; <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;success&#x27;</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;删除成功&#x27;</span> &#125;)<br>  <span class="hljs-title function_">getChannelList</span>()<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="文章管理页面-element-plus-强化"><a href="#文章管理页面-element-plus-强化" class="headerlink" title="文章管理页面 - [element-plus 强化]"></a>文章管理页面 - [element-plus 强化]</h1><h2 id="文章列表渲染"><a href="#文章列表渲染" class="headerlink" title="文章列表渲染"></a>文章列表渲染</h2><h3 id="基本架子搭建"><a href="#基本架子搭建" class="headerlink" title="基本架子搭建"></a>基本架子搭建</h3><h3 id><a href="#" class="headerlink" title></a><img src="/assets/image-20231007101249405.png" alt="image-20231007101249405"></h3><ol><li>搜索表单</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;el-form inline&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;文章分类：&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">el-select</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">el-option</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;新闻&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;111&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-option</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">el-option</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;体育&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;222&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-option</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">el-select</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;发布状态：&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">el-select</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">el-option</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;已发布&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;已发布&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-option</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">el-option</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;草稿&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;草稿&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-option</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">el-select</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;primary&quot;</span>&gt;</span>搜索<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span>&gt;</span>重置<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span></span><br>&lt;/el-form&gt;<br></code></pre></td></tr></table></figure><ol start="2"><li>表格准备，模拟假数据渲染</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Delete</span>, <span class="hljs-title class_">Edit</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@element-plus/icons-vue&#x27;</span><br><span class="hljs-keyword">import</span> &#123; ref &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-comment">// 假数据</span><br><span class="hljs-keyword">const</span> articleList = <span class="hljs-title function_">ref</span>([<br>  &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">5961</span>,<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;新的文章啊&#x27;</span>,<br>    <span class="hljs-attr">pub_date</span>: <span class="hljs-string">&#x27;2022-07-10 14:53:52.604&#x27;</span>,<br>    <span class="hljs-attr">state</span>: <span class="hljs-string">&#x27;已发布&#x27;</span>,<br>    <span class="hljs-attr">cate_name</span>: <span class="hljs-string">&#x27;体育&#x27;</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">5962</span>,<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;新的文章啊&#x27;</span>,<br>    <span class="hljs-attr">pub_date</span>: <span class="hljs-string">&#x27;2022-07-10 14:54:30.904&#x27;</span>,<br>    <span class="hljs-attr">state</span>: <span class="hljs-literal">null</span>,<br>    <span class="hljs-attr">cate_name</span>: <span class="hljs-string">&#x27;体育&#x27;</span><br>  &#125;<br>])<br></code></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;el-table :data=<span class="hljs-string">&quot;articleList&quot;</span> style=<span class="hljs-string">&quot;width: 100%&quot;</span>&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">el-table-column</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;文章标题&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;400&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">default</span>=<span class="hljs-string">&quot;&#123; row &#125;&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">el-link</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;primary&quot;</span> <span class="hljs-attr">:underline</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span>&#123;&#123; row.title &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">el-link</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">el-table-column</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">el-table-column</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;分类&quot;</span> <span class="hljs-attr">prop</span>=<span class="hljs-string">&quot;cate_name&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-table-column</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">el-table-column</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;发表时间&quot;</span> <span class="hljs-attr">prop</span>=<span class="hljs-string">&quot;pub_date&quot;</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">el-table-column</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">el-table-column</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;状态&quot;</span> <span class="hljs-attr">prop</span>=<span class="hljs-string">&quot;state&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-table-column</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">el-table-column</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;操作&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;100&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">default</span>=<span class="hljs-string">&quot;&#123; row &#125;&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">:icon</span>=<span class="hljs-string">&quot;Edit&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">circle</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">plain</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;primary&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;onEditArticle(row)&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">:icon</span>=<span class="hljs-string">&quot;Delete&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">circle</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">plain</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;danger&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;onDeleteArticle(row)&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">el-table-column</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">empty</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">el-empty</span> <span class="hljs-attr">description</span>=<span class="hljs-string">&quot;没有数据&quot;</span> /&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br>&lt;/el-table&gt;<br><br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">onEditArticle</span> = (<span class="hljs-params">row</span>) =&gt; &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(row)<br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-title function_">onDeleteArticle</span> = (<span class="hljs-params">row</span>) =&gt; &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(row)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="中英国际化处理"><a href="#中英国际化处理" class="headerlink" title="中英国际化处理"></a>中英国际化处理</h3><p>默认是英文的，由于这里不涉及切换， 所以在 App.vue 中直接导入设置成中文即可，</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;script setup&gt;<br><span class="hljs-keyword">import</span> zh <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;element-plus/es/locale/lang/zh-cn.mjs&#x27;</span><br>&lt;/script&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-comment">&lt;!-- 国际化处理 --&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">el-config-provider</span> <span class="hljs-attr">:locale</span>=<span class="hljs-string">&quot;zh&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">router-view</span> /&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">el-config-provider</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="文章分类选择"><a href="#文章分类选择" class="headerlink" title="文章分类选择"></a>文章分类选择</h3><p><img src="/assets/image-20231008092212550.png" alt="image-20231008092212550"></p><p>为了便于维护，直接拆分成一个小组件 ChannelSelect.vue</p><ol><li>新建 article&#x2F;components&#x2F;ChannelSelect.vue</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">el-select</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">el-option</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;新闻&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;新闻&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-option</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">el-option</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;体育&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;体育&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-option</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">el-select</span>&gt;</span></span><br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><ol start="2"><li>页面中导入渲染</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vue">import ChannelSelect from &#x27;./components/ChannelSelect.vue&#x27;<br><br>&lt;el-form-item label=&quot;文章分类：&quot;&gt;<br>  &lt;channel-select&gt;&lt;/channel-select&gt;<br>&lt;/el-form-item&gt;<br></code></pre></td></tr></table></figure><ol start="3"><li>调用接口，动态渲染下拉分类，设计成 v-model 的使用方式</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;script setup&gt;<br><span class="hljs-keyword">import</span> &#123; artGetChannelsService &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/api/article&#x27;</span><br><span class="hljs-keyword">import</span> &#123; ref &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><br><span class="hljs-keyword">const</span> channelList = <span class="hljs-title function_">ref</span>([])<br><span class="hljs-keyword">const</span> <span class="hljs-title function_">getChannelList</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> <span class="hljs-title function_">artGetChannelsService</span>()<br>  channelList.<span class="hljs-property">value</span> = res.<span class="hljs-property">data</span>.<span class="hljs-property">data</span><br>&#125;<br><span class="hljs-comment">// 设置父组件传入的值</span><br><span class="hljs-title function_">defineProps</span>(&#123;<br>  <span class="hljs-attr">modelValue</span>: &#123;<br>    <span class="hljs-attr">type</span>: [<span class="hljs-title class_">Number</span>, <span class="hljs-title class_">String</span>]<br>  &#125;<br>&#125;)<br><span class="hljs-comment">// 注册事件</span><br><span class="hljs-keyword">const</span> emit = <span class="hljs-title function_">defineEmits</span>([<span class="hljs-string">&#x27;update:modelValue&#x27;</span>])<br><span class="hljs-title function_">getChannelList</span>()<br><span class="hljs-title function_">getChannelList</span>()<br>&lt;/script&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">el-select</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">:modelValue</span>=<span class="hljs-string">&quot;modelValue&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    @<span class="hljs-attr">update:modelValue</span>=<span class="hljs-string">&quot;emit(&#x27;update:modelValue&#x27;, $event)&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">  &gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">el-option</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;channel in channelList&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;channel.id&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">:label</span>=<span class="hljs-string">&quot;channel.cate_name&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">:value</span>=<span class="hljs-string">&quot;channel.id&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-option</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">el-select</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br></code></pre></td></tr></table></figure><ol start="4"><li>父组件定义参数绑定</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> params = <span class="hljs-title function_">ref</span>(&#123;<br>  <span class="hljs-attr">pagenum</span>: <span class="hljs-number">1</span>,<br>  <span class="hljs-attr">pagesize</span>: <span class="hljs-number">5</span>,<br>  <span class="hljs-attr">cate_id</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>  <span class="hljs-attr">state</span>: <span class="hljs-string">&#x27;&#x27;</span><br>&#125;)<br>        &lt;!--        <span class="hljs-title class_">Vue3</span> -&gt; v-model :modelValue 和 @update 简写 --&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">channel-select</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;params.cate_id&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">channel-select</span>&gt;</span></span><br></code></pre></td></tr></table></figure><ol start="5"><li>发布状态，也绑定一下，便于将来提交表单</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;el-select v-model=<span class="hljs-string">&quot;params.state&quot;</span>&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">el-option</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;已发布&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;已发布&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-option</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">el-option</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;草稿&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;草稿&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-option</span>&gt;</span></span><br>&lt;/el-select&gt;<br></code></pre></td></tr></table></figure><h3 id="封装-API-接口，请求渲染"><a href="#封装-API-接口，请求渲染" class="headerlink" title="封装 API 接口，请求渲染"></a>封装 API 接口，请求渲染</h3><p><strong>没有数据，可以登录已完成的系统，添加几条数据</strong></p><ol><li><code>api/article.js</code>封装接口</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">artGetListService</span> = (<span class="hljs-params">params</span>) =&gt;<br>  request.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/my/article/list&#x27;</span>, &#123; params &#125;)<br></code></pre></td></tr></table></figure><ol start="2"><li>页面中调用保存数据</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> articleList = <span class="hljs-title function_">ref</span>([])<br><span class="hljs-keyword">const</span> total = <span class="hljs-title function_">ref</span>(<span class="hljs-number">0</span>)<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">getArticleList</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> <span class="hljs-title function_">artGetListService</span>(params.<span class="hljs-property">value</span>)<br>  articleList.<span class="hljs-property">value</span> = res.<span class="hljs-property">data</span>.<span class="hljs-property">data</span><br>  total.<span class="hljs-property">value</span> = res.<span class="hljs-property">data</span>.<span class="hljs-property">total</span><br>&#125;<br><span class="hljs-title function_">getArticleList</span>()<br></code></pre></td></tr></table></figure><ol start="3"><li>新建 <code>utils/format.js</code> 封装格式化日期函数</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; dayjs &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;element-plus&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">formatTime</span> = (<span class="hljs-params">time</span>) =&gt; <span class="hljs-title function_">dayjs</span>(time).<span class="hljs-title function_">format</span>(<span class="hljs-string">&#x27;YYYY年MM月DD日&#x27;</span>)<br></code></pre></td></tr></table></figure><ol start="4"><li>导入使用</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs vue">import &#123; formatTime &#125; from &#x27;@/utils/format&#x27;<br><br>&lt;el-table-column label=&quot;发表时间&quot;&gt;<br>  &lt;template #default=&quot;&#123; row &#125;&quot;&gt;<br>    &#123;&#123; formatTime(row.pub_date) &#125;&#125;<br>  &lt;/template&gt;<br>&lt;/el-table-column&gt;<br></code></pre></td></tr></table></figure><h3 id="分页渲染-element-plus-分页"><a href="#分页渲染-element-plus-分页" class="headerlink" title="分页渲染 [element-plus 分页]"></a>分页渲染 [element-plus 分页]</h3><ol><li>分页组件</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;el-pagination<br>  v-<span class="hljs-attr">model</span>:current-page=<span class="hljs-string">&quot;params.pagenum&quot;</span><br>  v-<span class="hljs-attr">model</span>:page-size=<span class="hljs-string">&quot;params.pagesize&quot;</span><br>  :page-sizes=<span class="hljs-string">&quot;[2, 3, 4, 5, 10]&quot;</span><br>  layout=<span class="hljs-string">&quot;jumper, total, sizes, prev, pager, next&quot;</span><br>  background<br>  :total=<span class="hljs-string">&quot;total&quot;</span><br>  @size-change=<span class="hljs-string">&quot;onSizeChange&quot;</span><br>  @current-change=<span class="hljs-string">&quot;onCurrentChange&quot;</span><br>  style=<span class="hljs-string">&quot;margin-top: 20px; justify-content: flex-end&quot;</span><br>/&gt;<br></code></pre></td></tr></table></figure><ol start="2"><li>提供分页修改逻辑</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> <span class="hljs-title function_">onSizeChange</span> = (<span class="hljs-params">size</span>) =&gt; &#123;<br>  params.<span class="hljs-property">value</span>.<span class="hljs-property">pagenum</span> = <span class="hljs-number">1</span><br>  params.<span class="hljs-property">value</span>.<span class="hljs-property">pagesize</span> = size<br>  <span class="hljs-title function_">getArticleList</span>()<br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-title function_">onCurrentChange</span> = (<span class="hljs-params">page</span>) =&gt; &#123;<br>  params.<span class="hljs-property">value</span>.<span class="hljs-property">pagenum</span> = page<br>  <span class="hljs-title function_">getArticleList</span>()<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="添加-loading-处理"><a href="#添加-loading-处理" class="headerlink" title="添加 loading 处理"></a>添加 loading 处理</h3><ol><li>准备数据</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> loading = <span class="hljs-title function_">ref</span>(<span class="hljs-literal">false</span>)<br></code></pre></td></tr></table></figure><ol start="2"><li>el-table上面绑定</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;el-table v-loading=<span class="hljs-string">&quot;loading&quot;</span> &gt; ... &lt;/el-table&gt;<br></code></pre></td></tr></table></figure><ol start="3"><li>发送请求时添加 loading</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> <span class="hljs-title function_">getArticleList</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params"></span>) =&gt; &#123;<br>  loading.<span class="hljs-property">value</span> = <span class="hljs-literal">true</span><br>    <br>  ...<br>  <br>  loading.<span class="hljs-property">value</span> = <span class="hljs-literal">false</span><br>&#125;<br><span class="hljs-title function_">getArticleList</span>()<br></code></pre></td></tr></table></figure><h3 id="搜索-和-重置功能"><a href="#搜索-和-重置功能" class="headerlink" title="搜索 和 重置功能"></a>搜索 和 重置功能</h3><ol><li>注册事件</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;el-form-item&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;onSearch&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;primary&quot;</span>&gt;</span>搜索<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;onReset&quot;</span>&gt;</span>重置<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span></span><br>&lt;/el-form-item&gt;<br></code></pre></td></tr></table></figure><ol start="2"><li>绑定处理</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> <span class="hljs-title function_">onSearch</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  params.<span class="hljs-property">value</span>.<span class="hljs-property">pagenum</span> = <span class="hljs-number">1</span><br>  <span class="hljs-title function_">getArticleList</span>()<br>&#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">onReset</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  params.<span class="hljs-property">value</span>.<span class="hljs-property">pagenum</span> = <span class="hljs-number">1</span><br>  params.<span class="hljs-property">value</span>.<span class="hljs-property">cate_id</span> = <span class="hljs-string">&#x27;&#x27;</span><br>  params.<span class="hljs-property">value</span>.<span class="hljs-property">state</span> = <span class="hljs-string">&#x27;&#x27;</span><br>  <span class="hljs-title function_">getArticleList</span>()<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="文章发布-修改-element-plus-抽屉"><a href="#文章发布-修改-element-plus-抽屉" class="headerlink" title="文章发布&amp;修改 [element-plus - 抽屉]"></a>文章发布&amp;修改 [element-plus - 抽屉]</h2><h3 id="点击显示抽屉"><a href="#点击显示抽屉" class="headerlink" title="点击显示抽屉"></a>点击显示抽屉</h3><ol><li>准备数据</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; ref &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">const</span> visibleDrawer = <span class="hljs-title function_">ref</span>(<span class="hljs-literal">false</span>)<br></code></pre></td></tr></table></figure><ol start="2"><li>准备抽屉容器</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;el-drawer<br>  v-model=<span class="hljs-string">&quot;visibleDrawer&quot;</span><br>  title=<span class="hljs-string">&quot;大标题&quot;</span><br>  direction=<span class="hljs-string">&quot;rtl&quot;</span><br>  size=<span class="hljs-string">&quot;50%&quot;</span><br>&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Hi there!<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br>&lt;/el-drawer&gt;<br></code></pre></td></tr></table></figure><ol start="3"><li>点击修改布尔值显示抽屉</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;el-button type=<span class="hljs-string">&quot;primary&quot;</span> @click=<span class="hljs-string">&quot;onAddArticle&quot;</span>&gt;发布文章&lt;/el-button&gt;<br><br><span class="hljs-keyword">const</span> visibleDrawer = <span class="hljs-title function_">ref</span>(<span class="hljs-literal">false</span>)<br><span class="hljs-keyword">const</span> <span class="hljs-title function_">onAddArticle</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  visibleDrawer.<span class="hljs-property">value</span> = <span class="hljs-literal">true</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="封装抽屉组件-ArticleEdit"><a href="#封装抽屉组件-ArticleEdit" class="headerlink" title="封装抽屉组件 ArticleEdit"></a>封装抽屉组件 ArticleEdit</h3><p>添加 和 编辑，可以共用一个抽屉，所以可以将抽屉封装成一个组件</p><p>组件对外暴露一个方法 open,  基于 open 的参数，初始化表单数据，并判断区分是添加 还是 编辑</p><ol><li>open({ })                   &#x3D;&gt;  添加操作，添加表单初始化无数据</li><li>open({ id: xx,  …  })  &#x3D;&gt;  编辑操作，编辑表单初始化需回显</li></ol><p>具体实现：</p><ol><li>封装组件 <code>article/components/ArticleEdit.vue</code></li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;script setup&gt;<br><span class="hljs-keyword">import</span> &#123; ref &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">const</span> visibleDrawer = <span class="hljs-title function_">ref</span>(<span class="hljs-literal">false</span>)<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">open</span> = (<span class="hljs-params">row</span>) =&gt; &#123;<br>  visibleDrawer.<span class="hljs-property">value</span> = <span class="hljs-literal">true</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(row)<br>&#125;<br><br><span class="hljs-title function_">defineExpose</span>(&#123;<br>  open<br>&#125;)<br>&lt;/script&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-comment">&lt;!-- 抽屉 --&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">el-drawer</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;visibleDrawer&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;大标题&quot;</span> <span class="hljs-attr">direction</span>=<span class="hljs-string">&quot;rtl&quot;</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;50%&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Hi there!<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">el-drawer</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br></code></pre></td></tr></table></figure><ol start="2"><li>通过 ref 绑定</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> articleEditRef = <span class="hljs-title function_">ref</span>()<br><br>&lt;!-- 弹窗 --&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">article-edit</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;articleEditRef&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">article-edit</span>&gt;</span></span><br></code></pre></td></tr></table></figure><ol start="3"><li>点击调用方法显示弹窗</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">// 编辑新增逻辑</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">onAddArticle</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  articleEditRef.<span class="hljs-property">value</span>.<span class="hljs-title function_">open</span>(&#123;&#125;)<br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-title function_">onEditArticle</span> = (<span class="hljs-params">row</span>) =&gt; &#123;<br>  articleEditRef.<span class="hljs-property">value</span>.<span class="hljs-title function_">open</span>(row)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="完善抽屉表单结构"><a href="#完善抽屉表单结构" class="headerlink" title="完善抽屉表单结构"></a>完善抽屉表单结构</h3><ol><li>准备数据</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> formModel = <span class="hljs-title function_">ref</span>(&#123;<br>  <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>  <span class="hljs-attr">cate_id</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>  <span class="hljs-attr">cover_img</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>  <span class="hljs-attr">content</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>  <span class="hljs-attr">state</span>: <span class="hljs-string">&#x27;&#x27;</span><br>&#125;)<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">open</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params">row</span>) =&gt; &#123;<br>  visibleDrawer.<span class="hljs-property">value</span> = <span class="hljs-literal">true</span><br>  <span class="hljs-keyword">if</span> (row.<span class="hljs-property">id</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;编辑回显&#x27;</span>)<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;添加功能&#x27;</span>)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>准备 form 表单结构</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">ChannelSelect</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./ChannelSelect.vue&#x27;</span><br><br>&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">el-drawer</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;visibleDrawer&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">:title</span>=<span class="hljs-string">&quot;formModel.id ? &#x27;编辑文章&#x27; : &#x27;添加文章&#x27;&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">direction</span>=<span class="hljs-string">&quot;rtl&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;50%&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">  &gt;</span></span><br><span class="language-xml">    <span class="hljs-comment">&lt;!-- 发表文章表单 --&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">el-form</span> <span class="hljs-attr">:model</span>=<span class="hljs-string">&quot;formModel&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;formRef&quot;</span> <span class="hljs-attr">label-width</span>=<span class="hljs-string">&quot;100px&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;文章标题&quot;</span> <span class="hljs-attr">prop</span>=<span class="hljs-string">&quot;title&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">el-input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;formModel.title&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入标题&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-input</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;文章分类&quot;</span> <span class="hljs-attr">prop</span>=<span class="hljs-string">&quot;cate_id&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">channel-select</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;formModel.cate_id&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;100%&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">channel-select</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;文章封面&quot;</span> <span class="hljs-attr">prop</span>=<span class="hljs-string">&quot;cover_img&quot;</span>&gt;</span> 文件上传 <span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;文章内容&quot;</span> <span class="hljs-attr">prop</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;editor&quot;</span>&gt;</span>富文本编辑器<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;primary&quot;</span>&gt;</span>发布<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;info&quot;</span>&gt;</span>草稿<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">el-form</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">el-drawer</span>&gt;</span></span><br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><ol start="3"><li>一打开默认重置添加的 form 表单数据</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> defaultForm = &#123;<br>  <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>  <span class="hljs-attr">cate_id</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>  <span class="hljs-attr">cover_img</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>  <span class="hljs-attr">content</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>  <span class="hljs-attr">state</span>: <span class="hljs-string">&#x27;&#x27;</span><br>&#125;<br><span class="hljs-keyword">const</span> formModel = <span class="hljs-title function_">ref</span>(&#123; ...defaultForm &#125;)<br><span class="hljs-comment">//顺序不可颠倒！！</span><br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">open</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params">row</span>) =&gt; &#123;<br>  visibleDrawer.<span class="hljs-property">value</span> = <span class="hljs-literal">true</span><br>  <span class="hljs-keyword">if</span> (row.<span class="hljs-property">id</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;编辑回显&#x27;</span>)<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;添加功能&#x27;</span>)<br>    formModel.<span class="hljs-property">value</span> = &#123; ...defaultForm &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="4"><li>扩展 下拉菜单 width props</li></ol><p>在父组件中使width&#x3D;”100%”生效，需要在子组件中定义prop</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;channel-select <span class="hljs-attribute">v-model</span>=<span class="hljs-string">&quot;formModel.cate_id&quot;</span> <span class="hljs-attribute">width</span>=<span class="hljs-string">&quot;100%&quot;</span>&gt;&lt;/channel-select&gt;<br></code></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-title function_">defineProps</span>(&#123;<br>  <span class="hljs-attr">modelValue</span>: &#123;<br>    <span class="hljs-attr">type</span>: [<span class="hljs-title class_">Number</span>, <span class="hljs-title class_">String</span>]<br>  &#125;,<br>  <span class="hljs-attr">width</span>: &#123;<br>    <span class="hljs-attr">type</span>: <span class="hljs-title class_">String</span><br>  &#125;<br>&#125;)<br><br>&lt;el-select<br> ...<br> :style=<span class="hljs-string">&quot;&#123; width &#125;&quot;</span><br>&gt;<br></code></pre></td></tr></table></figure><h3 id="上传文件-element-plus-文件预览"><a href="#上传文件-element-plus-文件预览" class="headerlink" title="上传文件 [element-plus - 文件预览]"></a>上传文件 [element-plus - 文件预览]</h3><p>默认情况下，点击加号选择图片就会向服务端发送图片并返回一个url，对于本案例操作会增加服务器负担</p><ol><li>关闭自动上传，准备结构</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Plus</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@element-plus/icons-vue&#x27;</span><br><br>&lt;el-upload<br>  <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;avatar-uploader&quot;</span><br>  :auto-upload=<span class="hljs-string">&quot;false&quot;</span><br>  :show-file-list=<span class="hljs-string">&quot;false&quot;</span><br>  :on-change=<span class="hljs-string">&quot;onUploadFile&quot;</span><br>&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;imgUrl&quot;</span> <span class="hljs-attr">:src</span>=<span class="hljs-string">&quot;imgUrl&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;avatar&quot;</span> /&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">el-icon</span> <span class="hljs-attr">v-else</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;avatar-uploader-icon&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">Plus</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-icon</span>&gt;</span></span><br>&lt;/el-upload&gt;<br></code></pre></td></tr></table></figure><ol start="2"><li>准备数据 和 选择图片的处理逻辑</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> imgUrl = <span class="hljs-title function_">ref</span>(<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-keyword">const</span> <span class="hljs-title function_">onUploadFile</span> = (<span class="hljs-params">uploadFile</span>) =&gt; &#123;<br>  imgUrl.<span class="hljs-property">value</span> = <span class="hljs-variable constant_">URL</span>.<span class="hljs-title function_">createObjectURL</span>(uploadFile.<span class="hljs-property">raw</span>)<br>  formModel.<span class="hljs-property">value</span>.<span class="hljs-property">cover_img</span> = uploadFile.<span class="hljs-property">raw</span><br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>样式美化</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.avatar-uploader</span> &#123;<br>  :<span class="hljs-built_in">deep</span>() &#123;<br>    <span class="hljs-selector-class">.avatar</span> &#123;<br>      <span class="hljs-attribute">width</span>: <span class="hljs-number">178px</span>;<br>      <span class="hljs-attribute">height</span>: <span class="hljs-number">178px</span>;<br>      <span class="hljs-attribute">display</span>: block;<br>    &#125;<br>    <span class="hljs-selector-class">.el-upload</span> &#123;<br>      <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> dashed <span class="hljs-built_in">var</span>(--el-border-color);<br>      <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">6px</span>;<br>      <span class="hljs-attribute">cursor</span>: pointer;<br>      <span class="hljs-attribute">position</span>: relative;<br>      <span class="hljs-attribute">overflow</span>: hidden;<br>      <span class="hljs-attribute">transition</span>: <span class="hljs-built_in">var</span>(--el-transition-duration-fast);<br>    &#125;<br>    <span class="hljs-selector-class">.el-upload</span><span class="hljs-selector-pseudo">:hover</span> &#123;<br>      <span class="hljs-attribute">border-color</span>: <span class="hljs-built_in">var</span>(--el-color-primary);<br>    &#125;<br>    <span class="hljs-selector-class">.el-icon</span><span class="hljs-selector-class">.avatar-uploader-icon</span> &#123;<br>      <span class="hljs-attribute">font-size</span>: <span class="hljs-number">28px</span>;<br>      <span class="hljs-attribute">color</span>: <span class="hljs-number">#8c939d</span>;<br>      <span class="hljs-attribute">width</span>: <span class="hljs-number">178px</span>;<br>      <span class="hljs-attribute">height</span>: <span class="hljs-number">178px</span>;<br>      <span class="hljs-attribute">text-align</span>: center;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="富文本编辑器-vue-quill"><a href="#富文本编辑器-vue-quill" class="headerlink" title="富文本编辑器 [ vue-quill ]"></a>富文本编辑器 [ vue-quill ]</h3><p>官网地址：<a href="https://vueup.github.io/vue-quill/">https://vueup.github.io/vue-quill/</a></p><ol><li>安装包</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">pnpm add @vueup/vue-quill@latest<br></code></pre></td></tr></table></figure><ol start="2"><li>注册成局部组件</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">QuillEditor</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@vueup/vue-quill&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;@vueup/vue-quill/dist/vue-quill.snow.css&#x27;</span><br></code></pre></td></tr></table></figure><ol start="3"><li>页面中使用绑定</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;div <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;editor&quot;</span>&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">quill-editor</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">theme</span>=<span class="hljs-string">&quot;snow&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">v-model:content</span>=<span class="hljs-string">&quot;formModel.content&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">contentType</span>=<span class="hljs-string">&quot;html&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">  &gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">quill-editor</span>&gt;</span></span><br>&lt;/div&gt;<br></code></pre></td></tr></table></figure><ol start="4"><li>样式美化</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs jsx">.<span class="hljs-property">editor</span> &#123;<br>  <span class="hljs-attr">width</span>: <span class="hljs-number">100</span>%;<br>  :<span class="hljs-title function_">deep</span>(<span class="hljs-params">.ql-editor</span>) &#123;<br>    min-<span class="hljs-attr">height</span>: 200px;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="添加文章功能"><a href="#添加文章功能" class="headerlink" title="添加文章功能"></a>添加文章功能</h3><ol><li>封装添加接口</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">artPublishService</span> = (<span class="hljs-params">data</span>) =&gt;<br>  request.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/my/article/add&#x27;</span>, data)<br></code></pre></td></tr></table></figure><ol start="2"><li>注册点击事件调用</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;el-form-item&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;onPublish(&#x27;已发布&#x27;)&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;primary&quot;</span>&gt;</span>发布<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;onPublish(&#x27;草稿&#x27;)&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;info&quot;</span>&gt;</span>草稿<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span></span><br>&lt;/el-form-item&gt;<br><br><span class="hljs-comment">// 发布文章</span><br><span class="hljs-keyword">const</span> emit = <span class="hljs-title function_">defineEmits</span>([<span class="hljs-string">&#x27;success&#x27;</span>])<br><span class="hljs-keyword">const</span> <span class="hljs-title function_">onPublish</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params">state</span>) =&gt; &#123;<br>  <span class="hljs-comment">// 将已发布还是草稿状态，存入 state</span><br>  formModel.<span class="hljs-property">value</span>.<span class="hljs-property">state</span> = state<br><br>  <span class="hljs-comment">// 转换 formData 数据</span><br>  <span class="hljs-keyword">const</span> fd = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FormData</span>()<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> formModel.<span class="hljs-property">value</span>) &#123;<br>    fd.<span class="hljs-title function_">append</span>(key, formModel.<span class="hljs-property">value</span>[key])<br>  &#125;<br><br>  <span class="hljs-keyword">if</span> (formModel.<span class="hljs-property">value</span>.<span class="hljs-property">id</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;编辑操作&#x27;</span>)<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">// 添加请求</span><br>    <span class="hljs-keyword">await</span> <span class="hljs-title function_">artPublishService</span>(fd)<br>    <span class="hljs-title class_">ElMessage</span>.<span class="hljs-title function_">success</span>(<span class="hljs-string">&#x27;添加成功&#x27;</span>)<br>    visibleDrawer.<span class="hljs-property">value</span> = <span class="hljs-literal">false</span><br>    <span class="hljs-title function_">emit</span>(<span class="hljs-string">&#x27;success&#x27;</span>, <span class="hljs-string">&#x27;add&#x27;</span>)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>父组件监听事件，重新渲染</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;article-edit ref=<span class="hljs-string">&quot;articleEditRef&quot;</span> @success=<span class="hljs-string">&quot;onSuccess&quot;</span>&gt;&lt;/article-edit&gt;<br><br><span class="hljs-comment">// 添加修改成功</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">onSuccess</span> = (<span class="hljs-params">type</span>) =&gt; &#123;<br>  <span class="hljs-keyword">if</span> (type === <span class="hljs-string">&#x27;add&#x27;</span>) &#123;<br>    <span class="hljs-comment">// 如果是添加，需要跳转渲染最后一页，编辑直接渲染当前页</span><br>    <span class="hljs-keyword">const</span> lastPage = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">ceil</span>((total.<span class="hljs-property">value</span> + <span class="hljs-number">1</span>) / params.<span class="hljs-property">value</span>.<span class="hljs-property">pagesize</span>)<br>    params.<span class="hljs-property">value</span>.<span class="hljs-property">pagenum</span> = lastPage<br>  &#125;<br>  <span class="hljs-title function_">getArticleList</span>()<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="添加完成后的内容重置"><a href="#添加完成后的内容重置" class="headerlink" title="添加完成后的内容重置"></a>添加完成后的内容重置</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;quill-editor<br>  ref=&quot;editorRef&quot;<br>  theme=&quot;snow&quot;<br>  v-model:content=&quot;formModel.content&quot;<br>  contentType=&quot;html&quot;<br>&gt;<br>&lt;/quill-editor&gt;<br></code></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> formRef = <span class="hljs-title function_">ref</span>()<br><span class="hljs-keyword">const</span> editorRef = <span class="hljs-title function_">ref</span>()<br><span class="hljs-keyword">const</span> <span class="hljs-title function_">open</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params">row</span>) =&gt; &#123;<br>  visibleDrawer.<span class="hljs-property">value</span> = <span class="hljs-literal">true</span><br>  <span class="hljs-keyword">if</span> (row.<span class="hljs-property">id</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;编辑回显&#x27;</span>)<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    formModel.<span class="hljs-property">value</span> = &#123; ...defaultForm &#125;<br>    imgUrl.<span class="hljs-property">value</span> = <span class="hljs-string">&#x27;&#x27;</span><br>    editorRef.<span class="hljs-property">value</span>.<span class="hljs-title function_">setHTML</span>(<span class="hljs-string">&#x27;&#x27;</span>)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="编辑文章回显"><a href="#编辑文章回显" class="headerlink" title="编辑文章回显"></a>编辑文章回显</h3><p>如果是编辑操作，一打开抽屉，就需要发送请求，获取数据进行回显</p><ol><li>封装接口，根据 id 获取详情数据</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">artGetDetailService</span> = (<span class="hljs-params">id</span>) =&gt;<br>  request.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;my/article/info&#x27;</span>, &#123; <span class="hljs-attr">params</span>: &#123; id &#125; &#125;)<br></code></pre></td></tr></table></figure><ol start="2"><li>页面中调用渲染</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> <span class="hljs-title function_">open</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params">row</span>) =&gt; &#123;<br>  visibleDrawer.<span class="hljs-property">value</span> = <span class="hljs-literal">true</span><br>  <span class="hljs-keyword">if</span> (row.<span class="hljs-property">id</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;编辑回显&#x27;</span>)<br>    <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> <span class="hljs-title function_">artGetDetailService</span>(row.<span class="hljs-property">id</span>)<br>    formModel.<span class="hljs-property">value</span> = res.<span class="hljs-property">data</span>.<span class="hljs-property">data</span><br>    imgUrl.<span class="hljs-property">value</span> = baseURL + formModel.<span class="hljs-property">value</span>.<span class="hljs-property">cover_img</span><br>    <span class="hljs-comment">// 提交给后台，需要的是 file 格式的，将网络图片，转成 file 格式</span><br>    <span class="hljs-comment">// 网络图片转成 file 对象, 需要转换一下</span><br>    formModel.<span class="hljs-property">value</span>.<span class="hljs-property">cover_img</span> = <span class="hljs-keyword">await</span> <span class="hljs-title function_">imageUrlToFile</span>(imgUrl.<span class="hljs-property">value</span>, formModel.<span class="hljs-property">value</span>.<span class="hljs-property">cover_img</span>)<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;添加功能&#x27;</span>)<br>    ...<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>chatGPT prompt：封装一个函数，基于 axios， 网络图片地址，转 file 对象， 请注意：写中文注释</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">// 将网络图片地址转换为File对象</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">imageUrlToFile</span>(<span class="hljs-params">url, fileName</span>) &#123;<br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-comment">// 第一步：使用axios获取网络图片数据</span><br>    <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> axios.<span class="hljs-title function_">get</span>(url, &#123; <span class="hljs-attr">responseType</span>: <span class="hljs-string">&#x27;arraybuffer&#x27;</span> &#125;);<br>    <span class="hljs-keyword">const</span> imageData = response.<span class="hljs-property">data</span>;<br><br>    <span class="hljs-comment">// 第二步：将图片数据转换为Blob对象</span><br>    <span class="hljs-keyword">const</span> blob = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Blob</span>([imageData], &#123; <span class="hljs-attr">type</span>: response.<span class="hljs-property">headers</span>[<span class="hljs-string">&#x27;content-type&#x27;</span>] &#125;);<br><br>    <span class="hljs-comment">// 第三步：创建一个新的File对象</span><br>    <span class="hljs-keyword">const</span> file = <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>([blob], fileName, &#123; <span class="hljs-attr">type</span>: blob.<span class="hljs-property">type</span> &#125;);<br><br>    <span class="hljs-keyword">return</span> file;<br>  &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;将图片转换为File对象时发生错误:&#x27;</span>, error);<br>    <span class="hljs-keyword">throw</span> error;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="编辑文章功能"><a href="#编辑文章功能" class="headerlink" title="编辑文章功能"></a>编辑文章功能</h3><ol><li>封装编辑接口</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">artEditService</span> = (<span class="hljs-params">data</span>) =&gt; request.<span class="hljs-title function_">put</span>(<span class="hljs-string">&#x27;my/article/info&#x27;</span>, data)<br></code></pre></td></tr></table></figure><ol start="2"><li>提交时调用</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> <span class="hljs-title function_">onPublish</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params">state</span>) =&gt; &#123;<br>  ...<br>  <span class="hljs-keyword">if</span> (formModel.<span class="hljs-property">value</span>.<span class="hljs-property">id</span>) &#123;<br>    <span class="hljs-keyword">await</span> <span class="hljs-title function_">artEditService</span>(fd)<br>    <span class="hljs-title class_">ElMessage</span>.<span class="hljs-title function_">success</span>(<span class="hljs-string">&#x27;编辑成功&#x27;</span>)<br>    visibleDrawer.<span class="hljs-property">value</span> = <span class="hljs-literal">false</span><br>    <span class="hljs-title function_">emit</span>(<span class="hljs-string">&#x27;success&#x27;</span>, <span class="hljs-string">&#x27;edit&#x27;</span>)<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">// 添加请求</span><br>    ...<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="文章删除"><a href="#文章删除" class="headerlink" title="文章删除"></a>文章删除</h2><ol><li>封装删除接口</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">artDelService</span> = (<span class="hljs-params">id</span>) =&gt; request.<span class="hljs-title function_">delete</span>(<span class="hljs-string">&#x27;my/article/info&#x27;</span>, &#123; <span class="hljs-attr">params</span>: &#123; id &#125; &#125;)<br></code></pre></td></tr></table></figure><ol start="2"><li>页面中添加确认框调用</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> <span class="hljs-title function_">onDeleteArticle</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params">row</span>) =&gt; &#123;<br>  <span class="hljs-keyword">await</span> <span class="hljs-title class_">ElMessageBox</span>.<span class="hljs-title function_">confirm</span>(<span class="hljs-string">&#x27;你确认删除该文章信息吗？&#x27;</span>, <span class="hljs-string">&#x27;温馨提示&#x27;</span>, &#123;<br>    <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;warning&#x27;</span>,<br>    <span class="hljs-attr">confirmButtonText</span>: <span class="hljs-string">&#x27;确认&#x27;</span>,<br>    <span class="hljs-attr">cancelButtonText</span>: <span class="hljs-string">&#x27;取消&#x27;</span><br>  &#125;)<br>  <span class="hljs-keyword">await</span> <span class="hljs-title function_">artDelService</span>(row.<span class="hljs-property">id</span>)<br>  <span class="hljs-title class_">ElMessage</span>(&#123; <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;success&#x27;</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;删除成功&#x27;</span> &#125;)<br>  <span class="hljs-title function_">getArticleList</span>()<br>&#125;<br></code></pre></td></tr></table></figure><p>什么B前端，写到吐</p>]]></content>
    
    
    <categories>
      
      <category>Vue3</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>7_Vue3大事件_layout布局</title>
    <link href="/2023/10/06/Vue3/7_Vue3%E5%A4%A7%E4%BA%8B%E4%BB%B6_layout%E5%B8%83%E5%B1%80/"/>
    <url>/2023/10/06/Vue3/7_Vue3%E5%A4%A7%E4%BA%8B%E4%BB%B6_layout%E5%B8%83%E5%B1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="Vue3大事件-layout布局"><a href="#Vue3大事件-layout布局" class="headerlink" title="Vue3大事件_layout布局"></a>Vue3大事件_layout布局</h1><h2 id="基本架子拆解"><a href="#基本架子拆解" class="headerlink" title="基本架子拆解"></a>基本架子拆解</h2><p><strong>架子组件列表：</strong></p><p>el-container</p><ul><li><p>el-aside 左侧</p><ul><li>el-menu 左侧边栏菜单</li></ul></li><li><p>el-container  右侧</p><ul><li>el-header  右侧头部<ul><li>el-dropdown</li></ul></li><li>el-main  右侧主体<ul><li>router-view</li></ul></li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script setup&gt;<br>import &#123;<br>  Management,<br>  Promotion,<br>  UserFilled,<br>  User,<br>  Crop,<br>  EditPen,<br>  SwitchButton,<br>  CaretBottom<br>&#125; from &#x27;@element-plus/icons-vue&#x27;<br>import avatar from &#x27;@/assets/default.png&#x27;<br>&lt;/script&gt;<br><br>&lt;template&gt;<br>  &lt;el-container class=&quot;layout-container&quot;&gt;<br>    &lt;el-aside width=&quot;200px&quot;&gt;<br>      &lt;div class=&quot;el-aside__logo&quot;&gt;&lt;/div&gt;<br>      &lt;el-menu<br>        active-text-color=&quot;#ffd04b&quot;<br>        background-color=&quot;#232323&quot;<br>        :default-active=&quot;$route.path&quot;<br>        text-color=&quot;#fff&quot;<br>        router<br>      &gt;<br>        &lt;el-menu-item index=&quot;/article/channel&quot;&gt;<br>          &lt;el-icon&gt;&lt;Management /&gt;&lt;/el-icon&gt;<br>          &lt;span&gt;文章分类&lt;/span&gt;<br>        &lt;/el-menu-item&gt;<br>        &lt;el-menu-item index=&quot;/article/manage&quot;&gt;<br>          &lt;el-icon&gt;&lt;Promotion /&gt;&lt;/el-icon&gt;<br>          &lt;span&gt;文章管理&lt;/span&gt;<br>        &lt;/el-menu-item&gt;<br>        &lt;el-sub-menu index=&quot;/user&quot;&gt;<br>          &lt;template #title&gt;<br>            &lt;el-icon&gt;&lt;UserFilled /&gt;&lt;/el-icon&gt;<br>            &lt;span&gt;个人中心&lt;/span&gt;<br>          &lt;/template&gt;<br>          &lt;el-menu-item index=&quot;/user/profile&quot;&gt;<br>            &lt;el-icon&gt;&lt;User /&gt;&lt;/el-icon&gt;<br>            &lt;span&gt;基本资料&lt;/span&gt;<br>          &lt;/el-menu-item&gt;<br>          &lt;el-menu-item index=&quot;/user/avatar&quot;&gt;<br>            &lt;el-icon&gt;&lt;Crop /&gt;&lt;/el-icon&gt;<br>            &lt;span&gt;更换头像&lt;/span&gt;<br>          &lt;/el-menu-item&gt;<br>          &lt;el-menu-item index=&quot;/user/password&quot;&gt;<br>            &lt;el-icon&gt;&lt;EditPen /&gt;&lt;/el-icon&gt;<br>            &lt;span&gt;重置密码&lt;/span&gt;<br>          &lt;/el-menu-item&gt;<br>        &lt;/el-sub-menu&gt;<br>      &lt;/el-menu&gt;<br>    &lt;/el-aside&gt;<br>    &lt;el-container&gt;<br>      &lt;el-header&gt;<br>        &lt;div&gt;黑马程序员：&lt;strong&gt;小帅鹏&lt;/strong&gt;&lt;/div&gt;<br>        &lt;el-dropdown placement=&quot;bottom-end&quot;&gt;<br>          &lt;span class=&quot;el-dropdown__box&quot;&gt;<br>            &lt;el-avatar :src=&quot;avatar&quot; /&gt;<br>            &lt;el-icon&gt;&lt;CaretBottom /&gt;&lt;/el-icon&gt;<br>          &lt;/span&gt;<br>          &lt;template #dropdown&gt;<br>            &lt;el-dropdown-menu&gt;<br>              &lt;el-dropdown-item command=&quot;profile&quot; :icon=&quot;User&quot;<br>                &gt;基本资料&lt;/el-dropdown-item<br>              &gt;<br>              &lt;el-dropdown-item command=&quot;avatar&quot; :icon=&quot;Crop&quot;<br>                &gt;更换头像&lt;/el-dropdown-item<br>              &gt;<br>              &lt;el-dropdown-item command=&quot;password&quot; :icon=&quot;EditPen&quot;<br>                &gt;重置密码&lt;/el-dropdown-item<br>              &gt;<br>              &lt;el-dropdown-item command=&quot;logout&quot; :icon=&quot;SwitchButton&quot;<br>                &gt;退出登录&lt;/el-dropdown-item<br>              &gt;<br>            &lt;/el-dropdown-menu&gt;<br>          &lt;/template&gt;<br>        &lt;/el-dropdown&gt;<br>      &lt;/el-header&gt;<br>      &lt;el-main&gt;<br>        &lt;router-view&gt;&lt;/router-view&gt;<br>      &lt;/el-main&gt;<br>      &lt;el-footer&gt;大事件 ©2023 Created by 黑马程序员&lt;/el-footer&gt;<br>    &lt;/el-container&gt;<br>  &lt;/el-container&gt;<br>&lt;/template&gt;<br><br>&lt;style lang=&quot;scss&quot; scoped&gt;<br>.layout-container &#123;<br>  height: 100vh;<br>  .el-aside &#123;<br>    background-color: #232323;<br>    &amp;__logo &#123;<br>      height: 120px;<br>      background: url(&#x27;@/assets/logo.png&#x27;) no-repeat center / 120px auto;<br>    &#125;<br>    .el-menu &#123;<br>      border-right: none;<br>    &#125;<br>  &#125;<br>  .el-header &#123;<br>    background-color: #fff;<br>    display: flex;<br>    align-items: center;<br>    justify-content: space-between;<br>    .el-dropdown__box &#123;<br>      display: flex;<br>      align-items: center;<br>      .el-icon &#123;<br>        color: #999;<br>        margin-left: 10px;<br>      &#125;<br><br>      &amp;:active,<br>      &amp;:focus &#123;<br>        outline: none;<br>      &#125;<br>    &#125;<br>  &#125;<br>  .el-footer &#123;<br>    display: flex;<br>    align-items: center;<br>    justify-content: center;<br>    font-size: 14px;<br>    color: #666;<br>  &#125;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><blockquote><p> el-menu整个菜单组件<br>     :default-active&#x3D;”$route.path” 配置默认高亮的菜单项<br>     router router选项开启el-menu-item的index就是点击跳转的路径<br> el-menu-item菜单项<br> index&#x3D;”&#x2F;article&#x2F;channel”配置的是访问的跳转路径，配合default-active的值，实现高亮</p></blockquote><h2 id="登录访问拦截"><a href="#登录访问拦截" class="headerlink" title="登录访问拦截"></a>登录访问拦截</h2><p>需求：只有登录页，可以未授权的时候访问，其他所有页面，都需要先登录再访问</p><p>router&#x2F;index.js</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">// 登录访问拦截</span><br>router.<span class="hljs-title function_">beforeEach</span>(<span class="hljs-function">(<span class="hljs-params">to</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> userStore = <span class="hljs-title function_">useUserStore</span>()<br>  <span class="hljs-keyword">if</span> (!userStore.<span class="hljs-property">token</span> &amp;&amp; to.<span class="hljs-property">path</span> !== <span class="hljs-string">&#x27;/login&#x27;</span>) <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;/login&#x27;</span><br>&#125;)<br><br></code></pre></td></tr></table></figure><p>登录访问拦截  &#x3D;&gt; 默认直接放行 根据返回值决定是放行或者拦截</p><ul><li>返回undefined或者true 直接放行</li><li>返回false 拦截到from的地址页面</li><li>返回具体路径或者路径对象 拦截到对应的地址</li></ul><h2 id="用户基本信息获取-渲染"><a href="#用户基本信息获取-渲染" class="headerlink" title="用户基本信息获取&amp;渲染"></a>用户基本信息获取&amp;渲染</h2><ol><li><code>api/user.js</code>封装接口</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">userGetInfoService</span> = (<span class="hljs-params"></span>) =&gt; request.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/my/userinfo&#x27;</span>)<br></code></pre></td></tr></table></figure><ol start="2"><li>stores&#x2F;modules&#x2F;user.js 定义数据</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> user = <span class="hljs-title function_">ref</span>(&#123;&#125;)<br><span class="hljs-keyword">const</span> <span class="hljs-title function_">getUser</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> <span class="hljs-title function_">userGetInfoService</span>() <span class="hljs-comment">// 请求获取数据</span><br>  user.<span class="hljs-property">value</span> = res.<span class="hljs-property">data</span>.<span class="hljs-property">data</span><br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20231014113533383.png" alt="image-20231014113533383"></p><ol start="3"><li><code>layout/LayoutContainer</code>页面中调用</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; useUserStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/stores&#x27;</span><br><span class="hljs-keyword">const</span> userStore = <span class="hljs-title function_">useUserStore</span>()<br><span class="hljs-title function_">onMounted</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  userStore.<span class="hljs-title function_">getUser</span>()<br>&#125;)<span class="hljs-string">``</span><br></code></pre></td></tr></table></figure><ol start="4"><li><p>动态渲染</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;div&gt;<br>  黑马程序员：&lt;strong&gt;&#123;&#123; userStore.user.nickname || userStore.user.username &#125;&#125;&lt;/strong&gt;<br>&lt;/div&gt;<br><br>&lt;el-avatar :src=&quot;userStore.user.user_pic || avatar&quot; /&gt;<br></code></pre></td></tr></table></figure></li></ol><h2 id="退出功能-element-plus-确认框"><a href="#退出功能-element-plus-确认框" class="headerlink" title="退出功能 [element-plus 确认框]"></a>退出功能 [element-plus 确认框]</h2><ol><li>注册点击事件</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;el-dropdown placement=<span class="hljs-string">&quot;bottom-end&quot;</span> @command=<span class="hljs-string">&quot;onCommand&quot;</span>&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">el-dropdown-menu</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">el-dropdown-item</span> <span class="hljs-attr">command</span>=<span class="hljs-string">&quot;profile&quot;</span> <span class="hljs-attr">:icon</span>=<span class="hljs-string">&quot;User&quot;</span>&gt;</span>基本资料<span class="hljs-tag">&lt;/<span class="hljs-name">el-dropdown-item</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">el-dropdown-item</span> <span class="hljs-attr">command</span>=<span class="hljs-string">&quot;avatar&quot;</span> <span class="hljs-attr">:icon</span>=<span class="hljs-string">&quot;Crop&quot;</span>&gt;</span>更换头像<span class="hljs-tag">&lt;/<span class="hljs-name">el-dropdown-item</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">el-dropdown-item</span> <span class="hljs-attr">command</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">:icon</span>=<span class="hljs-string">&quot;EditPen&quot;</span>&gt;</span>重置密码<span class="hljs-tag">&lt;/<span class="hljs-name">el-dropdown-item</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">el-dropdown-item</span> <span class="hljs-attr">command</span>=<span class="hljs-string">&quot;logout&quot;</span> <span class="hljs-attr">:icon</span>=<span class="hljs-string">&quot;SwitchButton&quot;</span>&gt;</span>退出登录<span class="hljs-tag">&lt;/<span class="hljs-name">el-dropdown-item</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">el-dropdown-menu</span>&gt;</span></span><br></code></pre></td></tr></table></figure><ol start="2"><li>添加退出功能</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> <span class="hljs-title function_">onCommand</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params">command</span>) =&gt; &#123;<br>  <span class="hljs-keyword">if</span> (command === <span class="hljs-string">&#x27;logout&#x27;</span>) &#123;<br>    <span class="hljs-keyword">await</span> <span class="hljs-title class_">ElMessageBox</span>.<span class="hljs-title function_">confirm</span>(<span class="hljs-string">&#x27;你确认退出大事件吗？&#x27;</span>, <span class="hljs-string">&#x27;温馨提示&#x27;</span>, &#123;<br>      <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;warning&#x27;</span>,<br>      <span class="hljs-attr">confirmButtonText</span>: <span class="hljs-string">&#x27;确认&#x27;</span>,<br>      <span class="hljs-attr">cancelButtonText</span>: <span class="hljs-string">&#x27;取消&#x27;</span><br>    &#125;)<br>    userStore.<span class="hljs-title function_">removeToken</span>()<br>    userStore.<span class="hljs-title function_">setUser</span>(&#123;&#125;)<br>    router.<span class="hljs-title function_">push</span>(<span class="hljs-string">`/login`</span>)<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    router.<span class="hljs-title function_">push</span>(<span class="hljs-string">`/user/<span class="hljs-subst">$&#123;command&#125;</span>`</span>)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>pinia  user.js 模块 提供 setUser 方法</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> <span class="hljs-title function_">setUser</span> = (<span class="hljs-params">obj</span>) =&gt; (user.<span class="hljs-property">value</span> = obj)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Vue3</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>6_Vue3大事件_登录与注册</title>
    <link href="/2023/10/05/Vue3/6_Vue3%E5%A4%A7%E4%BA%8B%E4%BB%B6_%E7%99%BB%E5%BD%95%E4%B8%8E%E6%B3%A8%E5%86%8C/"/>
    <url>/2023/10/05/Vue3/6_Vue3%E5%A4%A7%E4%BA%8B%E4%BB%B6_%E7%99%BB%E5%BD%95%E4%B8%8E%E6%B3%A8%E5%86%8C/</url>
    
    <content type="html"><![CDATA[<h1 id="Vue3大事件-登录与注册"><a href="#Vue3大事件-登录与注册" class="headerlink" title="Vue3大事件_登录与注册"></a>Vue3大事件_登录与注册</h1><h2 id="登录注册页面-element-plus-表单-表单校验"><a href="#登录注册页面-element-plus-表单-表单校验" class="headerlink" title="登录注册页面 [element-plus 表单 &amp; 表单校验]"></a>登录注册页面 [element-plus 表单 &amp; 表单校验]</h2><p><a href="https://element-plus.org/zh-CN/component/form.html#%E8%A1%A8%E5%8D%95%E6%A0%A1%E9%AA%8C">Form 表单 | Element Plus (element-plus.org)</a></p><h3 id="注册登录-静态结构-基本切换"><a href="#注册登录-静态结构-基本切换" class="headerlink" title="注册登录 静态结构 &amp; 基本切换"></a>注册登录 静态结构 &amp; 基本切换</h3><ol><li><p>安装 element-plus 图标库</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">pnpm <span class="hljs-selector-tag">i</span> <span class="hljs-keyword">@element-plus</span>/icons-vue<br></code></pre></td></tr></table></figure></li><li><p>静态页面</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script setup&gt;<br>import &#123; User, Lock &#125; from &#x27;@element-plus/icons-vue&#x27;<br>import &#123; ref &#125; from &#x27;vue&#x27;<br>const isRegister = ref(true)<br>&lt;/script&gt;<br><br>&lt;template&gt;<br>  &lt;el-row class=&quot;login-page&quot;&gt;<br>    &lt;el-col :span=&quot;12&quot; class=&quot;bg&quot;&gt;&lt;/el-col&gt;<br>    &lt;el-col :span=&quot;6&quot; :offset=&quot;3&quot; class=&quot;form&quot;&gt;<br>      &lt;el-form ref=&quot;form&quot; size=&quot;large&quot; autocomplete=&quot;off&quot; v-if=&quot;isRegister&quot;&gt;<br>        &lt;el-form-item&gt;<br>          &lt;h1&gt;注册&lt;/h1&gt;<br>        &lt;/el-form-item&gt;<br>        &lt;el-form-item&gt;<br>          &lt;el-input :prefix-icon=&quot;User&quot; placeholder=&quot;请输入用户名&quot;&gt;&lt;/el-input&gt;<br>        &lt;/el-form-item&gt;<br>        &lt;el-form-item&gt;<br>          &lt;el-input<br>            :prefix-icon=&quot;Lock&quot;<br>            type=&quot;password&quot;<br>            placeholder=&quot;请输入密码&quot;<br>          &gt;&lt;/el-input&gt;<br>        &lt;/el-form-item&gt;<br>        &lt;el-form-item&gt;<br>          &lt;el-input<br>            :prefix-icon=&quot;Lock&quot;<br>            type=&quot;password&quot;<br>            placeholder=&quot;请输入再次密码&quot;<br>          &gt;&lt;/el-input&gt;<br>        &lt;/el-form-item&gt;<br>        &lt;el-form-item&gt;<br>          &lt;el-button class=&quot;button&quot; type=&quot;primary&quot; auto-insert-space&gt;<br>            注册<br>          &lt;/el-button&gt;<br>        &lt;/el-form-item&gt;<br>        &lt;el-form-item class=&quot;flex&quot;&gt;<br>          &lt;el-link type=&quot;info&quot; :underline=&quot;false&quot; @click=&quot;isRegister = false&quot;&gt;<br>            ← 返回<br>          &lt;/el-link&gt;<br>        &lt;/el-form-item&gt;<br>      &lt;/el-form&gt;<br>      &lt;el-form ref=&quot;form&quot; size=&quot;large&quot; autocomplete=&quot;off&quot; v-else&gt;<br>        &lt;el-form-item&gt;<br>          &lt;h1&gt;登录&lt;/h1&gt;<br>        &lt;/el-form-item&gt;<br>        &lt;el-form-item&gt;<br>          &lt;el-input :prefix-icon=&quot;User&quot; placeholder=&quot;请输入用户名&quot;&gt;&lt;/el-input&gt;<br>        &lt;/el-form-item&gt;<br>        &lt;el-form-item&gt;<br>          &lt;el-input<br>            name=&quot;password&quot;<br>            :prefix-icon=&quot;Lock&quot;<br>            type=&quot;password&quot;<br>            placeholder=&quot;请输入密码&quot;<br>          &gt;&lt;/el-input&gt;<br>        &lt;/el-form-item&gt;<br>        &lt;el-form-item class=&quot;flex&quot;&gt;<br>          &lt;div class=&quot;flex&quot;&gt;<br>            &lt;el-checkbox&gt;记住我&lt;/el-checkbox&gt;<br>            &lt;el-link type=&quot;primary&quot; :underline=&quot;false&quot;&gt;忘记密码？&lt;/el-link&gt;<br>          &lt;/div&gt;<br>        &lt;/el-form-item&gt;<br>        &lt;el-form-item&gt;<br>          &lt;el-button class=&quot;button&quot; type=&quot;primary&quot; auto-insert-space<br>            &gt;登录&lt;/el-button<br>          &gt;<br>        &lt;/el-form-item&gt;<br>        &lt;el-form-item class=&quot;flex&quot;&gt;<br>          &lt;el-link type=&quot;info&quot; :underline=&quot;false&quot; @click=&quot;isRegister = true&quot;&gt;<br>            注册 →<br>          &lt;/el-link&gt;<br>        &lt;/el-form-item&gt;<br>      &lt;/el-form&gt;<br>    &lt;/el-col&gt;<br>  &lt;/el-row&gt;<br>&lt;/template&gt;<br><br>&lt;style lang=&quot;scss&quot; scoped&gt;<br>.login-page &#123;<br>  height: 100vh;<br>  background-color: #fff;<br>  .bg &#123;<br>    background: url(&#x27;@/assets/logo2.png&#x27;) no-repeat 60% center / 240px auto,<br>      url(&#x27;@/assets/login_bg.jpg&#x27;) no-repeat center / cover;<br>    border-radius: 0 20px 20px 0;<br>  &#125;<br>  .form &#123;<br>    display: flex;<br>    flex-direction: column;<br>    justify-content: center;<br>    user-select: none;<br>    .title &#123;<br>      margin: 0 auto;<br>    &#125;<br>    .button &#123;<br>      width: 100%;<br>    &#125;<br>    .flex &#123;<br>      width: 100%;<br>      display: flex;<br>      justify-content: space-between;<br>    &#125;<br>  &#125;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20231005210041475.png" alt="image-20231005210041475"></p><p><strong>结构相关</strong></p><p>el-col表示列<br>(1):span&#x3D;”12” 代表在一行中，占12份(50%)<br>(2):span&#x3D;”6” 表示在一行中，占6份(25%)<br>(3):offset&#x3D;”3” 代表在一行中，左侧margin份数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;el-input<br>  :prefix-icon=&quot;Lock&quot;<br>  type=&quot;password&quot;<br>  placeholder=&quot;请输入密码&quot;<br>&gt;&lt;/el-input&gt;<br></code></pre></td></tr></table></figure><p><code>:prefix-icon=&quot;Lock&quot;</code>获取图标</p></li></ol><h2 id="注册功能"><a href="#注册功能" class="headerlink" title="注册功能"></a>注册功能</h2><h3 id="实现注册校验"><a href="#实现注册校验" class="headerlink" title="实现注册校验"></a>实现注册校验</h3><p>【需求】注册页面基本校验</p><ol><li>用户名非空，长度校验5-10位</li><li>密码非空，长度校验6-15位</li><li>再次输入密码，非空，长度校验6-15位</li></ol><p>【进阶】再次输入密码需要自定义校验规则，和密码框值一致（可选）</p><p>注意：</p><ol><li>model 属性绑定 form 数据对象</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> formModel = <span class="hljs-title function_">ref</span>(&#123;<br>  <span class="hljs-attr">username</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>  <span class="hljs-attr">password</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>  <span class="hljs-attr">repassword</span>: <span class="hljs-string">&#x27;&#x27;</span><br>&#125;)<br><br>&lt;el-form :model=<span class="hljs-string">&quot;formModel&quot;</span> &gt;<br></code></pre></td></tr></table></figure><ol start="2"><li>v-model 绑定 form 数据对象的子属性</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;el-input<br>  v-model=<span class="hljs-string">&quot;formModel.username&quot;</span><br>  :prefix-icon=<span class="hljs-string">&quot;User&quot;</span><br>  placeholder=<span class="hljs-string">&quot;请输入用户名&quot;</span><br>&gt;&lt;/el-input&gt;<br>... <br>(其他两个也要绑定)<br></code></pre></td></tr></table></figure><ol start="3"><li><p>rules 配置校验规则</p><p><strong>校验相关</strong></p><p><a href="https://element-plus.org/zh-CN/component/form.html#%E8%A1%A8%E5%8D%95%E6%A0%A1%E9%AA%8C">Form 表单 | Element Plus (element-plus.org)</a></p><p><a href="https://element-plus.org/zh-CN/component/form.html#%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A0%A1%E9%AA%8C%E8%A7%84%E5%88%99">Form 表单 | Element Plus (element-plus.org)</a></p><p><img src="/assets/image-20231005221323511.png" alt="image-20231005221323511"></p><pre><code class="hljs">:model=&quot;ruleForm&quot; 绑定整个form的数据对象:rules=&quot;rules&quot; 绑定整个rules的规则对象&lt;el-form-item&gt; =&gt; prop 配置生效的是哪个校验规则，必须与rules中的字段相对应    &lt;el-input&gt; =&gt; v-model=&quot;ruleForm.name&quot;  给表单中的各元素绑定相应的表单属性</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> rules = &#123;<br>  <span class="hljs-attr">username</span>: [<br>    &#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入用户名&#x27;</span>, <span class="hljs-attr">trigger</span>: <span class="hljs-string">&#x27;blur&#x27;</span> &#125;,<br>    &#123; <span class="hljs-attr">min</span>: <span class="hljs-number">5</span>, <span class="hljs-attr">max</span>: <span class="hljs-number">10</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;用户名长度必须是5到10！&#x27;</span>, <span class="hljs-attr">trigger</span>: <span class="hljs-string">&#x27;blur&#x27;</span> &#125;<br>  ],<br>  <span class="hljs-attr">password</span>: [<br>    &#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入密码&#x27;</span>, <span class="hljs-attr">trigger</span>: <span class="hljs-string">&#x27;blur&#x27;</span> &#125;,<br>    &#123;<br>      <span class="hljs-attr">pattern</span>: <span class="hljs-regexp">/^(?![0-9]+$)(?![a-zA-Z]+$)[0-9A-Za-z]&#123;6,16&#125;$/</span>,<br>      <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;密码中只能包含字母和数字&#x27;</span><br>    &#125;<br>  ],<br>  <span class="hljs-attr">repassword</span>: [<br>    &#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请重新输入密码&#x27;</span>, <span class="hljs-attr">trigger</span>: <span class="hljs-string">&#x27;blur&#x27;</span> &#125;,<br>    <span class="hljs-comment">//   自定义校验</span><br>    &#123;<br>      <span class="hljs-attr">validator</span>: <span class="hljs-function">(<span class="hljs-params">rule, value, callback</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span> (value === formModel.<span class="hljs-property">value</span>.<span class="hljs-property">password</span>) &#123;<br>          <span class="hljs-title function_">callback</span>()<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          <span class="hljs-title function_">callback</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;两次输入密码有误，请重新输入&#x27;</span>))<br>        &#125;<br>      &#125;,<br>      <span class="hljs-attr">trigger</span>: <span class="hljs-string">&#x27;blur&#x27;</span><br>    &#125;<br>  ]<br>&#125;<br>表单的校验规则：<br><span class="hljs-number">1.</span> 非空校验 required bool<br><span class="hljs-number">2.</span> 消息提醒 message <span class="hljs-title class_">String</span><br><span class="hljs-number">3.</span> 触发校验时机 trigger blur/change<br><span class="hljs-number">4.</span> 长度校验 min/max<br><span class="hljs-number">5.</span> 正则校验 pattern 正则规则<br><span class="hljs-number">6.</span> 自定义校验 <span class="hljs-attr">validator</span>:<span class="hljs-function">(<span class="hljs-params">rule,value,callback</span>)=&gt;</span>&#123;&#125;<br>    rule 为当前校验规则相关的信息<br>    value 所校验的表单元素目前的表单值<br>    callback <br>    - <span class="hljs-title function_">callback</span>() 校验成功<br>    - <span class="hljs-title function_">callback</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(错误信息)) 校验失败<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20231005225343458.png" alt="image-20231005225343458"></p></li><li><p>prop 绑定校验规则</p></li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;el-form-item prop=<span class="hljs-string">&quot;username&quot;</span>&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">el-input</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;formModel.username&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">:prefix-icon</span>=<span class="hljs-string">&quot;User&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入用户名&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">  &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-input</span>&gt;</span></span><br>&lt;/el-form-item&gt;<br>... <br>(其他两个也要绑定prop)<br></code></pre></td></tr></table></figure>   <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;script setup&gt;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">User</span>, <span class="hljs-title class_">Lock</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@element-plus/icons-vue&#x27;</span><br><span class="hljs-keyword">import</span> &#123; ref &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> &#123; userRegisterService &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/api/user&#x27;</span><br><br><span class="hljs-keyword">const</span> isRegister = <span class="hljs-title function_">ref</span>(<span class="hljs-literal">true</span>)<br><span class="hljs-keyword">const</span> form = <span class="hljs-title function_">ref</span>()<br><span class="hljs-keyword">const</span> <span class="hljs-title function_">register</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">await</span> form.<span class="hljs-property">value</span>.<span class="hljs-title function_">validate</span>()<br>  <span class="hljs-keyword">await</span> <span class="hljs-title function_">userRegisterService</span>(formModel.<span class="hljs-property">value</span>)<br>  <span class="hljs-title class_">ElMessage</span>.<span class="hljs-title function_">success</span>(<span class="hljs-string">&#x27;注册成功&#x27;</span>)<br>  <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;success&#x27;</span>)<br>  isRegister.<span class="hljs-property">value</span> = <span class="hljs-literal">false</span><br>&#125;<br><span class="hljs-keyword">const</span> formModel = <span class="hljs-title function_">ref</span>(&#123;<br>  <span class="hljs-attr">username</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>  <span class="hljs-attr">password</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>  <span class="hljs-attr">repassword</span>: <span class="hljs-string">&#x27;&#x27;</span><br>&#125;)<br><span class="hljs-keyword">const</span> rules = &#123;<br>  <span class="hljs-attr">username</span>: [<br>    &#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入用户名&#x27;</span>, <span class="hljs-attr">trigger</span>: <span class="hljs-string">&#x27;blur&#x27;</span> &#125;,<br>    &#123; <span class="hljs-attr">min</span>: <span class="hljs-number">5</span>, <span class="hljs-attr">max</span>: <span class="hljs-number">10</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;用户名长度必须是5到10！&#x27;</span>, <span class="hljs-attr">trigger</span>: <span class="hljs-string">&#x27;blur&#x27;</span> &#125;<br>  ],<br>  <span class="hljs-attr">password</span>: [<br>    &#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请输入密码&#x27;</span>, <span class="hljs-attr">trigger</span>: <span class="hljs-string">&#x27;blur&#x27;</span> &#125;,<br>    &#123;<br>      <span class="hljs-attr">pattern</span>: <span class="hljs-regexp">/^(?![0-9]+$)(?![a-zA-Z]+$)[0-9A-Za-z]&#123;6,16&#125;$/</span>,<br>      <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;密码中只能包含字母和数字&#x27;</span><br>    &#125;<br>  ],<br>  <span class="hljs-attr">repassword</span>: [<br>    &#123; <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;请重新输入密码&#x27;</span>, <span class="hljs-attr">trigger</span>: <span class="hljs-string">&#x27;blur&#x27;</span> &#125;,<br>    <span class="hljs-comment">//   自定义校验</span><br>    &#123;<br>      <span class="hljs-attr">validator</span>: <span class="hljs-function">(<span class="hljs-params">rule, value, callback</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span> (value !== formModel.<span class="hljs-property">value</span>.<span class="hljs-property">password</span>) &#123;<br>          <span class="hljs-title function_">callback</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;两次输入密码有误，请重新输入&#x27;</span>))<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          <span class="hljs-title function_">callback</span>()<br>        &#125;<br>      &#125;,<br>      <span class="hljs-attr">trigger</span>: <span class="hljs-string">&#x27;blur&#x27;</span><br>    &#125;<br>  ]<br>&#125;<br>&lt;/script&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-comment">&lt;!--  el-row 表示一行，一行分为24份--&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">el-row</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;login-page&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">el-col</span> <span class="hljs-attr">:span</span>=<span class="hljs-string">&quot;12&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;bg&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-col</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">el-col</span> <span class="hljs-attr">:span</span>=<span class="hljs-string">&quot;6&quot;</span> <span class="hljs-attr">:offset</span>=<span class="hljs-string">&quot;3&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">el-form</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;form&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;large&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">autocomplete</span>=<span class="hljs-string">&quot;off&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;isRegister&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">:model</span>=<span class="hljs-string">&quot;formModel&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">:rules</span>=<span class="hljs-string">&quot;rules&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      &gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>注册<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span> <span class="hljs-attr">prop</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">el-input</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">:prefix-icon</span>=<span class="hljs-string">&quot;User&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入用户名&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;formModel.username&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-input</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span> <span class="hljs-attr">prop</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">el-input</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">:prefix-icon</span>=<span class="hljs-string">&quot;Lock&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入密码&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;formModel.password&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-input</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span> <span class="hljs-attr">prop</span>=<span class="hljs-string">&quot;repassword&quot;</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">el-input</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">:prefix-icon</span>=<span class="hljs-string">&quot;Lock&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入再次密码&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;formModel.repassword&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-input</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;button&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;primary&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">auto-insert-space</span></span></span><br><span class="hljs-tag"><span class="language-xml">            @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;register&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          &gt;</span></span><br><span class="language-xml">            注册</span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;flex&quot;</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">el-link</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;info&quot;</span> <span class="hljs-attr">:underline</span>=<span class="hljs-string">&quot;false&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;isRegister = false&quot;</span>&gt;</span> ← 返回<span class="hljs-tag">&lt;/<span class="hljs-name">el-link</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">el-form</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">el-form</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;form&quot;</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;large&quot;</span> <span class="hljs-attr">autocomplete</span>=<span class="hljs-string">&quot;off&quot;</span> <span class="hljs-attr">v-else</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>登录<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">el-input</span> <span class="hljs-attr">:prefix-icon</span>=<span class="hljs-string">&quot;User&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入用户名&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-input</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">el-input</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">:prefix-icon</span>=<span class="hljs-string">&quot;Lock&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入密码&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-input</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;flex&quot;</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;flex&quot;</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">el-checkbox</span>&gt;</span>记住我<span class="hljs-tag">&lt;/<span class="hljs-name">el-checkbox</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">el-link</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;primary&quot;</span> <span class="hljs-attr">:underline</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span>忘记密码？<span class="hljs-tag">&lt;/<span class="hljs-name">el-link</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;primary&quot;</span> <span class="hljs-attr">auto-insert-space</span>&gt;</span>登录<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;flex&quot;</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">el-link</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;info&quot;</span> <span class="hljs-attr">:underline</span>=<span class="hljs-string">&quot;false&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;isRegister = true&quot;</span>&gt;</span> 注册 →<span class="hljs-tag">&lt;/<span class="hljs-name">el-link</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">el-form</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">el-col</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">el-row</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;scss&quot;</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-class">.login-page</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">height</span>: <span class="hljs-number">100vh</span>;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#fff</span>;</span></span><br><span class="language-css"><span class="language-xml"></span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-selector-class">.bg</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-attribute">background</span>:</span></span><br><span class="language-css"><span class="language-xml">      <span class="hljs-built_in">url</span>(<span class="hljs-string">&#x27;@/assets/logo2.png&#x27;</span>) no-repeat <span class="hljs-number">60%</span> center / <span class="hljs-number">240px</span> auto,</span></span><br><span class="language-css"><span class="language-xml">      <span class="hljs-built_in">url</span>(<span class="hljs-string">&#x27;@/assets/login_bg.jpg&#x27;</span>) no-repeat center / cover;</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">0</span> <span class="hljs-number">20px</span> <span class="hljs-number">20px</span> <span class="hljs-number">0</span>;</span></span><br><span class="language-css"><span class="language-xml">  &#125;</span></span><br><span class="language-css"><span class="language-xml"></span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-selector-class">.form</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-attribute">display</span>: flex;</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-attribute">flex-direction</span>: column;</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-attribute">justify-content</span>: center;</span></span><br><span class="language-css"><span class="language-xml">    user-select: none;</span></span><br><span class="language-css"><span class="language-xml"></span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-selector-class">.title</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">      <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;</span></span><br><span class="language-css"><span class="language-xml">    &#125;</span></span><br><span class="language-css"><span class="language-xml"></span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-selector-class">.button</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">      <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span></span><br><span class="language-css"><span class="language-xml">    &#125;</span></span><br><span class="language-css"><span class="language-xml"></span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-selector-class">.flex</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">      <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span></span><br><span class="language-css"><span class="language-xml">      <span class="hljs-attribute">display</span>: flex;</span></span><br><span class="language-css"><span class="language-xml">      <span class="hljs-attribute">justify-content</span>: space-between;</span></span><br><span class="language-css"><span class="language-xml">    &#125;</span></span><br><span class="language-css"><span class="language-xml">  &#125;</span></span><br><span class="language-css"><span class="language-xml">&#125;</span></span><br><span class="language-css"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="注册前的预校验"><a href="#注册前的预校验" class="headerlink" title="注册前的预校验"></a>注册前的预校验</h3><p>需求：点击注册按钮，注册之前，需要先校验</p><ol><li>通过 ref 获取到 表单组件</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> form = <span class="hljs-title function_">ref</span>()<br><br>&lt;el-form ref=<span class="hljs-string">&quot;form&quot;</span>&gt;<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20231005232617128.png" alt="image-20231005232617128"></p><ol start="2"><li>注册之前进行校验</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;el-button<br>  @click=<span class="hljs-string">&quot;register&quot;</span><br>  <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;button&quot;</span><br>  type=<span class="hljs-string">&quot;primary&quot;</span><br>  auto-insert-space<br>&gt;<br>  注册<br>&lt;/el-button&gt;<br><br><span class="hljs-keyword">const</span> form = <span class="hljs-title function_">ref</span>()<br><span class="hljs-keyword">const</span> <span class="hljs-title function_">register</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">await</span> form.<span class="hljs-property">value</span>.<span class="hljs-title function_">validate</span>()<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;begin apply request&#x27;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20231005232724409.png" alt="image-20231005232724409"></p><p>基本思路：</p><ol><li>表单中各input值与formModel相应属性值进行数据双向绑定 </li><li>采用ref值和绑定表单，表单各input值以prop值绑定，定义rules规则</li></ol><h3 id="封装-api-实现注册功能"><a href="#封装-api-实现注册功能" class="headerlink" title="封装 api 实现注册功能"></a>封装 api 实现注册功能</h3><p>需求：封装注册api，进行注册，注册成功切换到登录</p><ol><li>新建 api&#x2F;user.js 封装</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> request <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/utils/request&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">userRegisterService</span> = (<span class="hljs-params">&#123; username, password, repassword &#125;</span>) =&gt;<br>  request.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/api/reg&#x27;</span>, &#123; username, password, repassword &#125;)<br></code></pre></td></tr></table></figure><ol start="2"><li>页面中调用</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> <span class="hljs-title function_">register</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">await</span> form.<span class="hljs-property">value</span>.<span class="hljs-title function_">validate</span>()<br>  <span class="hljs-comment">// 作用：表单经过校验后触发</span><br>  <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> <span class="hljs-title function_">userRegisterService</span>(formModel.<span class="hljs-property">value</span>)<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res)<br>  <span class="hljs-keyword">if</span> (res.<span class="hljs-property">data</span>?.<span class="hljs-property">code</span> !== <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-title class_">ElMessage</span>(&#123;<br>      <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;warning&#x27;</span>,<br>      <span class="hljs-attr">message</span>: res.<span class="hljs-property">data</span>.<span class="hljs-property">message</span><br>    &#125;)<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-title class_">ElMessage</span>.<span class="hljs-title function_">success</span>(<span class="hljs-string">&#x27;注册成功&#x27;</span>)<br>    isRegister.<span class="hljs-property">value</span> = <span class="hljs-literal">false</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>eslintrc 中声明全局变量名,  解决 ElMessage 报错问题</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  ...<br>  <span class="hljs-attr">globals</span>: &#123;<br>    <span class="hljs-title class_">ElMessage</span>: <span class="hljs-string">&#x27;readonly&#x27;</span>,<br>    <span class="hljs-title class_">ElMessageBox</span>: <span class="hljs-string">&#x27;readonly&#x27;</span>,<br>    <span class="hljs-title class_">ElLoading</span>: <span class="hljs-string">&#x27;readonly&#x27;</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="登录功能"><a href="#登录功能" class="headerlink" title="登录功能"></a>登录功能</h2><h3 id="实现登录校验"><a href="#实现登录校验" class="headerlink" title="实现登录校验"></a>实现登录校验</h3><p>【需求说明】给输入框添加表单校验，与注册规则相似</p><p>操作步骤：</p><ol><li>model 属性绑定 form 数据对象，直接绑定之前提供好的数据对象即可</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;el-form :model=<span class="hljs-string">&quot;formModel&quot;</span> &gt;<br></code></pre></td></tr></table></figure><ol start="2"><li>rules 配置校验规则，共用注册的规则即可</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;el-form :rules=<span class="hljs-string">&quot;rules&quot;</span> &gt;<br></code></pre></td></tr></table></figure><ol start="3"><li>v-model 绑定 form 数据对象的子属性</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;el-input<br>  v-model=<span class="hljs-string">&quot;formModel.username&quot;</span><br>  :prefix-icon=<span class="hljs-string">&quot;User&quot;</span><br>  placeholder=<span class="hljs-string">&quot;请输入用户名&quot;</span><br>&gt;&lt;/el-input&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">el-input</span></span></span><br><span class="hljs-tag"><span class="language-xml">  <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;formModel.password&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">  <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">  <span class="hljs-attr">:prefix-icon</span>=<span class="hljs-string">&quot;Lock&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">  <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">  <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入密码&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-input</span>&gt;</span></span><br></code></pre></td></tr></table></figure><ol start="4"><li>prop 绑定校验规则</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;el-form-item prop=<span class="hljs-string">&quot;username&quot;</span>&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">el-input</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;formModel.username&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">:prefix-icon</span>=<span class="hljs-string">&quot;User&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入用户名&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">  &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-input</span>&gt;</span></span><br>&lt;/el-form-item&gt;<br>... <br></code></pre></td></tr></table></figure><ol start="5"><li>切换的时候重置</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-title function_">watch</span>(isRegister, <span class="hljs-function">() =&gt;</span> &#123;<br>  formModel.<span class="hljs-property">value</span> = &#123;<br>    <span class="hljs-attr">username</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>    <span class="hljs-attr">password</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>    <span class="hljs-attr">repassword</span>: <span class="hljs-string">&#x27;&#x27;</span><br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="登录前的预校验-登录成功"><a href="#登录前的预校验-登录成功" class="headerlink" title="登录前的预校验 &amp; 登录成功"></a>登录前的预校验 &amp; 登录成功</h3><p>【需求说明1】登录之前的预校验</p><ul><li>登录请求之前，需要对用户的输入内容，进行校验</li><li>校验通过才发送请求</li></ul><p>【需求说明2】<strong>登录功能</strong></p><ol><li>封装登录API，点击按钮发送登录请求</li><li>登录成功存储token，存入pinia 和 持久化本地storage</li><li>跳转到首页，给提示</li></ol><p>实现步骤：</p><ol><li><p>注册事件，进行登录前的预校验 (获取到组件调用方法)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title function_">login</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">await</span> form.<span class="hljs-property">value</span>.<span class="hljs-title function_">validate</span>()<br>  <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> <span class="hljs-title function_">userLoginService</span>(formModel.<span class="hljs-property">value</span>)<br>  <span class="hljs-keyword">if</span> (res.<span class="hljs-property">data</span>?.<span class="hljs-property">code</span> !== <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-title class_">ElMessage</span>(&#123;<br>      <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;warning&#x27;</span>,<br>      <span class="hljs-attr">message</span>: res.<span class="hljs-property">data</span>.<span class="hljs-property">message</span><br>    &#125;)<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    userStore.<span class="hljs-title function_">setToken</span>(res.<span class="hljs-property">data</span>.<span class="hljs-property">token</span>)<br>    <span class="hljs-title class_">ElMessage</span>.<span class="hljs-title function_">success</span>(<span class="hljs-string">&#x27;登录成功&#x27;</span>)<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;login success&#x27;</span>, res)<br>    <span class="hljs-keyword">await</span> router.<span class="hljs-title function_">push</span>(<span class="hljs-string">&#x27;/&#x27;</span>)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>封装接口 API</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">userLoginService</span> = (<span class="hljs-params">&#123; username, password &#125;</span>) =&gt;<br>  request.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;api/login&#x27;</span>, &#123; username, password &#125;)<br></code></pre></td></tr></table></figure></li><li><p>调用方法将 token 存入 pinia 并 自动持久化本地</p><p>stores&#x2F;modules&#x2F;user.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> useUserStore = <span class="hljs-title function_">defineStore</span>(<br>  <span class="hljs-string">&#x27;user-token&#x27;</span>,<br>  <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> token = <span class="hljs-title function_">ref</span>(<span class="hljs-string">&#x27;&#x27;</span>)<br>    <span class="hljs-keyword">const</span> <span class="hljs-title function_">setToken</span> = (<span class="hljs-params">newToken</span>) =&gt; &#123;<br>      token.<span class="hljs-property">value</span> = newToken<br>    &#125;<br>    <span class="hljs-keyword">const</span> <span class="hljs-title function_">removeToken</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>      token.<span class="hljs-property">value</span> = <span class="hljs-string">&#x27;&#x27;</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> &#123;<br>      token,<br>      setToken,<br>      removeToken<br>    &#125;<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">persist</span>: <span class="hljs-literal">true</span><br>  &#125;<br>)<br><br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>Vue3</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>5_Vue3大事件_准备</title>
    <link href="/2023/10/05/Vue3/5_Vue3%E5%A4%A7%E4%BA%8B%E4%BB%B6_%E5%87%86%E5%A4%87/"/>
    <url>/2023/10/05/Vue3/5_Vue3%E5%A4%A7%E4%BA%8B%E4%BB%B6_%E5%87%86%E5%A4%87/</url>
    
    <content type="html"><![CDATA[<h1 id="Vue3大事件-准备"><a href="#Vue3大事件-准备" class="headerlink" title="Vue3大事件_准备"></a>Vue3大事件_准备</h1><p>本项目的技术栈 本项目技术栈基于 <a href="http://es6.ruanyifeng.com/">ES6</a>、<a href="https://cn.vuejs.org/index.html">vue3</a>、<a href="https://pinia.web3doc.top/">pinia</a>、<a href="https://router.vuejs.org/">vue-router</a> 、vite 、axios 和 <a href="https://element-plus.org/">element-plus</a></p><p><img src="/assets/image-20231005083233815.png" alt="image-20231005083233815"></p><h2 id="pnpm-包管理器-创建项目"><a href="#pnpm-包管理器-创建项目" class="headerlink" title="pnpm 包管理器 - 创建项目"></a>pnpm 包管理器 - 创建项目</h2><p>一些优势：比同类工具快 2倍 左右、节省磁盘空间… <a href="https://www.pnpm.cn/">https://www.pnpm.cn/</a></p><p>安装方式：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">npm <span class="hljs-keyword">install</span> -g pnpm<br></code></pre></td></tr></table></figure><p>创建项目：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">pnpm create vue</span><br></code></pre></td></tr></table></figure><p><img src="/assets/image-20231012212012142.png" alt="image-20231012212012142"></p><p><img src="/assets/image-20231005084453557.png" alt="image-20231005084453557"></p><h2 id="ESLint-prettier-配置代码风格"><a href="#ESLint-prettier-配置代码风格" class="headerlink" title="ESLint &amp; prettier 配置代码风格"></a>ESLint &amp; prettier 配置代码风格</h2><p><strong>环境同步：</strong></p><ol><li><strong>安装了插件 ESlint，开启保存自动修复</strong></li><li><strong>禁用了插件 Prettier，并关闭保存自动格式化</strong></li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">// ESlint插件 + Vscode配置 实现自动格式化修复</span><br><span class="hljs-string">&quot;editor.codeActionsOnSave&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;source.fixAll&quot;</span>: <span class="hljs-literal">true</span><br>&#125;,<br><span class="hljs-string">&quot;editor.formatOnSave&quot;</span>: <span class="hljs-literal">false</span>,<br></code></pre></td></tr></table></figure><p><strong>配置文件 .eslintrc.cjs</strong></p><ol><li><p>prettier 风格配置 <a href="https://prettier.io/docs/en/options.html">https://prettier.io </a> 可用于格式化代码</p><ol><li><p>单引号</p></li><li><p>不使用分号</p></li><li><p>每行宽度至多80字符</p></li><li><p>不加对象|数组最后逗号</p></li><li><p>换行符号不限制（win mac 不一致）</p><p>Eslint作用于规范纠错</p></li></ol></li><li><p>vue组件名称多单词组成（忽略index.vue）</p></li><li><p>props解构（关闭）因为结构会丢失响应！！！</p></li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-attr">rules</span>: &#123;<br>  <span class="hljs-string">&#x27;prettier/prettier&#x27;</span>: [<br>    <span class="hljs-string">&#x27;warn&#x27;</span>,<br>    &#123;<br>      <span class="hljs-attr">singleQuote</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 单引号</span><br>      <span class="hljs-attr">semi</span>: <span class="hljs-literal">false</span>, <span class="hljs-comment">// 无分号</span><br>      <span class="hljs-attr">printWidth</span>: <span class="hljs-number">80</span>, <span class="hljs-comment">// 每行宽度至多80字符</span><br>      <span class="hljs-attr">trailingComma</span>: <span class="hljs-string">&#x27;none&#x27;</span>, <span class="hljs-comment">// 不加对象|数组最后逗号</span><br>      <span class="hljs-attr">endOfLine</span>: <span class="hljs-string">&#x27;auto&#x27;</span> <span class="hljs-comment">// 换行符号不限制（win mac 不一致）</span><br>    &#125;<br>  ],<br>  <span class="hljs-string">&#x27;vue/multi-word-component-names&#x27;</span>: [<br>    <span class="hljs-string">&#x27;warn&#x27;</span>,<br>    &#123;<br>      <span class="hljs-attr">ignores</span>: [<span class="hljs-string">&#x27;index&#x27;</span>] <span class="hljs-comment">// vue组件名称多单词组成（忽略index.vue）</span><br>    &#125;<br>  ],<br>  <span class="hljs-string">&#x27;vue/no-setup-props-destructure&#x27;</span>: [<span class="hljs-string">&#x27;off&#x27;</span>], <span class="hljs-comment">// 关闭 props 解构的校验</span><br>  <span class="hljs-comment">// 💡 添加未定义变量错误提示，create-vue@3.6.3 关闭，这里加上是为了支持下一个章节演示。</span><br>  <span class="hljs-string">&#x27;no-undef&#x27;</span>: <span class="hljs-string">&#x27;error&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20231012214633325.png" alt="image-20231012214633325"></p><p><img src="/assets/image-20231005100313666.png" alt="image-20231005100313666"></p><p><img src="/assets/image-20231005100556863.png" alt="image-20231005100556863"></p><p><img src="/assets/image-20231005100852778.png" alt="image-20231005100852778"></p><h2 id="基于-husky-的代码检查工作流"><a href="#基于-husky-的代码检查工作流" class="headerlink" title="基于 husky  的代码检查工作流"></a>基于 husky  的代码检查工作流</h2><p><strong>保证提交代码之前代码的规范</strong></p><p>husky 是一个git hooks工具  ( git的钩子工具，可以在特定时机执行特定的命令 )</p><h2 id="husky-配置"><a href="#husky-配置" class="headerlink" title="husky 配置"></a>husky 配置</h2><ol><li><p>git初始化 </p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs csharp">git <span class="hljs-keyword">init</span><br>添加当前项目的所有文件<br>git <span class="hljs-keyword">add</span> .<br>提交添加的文件<br>git commit<br></code></pre></td></tr></table></figure></li><li><p>初始化 husky 工具配置  <a href="https://typicode.github.io/husky/">https://typicode.github.io/husky/</a></p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmake">pnpm dlx husky-init <br>pnpm <span class="hljs-keyword">install</span><br></code></pre></td></tr></table></figure></li><li><p>修改 .husky&#x2F;pre-commit 文件</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">pnpm</span> lint -m <span class="hljs-string">&#x27;备注&#x27;</span><br></code></pre></td></tr></table></figure><p><img src="/assets/image-20231005104613593.png" alt="image-20231005104613593"></p><p><img src="/assets/image-20231005104757819.png" alt="image-20231005104757819"></p></li></ol><p><strong>问题：</strong>默认进行的是全量检查，耗时问题，历史问题。</p><h2 id="lint-staged-配置"><a href="#lint-staged-配置" class="headerlink" title="lint-staged 配置"></a>lint-staged 配置</h2><ol><li>安装</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx">pnpm i lint-staged -D<br></code></pre></td></tr></table></figure><ol start="2"><li>配置 <code>package.json</code></li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&#123;<br>  <span class="hljs-comment">// ... 省略 ...</span><br>  <span class="hljs-string">&quot;lint-staged&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;*.&#123;js,ts,vue&#125;&quot;</span>: [<br>      <span class="hljs-string">&quot;eslint --fix&quot;</span><br>    ]<br>  &#125;<br>&#125;<br><br>&#123;<br>  <span class="hljs-string">&quot;scripts&quot;</span>: &#123;<br>    <span class="hljs-comment">// ... 省略 ...</span><br>    <span class="hljs-string">&quot;lint-staged&quot;</span>: <span class="hljs-string">&quot;lint-staged&quot;</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20231005111855012.png" alt="image-20231005111855012"></p><p><img src="/assets/image-20231005120727029.png" alt="image-20231005120727029"></p><ol start="3"><li>修改 .husky&#x2F;pre-commit 文件</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx">pnpm lint-staged<br></code></pre></td></tr></table></figure><h2 id="调整项目目录"><a href="#调整项目目录" class="headerlink" title="调整项目目录"></a>调整项目目录</h2><p>默认生成的目录结构不满足我们的开发需求，所以这里需要做一些自定义改动。主要是两个工作：</p><ul><li>删除初始化的默认文件</li><li>修改剩余代码内容</li><li>新增调整我们需要的目录结构</li><li>拷贝初始化资源文件，安装预处理器插件</li></ul><ol><li><p>删除文件</p></li><li><p>修改内容</p></li></ol><p><code>src/router/index.js</code></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; createRouter, createWebHistory &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span><br><br><span class="hljs-keyword">const</span> router = <span class="hljs-title function_">createRouter</span>(&#123;<br>  <span class="hljs-attr">history</span>: <span class="hljs-title function_">createWebHistory</span>(<span class="hljs-keyword">import</span>.<span class="hljs-property">meta</span>.<span class="hljs-property">env</span>.<span class="hljs-property">BASE_URL</span>),<br>  <span class="hljs-attr">routes</span>: []<br>&#125;)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> router<br></code></pre></td></tr></table></figure><p><code>src/App.vue</code></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;script setup&gt;&lt;/script&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p><code>src/main.js</code></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; createApp &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> &#123; createPinia &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;pinia&#x27;</span><br><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App.vue&#x27;</span><br><span class="hljs-keyword">import</span> router <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./router&#x27;</span><br><br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">createApp</span>(<span class="hljs-title class_">App</span>)<br><br>app.<span class="hljs-title function_">use</span>(<span class="hljs-title function_">createPinia</span>())<br>app.<span class="hljs-title function_">use</span>(router)<br>app.<span class="hljs-title function_">mount</span>(<span class="hljs-string">&#x27;#app&#x27;</span>)<br></code></pre></td></tr></table></figure><ol start="3"><li><p>新增需要目录 api  utils</p></li><li><p>将项目需要的全局样式 和 图片文件，复制到 assets 文件夹中,  并将全局样式在main.js中引入</p></li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;@/assets/main.scss&#x27;</span><br></code></pre></td></tr></table></figure><ul><li>安装 sass 依赖</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx">pnpm add sass -D<br></code></pre></td></tr></table></figure><h2 id="VueRouter4-路由代码解析"><a href="#VueRouter4-路由代码解析" class="headerlink" title="VueRouter4 路由代码解析"></a>VueRouter4 路由代码解析</h2><p>基础代码解析</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; createRouter, createWebHistory &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span><br><br><span class="hljs-comment">// createRouter 创建路由实例，===&gt; new VueRouter()</span><br><span class="hljs-comment">// 1. history模式: createWebHistory()   http://xxx/user</span><br><span class="hljs-comment">// 2. hash模式: createWebHashHistory()  http://xxx/#/user</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">hash模式</span><br><span class="hljs-comment">优点</span><br><span class="hljs-comment">兼容性强，兼容性达到了IE8</span><br><span class="hljs-comment">除发送ajax和资源请求外不会发送其他多余请求</span><br><span class="hljs-comment">改变#后的路径、不会自动刷新页面</span><br><span class="hljs-comment">无需服务端进行配合</span><br><span class="hljs-comment">缺点</span><br><span class="hljs-comment">访问路径上包含#,不美观</span><br><span class="hljs-comment">对于需要锚点功能的需求会与当前路由机制发生冲突</span><br><span class="hljs-comment">重定向操作时，后段无法获取url完整路径。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">history模式</span><br><span class="hljs-comment">优点</span><br><span class="hljs-comment">符合url地址规范, 不需要#, 使用起来比较美观</span><br><span class="hljs-comment">可以使用history.state获取完整的路由信息</span><br><span class="hljs-comment">后端可以获取到完整的路由信息</span><br><span class="hljs-comment">缺点</span><br><span class="hljs-comment">兼容性只到IE10</span><br><span class="hljs-comment">改变url路径后、会重新请求资源。</span><br><span class="hljs-comment">若访问的路由地址不存在时、会报404,需服务端配合支持重定向返回统一的404页面。</span><br><span class="hljs-comment">*/</span><br><br><br><span class="hljs-comment">// vite 的配置 import.meta.env.BASE_URL 是路由的基准地址，默认是 ’/‘</span><br><span class="hljs-comment">// https://vitejs.dev/guide/build.html#public-base-path</span><br><br><span class="hljs-comment">// 如果将来你部署的域名路径是：http://xxx/my-path/user</span><br><span class="hljs-comment">// vite.config.ts  添加配置  base: my-path，路由这就会加上 my-path 前缀了</span><br><br><span class="hljs-keyword">const</span> router = <span class="hljs-title function_">createRouter</span>(&#123;<br>    <span class="hljs-comment">//此处的import.meta.env.BASE_URL为动态值，设置根目录可以在</span><br>  <span class="hljs-attr">history</span>: <span class="hljs-title function_">createWebHistory</span>(<span class="hljs-keyword">import</span>.<span class="hljs-property">meta</span>.<span class="hljs-property">env</span>.<span class="hljs-property">BASE_URL</span>),<br>  <span class="hljs-attr">routes</span>: []<br>&#125;)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> router<br></code></pre></td></tr></table></figure><p>import.meta.env.BASE_URL 是Vite 环境变量：<a href="https://cn.vitejs.dev/guide/env-and-mode.html">https://cn.vitejs.dev/guide/env-and-mode.html</a></p><p><code>App.vue</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script setup&gt;<br>import &#123; useRoute, useRouter &#125; from &quot;vue-router&quot;;<br>// 获取路由对象<br>const router = useRouter()<br>// 获取路由参数<br>const route = useRoute()<br>const goList = () =&gt; &#123;<br>  // 跳转路径<br>  router.push(&#x27;/goList&#x27;)<br>  console.log(route)<br>&#125;<br>&lt;/script&gt;<br>&lt;template&gt;<br>  &lt;div&gt;<br>    hello<br>    &lt;button @click=&quot;$router.push(&#x27;/home&#x27;)&quot;&gt;首页&lt;/button&gt;<br>    &lt;button @click=&quot;goList&quot;&gt;goList&lt;/button&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;style scoped&gt;&lt;/style&gt;<br><br></code></pre></td></tr></table></figure><p><code>router/index.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; createRouter, createWebHistory &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span><br><br><span class="hljs-keyword">const</span> router = <span class="hljs-title function_">createRouter</span>(&#123;<br>    <span class="hljs-comment">//环境变量import.meta.env.BASE_URL为动态根目录，可在vite.config.js中配置</span><br>  <span class="hljs-attr">history</span>: <span class="hljs-title function_">createWebHistory</span>(<span class="hljs-keyword">import</span>.<span class="hljs-property">meta</span>.<span class="hljs-property">env</span>.<span class="hljs-property">BASE_URL</span>),<br>  <span class="hljs-attr">routes</span>: []<br>&#125;)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> router<br></code></pre></td></tr></table></figure><p><code>vite.config.js</code></p><p><img src="/assets/image-20231005135443127.png" alt="image-20231005135443127"></p><p><img src="/assets/image-20231012223002355.png" alt="image-20231012223002355"></p><h2 id="引入-element-ui-组件库"><a href="#引入-element-ui-组件库" class="headerlink" title="引入 element-ui 组件库"></a>引入 element-ui 组件库</h2><p><strong>官方文档：</strong> <a href="https://element-plus.org/zh-CN/">https://element-plus.org/zh-CN/</a></p><p><a href="https://element-plus.org/zh-CN/guide/installation.html#%E4%BD%BF%E7%94%A8%E5%8C%85%E7%AE%A1%E7%90%86%E5%99%A8">安装 | Element Plus (element-plus.org)</a></p><ul><li>安装</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx">$ pnpm add element-plus<br></code></pre></td></tr></table></figure><p>建议<strong>自动按需：</strong></p><ol><li>安装插件</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx">pnpm add -D unplugin-vue-components unplugin-auto-<span class="hljs-keyword">import</span><br></code></pre></td></tr></table></figure><ol start="2"><li>然后把下列代码插入到你的 <code>Vite</code>的配置文件<code>vite.config.js</code>中</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs jsx">...<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">AutoImport</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;unplugin-auto-import/vite&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Components</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;unplugin-vue-components/vite&#x27;</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">ElementPlusResolver</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;unplugin-vue-components/resolvers&#x27;</span><br><br><span class="hljs-comment">// https://vitejs.dev/config/</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">defineConfig</span>(&#123;<br>  <span class="hljs-attr">plugins</span>: [<br>    ...<br>    <span class="hljs-title class_">AutoImport</span>(&#123;<br>      <span class="hljs-attr">resolvers</span>: [<span class="hljs-title class_">ElementPlusResolver</span>()]<br>    &#125;),<br>    <span class="hljs-title class_">Components</span>(&#123;<br>      <span class="hljs-attr">resolvers</span>: [<span class="hljs-title class_">ElementPlusResolver</span>()]<br>    &#125;)<br>  ]<br>&#125;)<br></code></pre></td></tr></table></figure><ol start="3"><li>直接使用</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;primary&quot;</span>&gt;</span>Primary<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;success&quot;</span>&gt;</span>Success<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;info&quot;</span>&gt;</span>Info<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;warning&quot;</span>&gt;</span>Warning<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;danger&quot;</span>&gt;</span>Danger<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span></span><br><span class="language-xml">    ...</span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20231005140341537.png" alt="image-20231005140341537"></p><h2 id="Pinia-构建用户仓库-和-持久化"><a href="#Pinia-构建用户仓库-和-持久化" class="headerlink" title="Pinia - 构建用户仓库 和 持久化"></a>Pinia - 构建用户仓库 和 持久化</h2><p>官方文档：<a href="https://prazdevs.github.io/pinia-plugin-persistedstate/zh/">https://prazdevs.github.io/pinia-plugin-persistedstate/zh/</a></p><ol><li>安装插件 pinia-plugin-persistedstate</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx">pnpm add pinia-plugin-persistedstate -D<br></code></pre></td></tr></table></figure><ol start="2"><li>使用 main.js</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> persist <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;pinia-plugin-persistedstate&#x27;</span><br>...<br>app.<span class="hljs-title function_">use</span>(<span class="hljs-title function_">createPinia</span>().<span class="hljs-title function_">use</span>(persist))<br></code></pre></td></tr></table></figure><ol start="3"><li>配置 stores&#x2F;user.js</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; defineStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;pinia&#x27;</span><br><span class="hljs-keyword">import</span> &#123; ref &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><br><span class="hljs-comment">// 用户模块</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> useUserStore = <span class="hljs-title function_">defineStore</span>(<br>  <span class="hljs-string">&#x27;big-user&#x27;</span>,<br>  <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> token = <span class="hljs-title function_">ref</span>(<span class="hljs-string">&#x27;&#x27;</span>) <span class="hljs-comment">// 定义 token</span><br>    <span class="hljs-keyword">const</span> <span class="hljs-title function_">setToken</span> = (<span class="hljs-params">t</span>) =&gt; (token.<span class="hljs-property">value</span> = t) <span class="hljs-comment">// 设置 token</span><br><br>    <span class="hljs-keyword">return</span> &#123; token, setToken &#125;<br>  &#125;,<br>    <span class="hljs-comment">//关键语句</span><br>  &#123;<br>    <span class="hljs-attr">persist</span>: <span class="hljs-literal">true</span> <span class="hljs-comment">// 持久化</span><br>  &#125;<br>)<br><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; defineStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;pinia&#x27;</span><br><span class="hljs-keyword">import</span> &#123; ref &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-comment">// 用户模块 token setToken removeToken</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> useUserStore = <span class="hljs-title function_">defineStore</span>(<br>  <span class="hljs-string">&#x27;big-user&#x27;</span>,<br>  <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> token = <span class="hljs-title function_">ref</span>(<span class="hljs-string">&#x27;&#x27;</span>)<br>    <span class="hljs-keyword">const</span> <span class="hljs-title function_">setToken</span> = (<span class="hljs-params">newToken</span>) =&gt; &#123;<br>      token.<span class="hljs-property">value</span> = newToken<br>    &#125;<br>    <span class="hljs-keyword">const</span> <span class="hljs-title function_">removeToken</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>      token.<span class="hljs-property">value</span> = <span class="hljs-string">&#x27;&#x27;</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> &#123;<br>      token,<br>      setToken,<br>      removeToken<br>    &#125;<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">persist</span>: <span class="hljs-literal">true</span><br>  &#125;<br>)<br><br></code></pre></td></tr></table></figure><h2 id="Pinia-配置仓库统一管理"><a href="#Pinia-配置仓库统一管理" class="headerlink" title="Pinia - 配置仓库统一管理"></a>Pinia - 配置仓库统一管理</h2><h3 id="pinia-独立维护"><a href="#pinia-独立维护" class="headerlink" title="pinia 独立维护"></a>pinia 独立维护</h3><ul><li><p>现在：初始化代码在 main.js 中，仓库代码在 stores 中，代码分散职能不单一</p></li><li><p>优化：由 stores 统一维护，在 stores&#x2F;index.js 中完成 pinia 初始化，交付 main.js 使用</p></li></ul><p><code>stores/index.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; createPinia &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;pinia&#x27;</span><br><span class="hljs-keyword">import</span> persist <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;pinia-plugin-persistedstate&#x27;</span><br><br><span class="hljs-keyword">const</span> pinia = <span class="hljs-title function_">createPinia</span>()<br>pinia.<span class="hljs-title function_">use</span>(persist)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> pinia<br></code></pre></td></tr></table></figure><p><code>main.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; createApp &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App.vue&#x27;</span><br><span class="hljs-keyword">import</span> router <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./router&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;@/assets/main.scss&#x27;</span><br><span class="hljs-keyword">import</span> pinia <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/stores/index&#x27;</span><br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">createApp</span>(<span class="hljs-title class_">App</span>)<br><br>app.<span class="hljs-title function_">use</span>(pinia)<br>app.<span class="hljs-title function_">use</span>(router)<br><br>app.<span class="hljs-title function_">mount</span>(<span class="hljs-string">&#x27;#app&#x27;</span>)<br><br></code></pre></td></tr></table></figure><p><img src="/assets/image-20231012235709276.png" alt="image-20231012235709276"></p><p><img src="/assets/image-20231012235642079.png" alt="image-20231012235642079"></p><h3 id="仓库统一导出"><a href="#仓库统一导出" class="headerlink" title="仓库统一导出"></a>仓库统一导出</h3><p>- 优化之前：使用一个仓库 <code>import &#123; useUserStore &#125; from ./stores/user.js</code> 不同仓库路径不一致，代码冗余</p><p>- 优化：由 stores&#x2F;index.js 统一导出，导入路径统一 <code>./stores</code>，而且仓库维护在 stores&#x2F;modules 中</p><p><img src="/assets/image-20231005150133144.png" alt="image-20231005150133144"></p><p><code>stores/index.js</code></p><p><img src="/assets/image-20231013000728032.png" alt="image-20231013000728032"></p><p><img src="/assets/image-20231013000824892.png" alt="image-20231013000824892"></p><h2 id="数据交互-请求工具设计"><a href="#数据交互-请求工具设计" class="headerlink" title="数据交互 - 请求工具设计"></a>数据交互 - 请求工具设计</h2><p><img src="/assets/image-20231005150357774.png" alt="image-20231005150357774"></p><h3 id="创建-axios-实例"><a href="#创建-axios-实例" class="headerlink" title="创建 axios 实例"></a>创建 axios 实例</h3><p>使用 axios 来请求后端接口, 一般都会对 axios 进行一些配置 (比如: 配置基础地址等)</p><p>一般项目开发中, 都会对 axios 进行基本的二次封装, 单独封装到一个模块中, 便于使用</p><ol><li>安装 axios</li></ol><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">pnpm <span class="hljs-built_in">add</span> axios<br></code></pre></td></tr></table></figure><ol start="2"><li><p>新建 <code>utils/request.js</code> 封装 axios 模块</p><p>利用 axios.create 创建一个自定义的 axios 来使用</p><p><a href="http://www.axios-js.com/zh-cn/docs/#axios-create-config">http://www.axios-js.com/zh-cn/docs/#axios-create-config</a></p></li><li><p>盲写模板</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;axios&#x27;</span><br><br><span class="hljs-keyword">const</span> baseURL = <span class="hljs-string">&#x27;api-url&#x27;</span><br><br><span class="hljs-keyword">const</span> instance = axios.<span class="hljs-title function_">create</span>(&#123;<br>  <span class="hljs-comment">// TODO 1. 基础地址，超时时间</span><br>  baseURL,<br>  <span class="hljs-attr">timeout</span>: <span class="hljs-number">10000</span><br>&#125;)<br><br>instance.<span class="hljs-property">interceptors</span>.<span class="hljs-property">request</span>.<span class="hljs-title function_">use</span>(<br>  <span class="hljs-function">(<span class="hljs-params">config</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// TODO 2. 携带token</span><br>    <span class="hljs-keyword">return</span> config<br>  &#125;,<br>  <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>(err)<br>)<br><br>instance.<span class="hljs-property">interceptors</span>.<span class="hljs-property">response</span>.<span class="hljs-title function_">use</span>(<br>  <span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// TODO 3. 处理业务失败</span><br>    <span class="hljs-comment">// TODO 4. 摘取核心响应数据</span><br>    <span class="hljs-keyword">return</span> res<br>  &#125;,<br>  <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// TODO 5. 处理401错误</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>(err)<br>  &#125;<br>)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> instance<br><span class="hljs-keyword">export</span> &#123; baseURL &#125;<br><br></code></pre></td></tr></table></figure></li></ol><p>需要掌握盲写技能！！！</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;axios&#x27;</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">ElMessage</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;element-plus&#x27;</span><br><span class="hljs-keyword">import</span> router <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/router&#x27;</span><br><span class="hljs-keyword">import</span> &#123; useUserStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/stores&#x27;</span><br><br><span class="hljs-keyword">const</span> baseURL = <span class="hljs-string">&#x27;https://big-event-vue-api-t.itheima.net&#x27;</span><br><br><span class="hljs-keyword">const</span> instance = axios.<span class="hljs-title function_">create</span>(&#123;<br>  <span class="hljs-comment">// TODO 1. 基础地址，超时时间</span><br>  baseURL,<br>  <span class="hljs-attr">timeout</span>: <span class="hljs-number">10000</span><br>&#125;)<br><br>instance.<span class="hljs-property">interceptors</span>.<span class="hljs-property">request</span>.<span class="hljs-title function_">use</span>(<br>  <span class="hljs-function">(<span class="hljs-params">config</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// TODO 2. 携带token</span><br>    <span class="hljs-keyword">const</span> userStore = <span class="hljs-title function_">useUserStore</span>()<br>    <span class="hljs-keyword">if</span> (userStore.<span class="hljs-property">token</span>) &#123;<br>      <span class="hljs-comment">//   让请求头携带token</span><br>      config.<span class="hljs-property">headers</span>.<span class="hljs-property">Authorization</span> = userStore.<span class="hljs-property">token</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> config<br>  &#125;,<br>  <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>(err)<br>)<br><br>instance.<span class="hljs-property">interceptors</span>.<span class="hljs-property">response</span>.<span class="hljs-title function_">use</span>(<br>  <span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// TODO 3. 处理业务失败</span><br>    <span class="hljs-comment">// TODO 4. 摘取核心响应数据</span><br>    <span class="hljs-keyword">if</span> (res.<span class="hljs-property">data</span>.<span class="hljs-property">code</span> === <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-comment">//   根据后台反馈数据，返回成功响应</span><br>      <span class="hljs-keyword">return</span> res<br>    &#125;<br>    <span class="hljs-comment">// 处理失败业务，提示</span><br>    <span class="hljs-title class_">ElMessage</span>.<span class="hljs-title function_">error</span>(res.<span class="hljs-property">data</span>.<span class="hljs-property">message</span> || <span class="hljs-string">&#x27;服务异常&#x27;</span>)<br>    <span class="hljs-comment">// 抛出错误</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>(res.<span class="hljs-property">data</span>)<br>  &#125;,<br>  <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// TODO 5. 处理401错误</span><br>    <span class="hljs-comment">// 错误的特殊情况 401权限不足 或token过期 =&gt; 拦截到登录 ?. 可选链的写法 只有前面的值存在才会执行下去</span><br>    <span class="hljs-keyword">if</span> (err.<span class="hljs-property">response</span>?.<span class="hljs-property">status</span> === <span class="hljs-number">401</span>) &#123;<br>      router.<span class="hljs-title function_">push</span>(<span class="hljs-string">&#x27;/login&#x27;</span>)<br>    &#125;<br>    <span class="hljs-comment">// 错误的默认情况 =&gt; 只提示</span><br>    <span class="hljs-title class_">ElMessage</span>.<span class="hljs-title function_">error</span>(err.<span class="hljs-property">response</span>.<span class="hljs-property">data</span>.<span class="hljs-property">message</span> || <span class="hljs-string">&#x27;服务异常&#x27;</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>(err)<br>  &#125;<br>)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> instance<br><span class="hljs-keyword">export</span> &#123; baseURL &#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>拓展</p><p>?.是 JavaScript 中的一个新操作符，它被称为“可选链操作符”，作用是在访问对象的属性或调用对象的方法时，首先检查该对象是否为 null 或 undefined，如果是 null 或 undefined，就不会引发错误，而是返回 undefined</p></blockquote><h2 id="首页整体路由设计"><a href="#首页整体路由设计" class="headerlink" title="首页整体路由设计"></a>首页整体路由设计</h2><p><strong>实现目标:</strong></p><ul><li>完成整体路由规划【搞清楚要做几个页面，它们分别在哪个路由下面，怎么跳转的…..】</li><li>通过观察,  点击左侧导航,  右侧区域在切换,  那右侧区域内容一直在变,  那这个地方就是一个路由的出口</li><li>我们需要搭建嵌套路由</li></ul><p>目标：</p><ul><li>把项目中所有用到的组件及路由表, 约定下来</li></ul><p><strong>约定路由规则</strong></p><table><thead><tr><th>path</th><th>文件</th><th>功能</th><th>组件名</th><th>路由级别</th></tr></thead><tbody><tr><td>&#x2F;login</td><td>views&#x2F;login&#x2F;LoginPage.vue</td><td>登录&amp;注册</td><td>LoginPage</td><td>一级路由</td></tr><tr><td>&#x2F;</td><td>views&#x2F;layout&#x2F;LayoutContainer.vue</td><td>布局架子</td><td>LayoutContainer</td><td>一级路由</td></tr><tr><td>├─ &#x2F;article&#x2F;manage</td><td>views&#x2F;article&#x2F;ArticleManage.vue</td><td>文章管理</td><td>ArticleManage</td><td>二级路由</td></tr><tr><td>├─ &#x2F;article&#x2F;channel</td><td>views&#x2F;article&#x2F;ArticleChannel.vue</td><td>频道管理</td><td>ArticleChannel</td><td>二级路由</td></tr><tr><td>├─ &#x2F;user&#x2F;profile</td><td>views&#x2F;user&#x2F;UserProfile.vue</td><td>个人详情</td><td>UserProfile</td><td>二级路由</td></tr><tr><td>├─ &#x2F;user&#x2F;avatar</td><td>views&#x2F;user&#x2F;UserAvatar.vue</td><td>更换头像</td><td>UserAvatar</td><td>二级路由</td></tr><tr><td>├─ &#x2F;user&#x2F;password</td><td>views&#x2F;user&#x2F;UserPassword.vue</td><td>重置密码</td><td>UserPassword</td><td>二级路由</td></tr></tbody></table><p>明确了路由规则，可以全部配完，也可以边写边配。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; createRouter, createWebHistory &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span><br><br><span class="hljs-keyword">const</span> router = <span class="hljs-title function_">createRouter</span>(&#123;<br>  <span class="hljs-attr">history</span>: <span class="hljs-title function_">createWebHistory</span>(<span class="hljs-keyword">import</span>.<span class="hljs-property">meta</span>.<span class="hljs-property">env</span>.<span class="hljs-property">BASE_URL</span>),<br>  <span class="hljs-attr">routes</span>: [<br>    &#123;<br>      <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/login&#x27;</span>,<br>      <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;@/views/login/LoginPage.vue&#x27;</span>)<br>    &#125;,<br>    &#123;<br>      <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/&#x27;</span>,<br>      <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;@/views/layout/LayoutContainer.vue&#x27;</span>),<br>      <span class="hljs-attr">redirect</span>: <span class="hljs-string">&#x27;/article/manage&#x27;</span>,<br>      <span class="hljs-attr">children</span>: [<br>        &#123;<br>          <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/article/manage&#x27;</span>,<br>          <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;@/views/article/ArticalManage.vue&#x27;</span>)<br>        &#125;,<br>        &#123;<br>          <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/article/channel&#x27;</span>,<br>          <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;@/views/article/ArticalChannel.vue&#x27;</span>)<br>        &#125;,<br>        &#123;<br>          <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/user/profile&#x27;</span>,<br>          <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;@/views/user/UserProfile.vue&#x27;</span>)<br>        &#125;,<br>        &#123;<br>          <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/user/avatar&#x27;</span>,<br>          <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;@/views/user/UserAvatar.vue&#x27;</span>)<br>        &#125;,<br>        &#123;<br>          <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/user/password&#x27;</span>,<br>          <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;@/views/user/UserPassword.vue&#x27;</span>)<br>        &#125;<br>      ]<br>    &#125;<br>  ]<br>&#125;)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> router<br><br></code></pre></td></tr></table></figure><p><img src="/assets/image-20231005202202773.png" alt="image-20231005202202773"></p><p><img src="/assets/image-20231005195655533.png" alt="image-20231005195655533"></p><p><img src="/assets/image-20231005202216107.png" alt="image-20231005202216107"></p><p><img src="/assets/image-20231005202223565.png" alt="image-20231005202223565"></p>]]></content>
    
    
    <categories>
      
      <category>Vue3</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>4_Pinia入门</title>
    <link href="/2023/10/04/Vue3/4_Pinia%E5%85%A5%E9%97%A8/"/>
    <url>/2023/10/04/Vue3/4_Pinia%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="Pinia入门"><a href="#Pinia入门" class="headerlink" title="Pinia入门"></a>Pinia入门</h1><h2 id="什么是Pinia"><a href="#什么是Pinia" class="headerlink" title="什么是Pinia"></a>什么是Pinia</h2><p>Pinia 是 Vue 的专属的最新状态管理库 ，是 Vuex 状态管理工具的替代品</p><p><img src="/assets/image-20231004104341491.png" alt="image-20231004104341491"></p><h2 id="手动添加Pinia到Vue项目"><a href="#手动添加Pinia到Vue项目" class="headerlink" title="手动添加Pinia到Vue项目"></a>手动添加Pinia到Vue项目</h2><ol><li>使用 Vite 创建一个空的 Vue3项目</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm init vite@latest<br></code></pre></td></tr></table></figure><ol start="2"><li>按照官方文档安装 pinia 到项目中</li></ol><p><a href="https://pinia.web3doc.top/introduction.html">介绍 | Pinia 中文文档 (web3doc.top)</a></p><h2 id="Pinia基础使用"><a href="#Pinia基础使用" class="headerlink" title="Pinia基础使用"></a>Pinia基础使用</h2><ol><li>定义store</li><li>组件使用store</li></ol><p>counter.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123;defineStore&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;pinia&quot;</span>;<br><span class="hljs-keyword">import</span> &#123;ref&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> store = <span class="hljs-title function_">defineStore</span>(<span class="hljs-string">&#x27;counter&#x27;</span>,<span class="hljs-function">()=&gt;</span>&#123;<br>    <span class="hljs-keyword">const</span> count = <span class="hljs-title function_">ref</span>(<span class="hljs-number">10086</span>)<br>    <span class="hljs-keyword">const</span> msg = <span class="hljs-title function_">ref</span>(<span class="hljs-string">&#x27;hello pinia&#x27;</span>)<br>    <span class="hljs-keyword">return</span>&#123;<br>        count,<br>        msg<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>App.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script setup&gt;<br>import Son1Com from &quot;@/components/Son1Com.vue&quot;;<br>import Son2Com from &quot;@/components/Son2Com.vue&quot;;<br>import &#123;store&#125; from &#x27;@/store/counter&#x27;<br>const counterStore = store()<br>console.log(counterStore)<br>&lt;/script&gt;<br><br>&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;h1&gt;App.vue根组件 - &#123;&#123;counterStore.msg&#125;&#125; - &#123;&#123;counterStore.count&#125;&#125;&lt;/h1&gt;<br><br>    &lt;Son1Com/&gt;<br>    &lt;Son2Com/&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;style scoped&gt;<br><br>&lt;/style&gt;<br><br></code></pre></td></tr></table></figure><p><img src="/assets/image-20231004120508829.png" alt="image-20231004120508829"></p><ol start="3"><li>如何对数据增删改？</li></ol><p>在counter.js中定义方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123;defineStore&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;pinia&quot;</span>;<br><span class="hljs-keyword">import</span> &#123;ref&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> store = <span class="hljs-title function_">defineStore</span>(<span class="hljs-string">&#x27;counter&#x27;</span>,<span class="hljs-function">()=&gt;</span>&#123;<br>    <span class="hljs-keyword">const</span> count = <span class="hljs-title function_">ref</span>(<span class="hljs-number">10086</span>)<br>    <span class="hljs-keyword">const</span> msg = <span class="hljs-title function_">ref</span>(<span class="hljs-string">&#x27;hello pinia&#x27;</span>)<br>    <span class="hljs-comment">//关键代码</span><br>    <span class="hljs-keyword">const</span> <span class="hljs-title function_">addCount</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>        count.<span class="hljs-property">value</span> ++<br>    &#125;<br>    <span class="hljs-keyword">const</span> <span class="hljs-title function_">subCount</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>        count.<span class="hljs-property">value</span> --<br>    &#125;<br>    <span class="hljs-keyword">return</span>&#123;<br>        count,<br>        msg,<br>        addCount,<br>        subCount<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>Son1Com.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script setup&gt;<br>import &#123;store&#125; from &quot;@/store/counter&quot;;<br>const counterStore = store()<br>&lt;/script&gt;<br><br>&lt;template&gt;<br>&lt;div&gt;<br>  &lt;h2&gt;我是son1com - &#123;&#123;counterStore.count&#125;&#125; - &lt;/h2&gt;<br>  &lt;button @click=&quot;counterStore.addCount()&quot;&gt;+&lt;/button&gt;<br>&lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;style scoped&gt;<br><br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20231004121756079.png" alt="image-20231004121756079"></p><h2 id="getters实现"><a href="#getters实现" class="headerlink" title="getters实现"></a>getters实现</h2><p>Pinia中的 getters 直接使用 computed函数 进行模拟, 组件中需要使用需要把 getters return出去</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// getters 其实就是computed</span><br><span class="hljs-keyword">const</span> doubleCount = <span class="hljs-title function_">computed</span>(<span class="hljs-function">() =&gt;</span> count.<span class="hljs-property">value</span> * <span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><h2 id="action异步实现"><a href="#action异步实现" class="headerlink" title="action异步实现"></a>action异步实现</h2><p>方式：异步action函数的写法和组件中获取异步数据的写法完全一致</p><ul><li><p>接口地址：<a href="http://geek.itheima.net/v1_0/channels">http://geek.itheima.net/v1_0/channels</a></p></li><li><p>请求方式：get</p></li><li><p>请求参数：无</p></li></ul><p><img src="/assets/image-20231004132822100.png" alt="image-20231004132822100"></p><p>channel.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123;defineStore&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;pinia&quot;</span>;l<br><span class="hljs-keyword">import</span> &#123;ref&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<br><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;axios&quot;</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> useChannelStore = <span class="hljs-title function_">defineStore</span>(<span class="hljs-string">&#x27;channel&#x27;</span>,<span class="hljs-function">()=&gt;</span>&#123;<br>    <span class="hljs-comment">//     声明数据</span><br>    <span class="hljs-keyword">const</span> channelList = <span class="hljs-title function_">ref</span>([])<br>    <span class="hljs-comment">//     声明操作数据的方法</span><br>    <span class="hljs-keyword">const</span> <span class="hljs-title function_">getList</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params"></span>) =&gt; &#123;<br>        <span class="hljs-keyword">const</span> &#123;<span class="hljs-attr">data</span>:&#123; data &#125;&#125; = <span class="hljs-keyword">await</span> axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;http://geek.itheima.net/v1_0/channels&#x27;</span>)<br>        channelList.<span class="hljs-property">value</span> = data.<span class="hljs-property">channels</span><br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data.<span class="hljs-property">channels</span>)<br>    &#125;<br>    <span class="hljs-keyword">return</span>&#123;<br>        channelList,<br>        getList<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>App.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script setup&gt;<br>import &#123;useChannelStore&#125; from &quot;@/store/channel&quot;;<br>const channelStore = useChannelStore()<br>&lt;/script&gt;<br><br>&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;button @click=&quot;channelStore.getList()&quot;&gt;点击获取数据&lt;/button&gt;<br>    &#123;&#123;channelStore.channelList&#125;&#125;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;style scoped&gt;<br><br>&lt;/style&gt;<br><br></code></pre></td></tr></table></figure><p><img src="/assets/image-20231004141421799.png" alt="image-20231004141421799"></p><p>渲染页面</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script setup&gt;<br>import &#123;useChannelStore&#125; from &quot;@/store/channel&quot;;<br>const channelStore = useChannelStore()<br>&lt;/script&gt;<br><br>&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;button @click=&quot;channelStore.getList()&quot;&gt;点击获取数据&lt;/button&gt;<br>    &lt;ul&gt;<br>      &lt;li v-for=&quot;item in channelStore.channelList&quot; :key=&quot;item.id&quot;&gt;<br>        id : &#123;&#123;item.id&#125;&#125;<br>        name :&#123;&#123;item.name&#125;&#125;<br>      &lt;/li&gt;<br>    &lt;/ul&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;style scoped&gt;<br><br>&lt;/style&gt;<br><br></code></pre></td></tr></table></figure><p><img src="/assets/image-20231004142120452.png" alt="image-20231004142120452"></p><h2 id="storeToRefs工具函数"><a href="#storeToRefs工具函数" class="headerlink" title="storeToRefs工具函数"></a>storeToRefs工具函数</h2><p>使用storeToRefs函数可以辅助保持数据（state + getter）的响应式解构</p><p>如果对复杂类型的数据进行直接解构不处理，数据会丢失响应式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> counterStore = <span class="hljs-title function_">store</span>()<br><span class="hljs-keyword">const</span> &#123;count,msg&#125; = counterStore<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20231004143630704.png" alt="image-20231004143630704"></p><p><img src="/assets/image-20231004144041109.png" alt="image-20231004144041109"></p><p>正确处理:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> &#123;count,msg&#125; = <span class="hljs-title function_">storeToRefs</span>(counterStore)<br></code></pre></td></tr></table></figure><h2 id="Pinia调试"><a href="#Pinia调试" class="headerlink" title="Pinia调试"></a>Pinia调试</h2><p>Vue官方的 dev-tools 调试工具 对 Pinia直接支持，可以直接进行调试</p><p><img src="/assets/image-20231004144621430.png" alt="image-20231004144621430"></p><h2 id="Pinia持久化插件"><a href="#Pinia持久化插件" class="headerlink" title="Pinia持久化插件"></a>Pinia持久化插件</h2><p>官方文档：<a href="https://prazdevs.github.io/pinia-plugin-persistedstate/zh/">https://prazdevs.github.io/pinia-plugin-persistedstate/zh/</a></p><ol><li>安装插件 pinia-plugin-persistedstate</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx">pnpm i pinia-plugin-persistedstate<br></code></pre></td></tr></table></figure><ol start="2"><li>使用 main.js</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> persist <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;pinia-plugin-persistedstate&#x27;</span><br>...<br><span class="hljs-keyword">const</span> pinia = <span class="hljs-title function_">createPinia</span>()<br>pinia.<span class="hljs-title function_">use</span>(persist)<br>app.<span class="hljs-title function_">use</span>(pinia)<br></code></pre></td></tr></table></figure><ol start="3"><li><p>配置 store&#x2F;counter.js</p><p>默认使用localStorage进行存储，store.$id作为默认的key</p></li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; defineStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;pinia&#x27;</span><br><span class="hljs-keyword">import</span> &#123; computed, ref &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> useCounterStore = <span class="hljs-title function_">defineStore</span>(<span class="hljs-string">&#x27;counter&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  ...<br>  <span class="hljs-keyword">return</span> &#123;<br>    count,<br>    doubleCount,<br>    increment<br>  &#125;<br>&#125;, &#123;<br>    <span class="hljs-comment">//关键代码</span><br> <span class="hljs-attr">persist</span>: <span class="hljs-literal">true</span>,<br> <span class="hljs-attr">path</span>:[<span class="hljs-string">&#x27;count&#x27;</span>]<span class="hljs-comment">//只对count持久化   </span><br>&#125;)<br></code></pre></td></tr></table></figure><p>可以加对持久化（本地仓库）加key</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; defineStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;pinia&#x27;</span><br><span class="hljs-keyword">import</span> &#123; computed, ref &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> useCounterStore = <span class="hljs-title function_">defineStore</span>(<span class="hljs-string">&#x27;counter&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  ...<br>  <span class="hljs-keyword">return</span> &#123;<br>    count,<br>    doubleCount,<br>    increment<br>  &#125;<br>&#125;, &#123;<br>    <span class="hljs-comment">//关键代码</span><br> <span class="hljs-attr">persist</span>: &#123;<br>     <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;Counter&#x27;</span><br> &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>其他配置，看官网文档即可</p><p><img src="/assets/image-20231005081909160.png" alt="image-20231005081909160"></p>]]></content>
    
    
    <categories>
      
      <category>Vue3</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>3_vue3新特性</title>
    <link href="/2023/10/04/Vue3/3_vue3%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    <url>/2023/10/04/Vue3/3_vue3%E6%96%B0%E7%89%B9%E6%80%A7/</url>
    
    <content type="html"><![CDATA[<h1 id="vue3新特性"><a href="#vue3新特性" class="headerlink" title="vue3新特性"></a>vue3新特性</h1><h2 id="defineOptions"><a href="#defineOptions" class="headerlink" title="defineOptions"></a>defineOptions</h2><p>背景说明</p><blockquote><p>有 <code>&lt;script setup&gt;</code> 之前，如果要定义 props, emits 可以轻而易举地添加一个与 setup 平级的属性。 </p><p>但是用了<code>&lt;script setup&gt;</code> 后，就没法这么干了 setup 属性已经没有了，自然无法添加与其平级的属性。</p><hr><p>为了解决这一问题，引入了 defineProps 与 defineEmits 这两个宏。但这只解决了 props 与 emits 这两个属性。</p><p>如果我们要定义组件的 name 或其他自定义的属性，还是得回到最原始的用法——再添加一个普通的 <code>&lt;script&gt;</code> 标签。</p><p>这样就会存在两个 <code>&lt;script&gt;</code> 标签。让人无法接受。</p></blockquote><p>举个例子，当我们在views&#x2F;login文件夹中创建了index.vue，需要在script中标识组件名，但是setup下的script无法标识组件名，因此需要再定义一个script标签中expose default{ name:组件名 }，或者在setup下的script中定义defineOptions({ name:组件名 })</p><p><img src="/assets/image-20231004005431165.png" alt="image-20231004005431165"></p><p>Vue 3.3 中新引入了 defineOptions 宏。顾名思义，主要是用来定义 Options API 的选项。可以用 defineOptions 定义任意的选项， props, emits, expose, slots 除外（因为这些可以使用 defineXXX 来做到）</p><p><img src="/assets/image-20231004005745141.png" alt="image-20231004005745141"></p><h2 id="defineModel"><a href="#defineModel" class="headerlink" title="defineModel"></a>defineModel</h2><blockquote><p>在Vue3中，自定义组件上使用v-model, 相当于传递一个modelValue属性，同时触发 update:modelValue 事件</p></blockquote><p><img src="/assets/image-20231004011856119.png" alt="image-20231004011856119"></p><p>我们需要先定义 props，再定义 emits 。其中有许多重复的代码。如果需要修改此值，还需要手动调用 emit 函数。十分繁琐！！！</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script setup&gt;<br>import &#123;defineModel&#125; from &#x27;vue&#x27;<br>const modelValue = defineModel()<br>// const emit = defineEmits([&#x27;update:modelValue&#x27;])<br>&lt;/script&gt;<br><br>&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;input<br>        type=&quot;text&quot;<br>        :value=&quot;modelValue&quot;<br>        @click=&quot;e =&gt; modelValue = e.target.value&quot;<br>    &gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;style scoped&gt;<br><br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20231004011234893.png" alt="image-20231004011234893"></p><p>vite.config.js需要开启预览版设置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; fileURLToPath, <span class="hljs-variable constant_">URL</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;node:url&#x27;</span><br><br><span class="hljs-keyword">import</span> &#123; defineConfig &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vite&#x27;</span><br><span class="hljs-keyword">import</span> vue <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@vitejs/plugin-vue&#x27;</span><br><br><span class="hljs-comment">// https://vitejs.dev/config/</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">defineConfig</span>(&#123;<br>  <span class="hljs-attr">plugins</span>: [<br>    <span class="hljs-comment">//   关键代码</span><br>    <span class="hljs-comment">//   插入defineModel</span><br>    <span class="hljs-title function_">vue</span>(&#123;<br>      <span class="hljs-attr">script</span>:&#123;<br>        <span class="hljs-attr">defineModel</span>:<span class="hljs-literal">true</span><br>      &#125;<br>    &#125;<br>    <span class="hljs-comment">// 关键代码</span><br>    ),<br>  ],<br>  <span class="hljs-attr">resolve</span>: &#123;<br>    <span class="hljs-attr">alias</span>: &#123;<br>      <span class="hljs-comment">// 允许在 js 中使用 @/ 作为 src/ 的别名</span><br>      <span class="hljs-string">&#x27;@&#x27;</span>: <span class="hljs-title function_">fileURLToPath</span>(<span class="hljs-keyword">new</span> <span class="hljs-title function_">URL</span>(<span class="hljs-string">&#x27;./src&#x27;</span>, <span class="hljs-keyword">import</span>.<span class="hljs-property">meta</span>.<span class="hljs-property">url</span>))<br>    &#125;<br>  &#125;<br>&#125;)<br><br></code></pre></td></tr></table></figure><p>App.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script setup&gt;<br>import myinput from &#x27;@/components/myInput.vue&#x27;<br>import &#123;ref&#125; from &quot;vue&quot;;<br>const txt = ref(null)<br>&lt;/script&gt;<br>&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;myinput v-model=&quot;txt&quot;/&gt;<br>    &#123;&#123;txt&#125;&#125;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20231004011722737.png" alt="image-20231004011722737"></p>]]></content>
    
    
    <categories>
      
      <category>Vue3</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>2_组合式API</title>
    <link href="/2023/10/03/Vue3/2_%E7%BB%84%E5%90%88%E5%BC%8FApi/"/>
    <url>/2023/10/03/Vue3/2_%E7%BB%84%E5%90%88%E5%BC%8FApi/</url>
    
    <content type="html"><![CDATA[<h1 id="组合式API"><a href="#组合式API" class="headerlink" title="组合式API"></a>组合式API</h1><h2 id="setup选项"><a href="#setup选项" class="headerlink" title="setup选项"></a>setup选项</h2><blockquote><p>在beforeCreate钩子之前执行</p></blockquote><p><img src="/assets/image-20231003150711807.png" alt="image-20231003150711807"></p><h3 id="setup特点"><a href="#setup特点" class="headerlink" title="setup特点"></a>setup特点</h3><blockquote><p>在setup函数中写的数据和方法需要在末尾以对象的方式return，才能给模版使用</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script&gt;<br>export default &#123;<br>  setup()&#123;<br>    const msg = &#x27;vue3&#x27;<br>    const logmsg = () =&gt;&#123;<br>      console.log(msg)<br>    &#125;<br>    return &#123;<br>      msg,<br>      logmsg<br>    &#125;<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br>&lt;template&gt;<br>  &lt;div&gt;&#123;&#123;msg&#125;&#125;&lt;/div&gt;<br>  &lt;button @click=&quot;logmsg&quot;&gt;控制器输出&lt;/button&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><h3 id="setup语法糖"><a href="#setup语法糖" class="headerlink" title="setup语法糖"></a>setup语法糖</h3><blockquote><p>script标签添加 setup标记，不需要再写导出语句，默认会添加导出语句</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script setup&gt;<br>const msg = &#x27;this is message&#x27;<br>const logmsg = () =&gt;&#123;<br>  console.log(msg)<br>&#125;<br>&lt;/script&gt;<br>&lt;template&gt;<br>  &lt;div&gt;&#123;&#123;msg&#125;&#125;&lt;/div&gt;<br>  &lt;button @click=&quot;logmsg&quot;&gt;控制器输出&lt;/button&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><p><code>&lt;script setup&gt;语法糖原理</code></p><p><img src="/assets/image-20231011195422012.png" alt="image-20231011195422012"></p><h2 id="reactive和ref函数"><a href="#reactive和ref函数" class="headerlink" title="reactive和ref函数"></a>reactive和ref函数</h2><h3 id="reactive"><a href="#reactive" class="headerlink" title="reactive"></a>reactive</h3><blockquote><p>作用：接受对象类型数据的参数传入并返回一个响应式的对象</p></blockquote><ol><li>从vue包中导入reactive函数</li><li>在<code>&lt;script setup&gt;</code>中执行reactive函数并传入类型为对象的初始值，并使用变量接收返回值</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script setup&gt;<br>import &#123;reactive&#125; from &quot;vue&quot;;<br>const data = &#123;<br>  msg: &#x27;Hello Vue3&#x27;,<br>  count: 100<br>&#125;<br>// 作用：传入对象类型参数，返回响应式对象数据<br>const state = reactive(data)<br>const setCount = () =&gt;&#123;<br>  state.count++<br>  console.log(state.count)<br>&#125;<br>&lt;/script&gt;<br>&lt;template&gt;<br>  &lt;div&gt;&#123;&#123;state.count&#125;&#125;&lt;/div&gt;<br>  &lt;button @click=&quot;setCount&quot;&gt;点击&lt;/button&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><h3 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h3><blockquote><p>接收简单类型或者对象类型的数据传入并返回一个响应式的对象</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script setup&gt;<br>import &#123;ref&#125; from &quot;vue&quot;;<br>const count = ref(0)<br>console.log(count.value)<br>const countAdd = () =&gt;&#123;<br>  count.value++<br>&#125;<br>&lt;/script&gt;<br>&lt;template&gt;<br>  &lt;div&gt;&#123;&#123;count&#125;&#125;&lt;/div&gt;<br>&lt;!--  不需要.value--&gt;<br>  &lt;button @click=&quot;countAdd&quot;&gt;+1&lt;/button&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><h3 id="二者对比"><a href="#二者对比" class="headerlink" title="二者对比"></a>二者对比</h3><ol><li><p>都是用来生成响应式数据</p></li><li><p>不同点</p><ol><li>reactive不能处理简单类型的数据</li><li>ref参数类型支持更好，但是必须通过.value做访问修改</li><li>ref函数内部的实现依赖于reactive函数</li></ol></li><li><p>在实际工作中的推荐</p><p>推荐使用ref函数，减少记忆负担</p></li></ol><h2 id="computed"><a href="#computed" class="headerlink" title="computed"></a>computed</h2><blockquote><p>计算属性基本思想和Vue2保持一致，组合式API下的计算属性只是修改了API写法</p></blockquote><p>计算属性小案例</p><p><img src="/assets/image-20231003154632472.png" alt="image-20231003154632472"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script setup&gt;<br>import &#123;computed, ref&#125; from &quot;vue&quot;;<br><br>const list = ref([1,2,3,4,5,6,7,8])<br>// 过滤出list中大于2的数<br>const greaterThan2List = computed(() =&gt; &#123;<br>  return list.value.filter(item =&gt; item &gt; 2)<br>&#125;)<br>&lt;/script&gt;<br>&lt;template&gt;<br>  &lt;div&gt;原始数据:&#123;&#123;list&#125;&#125;&lt;/div&gt;<br>  &lt;div&gt;计算后的数据:&#123;&#123;greaterThan2List&#125;&#125;&lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><ul><li>计算属性中不应该有副作用，例如异步请求或者修改dom操作</li><li>避免直接修改计算属性的值</li><li>全选反选操作可以考虑</li></ul><h2 id="watch"><a href="#watch" class="headerlink" title="watch"></a>watch</h2><h3 id="单个数据或者多个数据监视"><a href="#单个数据或者多个数据监视" class="headerlink" title="单个数据或者多个数据监视"></a>单个数据或者多个数据监视</h3><blockquote><p>侦听一个或者多个数据的变化，数据变化时执行回调函数，两个额外参数 immediate控制立刻执行，deep开启深度侦听</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script setup&gt;<br>import &#123;ref, watch&#125; from &quot;vue&quot;;<br>const count = ref(0)<br>const nickname = ref(&quot;zhangsan&quot;)<br>const countAdd = () =&gt;&#123;<br>  count.value++<br>&#125;<br>const changeNickname = () =&gt;&#123;<br>  nickname.value = nickname.value === &quot;zhangsan&quot; ? &quot;lisi&quot; : &quot;zhangsan&quot;<br>&#125;<br>// 监视单个数据的变化<br>watch(count,(newValue,oldValue)=&gt;&#123;<br>  console.log(newValue,oldValue)<br>&#125;)<br>// 监视多个数据的变化<br>watch([count,nickname],(newArr,oldArr)=&gt;&#123;<br>  console.log(newArr,oldArr)<br>&#125;)<br>&lt;/script&gt;<br>&lt;template&gt;<br>  &lt;div&gt;&#123;&#123;count&#125;&#125;&lt;/div&gt;<br>  &lt;button @click=&quot;countAdd&quot;&gt;+1&lt;/button&gt;<br>  &lt;div&gt;&#123;&#123;nickname&#125;&#125;&lt;/div&gt;<br>  &lt;button @click=&quot;changeNickname&quot;&gt;change nickname&lt;/button&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><h3 id="immediate"><a href="#immediate" class="headerlink" title="immediate"></a>immediate</h3><blockquote><p>希望在侦听器创建时立即触发回调，响应式数据变化之后继续执行回调</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script&gt;<br>    watch([count,nickname],(newArr,oldArr)=&gt;&#123;<br>      console.log(newArr,oldArr)<br>    &#125;,&#123;<br>      immediate:true<br>    &#125;)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="deep"><a href="#deep" class="headerlink" title="deep"></a>deep</h3><p>deep深度监视，默认watch执行的是浅层监视</p><ul><li>const ref1 &#x3D; ref(简单类型) 可以直接监视</li><li>const ref2 &#x3D; ref(复杂类型) 直接监视无法监视到复杂类型内部数据的变化</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script setup&gt;<br>import &#123;ref, watch&#125; from &quot;vue&quot;;<br>const userInfo = ref(&#123;<br>  username:&quot;zhangsan&quot;,<br>  age: 18<br>&#125;)<br>const updateUser = () =&gt;&#123;<br>  userInfo.value.username = &#x27;lisi&#x27;<br>  userInfo.value.age = 20<br>  // 改变整个value的情况下可以直接监视<br>  // userInfo.value = &#123;<br>  //   username:&#x27;asan&#x27;,<br>  //   password:&#x27;123456&#x27;<br>  // &#125;<br>&#125;<br>watch(userInfo,(newValue,oldValue)=&gt;&#123;<br>  console.log(newValue,oldValue)<br>&#125;)<br>&lt;/script&gt;<br>&lt;template&gt;<br>  &lt;div&gt;&#123;&#123;userInfo&#125;&#125;&lt;/div&gt;<br>  &lt;button @click=&quot;updateUser&quot;&gt;updateUser&lt;/button&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20231003171427385.png" alt="image-20231003171427385"></p><p>点击按钮，无反应！！所以需要开启deep</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">watch</span>(userInfo,<span class="hljs-function">(<span class="hljs-params">newValue,oldValue</span>)=&gt;</span>&#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(newValue,oldValue)<br>&#125;,&#123;<br>  <span class="hljs-attr">deep</span>:<span class="hljs-literal">true</span><br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="精确监听对象的某个属性"><a href="#精确监听对象的某个属性" class="headerlink" title="精确监听对象的某个属性"></a>精确监听对象的某个属性</h3><blockquote><p>如何在不开启deep的前提下，侦听age的变化，只有age变化时才执行回调?</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">watch</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>  userInfo.<span class="hljs-property">value</span>.<span class="hljs-property">age</span><br>&#125;,<span class="hljs-function">(<span class="hljs-params">newValue,oldValue</span>)=&gt;</span>&#123;<br>  newValue,oldValue<br>&#125;)<br></code></pre></td></tr></table></figure><blockquote><p>存在bug：对复杂对象的多个属性同时监视，监视不到旧数据</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">watch</span>([<span class="hljs-function">()=&gt;</span>&#123;<br>  userInfo.<span class="hljs-property">value</span>.<span class="hljs-property">age</span><br>&#125;,<span class="hljs-function">()=&gt;</span>&#123;<br>  userInfo.<span class="hljs-property">value</span>.<span class="hljs-property">username</span><br>&#125;],<span class="hljs-function">(<span class="hljs-params">newValue,oldValue</span>)=&gt;</span>&#123;<br>  newValue,oldValue<br>&#125;)<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20231003174828652.png" alt="image-20231003174828652"></p><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><p><img src="/assets/image-20231003175033235.png" alt="image-20231003175033235"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script setup&gt;<br>// beforeCreate和created的相关代码 一律在setup中执行<br>import &#123;onMounted&#125; from &quot;vue&quot;;<br><br>const getList = () =&gt;&#123;<br>  console.log(&quot;hello&quot;)<br>&#125;<br>getList()<br>onMounted(()=&gt;&#123;<br>  console.log(&quot;mounted生命周期函数&quot;)<br>&#125;)<br>&lt;/script&gt;<br>&lt;template&gt;<br>  &lt;div&gt;<br><br>  &lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><h2 id="父子通信"><a href="#父子通信" class="headerlink" title="父子通信"></a>父子通信</h2><h3 id="父传子"><a href="#父传子" class="headerlink" title="父传子"></a>父传子</h3><p>基本思想</p><ol><li>父组件中给子组件绑定属性</li><li>子组件内部通过props选项接收数据</li></ol><p>App.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script setup&gt;<br>import SonComVue from &quot;@/components/SonComVue.vue&quot;;<br><br>&lt;/script&gt;<br><br>&lt;template&gt;<br>  &lt;son-com-vue msg=&quot;hello&quot;&gt;&lt;/son-com-vue&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script setup&gt;<br>import SonComVue from &quot;@/components/SonComVue.vue&quot;;<br>import &#123;ref&#125; from &quot;vue&quot;;<br>const ahh = ref(&quot;hello vue3&quot;)<br>&lt;/script&gt;<br><br>&lt;template&gt;<br>  &lt;son-com-vue :msg=&quot;ahh&quot;&gt;&lt;/son-com-vue&gt;<br>&lt;/template&gt;<br><br>&lt;style scoped&gt;<br><br>&lt;/style&gt;<br><br></code></pre></td></tr></table></figure><p>Son.vue</p><p>由于此处采用setup写法，无法直接配置props选项，因此需要借助“编译器宏”函数接收子组件传递的数据<code>defineProps()</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script setup&gt;<br>const props = defineProps(&#123;<br>  msg: String<br>&#125;)<br>&lt;/script&gt;<br><br>&lt;template&gt;<br>&lt;h1&gt;&#123;&#123;msg&#125;&#125;&lt;/h1&gt;<br>&lt;/template&gt;<br><br>&lt;style scoped&gt;<br><br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20231011203719594.png" alt="image-20231011203719594"></p><p><code>defineProps()原理</code></p><p><img src="/assets/image-20231011205103501.png" alt="image-20231011205103501"></p><h3 id="父传子的数据，通过子传父更新父数据"><a href="#父传子的数据，通过子传父更新父数据" class="headerlink" title="父传子的数据，通过子传父更新父数据"></a>父传子的数据，通过子传父更新父数据</h3><p>基本思想</p><ol><li>父组件中给子组件标签通过@绑定事件</li><li>子组件内部通过 emit 方法触发事件</li></ol><p>son.vue</p><ol><li><p>子组件中defineEmits([‘事件名称’])定义事件</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">const emit = <span class="hljs-built_in">defineEmits</span>(<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;changeMoney&#x27;</span>]</span>)<br>在子组件调用父组件的方法<br></code></pre></td></tr></table></figure></li><li><p>点击事件触发，更新传递到父组件的changeMoney事件，子组件中emit触发监听事件，并传值给父组件</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">const buy = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br>  emit(<span class="hljs-string">&#x27;changeMoney&#x27;</span>, <span class="hljs-number">6</span>,<span class="hljs-number">5</span>,<span class="hljs-number">4</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>)<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>父组件获取子组件的事件，并得到传参值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script setup&gt;<br>const money = ref(100)<br>const changeFn = (newValue1,newValue2,newValue3,newValue4,newValue5,newValue6) =&gt; &#123;<br>  money.value -= newValue6<br>&#125;<br>&lt;/script&gt;<br>&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;son-com-vue car=&quot;宝马&quot;<br>                   :money=&quot;money&quot; @changeMoney=&quot;changeFn&quot;/&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure></li></ol><p>具体如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script setup&gt;<br>const props = defineProps(&#123;<br>  car:String,<br>  money:Number<br>&#125;)<br>const emit = defineEmits([&#x27;changeMoney&#x27;])<br>const buy = () =&gt;&#123;<br>  emit(&#x27;changeMoney&#x27;,6)<br>&#125;<br>&lt;/script&gt;<br>&lt;template&gt;<br>  &lt;div&gt;son-component &#123;&#123;car&#125;&#125; 从父组件拿到 &#123;&#123;money&#125;&#125;RMB&lt;/div&gt;<br>  &lt;button @click=&quot;buy&quot;&gt;儿子花钱&lt;/button&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><p>App.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script setup&gt;<br>import sonComponent from &#x27;@/components/sonComponent.vue&#x27;<br>import &#123;ref&#125; from &quot;vue&quot;;<br>const money = ref(100)<br>&lt;/script&gt;<br>&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;son-component car=&quot;宝马&quot;<br>                   :money=&quot;money&quot; @changeMoney=&quot;args =&gt; money -= args&quot;/&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20231003220643365.png" alt="image-20231003220643365"></p><p><img src="/assets/image-20231003220653264.png" alt="image-20231003220653264"></p><h2 id="模板引用"><a href="#模板引用" class="headerlink" title="模板引用"></a>模板引用</h2><blockquote><p>概念：通过 ref标识 获取真实的 dom对象或者组件实例对象</p></blockquote><p>特别注意：在组件挂载完毕之后才能获取模板引用</p><p>回顾vue2获取dom对象</p><p><img src="/assets/image-20231011231940909.png" alt="image-20231011231940909"></p><h3 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h3><ol><li>调用ref函数生成一个ref对象</li><li>通过ref标识绑定ref对象到标签</li></ol><p><img src="/assets/image-20231003223441116.png" alt="image-20231003223441116"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script setup&gt;<br>//1. 调用ref函数生成一个ref对象<br>// 2. 通过ref标识绑定ref对象到标签<br>import testcomponent from &#x27;@/components/testComponent.vue&#x27;<br>import &#123; ref&#125; from &quot;vue&quot;;<br>const inp = ref(null)<br>// onMounted(()=&gt;&#123;<br>//   console.log(inp.value)<br>// //   进入页面立马聚焦<br>//   inp.value.focus()<br>// &#125;)<br>const focusEvent = () =&gt;&#123;<br>  inp.value.focus()<br>&#125;<br>&lt;/script&gt;<br>&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;input type=&quot;text&quot; ref=&quot;inp&quot;&gt;<br>    &lt;button @click=&quot;focusEvent&quot;&gt;点击聚焦输入框&lt;/button&gt;<br>    &lt;testcomponent/&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><h3 id="获取组件的属性或方法"><a href="#获取组件的属性或方法" class="headerlink" title="获取组件的属性或方法"></a>获取组件的属性或方法</h3><p>如何获取testcomponent的属性或者方法呢？</p><p>testcomponent.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script setup&gt;<br>const count = 999<br>const hello = () =&gt;&#123;<br>  console.log(&quot;hi&quot;)<br>&#125;<br>&lt;/script&gt;<br><br>&lt;template&gt;<br>&lt;div&gt;测试组件&lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;style scoped&gt;<br><br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><p>App.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script setup&gt;<br>import testcomponent from &#x27;@/components/testComponent.vue&#x27;<br>import &#123;onMounted, ref&#125; from &quot;vue&quot;;<br>const tc = ref(null)<br>//1. 调用ref函数生成一个ref对象<br>// 2. 通过ref标识绑定ref对象到标签<br>//关键代码<br>onMounted(()=&gt;&#123;<br>  console.log(tc.value)<br>&#125;)<br>&lt;/script&gt;<br>&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;testcomponent ref=&quot;tc&quot;/&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20231003224319680.png" alt="image-20231003224319680"></p><p>此方法获取不到！！！默认情况下在 <code>&lt;script setup&gt;</code>语法糖下组件内部的属性和方法是不开放给父组件访问的，可以通过defineExpose编译宏指定哪些属性和方法容许访问</p><h3 id="defineExpose"><a href="#defineExpose" class="headerlink" title="defineExpose"></a>defineExpose</h3><p>在子组件中将属性或者方法在defineExpose({‘属性或者方法’})注册，然后向父组件暴露</p><p>在父组件中，对插件添加属性ref&#x3D;”formRef”</p><p>const formRef &#x3D; ref(null)</p><p>formRef.value.hello()或者formRef.value.count</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script setup&gt;<br>const count = 999<br>const hello = () =&gt;&#123;<br>  console.log(&quot;hi&quot;)<br>&#125;<br>defineExpose(&#123;<br>  count,<br>  hello<br>&#125;)<br>&lt;/script&gt;<br><br>&lt;template&gt;<br>&lt;div&gt;测试组件&lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;style scoped&gt;<br><br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20231003224906937.png" alt="image-20231003224906937"></p><h2 id="provide和inject"><a href="#provide和inject" class="headerlink" title="provide和inject"></a>provide和inject</h2><h3 id="作用和场景"><a href="#作用和场景" class="headerlink" title="作用和场景"></a>作用和场景</h3><blockquote><p>顶层组件向任意的底层组件传递数据和方法，实现跨层组件通信</p></blockquote><p><img src="/assets/image-20231003234716600.png" alt="image-20231003234716600"></p><h3 id="跨层传递普通数据或响应式数据"><a href="#跨层传递普通数据或响应式数据" class="headerlink" title="跨层传递普通数据或响应式数据"></a>跨层传递普通数据或响应式数据</h3><p>实现步骤</p><ol><li>顶层组件通过 <code>provide</code> 函数提供数据</li><li>底层组件通过 <code>inject</code> 函数提供数据</li></ol><blockquote><p>跨层传递响应式数据</p><p>在调用provide函数时，第二个参数设置为ref对象</p></blockquote><p>App.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script setup&gt;<br>import centerComponent from &#x27;@/components/centerComponent.vue&#x27;<br>import &#123;provide&#125; from &quot;vue&quot;;<br>provide(&#x27;theme-color&#x27;,&#x27;pink&#x27;)<br>&lt;/script&gt;<br>&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;h1&gt;顶层组件&lt;/h1&gt;<br>    &lt;center-component/&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><p>bottomComponent.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script setup&gt;<br>import &#123;inject&#125; from &quot;vue&quot;;<br><br>const themeColor = inject(&#x27;theme-color&#x27;)<br>&lt;/script&gt;<br><br>&lt;template&gt;<br>&lt;div&gt;<br>  &lt;h3&gt;底层组件 ---获取顶层组件：&#123;&#123;themeColor&#125;&#125;&lt;/h3&gt;<br>&lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;style scoped&gt;<br><br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><h3 id="跨层传递方法"><a href="#跨层传递方法" class="headerlink" title="跨层传递方法"></a>跨层传递方法</h3><blockquote><p>顶层组件可以向底层组件传递方法，底层组件调用方法修改顶层组件的数据</p></blockquote><p>App.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script setup&gt;<br>import centerComponent from &#x27;@/components/centerComponent.vue&#x27;<br>import &#123;provide, ref&#125; from &quot;vue&quot;;<br>const count = ref(100)<br>provide(&#x27;count&#x27;,count)<br>    //关键代码<br>provide(&#x27;changeCount&#x27;,(newCount)=&gt;&#123;<br>  count.value = newCount<br>&#125;)<br>&lt;/script&gt;<br>&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;h1&gt;顶层组件&lt;/h1&gt;<br>    &lt;center-component/&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><p>Center.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script setup&gt;<br>import bottomComponent from &#x27;@/components/bottomComponent.vue&#x27;<br>import &#123;inject&#125; from &quot;vue&quot;;<br>const count = inject(&quot;count&quot;)<br>const newCount = inject(&quot;changeCount&quot;)<br>//关键代码<br>const clickFn = ()=&gt;&#123;<br>  newCount(200)<br>&#125;<br>&lt;/script&gt;<br><br>&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;h2&gt;中心组件&lt;/h2&gt;<br>    &#123;&#123;count&#125;&#125;<br>    &lt;button @click=&quot;clickFn&quot;&gt;点击&lt;/button&gt;<br>    &lt;bottom-component/&gt;<br>  &lt;/div&gt;<br><br>&lt;/template&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Vue3</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>1_初识vue3</title>
    <link href="/2023/10/03/Vue3/1_%E5%88%9D%E8%AF%86vue3/"/>
    <url>/2023/10/03/Vue3/1_%E5%88%9D%E8%AF%86vue3/</url>
    
    <content type="html"><![CDATA[<h1 id="初识vue3"><a href="#初识vue3" class="headerlink" title="初识vue3"></a>初识vue3</h1><h2 id="Vue3的优势"><a href="#Vue3的优势" class="headerlink" title="Vue3的优势"></a>Vue3的优势</h2><p><img src="/assets/image-20231003150355029.png" alt="image-20231003150355029"></p><h2 id="create-vue搭建Vue3项目"><a href="#create-vue搭建Vue3项目" class="headerlink" title="create-vue搭建Vue3项目"></a>create-vue搭建Vue3项目</h2><blockquote><p>create-vue是Vue官方新的脚手架工具，底层切换到了 vite （下一代前端工具链），为开发提供极速响应</p><p>前置条件 - 已安装16.0或更高版本的Node.js</p></blockquote><p>执行如下命令，这一指令将会安装并执行 create-vue</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span> init vue@latest<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20231003150513519.png" alt="image-20231003150513519"></p><h2 id="项目和关键文件"><a href="#项目和关键文件" class="headerlink" title="项目和关键文件"></a>项目和关键文件</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs stylus">关键文件：<br><span class="hljs-number">1</span><span class="hljs-selector-class">.vite</span><span class="hljs-selector-class">.config</span><span class="hljs-selector-class">.js</span> 项目的配置文件基于vite的配置<br><span class="hljs-number">2</span><span class="hljs-selector-class">.package</span><span class="hljs-selector-class">.json</span> 项目包文件核心依赖项变成了Vue3.x和vite<br><span class="hljs-number">3</span><span class="hljs-selector-class">.main</span><span class="hljs-selector-class">.js</span> 入口文件 createApp函数创建应用实例<br><span class="hljs-number">4</span><span class="hljs-selector-class">.app</span><span class="hljs-selector-class">.vue</span> 根组件SFC单文件组件 script-template-style<br>变化一：脚本script和模板template顺序调整<br>变化二：模板template不再要求唯一根元素<br>变化三：脚本script添加setup标识支持组合式API<br><span class="hljs-number">5</span><span class="hljs-selector-class">.index</span><span class="hljs-selector-class">.html</span> 单页入口提供id为app的挂载点<br></code></pre></td></tr></table></figure><h3 id="vite-config-js"><a href="#vite-config-js" class="headerlink" title="vite.config.js"></a>vite.config.js</h3><p>项目的配置文件基于vite的配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; fileURLToPath, <span class="hljs-variable constant_">URL</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;node:url&#x27;</span><br><br><span class="hljs-keyword">import</span> &#123; defineConfig &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vite&#x27;</span><br><span class="hljs-keyword">import</span> vue <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@vitejs/plugin-vue&#x27;</span><br><br><span class="hljs-comment">// https://vitejs.dev/config/</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">defineConfig</span>(&#123;<br>  <span class="hljs-attr">plugins</span>: [<br>    <span class="hljs-title function_">vue</span>(),<br>  ],<br>  <span class="hljs-attr">resolve</span>: &#123;<br>    <span class="hljs-attr">alias</span>: &#123;<br>      <span class="hljs-comment">// 允许在 js 中使用 @/ 作为 src/ 的别名</span><br>      <span class="hljs-string">&#x27;@&#x27;</span>: <span class="hljs-title function_">fileURLToPath</span>(<span class="hljs-keyword">new</span> <span class="hljs-title function_">URL</span>(<span class="hljs-string">&#x27;./src&#x27;</span>, <span class="hljs-keyword">import</span>.<span class="hljs-property">meta</span>.<span class="hljs-property">url</span>))<br>    &#125;<br>  &#125;<br>&#125;)<br><br></code></pre></td></tr></table></figure><h3 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h3><p>项目包文件核心依赖项变成了Vue3.x和vite</p><h3 id="main-js"><a href="#main-js" class="headerlink" title="main.js"></a>main.js</h3><p>入口文件 createApp函数创建应用实例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;./assets/main.css&#x27;</span><br><span class="hljs-comment">// 对比vue2，vue3中的全局样式需要在main.js中引入，而vue2中可以在App.vue中引入</span><br><span class="hljs-keyword">import</span> &#123; createApp &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-comment">// 作用：创建vue实例，对比vue2中的new Vue()，vue3中的createApp()更加轻量，性能更好，创建速度更快，内存占用更少，更加适合移动端开发，vue3中的createApp()返回的是一个vue实例，而vue2中的new Vue()返回的是一个vue实例的配置对象，vue3中的createApp()可以链式调用，而vue2中的new Vue()不可以链式调用。</span><br><span class="hljs-keyword">import</span> &#123; createPinia &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;pinia&#x27;</span><br><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App.vue&#x27;</span><br><span class="hljs-keyword">import</span> router <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./router&#x27;</span><br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">createApp</span>(<span class="hljs-title class_">App</span>)<br><br>app.<span class="hljs-title function_">use</span>(<span class="hljs-title function_">createPinia</span>())<br>app.<span class="hljs-title function_">use</span>(router)<br><br>app.<span class="hljs-title function_">mount</span>(<span class="hljs-string">&#x27;#app&#x27;</span>)<br><span class="hljs-comment">// 作用：将vue实例挂载到id为app的元素上，对比vue2中的el，vue3中的mount()可以链式调用，而vue2中的el不可以链式调用。#app存在于index.html</span><br></code></pre></td></tr></table></figure><h3 id="app-vue"><a href="#app-vue" class="headerlink" title="app.vue"></a>app.vue</h3><p>app.vue 根组件SFC单文件组件 script-template-style<br>    变化一：脚本script和模板template顺序调整<br>    变化二：模板template不再要求唯一根元素<br>    变化三：脚本script添加setup标识支持组合式API</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script setup&gt;<br><br>&lt;/script&gt;<br><br>&lt;template&gt;<br><br>&lt;/template&gt;<br><br>&lt;style scoped&gt;<br><br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><h3 id="index-html"><a href="#index-html" class="headerlink" title="index.html"></a>index.html</h3><p>单页入口提供id为app的挂载点</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;icon&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/favicon.ico&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Vite App<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;module&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/src/main.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Vue3</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>9_Axios网络请求封装</title>
    <link href="/2023/10/03/%E9%BB%91%E9%A9%AC-Vue2/9_Axios%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82%E5%B0%81%E8%A3%85/"/>
    <url>/2023/10/03/%E9%BB%91%E9%A9%AC-Vue2/9_Axios%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82%E5%B0%81%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<h1 id="Axios网络请求封装"><a href="#Axios网络请求封装" class="headerlink" title="Axios网络请求封装"></a>Axios网络请求封装</h1><h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><p>request.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;axios&quot;</span><br><span class="hljs-keyword">import</span> querystring <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;querystring&quot;</span><br><br><span class="hljs-keyword">const</span> instance = axios.<span class="hljs-title function_">create</span>(&#123;<br>    <span class="hljs-attr">timeout</span>: <span class="hljs-number">5000</span><br>&#125;)<br><span class="hljs-keyword">const</span> <span class="hljs-title function_">errorHandle</span>= (<span class="hljs-params">status, info</span>) =&gt; &#123;<br>    <span class="hljs-keyword">switch</span> (status) &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">400</span>:<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;语义有误&quot;</span>);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">401</span>:<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;服务器认证失败&quot;</span>);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">403</span>:<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;服务器拒绝访间&quot;</span>);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">404</span>:<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;地址错误&quot;</span>);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">500</span>:<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;服务器遇到意外&quot;</span>);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">502</span>:<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;服务器无响应&quot;</span>);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-attr">default</span>:<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(info);<br>            <span class="hljs-keyword">break</span>;<br>    &#125;<br>&#125;<br><span class="hljs-comment">// 拦截器</span><br>instance.<span class="hljs-property">interceptors</span>.<span class="hljs-property">request</span>.<span class="hljs-title function_">use</span>(<br>    <span class="hljs-function"><span class="hljs-params">config</span> =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span> (config.<span class="hljs-property">method</span> === <span class="hljs-string">&quot;post&quot;</span>) &#123;<br>            config.<span class="hljs-property">data</span> = querystring.<span class="hljs-title function_">stringify</span>(config.<span class="hljs-property">data</span>)<br>        &#125;<br>        <span class="hljs-keyword">return</span> config;<br>    &#125;,<br>    <span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>(error)<br>    &#125;<br>)<br>instance.<span class="hljs-property">interceptors</span>.<span class="hljs-property">response</span>.<span class="hljs-title function_">use</span>(<br>    <span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> response.<span class="hljs-property">status</span> === <span class="hljs-number">200</span> ? <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(response) : <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>(response),<br>    <span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> &#123;<br>        <span class="hljs-keyword">const</span> &#123;response&#125; = error<br>        <span class="hljs-title function_">errorHandle</span>(response.<span class="hljs-property">status</span>,response.<span class="hljs-property">info</span>)<br>    &#125;<br>)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> instance;<br></code></pre></td></tr></table></figure><p>index.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../utils/request&quot;</span>;<br><span class="hljs-keyword">const</span> api = &#123;<br>    <span class="hljs-title function_">getApi</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-keyword">return</span> axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;url&quot;</span>)<br>    &#125;<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> api<br></code></pre></td></tr></table></figure><p>App.vue</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> api <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./api/index&#x27;</span> <br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br><span class="hljs-title function_">mounted</span>(<span class="hljs-params"></span>) &#123;<br>    api.<span class="hljs-title function_">getApi</span>().<span class="hljs-title function_">then</span>(<br>        <span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span>&#123;<br>          <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res)<br>        &#125;<br>    )<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="解决跨域问题"><a href="#解决跨域问题" class="headerlink" title="解决跨域问题"></a>解决跨域问题</h2><p><img src="/assets/image-20231003113813492.png" alt="image-20231003113813492"></p><p>主流方法：</p><ul><li>后台解决：cors</li><li>前台解决：proxy</li></ul>]]></content>
    
    
    <categories>
      
      <category>Vue2</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>8_引入第三方</title>
    <link href="/2023/10/03/%E9%BB%91%E9%A9%AC-Vue2/8_%E5%BC%95%E5%85%A5%E7%AC%AC%E4%B8%89%E6%96%B9/"/>
    <url>/2023/10/03/%E9%BB%91%E9%A9%AC-Vue2/8_%E5%BC%95%E5%85%A5%E7%AC%AC%E4%B8%89%E6%96%B9/</url>
    
    <content type="html"><![CDATA[<h1 id="引入第三方"><a href="#引入第三方" class="headerlink" title="引入第三方"></a>引入第三方</h1><blockquote><p>例如：Swiper 开源、免费、强大的触摸滑动插件<br>Swiper 是纯javascript打造的滑动特效插件，面向手机、平板电脑等移动终端<br>Swiper 能实现触屏焦点图、触屏Tab切换、触屏轮播图切换等常用效果</p></blockquote><p>使用方法，查看官网教程</p><p>安装制定版本：<code>npm install --save swiper@8.1.6</code></p>]]></content>
    
    
    <categories>
      
      <category>Vue2</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>7_组件</title>
    <link href="/2023/09/30/%E9%BB%91%E9%A9%AC-Vue2/7_%E7%BB%84%E4%BB%B6/"/>
    <url>/2023/09/30/%E9%BB%91%E9%A9%AC-Vue2/7_%E7%BB%84%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h1><h2 id="组件的三大组成部分"><a href="#组件的三大组成部分" class="headerlink" title="组件的三大组成部分"></a>组件的三大组成部分</h2><h2 id="scoped解决样式冲突"><a href="#scoped解决样式冲突" class="headerlink" title="scoped解决样式冲突"></a>scoped解决样式冲突</h2><h3 id="默认情况"><a href="#默认情况" class="headerlink" title="默认情况"></a>默认情况</h3><p>写在组件中的样式会 <strong>全局生效</strong> →  因此很容易造成多个组件之间的样式冲突问题。</p><ol><li><p><strong>全局样式</strong>: 默认组件中的样式会作用到全局，任何一个组件中都会受到此样式的影响</p></li><li><p><strong>局部样式</strong>: 可以给组件加上<strong>scoped</strong> 属性,可以<strong>让样式只作用于当前组件</strong></p></li></ol><p><img src="/assets/image-20230930105550558.png" alt="image-20230930105550558"></p><p><img src="/assets/image-20230930105651596.png" alt="image-20230930105651596"></p><h3 id="scoped原理"><a href="#scoped原理" class="headerlink" title="scoped原理"></a>scoped原理</h3><ol><li>当前组件内标签都被添加<strong>data-v-hash值</strong> 的属性 </li><li>css选择器都被添加 [<strong>data-v-hash值</strong>] 的属性选择器</li></ol><p>最终效果: <strong>必须是当前组件的元素</strong>, 才会有这个自定义属性, 才会被这个样式作用到 </p><h2 id="data必须写成函数"><a href="#data必须写成函数" class="headerlink" title="data必须写成函数"></a>data必须写成函数</h2><p>一个组件的 <strong>data</strong> 选项必须<strong>是一个函数</strong>。目的是为了：保证每个组件实例，维护<strong>独立</strong>的一份<strong>数据</strong>对象。</p><p>每次创建新的组件实例，都会新<strong>执行一次data 函数</strong>，得到一个新对象。</p><p>BaseCount.vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;base-count&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;count--&quot;</span>&gt;</span>-<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;&#123; count &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;count++&quot;</span>&gt;</span>+<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">  <span class="hljs-attr">data</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">    <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">      <span class="hljs-attr">count</span>: <span class="hljs-number">100</span>,</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;,</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-class">.base-count</span> &#123;</span><br><span class="language-css">  <span class="hljs-attribute">margin</span>: <span class="hljs-number">20px</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/assets/image-20230930112212828.png" alt="image-20230930112212828"></p><p><img src="/assets/image-20230930112241316.png" alt="image-20230930112241316"></p><h2 id="组件通信"><a href="#组件通信" class="headerlink" title="组件通信"></a>组件通信</h2><p>组件通信，就是指<strong>组件与组件</strong>之间的<strong>数据传递</strong></p><ul><li>组件的数据是独立的，无法直接访问其他组件的数据。</li><li>想使用其他组件的数据，就需要组件通信</li></ul><p><img src="/assets/image-20230930112705325.png" alt="image-20230930112705325"></p><h3 id="组件关系分类"><a href="#组件关系分类" class="headerlink" title="组件关系分类"></a>组件关系分类</h3><ol><li>父子关系</li><li>非父子关系</li></ol><p><img src="/assets/image-20230930112736761.png" alt="image-20230930112736761"></p><h3 id="通信解决方案"><a href="#通信解决方案" class="headerlink" title="通信解决方案"></a>通信解决方案</h3><p><img src="/assets/image-20230930112757869.png" alt="image-20230930112757869"></p><h3 id="父子通信流程"><a href="#父子通信流程" class="headerlink" title="父子通信流程"></a>父子通信流程</h3><ol><li><p>父组件通过 <strong>props</strong> 将数据传递给子组件</p><p>父向子传值步骤</p><ol><li>给子组件以添加属性的方式传值</li><li>子组件内部通过props接收</li><li>模板中直接使用 props接收的值</li></ol><p><img src="/assets/image-20230930132032553.png" alt="image-20230930132032553"></p></li><li><p>子组件利用 <strong>$emit</strong> 通知父组件修改更新</p><p>子向父传值步骤</p><ol><li>$emit触发事件，给父组件发送消息通知</li><li>父组件监听$emit触发的事件</li><li>提供处理函数，在函数的性参中获取传过来的参数</li></ol><p><img src="/assets/image-20230930130006698.png" alt="image-20230930130006698"></p><p><img src="/assets/image-20230930132748662.png" alt="image-20230930132748662"></p></li></ol><h2 id="什么是props"><a href="#什么是props" class="headerlink" title="什么是props"></a>什么是props</h2><h3 id="Props-定义"><a href="#Props-定义" class="headerlink" title="Props 定义"></a>Props 定义</h3><p>组件上 注册的一些  自定义属性</p><h3 id="Props-作用"><a href="#Props-作用" class="headerlink" title="Props 作用"></a>Props 作用</h3><p>向子组件传递数据</p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ol><li>可以 传递 <strong>任意数量</strong> 的prop</li><li>可以 传递 <strong>任意类型</strong> 的prop</li></ol><p><img src="/assets/image-20230930150105592.png" alt="image-20230930150105592"></p><p>App.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>    &lt;div class=&quot;app&quot;&gt;<br>      &lt;UserInfo<br>        :username=&quot;username&quot;<br>        :age=&quot;age&quot;<br>        :isSingle=&quot;isSingle&quot;<br>        :car=&quot;car&quot;<br>        :hobby=&quot;hobby&quot;<br>      &gt;&lt;/UserInfo&gt;<br>    &lt;/div&gt;<br>  &lt;/template&gt;<br>  <br>  &lt;script&gt;<br>  import UserInfo from &#x27;./components/UserInfo.vue&#x27;<br>  export default &#123;<br>    data() &#123;<br>      return &#123;<br>        username: &#x27;小帅&#x27;,<br>        age: 28,<br>        isSingle: true,<br>        car: &#123;<br>          brand: &#x27;宝马&#x27;,<br>        &#125;,<br>        hobby: [&#x27;篮球&#x27;, &#x27;足球&#x27;, &#x27;羽毛球&#x27;],<br>      &#125;<br>    &#125;,<br>    components: &#123;<br>      UserInfo,<br>    &#125;,<br>  &#125;<br>  &lt;/script&gt;<br>  <br>  &lt;style&gt;<br>  &lt;/style&gt;<br><br>&lt;style&gt;<br><br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><p>UserInfo.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>    &lt;div class=&quot;userinfo&quot;&gt;<br>      &lt;h3&gt;我是个人信息组件&lt;/h3&gt;<br>      &lt;div&gt;姓名：&#123;&#123; username &#125;&#125;&lt;/div&gt;<br>      &lt;div&gt;年龄：&#123;&#123; age &#125;&#125;&lt;/div&gt;<br>      &lt;div&gt;是否单身：&#123;&#123; isSingle ? &#x27;是&#x27; : &#x27;否&#x27;&#125;&#125;&lt;/div&gt;<br>      &lt;div&gt;座驾：&#123;&#123; car.brand &#125;&#125;&lt;/div&gt;<br>      &lt;div&gt;兴趣爱好：&#123;&#123; hobby.join(&#x27;,&#x27;) &#125;&#125;&lt;/div&gt;<br>    &lt;/div&gt;<br>  &lt;/template&gt;<br>  <br>  &lt;script&gt;<br>  export default &#123;<br>    props:[&#x27;username&#x27;,&#x27;age&#x27;,&#x27;isSingle&#x27;,&#x27;car&#x27;,&#x27;hobby&#x27;]<br>  &#125;<br>  &lt;/script&gt;<br>  <br>  &lt;style&gt;<br>  .userinfo &#123;<br>    width: 300px;<br>    border: 3px solid #000;<br>    padding: 20px;<br>  &#125;<br>  .userinfo &gt; div &#123;<br>    margin: 20px 10px;<br>  &#125;<br>  &lt;/style&gt;<br></code></pre></td></tr></table></figure><h2 id="props校验"><a href="#props校验" class="headerlink" title="props校验"></a>props校验</h2><h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3><p>组件的props可以乱传吗，可以，因此需要定义规则。</p><p><img src="/assets/image-20231001010733894.png" alt="image-20231001010733894"></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>为组件的 prop 指定<strong>验证要求</strong>，不符合要求，控制台就会有<strong>错误提示</strong>  → 帮助开发者，快速发现错误</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><ul><li><p><strong>类型校验</strong></p><p><img src="/assets/image-20231001011543638.png" alt="image-20231001011543638"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script&gt;<br>export default &#123;<br>  props: &#123;<br>      w:Number<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure></li><li><p>非空校验</p></li><li><p>默认值</p></li><li><p>自定义校验</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script&gt;<br>export default &#123;<br>  props: &#123;<br>      w:&#123;<br>          type:Number,<br>          required:true,<br>          default:0,<br>          validator(value)&#123;<br>              if (value &gt;= 0 &amp;&amp; value &lt;= 100) &#123;<br>                  return true<br>              &#125;else&#123;<br>                console.error(&quot;传入的prop w,必须是&quot;)<br>                return false<br>              &#125;<br>          &#125;<br>      &#125;<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20231001013612463.png" alt="image-20231001013612463"></p></li></ul><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ol><li>default和required一般不同时写（因为当时必填项时，肯定是有值的）</li><li>default后面如果是简单类型的值，可以直接写默认。如果是复杂类型的值，则需要以函数的形式return一个默认值</li></ol><h2 id="props-data、单向数据流"><a href="#props-data、单向数据流" class="headerlink" title="props&amp;data、单向数据流"></a>props&amp;data、单向数据流</h2><h3 id="共同点"><a href="#共同点" class="headerlink" title="共同点"></a>共同点</h3><p>都可以给组件提供数据</p><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><ul><li><p>data 的数据是<strong>自己</strong>的  →   随便改  </p></li><li><p>prop 的数据是<strong>外部</strong>的  →   不能直接改，要遵循 <strong>单向数据流</strong></p><p><img src="/assets/image-20231001102743030.png" alt="image-20231001102743030"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;app&quot;&gt;<br>    &lt;BaseProgress <br>      :count=&quot;count&quot;<br>      @changeCount=&quot;handleCount&quot;&gt;&lt;/BaseProgress&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import BaseProgress from &#x27;./components/BaseProgress.vue&#x27;<br>export default &#123;<br>  components:&#123;<br>    BaseProgress<br>  &#125;,<br>  data()&#123;<br>    return&#123;<br>      count:100<br>    &#125;<br>  &#125;,<br>  methods:&#123;<br>    handleCount(newCount)&#123;<br>      this.count = newCount<br>    &#125;<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style&gt;<br><br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;base-count&quot;&gt;<br>    &lt;button @click=&quot;handleSub&quot;&gt;-&lt;/button&gt;<br>    &lt;span&gt;&#123;&#123; count &#125;&#125;&lt;/span&gt;<br>    &lt;button @click=&quot;handleAdd&quot;&gt;+&lt;/button&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>  // 1.自己的数据随便修改  （谁的数据 谁负责）<br>  //  data () &#123;<br>  //    return &#123;<br>  //      count: 100,<br>  //    &#125;<br>  //  &#125;,<br>  // 2.外部传过来的数据 不能随便修改<br>  props: &#123;<br>    count: &#123;<br>     type: Number<br>   &#125;, <br>  &#125;,<br>  methods:&#123;<br>    handleSub()&#123;<br>      this.$emit(&quot;changeCount&quot;,this.count - 1)<br>    &#125;,<br>    handleAdd()&#123;<br>      this.$emit(&quot;changeCount&quot;,this.count + 1)<br>    &#125;<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style&gt;<br>.base-count &#123;<br>  margin: 20px;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure></li></ul><h3 id="单向数据流"><a href="#单向数据流" class="headerlink" title="单向数据流"></a>单向数据流</h3><p>父级props的数据更新，会向下流动，影响子组件。这个数据流动是单向的</p><p><img src="/assets/image-20231001110335219.png" alt="image-20231001110335219"></p><h2 id="非父子通信-event-bus-事件总线-拓展，略"><a href="#非父子通信-event-bus-事件总线-拓展，略" class="headerlink" title="非父子通信-event bus 事件总线(拓展，略)"></a>非父子通信-event bus 事件总线(拓展，略)</h2><h3 id="作用-1"><a href="#作用-1" class="headerlink" title="作用"></a>作用</h3><p>非父子组件之间，进行简易消息传递。(复杂场景→ Vuex)</p><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ol><li><p>创建一个都能访问的事件总线 （空Vue实例）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Bus</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>()<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Bus</span><br></code></pre></td></tr></table></figure></li><li><p>A组件（接受方），监听Bus的 $on事件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vue">created () &#123;<br>  Bus.$on(&#x27;sendMsg&#x27;, (msg) =&gt; &#123;<br>    this.msg = msg<br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>B组件（发送方），触发Bus的$emit事件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vue">Bus.$emit(&#x27;sendMsg&#x27;, &#x27;这是一个消息&#x27;)<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20231001112254074.png" alt="image-20231001112254074"></p></li></ol><h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3><p>EventBus.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Bus</span>  =  <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>()<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Bus</span><br></code></pre></td></tr></table></figure><p>BaseA.vue(接受方)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;base-a&quot;&gt;<br>    我是A组件（接收方）<br>    &lt;p&gt;&#123;&#123;msg&#125;&#125;&lt;/p&gt;  <br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import Bus from &#x27;../utils/EventBus&#x27;<br>export default &#123;<br>  data() &#123;<br>    return &#123;<br>      msg: &#x27;&#x27;,<br>    &#125;<br>  &#125;,<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style scoped&gt;<br>.base-a &#123;<br>  width: 200px;<br>  height: 200px;<br>  border: 3px solid #000;<br>  border-radius: 3px;<br>  margin: 10px;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><p>BaseB.vue(发送方)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;base-b&quot;&gt;<br>    &lt;div&gt;我是B组件（发布方）&lt;/div&gt;<br>    &lt;button&gt;发送消息&lt;/button&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import Bus from &#x27;../utils/EventBus&#x27;<br>export default &#123;<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style scoped&gt;<br>.base-b &#123;<br>  width: 200px;<br>  height: 200px;<br>  border: 3px solid #000;<br>  border-radius: 3px;<br>  margin: 10px;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><p>App.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;app&quot;&gt;<br>    &lt;BaseA&gt;&lt;/BaseA&gt;<br>    &lt;BaseB&gt;&lt;/BaseB&gt; <br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import BaseA from &#x27;./components/BaseA.vue&#x27;<br>import BaseB from &#x27;./components/BaseB.vue&#x27; <br>export default &#123;<br>  components:&#123;<br>    BaseA,<br>    BaseB<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style&gt;<br><br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><h2 id="非父子通信-provide-inject"><a href="#非父子通信-provide-inject" class="headerlink" title="非父子通信-provide&amp;inject"></a>非父子通信-provide&amp;inject</h2><h3 id="作用-2"><a href="#作用-2" class="headerlink" title="作用"></a>作用</h3><p>跨层级共享数据</p><h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><p><img src="/assets/image-20231001112342272.png" alt="image-20231001112342272"></p><h3 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h3><ol><li>父组件 provide提供数据</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  provide () &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>       <span class="hljs-comment">// 普通类型【非响应式】</span><br>       <span class="hljs-attr">color</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">color</span>, <br>       <span class="hljs-comment">// 复杂类型【响应式】</span><br>       <span class="hljs-attr">userInfo</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">userInfo</span>, <br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2.子&#x2F;孙组件 inject获取数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">inject</span>: [<span class="hljs-string">&#x27;color&#x27;</span>,<span class="hljs-string">&#x27;userInfo&#x27;</span>],<br>  created () &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">color</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">userInfo</span>)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="注意-1"><a href="#注意-1" class="headerlink" title="注意"></a>注意</h3><ul><li>provide提供的简单类型的数据不是响应式的，复杂类型数据是响应式。（推荐提供复杂类型数据）</li><li>子&#x2F;孙组件通过inject获取的数据，不能在自身组件内修改</li></ul><h2 id="v-model原理"><a href="#v-model原理" class="headerlink" title="v-model原理"></a>v-model原理</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>v-model本质上是一个语法糖。例如应用在输入框上，就是value属性 和 input事件 的合写</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div id=&quot;app&quot; &gt;<br>    &lt;input v-model=&quot;msg&quot; type=&quot;text&quot;&gt;<br><br>    &lt;input :value=&quot;msg&quot; @input=&quot;msg = $event.target.value&quot; type=&quot;text&quot;&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><h3 id="作用："><a href="#作用：" class="headerlink" title="作用："></a>作用：</h3><p>提供数据的双向绑定</p><ul><li>数据变，视图跟着变 :value</li><li>视图变，数据跟着变 @input</li></ul><h3 id="注意-2"><a href="#注意-2" class="headerlink" title="注意"></a>注意</h3><p><strong>$event</strong> 用于在模板中，获取事件的形参</p><h2 id="表单类组件封装"><a href="#表单类组件封装" class="headerlink" title="表单类组件封装"></a>表单类组件封装</h2><h3 id="需求目标"><a href="#需求目标" class="headerlink" title="需求目标"></a>需求目标</h3><p>实现子组件和父组件数据的双向绑定 （实现App.vue中的selectId和子组件选中的数据进行双向绑定）</p><h3 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h3><p>App.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;app&quot;&gt;<br>    &lt;BaseSelect v-model=&quot;selectId&quot;&gt;&lt;/BaseSelect&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import BaseSelect from &#x27;./components/BaseSelect.vue&#x27;<br>export default &#123;<br>  data() &#123;<br>    return &#123;<br>      selectId: &#x27;102&#x27;,<br>    &#125;<br>  &#125;,<br>  components: &#123;<br>    BaseSelect,<br>  &#125;,<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style&gt;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><p>BaseSelect.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;select :value=&quot;value&quot; @change=&quot;handlerChange&quot;&gt;<br>      &lt;option value=&quot;101&quot;&gt;北京&lt;/option&gt;<br>      &lt;option value=&quot;102&quot;&gt;上海&lt;/option&gt;<br>      &lt;option value=&quot;103&quot;&gt;武汉&lt;/option&gt;<br>      &lt;option value=&quot;104&quot;&gt;广州&lt;/option&gt;<br>      &lt;option value=&quot;105&quot;&gt;深圳&lt;/option&gt;<br>    &lt;/select&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br>  <br>  &lt;script&gt;<br>export default &#123;<br>  props: &#123;<br>    value: String,<br>  &#125;,<br>  methods: &#123;<br>    handlerChange(e) &#123;<br>      this.$emit(&quot;input&quot;, e.target.value);<br>    &#125;,<br>  &#125;,<br>&#125;;<br>&lt;/script&gt;<br>  <br>  &lt;style&gt;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><h2 id="sync修饰符"><a href="#sync修饰符" class="headerlink" title=".sync修饰符"></a>.sync修饰符</h2><h3 id="作用-3"><a href="#作用-3" class="headerlink" title="作用"></a>作用</h3><p>可以实现 <strong>子组件</strong> 与 <strong>父组件数据</strong> 的 <strong>双向绑定</strong>，简化代码</p><p>简单理解：<strong>子组件可以修改父组件传过来的props值</strong></p><h3 id="场景-1"><a href="#场景-1" class="headerlink" title="场景"></a>场景</h3><p>封装弹框类的基础组件， visible属性 true显示 false隐藏</p><h3 id="本质"><a href="#本质" class="headerlink" title="本质"></a>本质</h3><p>.sync修饰符 就是 <strong>:属性名</strong> 和 <strong>@update:属性名</strong> 合写</p><h3 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h3><p>父组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs vue">//.sync写法<br>&lt;BaseDialog :visible.sync=&quot;isShow&quot; /&gt;<br>--------------------------------------<br>//完整写法<br>&lt;BaseDialog <br>  :visible=&quot;isShow&quot; <br>  @update:visible=&quot;isShow = $event&quot; <br>/&gt;<br></code></pre></td></tr></table></figure><p>子组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vue">props: &#123;<br>  visible: Boolean<br>&#125;,<br><br>this.$emit(&#x27;update:visible&#x27;, false)<br></code></pre></td></tr></table></figure><h2 id="ref和-refs"><a href="#ref和-refs" class="headerlink" title="ref和$refs"></a>ref和$refs</h2><h3 id="1-作用"><a href="#1-作用" class="headerlink" title="1.作用"></a>1.作用</h3><p>利用ref 和 $refs 可以用于 获取 dom 元素 或 组件实例</p><h3 id="2-特点"><a href="#2-特点" class="headerlink" title="2.特点"></a>2.特点</h3><p>查找范围 →  当前组件内(更精确稳定)</p><h3 id="3-语法"><a href="#3-语法" class="headerlink" title="3.语法"></a>3.语法</h3><p>1.给要获取的盒子添加ref属性</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;chartRef&quot;</span>&gt;</span>我是渲染图表的容器<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2.获取时通过 $refs获取  this.$refs.chartRef 获取</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html">mounted () &#123;<br>  console.log(this.$refs.chartRef)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-注意"><a href="#4-注意" class="headerlink" title="4.注意"></a>4.注意</h3><p>之前只用document.querySelect(‘.box’) 获取的是整个页面中的盒子</p><h2 id="异步更新-nextTick"><a href="#异步更新-nextTick" class="headerlink" title="异步更新 &amp; $nextTick"></a>异步更新 &amp; $nextTick</h2><h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p>编辑标题,  编辑框自动聚焦</p><ol><li>点击编辑，显示编辑框</li><li>让编辑框，立刻获取焦点</li></ol><p><img src="/assets/image-20231001155108551.png" alt="image-20231001155108551"></p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;app&quot;&gt;<br>    &lt;div v-if=&quot;isShowEdit&quot;&gt;<br>      &lt;input type=&quot;text&quot; v-model=&quot;editValue&quot; ref=&quot;inp&quot; /&gt;<br>      &lt;button&gt;确认&lt;/button&gt;<br>    &lt;/div&gt;<br>    &lt;div v-else&gt;<br>      &lt;span&gt;&#123;&#123; title &#125;&#125;&lt;/span&gt;<br>      &lt;button @click=&quot;editFn&quot;&gt;编辑&lt;/button&gt;<br>    &lt;/div&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>  data() &#123;<br>    return &#123;<br>      title: &#x27;大标题&#x27;,<br>      isShowEdit: false,<br>      editValue: &#x27;&#x27;,<br>    &#125;<br>  &#125;,<br>  methods: &#123;<br>    editFn() &#123;<br>        // 显示输入框<br>        this.isShowEdit = true  <br>        // 获取焦点,$nextTick等dom更新结束,立刻执行函数体<br>        this.$nextTick(()=&gt;&#123;<br>          this.$refs.inp.focus() <br>        &#125;)<br>    &#125;  &#125;,<br>&#125;<br>&lt;/script&gt; <br></code></pre></td></tr></table></figure><h2 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h2><h3 id="基本写法"><a href="#基本写法" class="headerlink" title="基本写法"></a>基本写法</h3><p><img src="/assets/image-20231002013930510.png" alt="image-20231002013930510"></p><p><img src="/assets/image-20231002013950593.png" alt="image-20231002013950593"></p><h3 id="插槽默认值"><a href="#插槽默认值" class="headerlink" title="插槽默认值"></a>插槽默认值</h3><p>插槽默认值直接在定义插槽的组件中填充</p><p><img src="/assets/image-20231002101840328.png" alt="image-20231002101840328"></p><h3 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h3><p>App.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;slot-test&gt;<br>    &lt;template #header&gt;&lt;/template&gt;<br>    &lt;template #main&gt;&lt;/template&gt;<br>    &lt;template v-slop:&quot;footer&quot;&gt;&lt;/template&gt;<br>    等价<br>    &lt;template #footer&gt;&lt;/template&gt;<br>&lt;/slot-test&gt;<br></code></pre></td></tr></table></figure><p>插槽组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script&gt;<br>export default &#123;<br>    data()&#123;<br>        return&#123;<br>        &#125;<br>    &#125;<br>&#125;<br>&lt;/script&gt;<br><br>&lt;template&gt;<br>&lt;div&gt;<br>    &lt;h3&gt;---slot---&lt;/h3&gt;<br>    &lt;slot name=&quot;header&quot; :msg=&quot;childMessage1&quot;&gt;&lt;/slot&gt;<br>    &lt;slot name=&quot;main&quot; :msg=&quot;childMessage2&quot;&gt;&lt;/slot&gt;<br>    &lt;slot name=&quot;footer&quot; :msg=&quot;childMessage2&quot;&gt;&lt;/slot&gt;<br>&lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><p>v-slot可以简写为#</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vue"><br>//简写为<br>&lt;template #&quot;header&quot;&gt;&lt;/template&gt;<br></code></pre></td></tr></table></figure><h3 id="插槽传值"><a href="#插槽传值" class="headerlink" title="插槽传值"></a>插槽传值</h3><p>插槽也可以获取父组件的数据，或者父组件获取插槽内的数据</p><p>插槽组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script&gt;<br>export default &#123;<br>    data()&#123;<br>        return&#123;<br>            childMessage: &#x27;hello parentComponent&#x27;<br>        &#125;<br>    &#125;<br>&#125;<br>&lt;/script&gt;<br><br>&lt;template&gt;<br>&lt;div&gt;<br>    &lt;h3&gt;---slot---&lt;/h3&gt;<br>    &lt;slot :msg=&quot;childMessage&quot;&gt;&lt;/slot&gt;<br>&lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><p>App.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>    &lt;SlotTest v-slot=&quot;slotProps&quot;&gt;<br>        &lt;h2&gt;&#123;&#123;slotProps.msg&#125;&#125;&lt;/h2&gt;<br>    &lt;/SlotTest&gt;<br>&lt;/template&gt;<br>&lt;script&gt;<br>import SlotTest from &quot;@/components/slotTest.vue&quot;;<br><br>export default &#123;<br>    components: &#123;SlotTest&#125;,<br>    data() &#123;<br>        return &#123;<br>        &#125;<br>    &#125;,<br></code></pre></td></tr></table></figure><h3 id="具名插槽传值"><a href="#具名插槽传值" class="headerlink" title="具名插槽传值"></a>具名插槽传值</h3><p>插槽组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script&gt;<br>export default &#123;<br>    data()&#123;<br>        return&#123;<br>            childMessage1: &#x27;hello parentComponent&#x27;,<br>            childMessage2:&#x27;wu hu~&#x27;<br>        &#125;<br>    &#125;<br>&#125;<br>&lt;/script&gt;<br><br>&lt;template&gt;<br>&lt;div&gt;<br>    &lt;h3&gt;---slot---&lt;/h3&gt;<br>    &lt;slot name=&quot;header&quot; :msg=&quot;childMessage1&quot;&gt;&lt;/slot&gt;<br>    &lt;slot name=&quot;main&quot; :msg=&quot;childMessage2&quot;&gt;&lt;/slot&gt;<br>&lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><p>App.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;SlotTest&gt;<br>    &lt;template #header=&quot;slotProps&quot;&gt;&lt;h2&gt;&#123;&#123;slotProps.msg&#125;&#125;&lt;/h2&gt;&lt;/template&gt;<br>    &lt;template #main=&quot;slotProps&quot;&gt;&lt;h2&gt;&#123;&#123;slotProps.msg&#125;&#125;&lt;/h2&gt;&lt;/template&gt;<br>&lt;/SlotTest&gt;<br></code></pre></td></tr></table></figure><h2 id="动态组件"><a href="#动态组件" class="headerlink" title="动态组件"></a>动态组件</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>&lt;!--  &lt;componentA&gt;&lt;/componentA&gt;--&gt;<br>&lt;!--  &lt;componentB&gt;&lt;/componentB&gt;--&gt;<br>  &lt;component :is=&quot;tabComponent&quot;&gt;&lt;/component&gt;<br>  &lt;button @click=&quot;changeHandle&quot;&gt;切换组件&lt;/button&gt;<br>&lt;/template&gt;<br>&lt;script&gt;<br>import componentA from &quot;./components/componentA.vue&quot;<br>import componentB from &quot;./components/componentB.vue&quot;<br>export default &#123;<br>  components:&#123;<br>    componentA,<br>    componentB<br>  &#125;,<br>  data()&#123;<br>    return&#123;<br>      tabComponent:&quot;componentA&quot;<br>    &#125;<br>  &#125;,<br>  methods:&#123;<br>    changeHandle()&#123;<br>      this.tabComponent = this.tabComponent == &quot;componentA&quot; ? &quot;componentA&quot; : &quot;componentB&quot;<br>    &#125;<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h2 id="异步组件"><a href="#异步组件" class="headerlink" title="异步组件"></a>异步组件</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs vue">import &#123;defineAsyncComponent&#125; from &quot;vue&quot;;<br>const AsyncComponent = defineAsyncComponent(() =&gt;<br>  import(&#x27;./components/componentB.vue&#x27;)<br>)<br></code></pre></td></tr></table></figure><h2 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h2><p>通常情况下，当我们需要从父组件向子组件传递数据时，会使用pops。想象一下这样的结构：有一些多层级嵌套的组件，形成了一颗巨大的组件树，而某个深层的子组件需要一个较远的祖先组件中的部分数据。在这种情况下，如果仅使用pops则必须将其沿着组件链逐级传递下去，这会非常麻烦</p><p>App</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;parents/&gt;<br>&lt;/template&gt;<br>&lt;script&gt;<br>import parents from &#x27;./components/parents.vue&#x27;<br>import son from &#x27;./components/son.vue&#x27;<br>export default &#123;<br>  components:&#123;<br>    parents,<br>    son<br>  &#125;,<br>  provide()&#123;<br>    return&#123;<br>      grandpa:this.grandpa<br>    &#125;<br>  &#125;,<br>  data()&#123;<br>    return&#123;<br>      grandpa:&#x27;爷爷的数据&#x27;<br>    &#125;<br>  &#125;,<br>  methods: &#123;<br><br>  &#125;<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>parents</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script&gt;<br>import son from &#x27;./son.vue&#x27;<br>export default &#123;<br>  components:&#123;<br>    son<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br><br>&lt;template&gt;<br>  &lt;son/&gt;<br>&lt;/template&gt;<br><br>&lt;style scoped&gt;<br><br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><p>son</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script&gt;<br>export default &#123;<br>  inject:[&#x27;grandpa&#x27;],<br>  data()&#123;<br>    return&#123;<br>      msg: this.grandpa<br>    &#125;<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br><br>&lt;template&gt;<br>  &#123;&#123;msg&#125;&#125;<br>&lt;/template&gt;<br><br>&lt;style scoped&gt;<br><br>&lt;/style&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Vue2</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>6_工程化开发&amp;脚手架CLI</title>
    <link href="/2023/09/29/%E9%BB%91%E9%A9%AC-Vue2/6_%E5%B7%A5%E7%A8%8B%E5%8C%96%E5%BC%80%E5%8F%91&amp;%E8%84%9A%E6%89%8B%E6%9E%B6CLI/"/>
    <url>/2023/09/29/%E9%BB%91%E9%A9%AC-Vue2/6_%E5%B7%A5%E7%A8%8B%E5%8C%96%E5%BC%80%E5%8F%91&amp;%E8%84%9A%E6%89%8B%E6%9E%B6CLI/</url>
    
    <content type="html"><![CDATA[<h1 id="工程化开发-脚手架CLI"><a href="#工程化开发-脚手架CLI" class="headerlink" title="工程化开发&amp;脚手架CLI"></a>工程化开发&amp;脚手架CLI</h1><h2 id="开发Vue的两种方式"><a href="#开发Vue的两种方式" class="headerlink" title="开发Vue的两种方式"></a>开发Vue的两种方式</h2><ul><li>核心包传统开发模式：基于html &#x2F; css &#x2F; js 文件，直接引入核心包，开发 Vue。</li><li>工程化开发模式：基于构建工具（例如：webpack）的环境中开发Vue。</li></ul><p><img src="/assets/image-20230929104029360.png" alt="image-20230929104029360"></p><p>工程化开发模式优点：</p><p>   提高编码效率，比如使用JS新语法、Less&#x2F;Sass、Typescript等通过webpack都可以编译成浏览器识别的ES3&#x2F;ES5&#x2F;CSS等</p><p>工程化开发模式问题：</p><ul><li>webpack配置<strong>不简单</strong></li><li><strong>雷同</strong>的基础配置</li><li>缺乏<strong>统一的标准</strong></li></ul><p>为了解决以上问题，所以我们需要一个工具，生成标准化的配置</p><h2 id="VUE-CLI脚手架"><a href="#VUE-CLI脚手架" class="headerlink" title="VUE_CLI脚手架"></a>VUE_CLI脚手架</h2><h3 id="基本介绍："><a href="#基本介绍：" class="headerlink" title="基本介绍："></a>基本介绍：</h3><p>   Vue CLI 是Vue官方提供的一个<strong>全局命令工具</strong></p><p>   可以帮助我们<strong>快速创建</strong>一个开发Vue项目的<strong>标准化基础架子</strong>。【集成了webpack配置】</p><h4 id="好处："><a href="#好处：" class="headerlink" title="好处："></a>好处：</h4><ol><li>开箱即用，零配置</li><li>内置babel等工具</li><li>标准化的webpack配置</li></ol><h4 id="使用步骤："><a href="#使用步骤：" class="headerlink" title="使用步骤："></a>使用步骤：</h4><ol><li><p>全局安装（只需安装一次即可） </p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs llvm">yarn <span class="hljs-keyword">global</span> <span class="hljs-keyword">add</span> <span class="hljs-title">@vue</span>/cli <br>或者 npm i <span class="hljs-title">@vue</span>/cli -g<br></code></pre></td></tr></table></figure></li><li><p>查看vue&#x2F;cli版本 </p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">vue <span class="hljs-comment">--version</span><br></code></pre></td></tr></table></figure></li><li><p>创建项目架子</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable">vue</span> <span class="hljs-variable">create</span> <span class="hljs-variable">project</span>-<span class="hljs-function"><span class="hljs-title">name</span>(项目名不能使用中文)</span><br></code></pre></td></tr></table></figure><p><img src="/assets/image-20230929105556370.png" alt="image-20230929105556370"><img src="/assets/image-20230929110604931.png" alt="image-20230929110604931"><img src="/assets/image-20230929111031989.png" alt="image-20230929111031989"></p></li><li><p>启动项目</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable">yarn</span> <span class="hljs-variable">serve</span> <br>或者 <span class="hljs-variable">npm</span> <span class="hljs-variable">run</span> <span class="hljs-function"><span class="hljs-title">serve</span>(命令不固定，找<span class="hljs-variable">package.json</span>)</span><br></code></pre></td></tr></table></figure><p><img src="/assets/image-20230929111344999.png" alt="image-20230929111344999"></p><p><img src="/assets/image-20230929112117177.png" alt="image-20230929112117177"></p></li></ol><h2 id="项目目录介绍和运行流程"><a href="#项目目录介绍和运行流程" class="headerlink" title="项目目录介绍和运行流程"></a>项目目录介绍和运行流程</h2><h3 id="项目目录介绍"><a href="#项目目录介绍" class="headerlink" title="项目目录介绍"></a>项目目录介绍</h3><p><img src="/assets/image-20230929112326221.png" alt="image-20230929112326221"></p><p><img src="/assets/image-20230929113059553.png" alt="image-20230929113059553"></p><p><img src="/assets/image-20230929125017551.png" alt="image-20230929125017551"></p><p>虽然脚手架中的文件有很多，目前咱们只需人事三个文件即可</p><ol><li><p>main.js  入口文件</p><p><img src="/assets/image-20230929125956718.png" alt="image-20230929125956718"></p><ul><li><code>Vue.config.productionTip = false</code>提示当前处于（生产环境&#x2F;开发环境）</li><li>Vue实例化，提供了render方法，基于App.vue创建结构渲染index.html</li><li><code>.$mount(&#39;#app&#39;)</code>等价于<code>el:&#39;#app&#39;</code></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs vue">new Vue(&#123;<br>  el:&#x27;#app&#x27;,<br>  render: h =&gt; h(App),<br>&#125;)<br></code></pre></td></tr></table></figure><ul><li><code>render: h =&gt; h(App)</code>等价于</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vue">render:(createElement) =&gt; &#123;<br>  return createElement(App)<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20230929131036287.png" alt="image-20230929131036287"></p></li><li><p>App.vue  App根组件 </p></li><li><p>index.html 模板文件</p></li></ol><h2 id="组件化开发"><a href="#组件化开发" class="headerlink" title="组件化开发"></a>组件化开发</h2><ul><li>组件化：一个页面可以拆分成一个个组件，每个组件有着自己独立的结构、样式、行为。</li><li>好处：便于维护，利于复用 → 提升开发效率。</li><li>组件分类：普通组件、根组件。</li></ul><p>下面这个页面，可以把所有的代码都写在一个页面中，但是这样显得代码比较混乱，难易维护。咱们可以按模块进行组件划分</p><p><img src="/assets/image-20230930003043734.png" alt="image-20230930003043734"></p><p>总结：</p><p>组件化的好处是什么？</p><p>组件的分类？</p><h2 id="根组件-App-vue"><a href="#根组件-App-vue" class="headerlink" title="根组件 App.vue"></a>根组件 App.vue</h2><h3 id="根组件介绍"><a href="#根组件介绍" class="headerlink" title="根组件介绍"></a>根组件介绍</h3><p>整个应用最上层的组件，包裹所有普通小组件</p><p><img src="/assets/image-20230930003239532.png" alt="image-20230930003239532"></p><h3 id="组件是由三部分构成"><a href="#组件是由三部分构成" class="headerlink" title="组件是由三部分构成"></a>组件是由三部分构成</h3><ul><li><p>语法高亮插件</p><p><img src="/assets/image-20230930003424847.png" alt="image-20230930003424847"></p></li><li><p>三部分构成</p><ul><li>template：结构 （有且只能一个根元素）</li><li>script:   js逻辑 </li><li>style： 样式 (可支持less，需要装包)</li></ul></li><li><p>让组件支持less</p><p>（1） style标签，lang&#x3D;”less” 开启less功能 </p><p>（2） 装包: yarn add less less-loader -D 或者npm i less less-loader -D</p><p><img src="/assets/image-20230930080048201.png" alt="image-20230930080048201"></p><p><img src="/assets/image-20230930080300695.png" alt="image-20230930080300695"></p><p><img src="/assets/image-20230930080705761.png" alt="image-20230930080705761"></p><p><img src="/assets/image-20230930080914980.png" alt="image-20230930080914980"></p></li></ul><h2 id="普通组件的注册使用-局部注册"><a href="#普通组件的注册使用-局部注册" class="headerlink" title="普通组件的注册使用-局部注册"></a>普通组件的注册使用-局部注册</h2><h3 id="1-特点"><a href="#1-特点" class="headerlink" title="1.特点"></a>1.特点</h3><p>只能在注册的组件内使用</p><p><img src="/assets/image-20230930081303483.png" alt="image-20230930081303483"></p><h3 id="2-步骤"><a href="#2-步骤" class="headerlink" title="2.步骤"></a>2.步骤</h3><ol><li>创建.vue文件（三个组成部分）</li><li>在使用的组件内先导入再注册，最后使用</li></ol><h3 id="3-使用方式"><a href="#3-使用方式" class="headerlink" title="3.使用方式"></a>3.使用方式</h3><p>当成html标签使用即可  &lt;组件名&gt;&lt;&#x2F;组件名&gt;</p><h3 id="4-注意"><a href="#4-注意" class="headerlink" title="4.注意"></a>4.注意</h3><p>组件名规范 —&gt; 大驼峰命名法， 如 HmHeader</p><p><img src="/assets/image-20230930082855943.png" alt="image-20230930082855943"><img src="/assets/image-20230930094459579.png" alt="image-20230930094459579"></p><h2 id="普通组件的注册使用-全局注册"><a href="#普通组件的注册使用-全局注册" class="headerlink" title="普通组件的注册使用-全局注册"></a>普通组件的注册使用-全局注册</h2><h3 id="1-特点-1"><a href="#1-特点-1" class="headerlink" title="1.特点"></a>1.特点</h3><p>全局注册的组件，在项目的<strong>任何组件</strong>中都能使用</p><h3 id="2-步骤-1"><a href="#2-步骤-1" class="headerlink" title="2.步骤"></a>2.步骤</h3><ol><li>创建.vue组件（三个组成部分）</li><li><strong>main.js</strong>中进行全局注册</li></ol><h3 id="3-使用方式-1"><a href="#3-使用方式-1" class="headerlink" title="3.使用方式"></a>3.使用方式</h3><p>当成HTML标签直接使用</p><blockquote><p>&lt;组件名&gt;&lt;&#x2F;组件名&gt;</p></blockquote><h3 id="4-注意-1"><a href="#4-注意-1" class="headerlink" title="4.注意"></a>4.注意</h3><p>组件名规范 —&gt; 大驼峰命名法， 如 HmHeader</p><h3 id="5-语法"><a href="#5-语法" class="headerlink" title="5.语法"></a>5.语法</h3><p>Vue.component(‘组件名’, 组件对象)</p><p><img src="/assets/image-20230930094719114.png" alt="image-20230930094719114"></p><p><img src="/assets/image-20230930094956400.png" alt="image-20230930094956400"></p><p><img src="/assets/image-20230930095516176.png" alt="image-20230930095516176"></p><h2 id="综合案例"><a href="#综合案例" class="headerlink" title="综合案例"></a>综合案例</h2><p><img src="/assets/image-20230930103650043.png" alt="image-20230930103650043"></p><h3 id="开发思路"><a href="#开发思路" class="headerlink" title="开发思路"></a>开发思路</h3><ol><li><p>分析页面，按模块拆分组件，搭架子  (局部或全局注册)</p></li><li><p>根据设计图，编写组件 html 结构 css 样式 (已准备好)</p></li><li><p>拆分封装通用小组件  (局部或全局注册)</p><p>将来 → 通过 js 动态渲染，实现功能</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>Vue2</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>5_生命周期</title>
    <link href="/2023/09/29/%E9%BB%91%E9%A9%AC-Vue2/5_%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    <url>/2023/09/29/%E9%BB%91%E9%A9%AC-Vue2/5_%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
    
    <content type="html"><![CDATA[<h1 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h1><h2 id="Vue生命周期"><a href="#Vue生命周期" class="headerlink" title="Vue生命周期"></a>Vue生命周期</h2><p>思考：什么时候可以发送初始化渲染请求？（越早越好）</p><p>​什么时候可以开始操作dom？（至少dom得渲染出来）</p><p>Vue生命周期：就是一个Vue实例从<strong>创建</strong>到<strong>销毁</strong>的整个过程。</p><p>生命周期四个阶段：① 创建 ② 挂载 ③ 更新 ④ 销毁</p><ol><li>创建阶段：创建响应式数据</li><li>挂载阶段：渲染模板</li><li>更新阶段：修改数据，更新视图</li><li>销毁阶段：销毁Vue实例</li></ol><p>优先视图，其次数据</p><p> <img src="/assets/image-20230929002929468.png" alt="image-20230929002929468"></p><h2 id="Vue钩子函数"><a href="#Vue钩子函数" class="headerlink" title="Vue钩子函数"></a>Vue钩子函数</h2><p>Vue生命周期过程中，会自动运行一些函数，被称为<strong>生命周期钩子</strong>让开发者可以在<strong>特定阶段</strong>运行自己的代码</p><p><img src="/assets/image-20230929003630642.png" alt="image-20230929003630642"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">    <span class="hljs-comment">/**</span></span><br><span class="hljs-comment"><span class="language-javascript">     * 生命周期函数</span></span><br><span class="hljs-comment"><span class="language-javascript">     *    创建期 beforeCreate created 针对组件</span></span><br><span class="hljs-comment"><span class="language-javascript">     *    挂载期 beforeMount mounted 针对渲染</span></span><br><span class="hljs-comment"><span class="language-javascript">     *    更新期 beforeUpdate updated 针对业务逻辑更新渲染</span></span><br><span class="hljs-comment"><span class="language-javascript">     *    销毁期 beforeUnmount unmounted 组件销毁</span></span><br><span class="hljs-comment"><span class="language-javascript">     */</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="在created中发送数据"><a href="#在created中发送数据" class="headerlink" title="在created中发送数据"></a>在created中发送数据</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">  * &#123;</span><br><span class="language-css">    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">    <span class="hljs-attribute">list-style</span>: none;</span><br><span class="language-css">  &#125;</span><br><span class="language-css">  <span class="hljs-selector-class">.news</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">display</span>: flex;</span><br><span class="language-css">    <span class="hljs-attribute">height</span>: <span class="hljs-number">120px</span>;</span><br><span class="language-css">    <span class="hljs-attribute">width</span>: <span class="hljs-number">600px</span>;</span><br><span class="language-css">    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;</span><br><span class="language-css">    <span class="hljs-attribute">padding</span>: <span class="hljs-number">20px</span> <span class="hljs-number">0</span>;</span><br><span class="language-css">    <span class="hljs-attribute">cursor</span>: pointer;</span><br><span class="language-css">  &#125;</span><br><span class="language-css">  <span class="hljs-selector-class">.news</span> <span class="hljs-selector-class">.left</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">flex</span>: <span class="hljs-number">1</span>;</span><br><span class="language-css">    <span class="hljs-attribute">display</span>: flex;</span><br><span class="language-css">    <span class="hljs-attribute">flex-direction</span>: column;</span><br><span class="language-css">    <span class="hljs-attribute">justify-content</span>: space-between;</span><br><span class="language-css">    <span class="hljs-attribute">padding-right</span>: <span class="hljs-number">10px</span>;</span><br><span class="language-css">  &#125;</span><br><span class="language-css">  <span class="hljs-selector-class">.news</span> <span class="hljs-selector-class">.left</span> <span class="hljs-selector-class">.title</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">20px</span>;</span><br><span class="language-css">  &#125;</span><br><span class="language-css">  <span class="hljs-selector-class">.news</span> <span class="hljs-selector-class">.left</span> <span class="hljs-selector-class">.info</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">color</span>: <span class="hljs-number">#999999</span>;</span><br><span class="language-css">  &#125;</span><br><span class="language-css">  <span class="hljs-selector-class">.news</span> <span class="hljs-selector-class">.left</span> <span class="hljs-selector-class">.info</span> <span class="hljs-selector-tag">span</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">margin-right</span>: <span class="hljs-number">20px</span>;</span><br><span class="language-css">  &#125;</span><br><span class="language-css">  <span class="hljs-selector-class">.news</span> <span class="hljs-selector-class">.right</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">width</span>: <span class="hljs-number">160px</span>;</span><br><span class="language-css">    <span class="hljs-attribute">height</span>: <span class="hljs-number">120px</span>;</span><br><span class="language-css">  &#125;</span><br><span class="language-css">  <span class="hljs-selector-class">.news</span> <span class="hljs-selector-class">.right</span> <span class="hljs-selector-tag">img</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css">    <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css">    <span class="hljs-attribute">object-fit</span>: cover;</span><br><span class="language-css">  &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item, index) in list&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;list.id&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;news&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;left&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;title&quot;</span>&gt;</span>&#123;&#123;item.title&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;info&quot;</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;&#123;item.source&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;&#123;item.time&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;right&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">:src</span>=<span class="hljs-string">&quot;item.img&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-comment">// 接口地址：http://hmajax.itheima.net/api/news</span></span><br><span class="language-javascript">  <span class="hljs-comment">// 请求方式：get</span></span><br><span class="language-javascript">  <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">    <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">    <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">      <span class="hljs-attr">list</span>: []</span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">    <span class="hljs-keyword">async</span> <span class="hljs-title function_">created</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">      <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;http://hmajax.itheima.net/api/news&#x27;</span>)</span><br><span class="language-javascript">      <span class="hljs-variable language_">this</span>.<span class="hljs-property">list</span> = res.<span class="hljs-property">data</span>.<span class="hljs-property">data</span></span><br><span class="language-javascript">      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res);</span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">  &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/assets/image-20230929101452559.png" alt="image-20230929101452559"></p><h3 id="在mounted中获取焦点"><a href="#在mounted中获取焦点" class="headerlink" title="在mounted中获取焦点"></a>在mounted中获取焦点</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">  <span class="hljs-selector-tag">html</span>,</span><br><span class="language-css">  <span class="hljs-selector-tag">body</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css">  &#125;</span><br><span class="language-css"></span><br><span class="language-css">  <span class="hljs-selector-class">.search-container</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">position</span>: absolute;</span><br><span class="language-css">    <span class="hljs-attribute">top</span>: <span class="hljs-number">30%</span>;</span><br><span class="language-css">    <span class="hljs-attribute">left</span>: <span class="hljs-number">50%</span>;</span><br><span class="language-css">    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(-<span class="hljs-number">50%</span>, -<span class="hljs-number">50%</span>);</span><br><span class="language-css">    <span class="hljs-attribute">text-align</span>: center;</span><br><span class="language-css">  &#125;</span><br><span class="language-css"></span><br><span class="language-css">  <span class="hljs-selector-class">.search-container</span> <span class="hljs-selector-class">.search-box</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">display</span>: flex;</span><br><span class="language-css">  &#125;</span><br><span class="language-css"></span><br><span class="language-css">  <span class="hljs-selector-class">.search-container</span> <span class="hljs-selector-tag">img</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">30px</span>;</span><br><span class="language-css">  &#125;</span><br><span class="language-css"></span><br><span class="language-css">  <span class="hljs-selector-class">.search-container</span> <span class="hljs-selector-class">.search-box</span> <span class="hljs-selector-tag">input</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">width</span>: <span class="hljs-number">512px</span>;</span><br><span class="language-css">    <span class="hljs-attribute">height</span>: <span class="hljs-number">16px</span>;</span><br><span class="language-css">    <span class="hljs-attribute">padding</span>: <span class="hljs-number">12px</span> <span class="hljs-number">16px</span>;</span><br><span class="language-css">    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">16px</span>;</span><br><span class="language-css">    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">    <span class="hljs-attribute">vertical-align</span>: top;</span><br><span class="language-css">    <span class="hljs-attribute">outline</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">    <span class="hljs-attribute">box-shadow</span>: none;</span><br><span class="language-css">    <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">10px</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">10px</span>;</span><br><span class="language-css">    <span class="hljs-attribute">border</span>: <span class="hljs-number">2px</span> solid <span class="hljs-number">#c4c7ce</span>;</span><br><span class="language-css">    <span class="hljs-attribute">background</span>: <span class="hljs-number">#fff</span>;</span><br><span class="language-css">    <span class="hljs-attribute">color</span>: <span class="hljs-number">#222</span>;</span><br><span class="language-css">    <span class="hljs-attribute">overflow</span>: hidden;</span><br><span class="language-css">    <span class="hljs-attribute">box-sizing</span>: content-box;</span><br><span class="language-css">    -webkit-tap-highlight-<span class="hljs-attribute">color</span>: transparent;</span><br><span class="language-css">  &#125;</span><br><span class="language-css"></span><br><span class="language-css">  <span class="hljs-selector-class">.search-container</span> <span class="hljs-selector-class">.search-box</span> <span class="hljs-selector-tag">button</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">cursor</span>: pointer;</span><br><span class="language-css">    <span class="hljs-attribute">width</span>: <span class="hljs-number">112px</span>;</span><br><span class="language-css">    <span class="hljs-attribute">height</span>: <span class="hljs-number">44px</span>;</span><br><span class="language-css">    <span class="hljs-attribute">line-height</span>: <span class="hljs-number">41px</span>;</span><br><span class="language-css">    <span class="hljs-attribute">line-height</span>: <span class="hljs-number">42px</span>;</span><br><span class="language-css">    <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#ad2a27</span>;</span><br><span class="language-css">    <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">0</span> <span class="hljs-number">10px</span> <span class="hljs-number">10px</span> <span class="hljs-number">0</span>;</span><br><span class="language-css">    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">17px</span>;</span><br><span class="language-css">    <span class="hljs-attribute">box-shadow</span>: none;</span><br><span class="language-css">    <span class="hljs-attribute">font-weight</span>: <span class="hljs-number">400</span>;</span><br><span class="language-css">    <span class="hljs-attribute">border</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">    <span class="hljs-attribute">outline</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">    <span class="hljs-attribute">letter-spacing</span>: normal;</span><br><span class="language-css">    <span class="hljs-attribute">color</span>: white;</span><br><span class="language-css">  &#125;</span><br><span class="language-css"></span><br><span class="language-css">  <span class="hljs-selector-tag">body</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">background</span>: no-repeat center /cover;</span><br><span class="language-css">    <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#edf0f5</span>;</span><br><span class="language-css">  &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;search-container&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://www.itheima.com/images/logo.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;search-box&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;words&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;inp&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>搜索一下<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">    <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">    <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">      <span class="hljs-attr">words</span>: <span class="hljs-string">&#x27;&#x27;</span></span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">    <span class="hljs-title function_">mounted</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">      <span class="hljs-comment">// 进入页面立马获得input的焦点</span></span><br><span class="language-javascript">      <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;#inp&#x27;</span>).<span class="hljs-title function_">focus</span>()</span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">  &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h2 id="案例练习"><a href="#案例练习" class="headerlink" title="案例练习"></a>案例练习</h2><p><img src="/assets/image-20230929102721588.png" alt="image-20230929102721588"></p><h3 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h3><ol><li>基本渲染</li><li>添加功能</li><li>删除功能</li><li>饼图渲染</li></ol><h3 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h3><ol><li>基本渲染</li></ol><ul><li>立刻发送请求获取数据 created</li><li>拿到数据，存到data的响应式数据中</li><li>结合数据，进行渲染 v-for</li><li>消费统计  —&gt; 计算属性</li></ul><p>2.添加功能</p><ul><li>收集表单数据 v-model，使用指令修饰符处理数据</li><li>给添加按钮注册点击事件，对输入的内容做非空判断，发送请求</li><li>请求成功后，对文本框内容进行清空</li><li>重新渲染列表</li></ul><p>3.删除功能</p><ul><li>注册点击事件，获取当前行的id</li><li>根据id发送删除请求</li><li>需要重新渲染</li></ul><p>4.饼图渲染</p><ul><li>初始化一个饼图 echarts.init(dom)    mounted钩子中渲染</li><li>根据数据试试更新饼图 echarts.setOptions({…})</li></ul>]]></content>
    
    
    <categories>
      
      <category>Vue2</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>4_watch监视器</title>
    <link href="/2023/09/28/%E9%BB%91%E9%A9%AC-Vue2/4_watch%E7%9B%91%E8%A7%86%E5%99%A8/"/>
    <url>/2023/09/28/%E9%BB%91%E9%A9%AC-Vue2/4_watch%E7%9B%91%E8%A7%86%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="watch监视器"><a href="#watch监视器" class="headerlink" title="watch监视器"></a>watch监视器</h1><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><p>​<strong>监视数据变化</strong>，执行一些业务逻辑或异步操作</p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><ol><li><p>watch同样声明在跟data同级的配置项中</p></li><li><p>简单写法： 简单类型数据直接监视</p></li><li><p>完整写法：添加额外配置项</p></li></ol><p><img src="/assets/image-20230928090642579.png" alt="image-20230928090642579"></p><p><img src="/assets/image-20230928090704133.png" alt="image-20230928090704133"></p><p><img src="/assets/image-20230928094302882.png" alt="image-20230928094302882"></p><p><img src="/assets/image-20230928094316002.png" alt="image-20230928094316002"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">  * &#123;</span><br><span class="language-css">    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">    <span class="hljs-attribute">box-sizing</span>: border-box;</span><br><span class="language-css">    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">18px</span>;</span><br><span class="language-css">  &#125;</span><br><span class="language-css">  <span class="hljs-selector-id">#app</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span> <span class="hljs-number">20px</span>;</span><br><span class="language-css">  &#125;</span><br><span class="language-css">  <span class="hljs-selector-class">.query</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">margin</span>: <span class="hljs-number">10px</span> <span class="hljs-number">0</span>;</span><br><span class="language-css">  &#125;</span><br><span class="language-css">  <span class="hljs-selector-class">.box</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">display</span>: flex;</span><br><span class="language-css">  &#125;</span><br><span class="language-css">  <span class="hljs-selector-tag">textarea</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;</span><br><span class="language-css">    <span class="hljs-attribute">height</span>: <span class="hljs-number">160px</span>;</span><br><span class="language-css">    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">18px</span>;</span><br><span class="language-css">    <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#dedede</span>;</span><br><span class="language-css">    <span class="hljs-attribute">outline</span>: none;</span><br><span class="language-css">    <span class="hljs-attribute">resize</span>: none;</span><br><span class="language-css">    <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span>;</span><br><span class="language-css">  &#125;</span><br><span class="language-css">  <span class="hljs-selector-tag">textarea</span><span class="hljs-selector-pseudo">:hover</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#1589f5</span>;</span><br><span class="language-css">  &#125;</span><br><span class="language-css">  <span class="hljs-selector-class">.transbox</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;</span><br><span class="language-css">    <span class="hljs-attribute">height</span>: <span class="hljs-number">160px</span>;</span><br><span class="language-css">    <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#f0f0f0</span>;</span><br><span class="language-css">    <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span>;</span><br><span class="language-css">    <span class="hljs-attribute">border</span>: none;</span><br><span class="language-css">  &#125;</span><br><span class="language-css">  <span class="hljs-selector-class">.tip-box</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;</span><br><span class="language-css">    <span class="hljs-attribute">height</span>: <span class="hljs-number">25px</span>;</span><br><span class="language-css">    <span class="hljs-attribute">line-height</span>: <span class="hljs-number">25px</span>;</span><br><span class="language-css">    <span class="hljs-attribute">display</span>: flex;</span><br><span class="language-css">  &#125;</span><br><span class="language-css">  <span class="hljs-selector-class">.tip-box</span> <span class="hljs-selector-tag">span</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">flex</span>: <span class="hljs-number">1</span>;</span><br><span class="language-css">    <span class="hljs-attribute">text-align</span>: center;</span><br><span class="language-css">  &#125;</span><br><span class="language-css">  <span class="hljs-selector-class">.query</span> <span class="hljs-selector-tag">span</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">18px</span>;</span><br><span class="language-css">  &#125;</span><br><span class="language-css"></span><br><span class="language-css">  <span class="hljs-selector-class">.input-wrap</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">position</span>: relative;</span><br><span class="language-css">  &#125;</span><br><span class="language-css">  <span class="hljs-selector-class">.input-wrap</span> <span class="hljs-selector-tag">span</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">position</span>: absolute;</span><br><span class="language-css">    <span class="hljs-attribute">right</span>: <span class="hljs-number">15px</span>;</span><br><span class="language-css">    <span class="hljs-attribute">bottom</span>: <span class="hljs-number">15px</span>;</span><br><span class="language-css">    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">12px</span>;</span><br><span class="language-css">  &#125;</span><br><span class="language-css">  <span class="hljs-selector-class">.input-wrap</span> <span class="hljs-selector-tag">i</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">20px</span>;</span><br><span class="language-css">    <span class="hljs-attribute">font-style</span>: normal;</span><br><span class="language-css">  &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- 条件选择框 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;query&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>翻译成的语言：<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;italy&quot;</span>&gt;</span>意大利<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;english&quot;</span>&gt;</span>英语<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;german&quot;</span>&gt;</span>德语<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>  <span class="hljs-comment">&lt;!-- 翻译框 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;input-wrap&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;obj.innerwords&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span>⌨️<span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span>文档翻译<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;output-wrap&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;transbox&quot;</span>&gt;</span>&#123;&#123;result&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-comment">// 接口地址：https://applet-base-api-t.itheima.net/api/translate</span></span><br><span class="language-javascript">  <span class="hljs-comment">// 请求方式：get</span></span><br><span class="language-javascript">  <span class="hljs-comment">// 请求参数：</span></span><br><span class="language-javascript">  <span class="hljs-comment">// （1）words：需要被翻译的文本（必传）</span></span><br><span class="language-javascript">  <span class="hljs-comment">// （2）lang： 需要被翻译成的语言（可选）默认值-意大利</span></span><br><span class="language-javascript">  <span class="hljs-comment">// -----------------------------------------------</span></span><br><span class="language-javascript">  </span><br><span class="language-javascript">  <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">    <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">    <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">      <span class="hljs-attr">words</span>: <span class="hljs-string">&#x27;&#x27;</span>,</span><br><span class="language-javascript">      <span class="hljs-attr">obj</span>:&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">innerwords</span>:<span class="hljs-string">&#x27;&#x27;</span></span><br><span class="language-javascript">      &#125;,</span><br><span class="language-javascript">      <span class="hljs-attr">result</span>:<span class="hljs-string">&#x27;&#x27;</span></span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">    <span class="hljs-comment">// 具体讲解：(1) watch语法 (2) 具体业务实现</span></span><br><span class="language-javascript">    <span class="hljs-attr">watch</span>:&#123;</span><br><span class="language-javascript">      <span class="hljs-title function_">words</span>(<span class="hljs-params">newValue</span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;change&quot;</span>,newValue);</span><br><span class="language-javascript">      &#125;,</span><br><span class="language-javascript">      <span class="hljs-keyword">async</span> <span class="hljs-string">&quot;obj.innerwords&quot;</span>(newValue)&#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> <span class="hljs-title function_">axios</span>(&#123;</span><br><span class="language-javascript">          <span class="hljs-attr">url</span>:<span class="hljs-string">&quot;https://applet-base-api-t.itheima.net/api/translate&quot;</span>,</span><br><span class="language-javascript">          <span class="hljs-attr">params</span>:&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">words</span>:newValue</span><br><span class="language-javascript">          &#125;</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">result</span> = res.<span class="hljs-property">data</span>.<span class="hljs-property">data</span></span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="完整写法"><a href="#完整写法" class="headerlink" title="完整写法"></a>完整写法</h2><p>完整写法 —&gt;添加额外的配置项</p><ol><li>deep:true 对复杂类型进行深度监听</li><li>immdiate:true 初始化 立刻执行一次</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- 条件选择框 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;query&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>翻译成的语言：<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;obj.lang&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;italy&quot;</span>&gt;</span>意大利<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;english&quot;</span>&gt;</span>英语<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;german&quot;</span>&gt;</span>德语<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>  <span class="hljs-comment">&lt;!-- 翻译框 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;input-wrap&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;obj.innerwords&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span>⌨️<span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span>文档翻译<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;output-wrap&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;transbox&quot;</span>&gt;</span>&#123;&#123;result&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-comment">// 接口地址：https://applet-base-api-t.itheima.net/api/translate</span></span><br><span class="language-javascript">  <span class="hljs-comment">// 请求方式：get</span></span><br><span class="language-javascript">  <span class="hljs-comment">// 请求参数：</span></span><br><span class="language-javascript">  <span class="hljs-comment">// （1）words：需要被翻译的文本（必传）</span></span><br><span class="language-javascript">  <span class="hljs-comment">// （2）lang： 需要被翻译成的语言（可选）默认值-意大利</span></span><br><span class="language-javascript">  <span class="hljs-comment">// -----------------------------------------------</span></span><br><span class="language-javascript">  </span><br><span class="language-javascript">  <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">    <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">    <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">      <span class="hljs-attr">words</span>: <span class="hljs-string">&#x27;&#x27;</span>,</span><br><span class="language-javascript">      <span class="hljs-attr">obj</span>:&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">innerwords</span>:<span class="hljs-string">&#x27;&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">lang</span>:<span class="hljs-string">&#x27;italy&#x27;</span></span><br><span class="language-javascript">      &#125;,</span><br><span class="language-javascript">      <span class="hljs-attr">result</span>:<span class="hljs-string">&#x27;&#x27;</span></span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">    <span class="hljs-comment">// 具体讲解：(1) watch语法 (2) 具体业务实现</span></span><br><span class="language-javascript">    <span class="hljs-attr">watch</span>:&#123;</span><br><span class="language-javascript">      <span class="hljs-attr">obj</span>:&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">deep</span>:<span class="hljs-literal">true</span>,</span><br><span class="language-javascript">        <span class="hljs-title function_">handler</span>(<span class="hljs-params">newValue</span>)&#123;</span><br><span class="language-javascript">          <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;change&quot;</span>,newValue);</span><br><span class="language-javascript">        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">async</span> () =&gt; &#123;</span><br><span class="language-javascript">          <span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> <span class="hljs-title function_">axios</span>(&#123;</span><br><span class="language-javascript">          <span class="hljs-attr">url</span>:<span class="hljs-string">&quot;https://applet-base-api-t.itheima.net/api/translate&quot;</span>,</span><br><span class="language-javascript">          <span class="hljs-attr">params</span>:&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">words</span>:newValue</span><br><span class="language-javascript">          &#125;</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">result</span> = res.<span class="hljs-property">data</span>.<span class="hljs-property">data</span></span><br><span class="language-javascript">        &#125;, <span class="hljs-number">1000</span>);</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>此时只有当数据发生变化时，才会响应数据，如果需求未更新数据时，提前响应数据。则需要设置immediate属性</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs html">    watch:&#123;<br>      obj:&#123;<br>        deep:true,<br>    immediate:true,<br>        handler(newValue)&#123;<br>          console.log(&quot;change&quot;,newValue);<br>        setTimeout(async () =&gt; &#123;<br>          const res = await axios(&#123;<br>          url:&quot;https://applet-base-api-t.itheima.net/api/translate&quot;,<br>          params:&#123;<br>            words:newValue<br>          &#125;<br>        &#125;)<br>        this.result = res.data.data<br>        &#125;, 1000);<br>        &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="watch侦听器的写法有几种？"><a href="#watch侦听器的写法有几种？" class="headerlink" title="watch侦听器的写法有几种？"></a>watch侦听器的写法有几种？</h2><p>1.简单写法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">watch</span>: &#123;<br>  数据属性名 (newValue, oldValue) &#123;<br>    一些业务逻辑 或 异步操作。 <br>  &#125;,<br>  <span class="hljs-string">&#x27;对象.属性名&#x27;</span> (newValue, oldValue) &#123;<br>    一些业务逻辑 或 异步操作。 <br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2.完整写法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">watch</span>: &#123;<span class="hljs-comment">// watch 完整写法</span><br>  数据属性名: &#123;<br>    <span class="hljs-attr">deep</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 深度监视(针对复杂类型)</span><br>    <span class="hljs-attr">immediate</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 是否立刻执行一次handler</span><br>    handler (newValue) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(newValue)<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="综合案例"><a href="#综合案例" class="headerlink" title="综合案例"></a>综合案例</h2><p>购物车案例</p><p>需求说明：</p><ol><li>渲染功能</li><li>删除功能</li><li>修改个数</li><li>全选反选</li><li>统计 选中的 总价 和 总数量 </li><li>持久化到本地</li></ol><p>实现思路：</p><ol><li>基本渲染：  v-for遍历、:class动态绑定样式</li><li>删除功能 ： v-on 绑定事件，获取当前行的id</li><li>修改个数 ： v-on绑定事件，获取当前行的id，进行筛选出对应的项然后增加或减少</li><li>全选反选 <ol><li>必须所有的小选框都选中，全选按钮才选中 → every</li><li>如果全选按钮选中，则所有小选框都选中</li><li>如果全选取消，则所有小选框都取消选中</li></ol></li></ol><p>声明计算属性，判断数组中的每一个checked属性的值，看是否需要全部选</p><ol start="5"><li>统计 选中的 总价 和 总数量 ：通过计算属性来计算选中的总价和总数量</li><li>持久化到本地： 在数据变化时都要更新下本地存储 watch</li></ol>]]></content>
    
    
    <categories>
      
      <category>Vue2</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>3_计算属性</title>
    <link href="/2023/09/27/%E9%BB%91%E9%A9%AC-Vue2/3_%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7/"/>
    <url>/2023/09/27/%E9%BB%91%E9%A9%AC-Vue2/3_%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7/</url>
    
    <content type="html"><![CDATA[<h1 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h1><h2 id="computed计算属性"><a href="#computed计算属性" class="headerlink" title="computed计算属性"></a>computed计算属性</h2><h3 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h3><p>基于<strong>现有的数据</strong>，计算出来的<strong>新属性</strong>。 <strong>依赖</strong>的数据变化，<strong>自动</strong>重新计算。</p><h3 id="2-语法"><a href="#2-语法" class="headerlink" title="2.语法"></a>2.语法</h3><ol><li>声明在 <strong>computed 配置项</strong>中，一个计算属性对应一个函数</li><li>使用起来和普通属性一样使用  </li></ol><h3 id="3-注意"><a href="#3-注意" class="headerlink" title="3.注意"></a>3.注意</h3><ol><li>computed配置项和data配置项是<strong>同级</strong>的</li><li>computed中的计算属性<strong>虽然是函数的写法</strong>，但他<strong>依然是个属性</strong></li><li>computed中的计算属性<strong>不能</strong>和data中的属性<strong>同名</strong></li><li>使用computed中的计算属性和使用data中的属性是一样的用法</li><li>computed中计算属性内部的<strong>this</strong>依然<strong>指向的是Vue实例</strong></li></ol><p><img src="/assets/image-20230927233422607.png" alt="image-20230927233422607"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">  <span class="hljs-selector-tag">table</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#000</span>;</span><br><span class="language-css">    <span class="hljs-attribute">text-align</span>: center;</span><br><span class="language-css">    <span class="hljs-attribute">width</span>: <span class="hljs-number">240px</span>;</span><br><span class="language-css">  &#125;</span><br><span class="language-css">  <span class="hljs-selector-tag">th</span>,<span class="hljs-selector-tag">td</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#000</span>;</span><br><span class="language-css">  &#125;</span><br><span class="language-css">  <span class="hljs-selector-tag">h3</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">position</span>: relative;</span><br><span class="language-css">  &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>小黑的礼物清单<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>名字<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>数量<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item, index) in list&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;item.id&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123; item.name &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123; item.num &#125;&#125;个<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 目标：统计求和，求得礼物总数 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>礼物总数：&#123;&#123;totalCount&#125;&#125; 个<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">    <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">    <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">      <span class="hljs-attr">list</span>: [</span><br><span class="language-javascript">          &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;篮球&#x27;</span>, <span class="hljs-attr">num</span>: <span class="hljs-number">1</span> &#125;,</span><br><span class="language-javascript">          &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;玩具&#x27;</span>, <span class="hljs-attr">num</span>: <span class="hljs-number">2</span> &#125;,</span><br><span class="language-javascript">          &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;铅笔&#x27;</span>, <span class="hljs-attr">num</span>: <span class="hljs-number">5</span> &#125;,</span><br><span class="language-javascript">        ]</span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">    <span class="hljs-attr">computed</span>:&#123;</span><br><span class="language-javascript">      <span class="hljs-title function_">totalCount</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">        sum = <span class="hljs-variable language_">this</span>.<span class="hljs-property">list</span>.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">sum,item</span>) =&gt;</span> sum + item.<span class="hljs-property">num</span>,<span class="hljs-number">0</span>)</span><br><span class="language-javascript">        <span class="hljs-keyword">return</span> sum</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="computed计算属性-VS-methods方法"><a href="#computed计算属性-VS-methods方法" class="headerlink" title="computed计算属性 VS methods方法"></a>computed计算属性 VS methods方法</h2><h3 id="1-computed计算属性"><a href="#1-computed计算属性" class="headerlink" title="1.computed计算属性"></a>1.computed计算属性</h3><p>作用：封装了一段对于<strong>数据</strong>的处理，求得一个<strong>结果</strong></p><p>语法：</p><ol><li>写在computed配置项中</li><li>作为属性，直接使用<ul><li>js中使用计算属性： this.计算属性</li><li>模板中使用计算属性：</li></ul></li></ol><h3 id="2-methods计算属性"><a href="#2-methods计算属性" class="headerlink" title="2.methods计算属性"></a>2.methods计算属性</h3><p>作用：给Vue实例提供一个<strong>方法</strong>，调用以<strong>处理业务逻辑</strong>。</p><p>语法：</p><ol><li>写在methods配置项中</li><li>作为方法调用<ul><li>js中调用：<code>this.方法名()</code></li><li>模板中调用<code>&#123;&#123;方法名()&#125;&#125; </code>或者 <code>@事件名=“方法名”</code></li></ul></li></ol><p><img src="/assets/image-20230927234906935.png" alt="image-20230927234906935"></p><h3 id="3-计算属性的优势"><a href="#3-计算属性的优势" class="headerlink" title="3.计算属性的优势"></a>3.计算属性的优势</h3><ol><li><p>缓存特性（提升性能）</p><p>计算属性会对计算出来的结果缓存，再次使用直接读取缓存，</p><p>依赖项变化了，会自动重新计算 → 并再次缓存</p></li><li><p>methods没有缓存特性</p></li><li><p>通过代码比较</p></li></ol><p><img src="/assets/image-20230927234938474.png" alt="image-20230927234938474"></p><h2 id="计算属性的完整写法"><a href="#计算属性的完整写法" class="headerlink" title="计算属性的完整写法"></a>计算属性的完整写法</h2><p><strong>既然计算属性也是属性，能访问，应该也能修改了？</strong></p><ol><li>计算属性默认的简写，只能读取访问，不能 “修改”</li><li>如果要 “修改”  → 需要写计算属性的完整写法</li></ol><p><img src="/assets/image-20230927235305755.png" alt="image-20230927235305755"></p><p><img src="/assets/image-20230927235746839.png" alt="image-20230927235746839"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    姓：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;firstName&quot;</span>&gt;</span> +<br>    名：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;lastName&quot;</span>&gt;</span> =<br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;&#123;fullname&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;changeName&quot;</span>&gt;</span>改名卡<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">    <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">    <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">      <span class="hljs-attr">firstName</span>: <span class="hljs-string">&#x27;刘&#x27;</span>,</span><br><span class="language-javascript">      <span class="hljs-attr">lastName</span>: <span class="hljs-string">&#x27;备&#x27;</span></span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">    <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">      <span class="hljs-title function_">changeName</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">fullname</span> = <span class="hljs-string">&#x27;哇水水&#x27;</span></span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">    <span class="hljs-attr">computed</span>: &#123;</span><br><span class="language-javascript">      <span class="hljs-attr">fullname</span>: &#123;</span><br><span class="language-javascript">        <span class="hljs-title function_">get</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">          <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">firstName</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">lastName</span></span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-title function_">set</span>(<span class="hljs-params">value</span>) &#123;</span><br><span class="language-javascript">          <span class="hljs-variable language_">this</span>.<span class="hljs-property">firstName</span> = value.<span class="hljs-title function_">slice</span>(<span class="hljs-number">0</span>,<span class="hljs-number">1</span>)</span><br><span class="language-javascript">          <span class="hljs-variable language_">this</span>.<span class="hljs-property">lastName</span> = value.<span class="hljs-title function_">slice</span>(<span class="hljs-number">1</span>)</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="综合案例-成绩案例"><a href="#综合案例-成绩案例" class="headerlink" title="综合案例-成绩案例"></a>综合案例-成绩案例</h2><h3 id="功能描述"><a href="#功能描述" class="headerlink" title="功能描述"></a>功能描述</h3><ol><li>渲染功能</li><li>删除功能</li><li>添加功能</li><li>统计总分，求平均分</li></ol><h3 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h3><ol><li>渲染功能  v-for  :key  v-bind:动态绑定class的样式</li><li>删除功能 v-on绑定事件， 阻止a标签的默认行为</li><li>v-model的修饰符 .trim、 .number、  判断数据是否为空后 再添加、添加后清空文本框的数据</li><li>使用计算属性computed 计算总分和平均分的值</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;score-case&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;table&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">thead</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>编号<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>科目<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>成绩<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>操作<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>  <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item, index) in list&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;item.id&quot;</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123;index+1&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123;item.subject&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;red&quot;</span>&gt;</span>&#123;&#123;item.score&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;del(item.id)&quot;</span>&gt;</span>删除<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">colspan</span>=<span class="hljs-string">&quot;5&quot;</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;none&quot;</span>&gt;</span>暂无数据<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tfoot</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">colspan</span>=<span class="hljs-string">&quot;5&quot;</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>总分：&#123;&#123;scoresum&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;margin-left: 50px&quot;</span>&gt;</span>平均分：&#123;&#123;scoreavg&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tfoot</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-item&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;label&quot;</span>&gt;</span>科目：<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;input&quot;</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span><br><span class="hljs-tag">            <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入科目&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">v-model.trim</span>=<span class="hljs-string">&quot;subject&quot;</span></span><br><span class="hljs-tag">          /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-item&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;label&quot;</span>&gt;</span>分数：<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;input&quot;</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span><br><span class="hljs-tag">            <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入分数&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">v-model.number</span>=<span class="hljs-string">&quot;score&quot;</span></span><br><span class="hljs-tag">          /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-item&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;label&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;input&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;addData&quot;</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span>添加<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">      <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">      <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">list</span>: [</span><br><span class="language-javascript">          &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">subject</span>: <span class="hljs-string">&#x27;语文&#x27;</span>, <span class="hljs-attr">score</span>: <span class="hljs-number">20</span> &#125;,</span><br><span class="language-javascript">          &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">7</span>, <span class="hljs-attr">subject</span>: <span class="hljs-string">&#x27;数学&#x27;</span>, <span class="hljs-attr">score</span>: <span class="hljs-number">99</span> &#125;,</span><br><span class="language-javascript">          &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">12</span>, <span class="hljs-attr">subject</span>: <span class="hljs-string">&#x27;英语&#x27;</span>, <span class="hljs-attr">score</span>: <span class="hljs-number">70</span> &#125;,</span><br><span class="language-javascript">        ],</span><br><span class="language-javascript">        <span class="hljs-attr">subject</span>: <span class="hljs-string">&#x27;&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">score</span>: <span class="hljs-string">&#x27;&#x27;</span>,</span><br><span class="language-javascript">      &#125;,</span><br><span class="language-javascript">      <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">        <span class="hljs-title function_">del</span>(<span class="hljs-params">id</span>)&#123;</span><br><span class="language-javascript">          <span class="hljs-variable language_">this</span>.<span class="hljs-property">list</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">list</span>.<span class="hljs-title function_">filter</span>(<span class="hljs-function"><span class="hljs-params">list</span> =&gt;</span> list.<span class="hljs-property">id</span> != id)</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-title function_">addData</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">          <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">subject</span>.<span class="hljs-title function_">trim</span>()===<span class="hljs-string">&#x27;&#x27;</span>||<span class="hljs-variable language_">this</span>.<span class="hljs-property">score</span>.<span class="hljs-title function_">trim</span>()===<span class="hljs-string">&#x27;&#x27;</span>)&#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;请输入内容&quot;</span>)</span><br><span class="language-javascript">            <span class="hljs-keyword">return</span></span><br><span class="language-javascript">          &#125;</span><br><span class="language-javascript">          <span class="hljs-variable language_">this</span>.<span class="hljs-property">list</span>.<span class="hljs-title function_">unshift</span>(&#123; </span><br><span class="language-javascript">            <span class="hljs-attr">subject</span>:<span class="hljs-variable language_">this</span>.<span class="hljs-property">subject</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">score</span>:<span class="hljs-variable language_">this</span>.<span class="hljs-property">score</span></span><br><span class="language-javascript">          &#125;)</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">      &#125;,</span><br><span class="language-javascript">      <span class="hljs-attr">computed</span>:&#123;</span><br><span class="language-javascript">        <span class="hljs-title function_">scoresum</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">          <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">list</span>.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">sum,item</span>) =&gt;</span> sum + item.<span class="hljs-property">score</span>,<span class="hljs-number">0</span>)</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-title function_">scoreavg</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">          <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">list</span>.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">sum,item</span>) =&gt;</span> sum + item.<span class="hljs-property">score</span>,<span class="hljs-number">0</span>) / <span class="hljs-variable language_">this</span>.<span class="hljs-property">list</span>.<span class="hljs-property">length</span></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Vue2</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>2_VUE指令</title>
    <link href="/2023/09/26/%E9%BB%91%E9%A9%AC-Vue2/2_VUE%E6%8C%87%E4%BB%A4/"/>
    <url>/2023/09/26/%E9%BB%91%E9%A9%AC-Vue2/2_VUE%E6%8C%87%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h1 id="VUE指令"><a href="#VUE指令" class="headerlink" title="VUE指令"></a>VUE指令</h1><p>指令：Vue提供的带有v-前缀的特殊标签，可以提高程序员操作 DOM 的效率</p><p>vue 中的指令按照不同的用途可以分为如下 6 大类：</p><ul><li>内容渲染指令（v-html、v-text）</li><li>条件渲染指令（v-show、v-if、v-else、v-else-if）</li><li>事件绑定指令（v-on）</li><li>属性绑定指令 （v-bind）</li><li>双向绑定指令（v-model）</li><li>列表渲染指令（v-for）</li></ul><h2 id="内容渲染指令"><a href="#内容渲染指令" class="headerlink" title="内容渲染指令"></a>内容渲染指令</h2><h3 id="v-html"><a href="#v-html" class="headerlink" title="v-html"></a>v-html</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-html</span>=<span class="hljs-string">&quot;baidu&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">data</span>:&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">baidu</span>:<span class="hljs-string">&#x27;&lt;a href=&quot;http://www.baidu.com&quot;&gt;baidu&lt;/a&gt;&#x27;</span></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/assets/image-20230926101455597.png" alt="image-20230926101455597"></p><h2 id="条件渲染指令"><a href="#条件渲染指令" class="headerlink" title="条件渲染指令"></a>条件渲染指令</h2><h3 id="v-show（css）"><a href="#v-show（css）" class="headerlink" title="v-show（css）"></a>v-show（css）</h3><ol><li>作用：控制元素显示隐藏</li><li>一旦隐藏，则是以display:none实现</li><li>场景：适合频繁切换显示隐藏的场景</li></ol><h3 id="v-if（js）"><a href="#v-if（js）" class="headerlink" title="v-if（js）"></a>v-if（js）</h3><ol><li>作用：控制元素显示隐藏（<strong>条件渲染</strong>）</li><li>一旦隐藏，则是以节点删除实现</li><li>场景：适合不频繁切换显示隐藏的场景</li></ol><p>二者使用效果一致，但实现原理不同！</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">&quot;flag&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span>我是v-show控制的盒子<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;flag&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span>我是v-if控制的盒子<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">data</span>:&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">flag</span>: <span class="hljs-literal">false</span></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/assets/image-20230926141535857.png" alt="image-20230926141535857"></p><h3 id="v-else-if和v-else"><a href="#v-else-if和v-else" class="headerlink" title="v-else-if和v-else"></a>v-else-if和v-else</h3><ol><li>作用：辅助v-if进行判断渲染</li><li>语法：v-else  v-else-if&#x3D;”表达式”</li><li>需要紧接着v-if使用</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;gender === 1&quot;</span>&gt;</span>性别：♂ 男<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-else</span>&gt;</span>性别：♀ 女<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;score &gt; 90&quot;</span>&gt;</span>成绩评定A：奖励电脑一台<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-else-if</span>=<span class="hljs-string">&quot;score &gt;= 70&quot;</span>&gt;</span>成绩评定B：奖励周末郊游<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-else-if</span>=<span class="hljs-string">&quot;score &gt;= 60&quot;</span>&gt;</span>成绩评定C：奖励零食礼包<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-else</span>&gt;</span>成绩评定D：惩罚一周不能玩手机<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">data</span>:&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">flag</span>: <span class="hljs-literal">false</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">gender</span>: <span class="hljs-number">1</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">score</span>: <span class="hljs-number">66</span></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/assets/image-20230926142935979.png" alt="image-20230926142935979"></p><h3 id="v-on"><a href="#v-on" class="headerlink" title="v-on"></a>v-on</h3><ol><li><p>作用：注册事件&#x3D;添加监听+提供处理逻辑</p></li><li><p>语法：</p><ol><li><p>v-on：事件名 &#x3D; “内联语句”</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">&quot;count&gt;0?count--:count&quot;</span>&gt;</span>-<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;&#123; count &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">&quot;count++&quot;</span>&gt;</span>+<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">data</span>:&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">count</span>:<span class="hljs-number">1</span></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>即<code>v-on:</code>可以替换为@，<code>v-on:click</code>简写为<code>@click</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;count&gt;0?count--:count&quot;</span>&gt;</span>-<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;&#123; count &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;count++&quot;</span>&gt;</span>+<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">data</span>:&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">count</span>:<span class="hljs-number">1</span></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>v-on：事件名&#x3D;”methods中的函数”</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">mouseenter</span>=<span class="hljs-string">&quot;funClose&quot;</span>&gt;</span>close<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">mouseenter</span>=<span class="hljs-string">&quot;funOpen&quot;</span>&gt;</span>open<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">&quot;isShow&quot;</span>&gt;</span>hihi<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">data</span>:&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">count</span>:<span class="hljs-number">1</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">isShow</span>:<span class="hljs-literal">true</span></span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">funOpen</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">this</span>.<span class="hljs-property">isShow</span> = <span class="hljs-literal">true</span></span><br><span class="language-javascript">            &#125;,</span><br><span class="language-javascript">            <span class="hljs-title function_">funClose</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">this</span>.<span class="hljs-property">isShow</span> = <span class="hljs-literal">false</span></span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">    &#125;)</span><br></code></pre></td></tr></table></figure><p><img src="/assets/image-20230926155638260.png" alt="image-20230926155638260"></p><p><img src="/assets/image-20230926155647261.png" alt="image-20230926155647261"></p></li><li><p>v-on调用传参</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.box</span> &#123;</span><br><span class="language-css">          <span class="hljs-attribute">border</span>: <span class="hljs-number">3px</span> solid <span class="hljs-number">#000000</span>;</span><br><span class="language-css">          <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">10px</span>;</span><br><span class="language-css">          <span class="hljs-attribute">padding</span>: <span class="hljs-number">20px</span>;</span><br><span class="language-css">          <span class="hljs-attribute">margin</span>: <span class="hljs-number">20px</span>;</span><br><span class="language-css">          <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-tag">h3</span> &#123;</span><br><span class="language-css">          <span class="hljs-attribute">margin</span>: <span class="hljs-number">10px</span> <span class="hljs-number">0</span> <span class="hljs-number">20px</span> <span class="hljs-number">0</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-tag">p</span> &#123;</span><br><span class="language-css">          <span class="hljs-attribute">margin</span>: <span class="hljs-number">20px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">      </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>    <br>     <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>小黑自动售货机<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;buy(5)&quot;</span>&gt;</span>可乐5元<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;buy(10)&quot;</span>&gt;</span>咖啡10元<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;buy(8)&quot;</span>&gt;</span>牛奶8元<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>银行卡余额：&#123;&#123; money &#125;&#125;元<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">data</span>:&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">money</span>:<span class="hljs-number">500</span></span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">buy</span>(<span class="hljs-params">value</span>)&#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">this</span>.<span class="hljs-property">money</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">money</span>-value</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">    &#125;)</span><br></code></pre></td></tr></table></figure></li></ol></li></ol><h3 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h3><ol><li>作用：动态的设置html的标签属性</li><li>语法：v-bind</li></ol><p>比如，有一个图片，它的 <code>src</code> 属性值，是一个图片地址。这个地址在数据 data 中存储。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">v-bind:src</span>=<span class="hljs-string">&quot;imgUrl&quot;</span> <span class="hljs-attr">v-bind:alt</span>=<span class="hljs-string">&quot;msg&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 可简写为 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">:src</span>=<span class="hljs-string">&quot;imgUrl&quot;</span> <span class="hljs-attr">:alt</span>=<span class="hljs-string">&quot;msg&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">data</span>:&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">imgUrl</span>:<span class="hljs-string">&#x27;拔刀斋1.png&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">msg</span>: <span class="hljs-string">&#x27;padosa&#x27;</span></span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>对于<code>v-bind:</code>可以简写为<code>:</code>,即<code>v-bind:src</code>简为<code>:src</code></p><p>图片切换案例</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;index&gt;0?--index:index&quot;</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">&quot;index != 0&quot;</span>&gt;</span>上一张<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">:src</span>=<span class="hljs-string">&quot;imgUrls[index]&quot;</span> <span class="hljs-attr">:alt</span>=<span class="hljs-string">&quot;msg&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;2&gt;index?++index:index&quot;</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">&quot;index != 2&quot;</span>&gt;</span>下一张<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">data</span>:&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">imgUrls</span>:[<span class="hljs-string">&#x27;/img/padosak.png&#x27;</span>,<span class="hljs-string">&#x27;/img/anya.jpg&#x27;</span>,<span class="hljs-string">&#x27;/img/DesktopBkg.jpg&#x27;</span>],</span><br><span class="language-javascript">            <span class="hljs-attr">index</span>:<span class="hljs-number">0</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">msg</span>: <span class="hljs-string">&#x27;padosa&#x27;</span></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h3><ol><li><p>作用：基于数组循环渲染一个列表结构</p><p>v-for 指令需要使用 <code>(item, index) in arr</code> 形式的特殊语法，其中：</p><ul><li>item 是数组中的每一项</li><li>index 是每一项的索引，不需要可以省略</li><li>arr 是被遍历的数组</li></ul></li><li><p>语法</p><p><code>v-for=&quot;(item,index) in 数组&quot;</code></p><p>item是每一项，index是每一个下标</p></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item, index) in List&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;i&quot;</span>&gt;</span>&#123;&#123;index&#125;&#125;:&#123;&#123;item&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">data</span>:&#123;</span><br><span class="language-javascript">            <span class="hljs-title class_">List</span>:[<span class="hljs-string">&#x27;watermelon&#x27;</span>,<span class="hljs-string">&#x27;apple&#x27;</span>,<span class="hljs-string">&#x27;pine&#x27;</span>]</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>案例：</p><blockquote><p>需求：</p><p>1.根据左侧数据渲染出右侧列表（v-for）</p><p>2.点击删除按钮时，应该把当前行从列表中删除（获取当前行的id，利用filter进行过滤）</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item, index) in booksList&quot;</span><span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;item.id&quot;</span>&gt;</span>&#123;&#123;item.name&#125;&#125; &#123;&#123;item.author&#125;&#125; <br>            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;del(item.id)&quot;</span>&gt;</span>删除<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">data</span>:&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">booksList</span>: [</span><br><span class="language-javascript">          &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;《红楼梦》&#x27;</span>, <span class="hljs-attr">author</span>: <span class="hljs-string">&#x27;曹雪芹&#x27;</span> &#125;,</span><br><span class="language-javascript">          &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;《西游记》&#x27;</span>, <span class="hljs-attr">author</span>: <span class="hljs-string">&#x27;吴承恩&#x27;</span> &#125;,</span><br><span class="language-javascript">          &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;《水浒传》&#x27;</span>, <span class="hljs-attr">author</span>: <span class="hljs-string">&#x27;施耐庵&#x27;</span> &#125;,</span><br><span class="language-javascript">          &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">4</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;《三国演义》&#x27;</span>, <span class="hljs-attr">author</span>: <span class="hljs-string">&#x27;罗贯中&#x27;</span> &#125;</span><br><span class="language-javascript">        ]</span><br><span class="language-javascript">      &#125;,</span><br><span class="language-javascript">      <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">        <span class="hljs-title function_">del</span>(<span class="hljs-params">id</span>)&#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">this</span>.<span class="hljs-property">booksList</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">booksList</span>.<span class="hljs-title function_">filter</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item.<span class="hljs-property">id</span> !== id)</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>v-for中:key</strong></p><ul><li>作用：给列表项添加的唯一标识。便于Vue进行列表项的正确排序复用。</li><li>不加key的情况下，v-for的默认行为会尝试原地修改元素，当数据从四项删到三项之后，页面中的四个li应该删到三个li，原先在第一个li的颜色布局因为没有key的存在，不会跟随之前项的删除而消失，而是布局给第二项。如果加了key，每一项数据都有唯一标识，那么布局都会随着数据的删除而消失。</li></ul><p><img src="/assets/image-20230926201140549.png" alt="image-20230926201140549"></p><p>注意：</p><ol><li>key 的值只能是字符串 或 数字类型</li><li>key 的值必须具有唯一性</li><li>推荐使用  id 作为 key（唯一），不推荐使用 index 作为 key（会变化，不对应）</li></ol><h3 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h3><ul><li>作用：给表单元素（input、radio、select）使用，<strong>双向绑定</strong>数据，可以快速获取或设置表单元素内容</li><li>所谓双向绑定就是：<ol><li>数据改变后，呈现的页面结果会更新</li><li>页面结果更新后，数据也会随之而变</li></ol></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        账户：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>        密码：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;login&quot;</span>&gt;</span>登录<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;reset&quot;</span>&gt;</span>重置<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">username</span>:<span class="hljs-string">&#x27;&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">password</span>:<span class="hljs-string">&#x27;&#x27;</span></span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">login</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript"></span><br><span class="language-javascript">            &#125;,</span><br><span class="language-javascript">            <span class="hljs-title function_">reset</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">this</span>.<span class="hljs-property">username</span> = <span class="hljs-string">&#x27;&#x27;</span>,</span><br><span class="language-javascript">                <span class="hljs-variable language_">this</span>.<span class="hljs-property">password</span> = <span class="hljs-string">&#x27;&#x27;</span></span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/assets/image-20230926203305261.png" alt="image-20230926203305261"></p><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><p><strong>功能需求：</strong></p><ol><li><p>列表渲染</p></li><li><p>删除功能</p></li><li><p>添加功能(难点)</p></li><li><p>底部统计 和 清空</p></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 主体区域 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">section</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- 输入框 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">header</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;header&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>小黑记事本<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入任务&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;new-todo&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;itemContent&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;add&quot;</span>&gt;</span>添加任务<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">header</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- 列表区域 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">section</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;main&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;todo-list&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;todo&quot;</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item, index) in list&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;item.id&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;view&quot;</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;index&quot;</span>&gt;</span>&#123;&#123;index + 1&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>&#123;&#123;item.thing&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;del(item.id)&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;destroy&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- 统计和清空 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">footer</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;footer&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 统计 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;todo-count&quot;</span>&gt;</span>合 计:<span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span> 1 <span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 清空 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;clear-completed&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;delAll&quot;</span>&gt;</span><br>      清空任务<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">footer</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 底部 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">    <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">    <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">      <span class="hljs-attr">list</span>:[</span><br><span class="language-javascript">        &#123;<span class="hljs-attr">id</span>:<span class="hljs-number">1</span>,<span class="hljs-attr">thing</span>:<span class="hljs-string">&#x27;打豆豆&#x27;</span>&#125;,</span><br><span class="language-javascript">        &#123;<span class="hljs-attr">id</span>:<span class="hljs-number">2</span>,<span class="hljs-attr">thing</span>:<span class="hljs-string">&#x27;打游戏&#x27;</span>&#125;,</span><br><span class="language-javascript">        &#123;<span class="hljs-attr">id</span>:<span class="hljs-number">3</span>,<span class="hljs-attr">thing</span>:<span class="hljs-string">&#x27;打条铁&#x27;</span>&#125;</span><br><span class="language-javascript">      ],</span><br><span class="language-javascript">      <span class="hljs-attr">itemContent</span>:<span class="hljs-string">&#x27;&#x27;</span></span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">    <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">      <span class="hljs-title function_">del</span>(<span class="hljs-params">id</span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">list</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">list</span>.<span class="hljs-title function_">filter</span>(<span class="hljs-function"><span class="hljs-params">list</span> =&gt;</span> list.<span class="hljs-property">id</span> !== id)</span><br><span class="language-javascript">      &#125;,</span><br><span class="language-javascript">      <span class="hljs-title function_">delAll</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">list</span> = &#123;&#125;</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">  &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>针对添加功能(难点)，可以采取以下思路：</p><ol><li><p>通过v-model绑定，实时获取表单元素的内容</p><p><img src="/assets/image-20230926212842998.png" alt="image-20230926212842998"><img src="/assets/image-20230926212903546.png" alt="image-20230926212903546"></p></li><li><p>点击按钮，进行新增，往数组最前面增加内容</p><p><img src="/assets/image-20230926215834279.png" alt="image-20230926215834279"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 主体区域 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">section</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- 输入框 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">header</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;header&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>小黑记事本<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入任务&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;new-todo&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;todoContent&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;add&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;add&quot;</span>&gt;</span>添加任务<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">header</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- 列表区域 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">section</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;main&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;todo-list&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;todo&quot;</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item, index) in list&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;item.id&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;view&quot;</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;index&quot;</span>&gt;</span>&#123;&#123;index + 1&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>&#123;&#123;item.thing&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;del(item.id)&quot;</span>  <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;destroy&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- 统计和清空 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">footer</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;footer&quot;</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">&quot;list.length!==0&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 统计 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;todo-count&quot;</span> &gt;</span>合 计:<span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span> &#123;&#123;list.length&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 清空 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;clear-completed&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;delAll&quot;</span>&gt;</span><br>      清空任务<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">footer</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 底部 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">    <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">    <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">      <span class="hljs-attr">list</span>:[</span><br><span class="language-javascript">        &#123;<span class="hljs-attr">id</span>:<span class="hljs-number">1</span>,<span class="hljs-attr">thing</span>:<span class="hljs-string">&#x27;打豆豆&#x27;</span>&#125;,</span><br><span class="language-javascript">        &#123;<span class="hljs-attr">id</span>:<span class="hljs-number">2</span>,<span class="hljs-attr">thing</span>:<span class="hljs-string">&#x27;打游戏&#x27;</span>&#125;,</span><br><span class="language-javascript">        &#123;<span class="hljs-attr">id</span>:<span class="hljs-number">3</span>,<span class="hljs-attr">thing</span>:<span class="hljs-string">&#x27;打条铁&#x27;</span>&#125;</span><br><span class="language-javascript">      ],</span><br><span class="language-javascript">      <span class="hljs-attr">todoContent</span>: <span class="hljs-string">&#x27;&#x27;</span></span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">    <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">      <span class="hljs-title function_">del</span>(<span class="hljs-params">id</span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">list</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">list</span>.<span class="hljs-title function_">filter</span>(<span class="hljs-function"><span class="hljs-params">list</span> =&gt;</span> list.<span class="hljs-property">id</span> !== id);</span><br><span class="language-javascript">      &#125;,</span><br><span class="language-javascript">      <span class="hljs-title function_">delAll</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">list</span> = []</span><br><span class="language-javascript">      &#125;,</span><br><span class="language-javascript">      <span class="hljs-title function_">add</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">todoContent</span>.<span class="hljs-title function_">trim</span>() === <span class="hljs-string">&#x27;&#x27;</span>)&#123;</span><br><span class="language-javascript">          <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;请输入任务&quot;</span>)</span><br><span class="language-javascript">          <span class="hljs-keyword">return</span></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">list</span>.<span class="hljs-title function_">unshift</span>(&#123;</span><br><span class="language-javascript">          <span class="hljs-attr">id</span>: +<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(),</span><br><span class="language-javascript">          <span class="hljs-attr">thing</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">todoContent</span></span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">  &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="指令修饰符"><a href="#指令修饰符" class="headerlink" title="指令修饰符"></a>指令修饰符</h2><p>指令修饰符就是通过“.”指明一些指令后缀</p><p>不同的后缀封装了不同的处理操作  —&gt; 简化代码</p><h3 id="keyup按键修饰符"><a href="#keyup按键修饰符" class="headerlink" title="keyup按键修饰符"></a>keyup按键修饰符</h3><p><code>@keyup.enter</code>键盘回车监听</p><p><img src="/assets/image-20230927210251113.png" alt="image-20230927210251113"></p><h3 id="v-model双绑修饰符"><a href="#v-model双绑修饰符" class="headerlink" title="v-model双绑修饰符"></a>v-model双绑修饰符</h3><p><code>v-model.trim</code>去除首尾空格</p><p><code>v-model.number</code>转数字</p><h3 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h3><ul><li><p>@事件名.stop —&gt; 阻止冒泡</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html">```html<br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;fatherFn&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;father&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> @<span class="hljs-attr">click.stop</span>=<span class="hljs-string">&quot;sonFn&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;son&quot;</span>&gt;</span>儿子<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    methods: &#123;<br>      fatherFn () &#123;<br>        alert(&#x27;老父亲被点击了&#x27;)<br>      &#125;,<br>      sonFn () &#123;<br>        // e.stopPropagation()<br>        alert(&#x27;儿子被点击了&#x27;)<br>      &#125;<br>    &#125;<br>```<br></code></pre></td></tr></table></figure></li><li><p>@事件名.prevent  —&gt;阻止默认行为</p><p>对于<code>&lt;a @click href=&quot;http://www.baidu.com&quot;&gt;阻止默认行为&lt;/a&gt;</code>默认行为是点击链接跳转指定地址。</p><p>更改为<code>&lt;a @click.prevent href=&quot;http://www.baidu.com&quot;&gt;阻止默认行为&lt;/a&gt;</code></p></li><li><p>@事件名.stop.prevent —&gt;可以连用 即阻止事件冒泡也阻止默认行为</p></li></ul><h2 id="v-bind对于样式的增强"><a href="#v-bind对于样式的增强" class="headerlink" title="v-bind对于样式的增强"></a>v-bind对于样式的增强</h2><p>为了方便开发者进行样式控制， Vue 扩展了 v-bind 的语法，可以针对 <strong>class 类名</strong> 和 <strong>style 行内样式</strong> 进行控制 。</p><ol><li>语法：</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span> :class = &quot;对象/数组&quot;&gt;这是一个div<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="2"><li><p>对象语法</p><p>当class动态绑定的是<strong>对象</strong>时，<strong>键就是类名，值就是布尔值</strong>，如果值是<strong>true</strong>，就有这个类，否则没有这个类</p></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">&quot;&#123; 类名1: 布尔值, 类名2: 布尔值 &#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>​    适用场景：一个类名，来回切换</p><p><img src="/assets/image-20230927215013892.png" alt="image-20230927215013892"></p><ol start="3"><li><p>数组语法</p><p>当class动态绑定的是<strong>数组</strong>时 → 数组中所有的类，都会添加到盒子上，本质就是一个 class 列表</p></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">&quot;[ `类名1`, `类名2`, `类名3` ]&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/assets/image-20230927215203777.png" alt="image-20230927215203777">   </p><p>使用场景:批量添加或删除类</p><h2 id="案例：京东秒杀-tab栏切换导航高亮"><a href="#案例：京东秒杀-tab栏切换导航高亮" class="headerlink" title="案例：京东秒杀-tab栏切换导航高亮"></a>案例：京东秒杀-tab栏切换导航高亮</h2><h3 id="1-需求"><a href="#1-需求" class="headerlink" title="1.需求"></a>1.需求</h3><p>​当我们点击哪个tab页签时，哪个tab页签就高亮</p><h3 id="2-代码实现"><a href="#2-代码实现" class="headerlink" title="2.代码实现"></a>2.代码实现</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item, index) in list&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;item.id&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;activeIndex = index&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">&quot;&#123;active:index === activeIndex&#125;&quot;</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">      <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">      <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">list</span>: [</span><br><span class="language-javascript">          &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;京东秒杀&#x27;</span> &#125;,</span><br><span class="language-javascript">          &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;每日特价&#x27;</span> &#125;,</span><br><span class="language-javascript">          &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;品类秒杀&#x27;</span> &#125;</span><br><span class="language-javascript">        ],</span><br><span class="language-javascript">        <span class="hljs-attr">activeIndex</span>:<span class="hljs-number">0</span></span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="3-思路"><a href="#3-思路" class="headerlink" title="3.思路"></a>3.思路</h3><p>1.基于数据，动态渲染tab（v-for）</p><p>2.准备一个下标 记录高亮的是哪一个 tab</p><p>3.基于下标动态切换class的类名</p><h2 id="v-bind对style的增强"><a href="#v-bind对style的增强" class="headerlink" title="v-bind对style的增强"></a>v-bind对style的增强</h2><h3 id="1-语法"><a href="#1-语法" class="headerlink" title="1.语法"></a>1.语法</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span> <span class="hljs-attr">:style</span>=<span class="hljs-string">&quot;&#123; CSS属性名1: CSS属性值, CSS属性名2: CSS属性值 &#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-代码实现-1"><a href="#2-代码实现-1" class="headerlink" title="2.代码实现"></a>2.代码实现</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">  <span class="hljs-selector-class">.box</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">    <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">    <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">187</span>, <span class="hljs-number">150</span>, <span class="hljs-number">156</span>);</span><br><span class="language-css">  &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span> <span class="hljs-attr">:style</span>=<span class="hljs-string">&quot;&#123;width:width + &#x27;px&#x27;,height:&#x27;200px&#x27;&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">    <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">    <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">      <span class="hljs-attr">width</span>:<span class="hljs-number">400</span></span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">    <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/assets/image-20230927222150589.png" alt="image-20230927222150589"></p><p><img src="/assets/image-20230927222206488.png" alt="image-20230927222206488"></p><h2 id="v-model应用于其他表单元素"><a href="#v-model应用于其他表单元素" class="headerlink" title="v-model应用于其他表单元素"></a>v-model应用于其他表单元素</h2><h3 id="1-讲解内容"><a href="#1-讲解内容" class="headerlink" title="1.讲解内容"></a>1.讲解内容</h3><p>常见的表单元素都可以用 v-model 绑定关联  →  快速 <strong>获取</strong> 或 <strong>设置</strong> 表单元素的值</p><p>它会根据  <strong>控件类型</strong> 自动选取  <strong>正确的方法</strong> 来更新元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">输入框  <span class="hljs-attr">input</span>:text   ——&gt; value<br>文本域  textarea ——&gt; value<br>复选框  <span class="hljs-attr">input</span>:checkbox  ——&gt; checked<br>单选框  <span class="hljs-attr">input</span>:radio   ——&gt; checked<br>下拉菜单 select    ——&gt; value<br>...<br></code></pre></td></tr></table></figure><h3 id="2-代码实现-2"><a href="#2-代码实现-2" class="headerlink" title="2.代码实现"></a>2.代码实现</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">  <span class="hljs-selector-tag">textarea</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">display</span>: block;</span><br><span class="language-css">    <span class="hljs-attribute">width</span>: <span class="hljs-number">240px</span>;</span><br><span class="language-css">    <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">    <span class="hljs-attribute">margin</span>: <span class="hljs-number">10px</span> <span class="hljs-number">0</span>;</span><br><span class="language-css">  &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>小黑学习网<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>    姓名：<br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span> <br>      <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    是否单身：<br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;isSingle&quot;</span>&gt;</span> <br>      <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- </span><br><span class="hljs-comment">      前置理解：</span><br><span class="hljs-comment">        1. name:  给单选框加上 name 属性 可以分组 → 同一组互相会互斥</span><br><span class="hljs-comment">        2. value: 给单选框加上 value 属性，用于提交给后台的数据</span><br><span class="hljs-comment">      结合 Vue 使用 → v-model</span><br><span class="hljs-comment">    --&gt;</span><br>    性别: <br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span>男<br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;0&quot;</span>&gt;</span>女<br>      <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- </span><br><span class="hljs-comment">      前置理解：</span><br><span class="hljs-comment">        1. option 需要设置 value 值，提交给后台</span><br><span class="hljs-comment">        2. select 的 value 值，关联了选中的 option 的 value 值</span><br><span class="hljs-comment">      结合 Vue 使用 → v-model</span><br><span class="hljs-comment">    --&gt;</span><br>    所在城市:<br>      <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;city&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;beijin&quot;</span>&gt;</span>北京<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;shanghai&quot;</span>&gt;</span>上海<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;chengdu&quot;</span>&gt;</span>成都<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;nanjin&quot;</span>&gt;</span>南京<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    自我描述：<br>      <span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;textarea&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>立即注册<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">    <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">    <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">      <span class="hljs-attr">username</span>:<span class="hljs-string">&#x27;&#x27;</span>,</span><br><span class="language-javascript">      <span class="hljs-attr">isSingle</span>:<span class="hljs-literal">true</span>,</span><br><span class="language-javascript">      <span class="hljs-attr">gender</span>:<span class="hljs-string">&quot;1&quot;</span>,</span><br><span class="language-javascript">      <span class="hljs-attr">city</span>:<span class="hljs-string">&#x27;beijin&#x27;</span>,</span><br><span class="language-javascript">      <span class="hljs-attr">textarea</span>:<span class="hljs-string">&#x27;&#x27;</span></span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Vue2</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>简历</title>
    <link href="/2023/09/26/%E7%AE%80%E5%8E%86%E6%95%99%E5%AD%A6/%E7%AE%80%E5%8E%86/"/>
    <url>/2023/09/26/%E7%AE%80%E5%8E%86%E6%95%99%E5%AD%A6/%E7%AE%80%E5%8E%86/</url>
    
    <content type="html"><![CDATA[<h1 id="简历"><a href="#简历" class="headerlink" title="简历"></a>简历</h1><h2 id="1-个人信息"><a href="#1-个人信息" class="headerlink" title="1.个人信息"></a>1.个人信息</h2><p>1、年龄：如果年龄小的话，写个虚岁，最好年龄都稍微写大一些；年龄大的可以写实岁<br>     备注：22岁左右为适龄<br>2、地址：现居地，要求都写在北京（如果去其他城市找的话直接写城市的名称）<br>3、电话：以–343隔开 199-0542-7124<br>2、邮箱：最好不要使用QQ邮箱<br>3、建议写籍贯，万一碰到老乡<br>4、学历：如果是全日制统招本科，可以加上(统本)<br>   如果是其他形式学历如：成教等不必标注<br>   如果是211&#x2F;985可以标注<br>5、如果英语有四六级的可以加上<br>6、如果自己在github上发表过自己的开源项目、或者在csdn上发表过一些比较有深度的文章，而且评论和点击率都不错的，可以把自己的连接地址写在上面，这个肯定会成为你的加分项</p><h2 id="2-个人技能"><a href="#2-个人技能" class="headerlink" title="2.个人技能"></a>2.个人技能</h2><p>1、具备扎实的编程基础，精通Java语言，熟悉JVM，内存模型，并发编程<br>2、可以灵活运用设计模式，如：单例、工厂、策略、责任链、模板方法等设计模式进行项目开发<br>3、熟悉Spring、 SpringMVC、SpringBoot、SpringCloud、Mybaits、Mybaits-Plus等开发技术。<br>4、熟悉分布式常见解决方案：分布式事务、分布式一致性、分布式锁<br>5、熟悉关系型数据库MySQL，有一定的SQL优化经验<br>6、熟练使用Redis等非关系型数据库。<br>7、熟练运用Freemarker模板技术和nginx反向代理服务器<br>8、熟练运用RabbitMQ、Kafka等主流消息中间件<br>9、熟练运用git、Linux操作系统等基本命令。<br>10、有高并发、高性能、高可用系统架构设计实践、并有性能调优经验</p><p>1.熟悉java基础知识，熟悉java集合体系，熟悉常用的设计模式，例如单例模式，工厂模式,理解面向对象编程的思想；<br>2.熟悉spring，springMVC，MyBatis开源框架进行整合开发，熟悉springMVC的执行流程以及熟练应用MyBatis的增强工具MyBatis-Plus；<br>3.熟悉SpringBoot+SpringCloud微服务架构，及其常用组件；<br>4.熟悉MySQL数据库及其简单优化，了解InnoDB和MySAM的存储引擎的区别和原理；<br>5.熟悉Redis数据库，及常用数据类型，实现分布式锁，在项目有使用的经验，Redisson结合Redis实现过分布式锁的应用，对Redis的持久化有一定的了解；<br>6.熟悉JVM内存模型，了解GC垃圾回收机制；<br>7.熟悉RabbitMQ消息中间件，消息模型、持久化、ACK消息确认，实现分布式事务最终一致性；<br>8.熟悉JavaWeb的相关技术，能够熟练应用VUE、react等前端技术框架；<br>9.了解Nginx服务器，了解常用的负载均衡策略；<br>10.了解Linux的常用命令；<br>10.了解JUC并发工具包里的常用类；<br>11.熟悉使用IDEA、Maven、Git、Navicat等常用开发工具。</p><p>根据自身能力，一般6到8条即可。</p><blockquote><p>专业技能：<br>1、要求一：<br>    从java基础到javaweb、前端、框架、数据库、服务器必须会一套；<br>2、要求二：<br>这块专业技能不在于多，而在于每个技术点你是否熟悉，在写自己技能的时候最好不要出现“精通”类似的字眼；<br>3、要求三：<br>   项目的技术点不要全部写上，最好不要全部写，项目的技术点挑2-3个自己负责模块业务中涉及到的技术点写2-3个就可以了<br>4、要求四：<br>   切忌！切忌！切忌！不要copy模板，copy模板的完全在给自己面试挖坑<br>   不会写的可以参考智联招聘网站上的公司任职要求<br>5、要求五：<br>   每个技术点不要写的特别详细<br>针对专业技能的补充：<br>专业技能中有以下技能加分：<br>1、Netty、Kafka、Dubbo、ActiveMQ、RabbitMQ、WebSocket、RESTful、Hadoop、Spark、Solr、Lucene、Redis、MongoDB；<br>2、熟悉除Java外的其他语言或平台加分，如Python、Ruby、Node.js；<br>3、熟悉前端技术加分，如HTML5&#x2F;CSS3、Bootstrap、AngularJS；<br>4、如果在专业技能中的单词出现拼写错误，要扣分<br>5、针对于专业技能的位置可以根据学员的情况调整位置，项目好一点的学员可以把项目写在前面，专业技能写在后面；技术好一点的学员可以把专业技能写在项目描述前面</p></blockquote><p>Java基础：<br>   熟练掌握java基础知识和高级知识，熟悉常用的设计模式和多线程编程；23种  4-5种<br>   对JVM的内存模型和GC算法有简单的了解；  数据结构和算法    数组  链表  树    队列   栈    排序  （归并）  多线程<br>网络编程：TCP  UDP   流   nio<br>前端技能：<br>   熟悉html、css、javascript、jQuery、ajax等前端技术；<br>   熟练使用easyui、augularJS、bootstrap、zTree、jsTree等插件  vue<br>数 据 库：<br>   熟悉Mysql、Oracle等主流数据库管理系统、相关技术及工具；<br>   了解进行简单的sql优化和数据库优化；<br>   熟悉MongoDB，Redis等Nosql数据库的配置、部署和优化；<br>应用服务器：<br>   熟悉tomcat，jboss、weblogic等常见应用服务器；<br>   熟悉Apache、Ngnix等主流Web服务器的基本配置及常用命令；<br>开源框架：<br>   熟悉当前流行的开源框架：spring、springmvc、struts2、springBoot、mybatis，Hibernate、springDataJpa<br>开发工具：<br>   熟练使用Eclipse、IntelliJ IDEA等工具进行开发，熟练使用PowerDesigner设计数据库；<br>   熟练使用代码管理工具SVN、GIT，熟练使用项目管理工具maven；ant   gradle<br>其他技能：<br>   熟悉Lucene搜索引擎工具包、solr应用服务器、Elasticsearch分布式搜索和分析引擎；<br>   了解阿里分布式开源框架dubbo，有一定的使用经验，并了解系统之间调用技术<br>WebService，对系统之间异步调用MQ能够进行简单的使用；</p><h2 id="3-工作经历"><a href="#3-工作经历" class="headerlink" title="3.工作经历"></a>3.工作经历</h2><blockquote><p>1、一般1年工作经验的人，1家公司；<br>2、公司职责：<br>可以参考招聘网站上的工作职责，依自己的能力去写，不要写的自己特别厉害，什么活你都干<br>3、公司业绩加上<br>1、工作截止时间可以是至今；<br>2、以2年为例子，两家单位，第一家单位可能是实习单位工作不足一年，第二家公司工作时间较长，体现工作的稳定性；</p></blockquote><p> XX科技有限公司            java开发工程师<br>1、主要负责研发中的功能开发和测试任务；<br>2、编写相关技术文档技，产品说明书等；<br>3、对新技术的研究，快速应用能力；<br>4、与团队协作完成工作任务，对初级开发人员进行指导</p><p>2020.03 – 至今            北京xxx 信息技术有限公司          Java高级开发<br>岗位职责：<br>1.负责软件程序的设计和核心代码开发，负责后期持续优化等工作<br>2.解决开发中的技术难题、确保系统性能、质量、安全、代码的复用性、扩展性、灵活性<br>3.深入思考研发过程中的各项问题，指导开发人员的开发工作，促进团队工作效率和研发质量的提升</p><p>2018.02 - 2020.03         北京xxx 科技有限公司              Java开发<br>岗位职责：<br>1.负责软件程序的设计和核心代码开发，负责后期持续优化等工作；<br>2.负责数据库设计，系统设计，API接口设计，对外系统接入等<br>3.完成团队安排的其他工作</p><h2 id="4-项目经历"><a href="#4-项目经历" class="headerlink" title="4.项目经历"></a>4.项目经历</h2><blockquote><p>1年工作经验：两个项目就可以<br>项目顺序：倒叙；<br>项目周期：基本都是迭代开发，时间可以调整<br>传统项目：3-4个月<br>互联网项目：5-6个月<br>对于一些互联网项目：最好把项目的上线地址复制在项目名称的后面。这个是加分项</p></blockquote><p>项目名称：<br>                  技术选型：《项目中使用的框架+技术》<br>                  项目描述：项目定位+项目架构+项目组成模块     3-4行，不宜太长<br>                            项目定位：给谁开发的、干什么的<br>                            项目架构：传统架构&#x2F;垂直架构&#x2F;分布式架构<br>                                      项目中采用了什么技术亮点；（最好写自己擅长的）<br>                  项目职责：至少负责1-2个模块的代码开发，将功能模块和技术结合起来描述<br>                  难点&#x2F;亮点：能够总结出自己项目中的难点&#x2F;亮点，可以让面试官眼前一亮，增加面试通过率</p><h3 id="项目名称：驹马物流"><a href="#项目名称：驹马物流" class="headerlink" title="项目名称：驹马物流"></a>项目名称：驹马物流</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">技术选型：spring+struts2+Hibernate+shiro+redis+POI+webService+easyui+ztree<br>项目描述：驹马物流将城市离散资源利用互联网平台完成对运力、信息、货物的有效统一，打造“城市智慧物流生态圈”。该项目主要在公司原有的ERP、CRM等系统的支撑下，基于传统架构整合SSH完成对系统设置、车辆管理、路线设置、以及物流运转的一站式管理（客户由下单到客服受理业务、上门取件、派发到签单的流体操作）。主要包含门户系统和JM平台（系统、车辆、取派、路线、异常）。<br>项目职责：<br><span class="hljs-number">1</span>、项目初期主要熟悉项目的需求文档及设计人员提供的详细设计说明书及设计原型；<br><span class="hljs-number">2</span>、根据项目原形完成自己负责模块的静态页面书写；<br><span class="hljs-number">3</span>、开发阶段主要负责以下模块：<br><span class="hljs-number">1</span>）调用云之讯的短信平台完成用户的登录和注册功能；<br><span class="hljs-number">2</span>）调用SaaS云客服完成门户系统的在线客服沟通功能；<br><span class="hljs-number">3</span>）利用shiro框架完成JM平台的系统设置模块的细粒度权限控制；<br><span class="hljs-number">4</span>）负责取派模块的订单的运转功能，完成自动分单；<br><span class="hljs-number">5</span>）负责整个统计模块的功能开发（不同的条件产生不同的统计数据）。<br></code></pre></td></tr></table></figure><p>​        </p><h3 id="项目名称：传智健康体检预约系统"><a href="#项目名称：传智健康体检预约系统" class="headerlink" title="项目名称：传智健康体检预约系统"></a>项目名称：传智健康体检预约系统</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java">技术选型：<br><span class="hljs-number">1</span>、核心框架：springboot、springmvc、mybatis、Dubbo<br><span class="hljs-number">2</span>、前端架构：ElementUI、VUE、Axios、jQuery、html+js+css<br><span class="hljs-number">3</span>、数据库：MySQL、redis<br><span class="hljs-number">4</span>、其他：ApachePOI、Quartz、Echarts、SpringSecurity、Git、zookeeper<br>项目描述：传智健康管理系统是一款应用于健康管理机构的业务系统。实现健康管理机构工作内容可视化、患者管理专业化、健康评估数字化、健康干预流程化、知识库集成化，从而提高健康管理师的工作效率，加强与患者间的互动，增强管理者对健康管理机构运营情况的了解。由管理后台和微信移动端两部分组成。<br>项目职责：<br>    <span class="hljs-number">1</span>、前期编写项目需求文档并协同项目经理完成项目周期甘特图；<br>    <span class="hljs-number">2</span>、负责所属模块表结构的设计；<br>    <span class="hljs-number">3</span>、开发阶段任务主要有：<br>    <span class="hljs-number">1</span>）调用阿里云SMS实现短信认证功能；<br>    <span class="hljs-number">2</span>）通过POI 的批量报表实现套餐的批量预约；<br>    <span class="hljs-number">3</span>）使用Echarts完成后台运营数据的图形化展示；<br>    <span class="hljs-number">4</span>）负责体检预约、套餐详情及订单模块的实现；<br>    <span class="hljs-number">5</span>）使用springsecurity来实现项目的安全认证功能。<br><br>难点与亮点：<br>难点：在权限认证过程中发生了认证失败，token无法获取；<br>在批量报表过程中压测情况下格式错误等情况<br>亮点：通过搭建redis集群缓解了并发情况下数据的延迟等问题<br>业绩：实现程序定制化模板分享，拉升了<span class="hljs-number">3</span>倍的程序使用率。<br></code></pre></td></tr></table></figure><h3 id="项目名称：帝可得"><a href="#项目名称：帝可得" class="headerlink" title="项目名称：帝可得"></a>项目名称：帝可得</h3><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-number">2022.03</span> – 至今    帝可得 <br>项目技术：<span class="hljs-variable">Springboot</span>、<span class="hljs-variable">SpringCloud</span>、<span class="hljs-variable">Consul</span>、<span class="hljs-variable">nginx</span>、<span class="hljs-variable">MySQL</span>、<span class="hljs-variable">Redis</span>、<span class="hljs-variable">EMQ</span>、<span class="hljs-variable">MinIO</span>、<span class="hljs-variable">ES</span>、<span class="hljs-variable">Elegent</span><br>项目描述：该项目是一个无接触的智能售货机系统，机器能自我管理，通过物联网的技术将分散的设备在一套平台集中管理，智能化的数据采集和分析，设备状态主动上报，设备的远程管理，设备和人员绑定，运营维护人员的工作管理，移动支付的支持等一系列手段来降低运营和运维成本快速实现盈利。这也是一种线上线下的融合模式(<span class="hljs-variable">Online</span> <span class="hljs-variable">Merge</span> <span class="hljs-variable">Offline</span> 线上线下全面融合)。<br>主要负责的模块:<br><span class="hljs-number">1</span>.参与订单模快和工单模块的数据库的设计以及表的设计<br><span class="hljs-number">2</span>.工单模块的开发：其中主要包括创建工单、使用定时任务自动方式创建补货和运维工单、指定运营人员规则、以及用户在接收到工单后续可以取消工单和接受工单等。<br><span class="hljs-number">3</span>.订单模块的开发：其主要包括用户下单之后，订单的创建，扣减库存，出货，以及出货失败之后事务回滚等。<br><span class="hljs-number">4</span>.参与团队封装了公共组件<span class="hljs-function"><span class="hljs-title">Elegent</span>(分布式事务、分布式锁、接口幂等)</span><br></code></pre></td></tr></table></figure><h3 id="项目名称：天机学堂"><a href="#项目名称：天机学堂" class="headerlink" title="项目名称：天机学堂"></a>项目名称：天机学堂</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">2021.03</span> - <span class="hljs-number">2022.03</span>    天机学堂 <br>项目技术：Springboot、SpringCloud、nacos、nginx、MySQL、Redis、seata、RabbitMQ、xxl-job、ES<br>项目描述：天机学堂是一款B2C在线学习平台，通过在线课程形式为学员提供海量课程内容，学员可根据自身学习能力，安排学习计划或针对性测试。以问答、笔记、点赞、积分排行榜形式与其他用户进行交流互动，增进学习兴趣。真正的做到为用户提供精良课程、随地卓效学习。<br>主要负责的模块: <br><span class="hljs-number">1.</span>学霸天梯榜模块：签到、学习积分、天梯榜、历史天梯榜<br><span class="hljs-number">2.</span>互动问答系统：互动问答、评论、高性能点赞系统<br><span class="hljs-number">3.</span>学习辅助模块：学习计划、视频播放进度、学习进度统计<br><span class="hljs-number">4.</span>优惠券模块：设计优惠券规则、设计优惠券兑换码算法、优惠券抢购、优惠券计算规则、退款拆单退券<br></code></pre></td></tr></table></figure><h3 id="项目名称：-学成在线"><a href="#项目名称：-学成在线" class="headerlink" title="项目名称： 学成在线"></a>项目名称： 学成在线</h3><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs makefile">2020.03 – 2021.02    学成在线 <br>项目技术：Springboot、SpringCloud、MySQL、Redis、xxl-job、SpringSecurity、Oauth2、RabbitMQ、Swagger、freemarker<br><span class="hljs-section">项目描述：本项目是本公司自研的一个专门针对成人职业技能教育的网络课堂系统，网站提供了成人职业技能培训的相关课程，如:软件开发培训，职业资格证书培训、成人学历教育培训等课程。项目基于B2B2C的业务模式，培训机构可以在平台入驻、发布课程，运营人员对发布的课程进行审核，审核通过后课程才可以发布成功，课程包括免费和收费两种形式，对于免费课程可以直接选课学习，对于收费课程在选课后需要支付成功才可以继续学习。</span><br><span class="hljs-section">主要负责的模块:</span><br>1、内容管理：使用了freemarker静态化、分布式事务控制、任务调度<br>2、用户端：媒资管理：任务调度、断点续传、消息处理SDK<br>3、认证授权：SpringSecurity、Oauth2、微信扫码<br></code></pre></td></tr></table></figure><h3 id="项目名称：黑马头条"><a href="#项目名称：黑马头条" class="headerlink" title="项目名称：黑马头条"></a>项目名称：黑马头条</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">2019.02</span> – <span class="hljs-number">2020.03</span>    黑马头条 <br>项目技术：Springboot、SpringCloud、nacos、freemarker、MySQL、Redis、seata、Kafka、xxl-job<br>项目描述：黑马头条是类似于今日头条的新闻类型软件，用户可以查看他人发布的新闻头条，对其进行关注点赞之类的，也可以自己申请成为发布人，发布的内容，可以由平台管理员在后台管理系统对发布的内容进行审核、查看、也能对已经发布的进行下架等权限操作<br>主要负责的模块:<br><span class="hljs-number">1</span>、自媒体端：文章发布、审核、延时发布<br><span class="hljs-number">2</span>、app端：文章展示、详情展示、推荐栏、热数据处理<br></code></pre></td></tr></table></figure><h3 id="项目名称：苍穹外卖"><a href="#项目名称：苍穹外卖" class="headerlink" title="项目名称：苍穹外卖"></a>项目名称：苍穹外卖</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-number">2018.02</span> <span class="hljs-string">–</span> <span class="hljs-number">2019.01</span>    <span class="hljs-string">苍穹外卖</span> <br><span class="hljs-string">项目技术：Springboot、SpringMVC、Mybatis、MySQL、Redis、nginx、POI、OSS、WebSocket</span> <span class="hljs-string">、Spring</span> <span class="hljs-string">Task、Spring</span> <span class="hljs-string">Cache</span><br><span class="hljs-string">项目描述：本项目是专门为餐饮企业（餐厅、饭店）定制的一款软件产品，包括系统管理后台和小程序端应用两部分。其中系统管理后台主要提供给餐饮企业内部员工使用，可以对餐厅的分类、菜品、套餐、订单、员工等进行管理维护，对餐厅的各类数据进行统计，同时也可进行来单语音播报功能。小程序端主要提供给消费者使用，可以在线浏览菜品、添加购物车、下单、支付、催单等</span><br><span class="hljs-string">主要负责的模块:</span><br><span class="hljs-number">1</span><span class="hljs-string">.系统管理后台：基础数据维护（员工、分类、菜品、套餐）、数据统计、报表模块</span><br><span class="hljs-number">2</span><span class="hljs-string">.小程序端：微信登录、用户下单和微信支付</span><br></code></pre></td></tr></table></figure><h2 id="自我评价"><a href="#自我评价" class="headerlink" title="自我评价"></a>自我评价</h2><p>1、分条（3-4条  简洁）<br>2、体现自己能力的（优势、性格特点、根据自己情况定）<br>4、可以写自己研究过一些技术；<br>5、不要写太多软性的东西（自学能力强 愿意和公司长期发展  能尽快融入团队等较为小白的字眼）；<br>6、夸自己不要把自己夸的太厉害</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><span class="hljs-number">1</span>.在IT行业已有<span class="hljs-keyword">x</span>年工作经验，接触过传统企业级项目，也接触过互联网项目；<br><span class="hljs-number">2</span>.喜欢研究新技术，并熟练的应用到项目中去，目前正在研究springcloud微服务框架；<br><span class="hljs-number">3</span>.喜欢浏览一些IT行业的网站，比如CSDN，Github、NPM、Stackoverflower；<br><span class="hljs-number">4</span>.具有良好的解决问题能力、沟通能力和团队精神。<br></code></pre></td></tr></table></figure><h1 id="面试"><a href="#面试" class="headerlink" title="面试"></a>面试</h1><h2 id="1-自我介绍"><a href="#1-自我介绍" class="headerlink" title="1.自我介绍"></a>1.自我介绍</h2><p>基本信息：姓名、年龄、籍贯、毕业院校、应聘什么岗位、曾经主要工作经历和时间节点</p><p>个人优势： 做成过什么工作、擅长什么技术、学习提高的经历（有助于工作岗位的）</p><p>其他：爱好，性格，结束语&amp;感谢</p><p>注意：</p><p>\1. 考察面试者口述自我介绍的内容和简历中的基本情况是否相冲突?以此来判断简历的真实性。<br>\2. 考察面试者基本的逻辑思维能力、语言表达能力，总结概括能力。<br>\3. 考察面试者是否聚焦，以及现场的感知能力与把控能力。<br>4、学历不具备优势的在自我介绍中不建议着重体现，一带而过即可。</p><p>自我介绍参考：<br>您好，我是来面试咱们公司java高级工程师的，我叫XXX。我从事java行业已经两年多了。曾近做过三个项目，最近做的是宝亮网智的服务管理系统 和 心连心社交平台等。在这几年的项目开发中，我掌握了并发、微服务、多线程等技术的应用，以及我能够熟练使用Oracle,MySQL等关系型数据库以及现在比较获得NoSQL（ MongoDB）非关系型数据库。我还掌握了一些有关于项目中的优化问题，如：缓存，SQL优化，性能优化，业务优化，Tomcat调优，负载均衡等。</p><h2 id="2-人事话术"><a href="#2-人事话术" class="headerlink" title="2.人事话术"></a>2.人事话术</h2><h3 id="2-1为什么离职？"><a href="#2-1为什么离职？" class="headerlink" title="2.1为什么离职？"></a>2.1为什么离职？</h3><p>【个人原因】正面 ： 家里有事导致、离开企业所在城市 、挑战自我。</p><p>回答范例1：是想要来北京寻找更好的发展，提升自己的技术，寻找更好的平台。之前在天津上学，毕业后就留在那边啦，但是后来发现天津跟北京的区别还是很大的，之前就是过的比较安逸，工作上也很难有很大的突破，所以就想重新寻找更大一点的平台，跳槽来北京发展了。</p><p>回答范例2：家里近期有一些事情需要处理，之前已经请假去处理了几天，但是未处理完毕，后期请假时间不确定，有可能时间会比较久，也担心时间太久会影响公司的项目进度，毕竟公司编制也是比较有限的，综合跟项目经理商量了一下最终决定离职，但是目前已经处理完毕，所以重新找工作。</p><p>【公司原因】正面 ：部门&#x2F;公司架构调整（公司地点变化）。</p><p> 回答范例：我离职是因为这家公司经营不善，我在公司工作了2、3年，有较深的感情，从去年始，由于市场形势突变，公司的局面急转直下，到眼下这一步我觉得很遗憾，但还要面对现实，重新寻找能发挥我能力的舞台。</p><p> 【反面原因】：避免说以前的公司没有发展空间、跟同事关系处不好发生矛盾，工作中受委屈或者对公司有很多怨言.</p><h3 id="2-2如何谈薪资"><a href="#2-2如何谈薪资" class="headerlink" title="2.2如何谈薪资"></a>2.2如何谈薪资</h3><p>-薪资定位：预期薪资涨幅30%（相对于上一家），是一个数值而不是范围。<br>-压薪资时候，询问福利待遇（五险一金、年终奖、试用期是否有打折），不轻易降薪。<br>例如：<br>A公司  12k  福利500元， 公积金300元；总计：12.8k<br>B公司  10k  福利1200元，公积金2000元；总计：13.2k</p><p>-考虑企业业务领域，实际面试情况，公司具体情况<br>例如：金融，电商，医疗行业相对工资会高一点<br>公司装修环境，地理位置，整体感受也可以衡量<br>公司技术平台也是很重要的考核项，一个好的平台很重要<br>公司的项目选型和技术栈跟自己是否匹配</p><p>-如何收尾？切记一定要把offer要过来</p><p>例如：面试成功达到预期，那没什么问题的话可以把offer发我邮箱吗？我之后准备一下入职资料，尽量早点来入职。</p><p>例如：面试没有达到预期，那如果我表现的好，进入公司之后可以给我加薪吗？（面试官肯定回答可以），然后接着说：“那我觉得是金子到哪里都会发光的，进入公司之后我一定会好好干，咱们公司xx地方我觉得我很满意，我也很想加入贵公司，那看什么时间方便，给我下一下offer，我来办理入职呢？</p><h3 id="2-3如何看待加班？"><a href="#2-3如何看待加班？" class="headerlink" title="2.3如何看待加班？"></a>2.3如何看待加班？</h3><p>（理解，提高工作效率）</p><p>实际上好多公司问这个问题，并不证明一定要加班，只是想测试你是否愿意为公司奉献。</p><p>回答范例：我做咱们IT这个行业也好几年了，有时候赶项目或者项目上线会涉及加班，这个都能理解，工作需要我会义不容辞加班，我现在也单身，可以全身心的投入工作。但我也会提高工作效率，推进项目周期进度，减少不必要的加班。</p>]]></content>
    
    
    <categories>
      
      <category>简历</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>1_Nginx基本命令</title>
    <link href="/2023/09/25/Nginx%E6%9C%8D%E5%8A%A1%E5%99%A8/nginx%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/"/>
    <url>/2023/09/25/Nginx%E6%9C%8D%E5%8A%A1%E5%99%A8/nginx%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h1 id="Nginx基本命令"><a href="#Nginx基本命令" class="headerlink" title="Nginx基本命令"></a>Nginx基本命令</h1><ol><li><p>安装先决条件</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-comment"># 升级所有包同时也升级软件和系统内核</span><br>yum update<br><span class="hljs-comment"># 安装yum依赖</span><br>yum <span class="hljs-keyword">install</span> yum-utils<br></code></pre></td></tr></table></figure></li><li><p>添加 yum 源文件</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk">cd <span class="hljs-regexp">/etc/yum</span>.repos.d/<br><span class="hljs-comment"># 添加nginx的yum源码</span><br>vim nginx.repo<br><br><span class="hljs-comment"># 或 直接新建 nginx.repo 文件</span><br>vim <span class="hljs-regexp">/etc/yum</span>.repos.d/nginx.repo<br></code></pre></td></tr></table></figure></li></ol><p><strong>1). nginx反向代理</strong></p><p><strong>nginx 反向代理</strong>，就是将前端发送的动态请求由 nginx 转发到后端服务器</p><p><img src="/assets/image-20231016002025092.png" alt="image-20231016002025092"></p><p>那为什么不直接通过浏览器直接请求后台服务端，需要通过nginx反向代理呢？</p><p><strong>nginx 反向代理的好处：</strong></p><ul><li><p>提高访问速度</p><p>因为nginx本身可以进行缓存，如果访问的同一接口，并且做了数据缓存，nginx就直接可把数据返回，不需要真正地访问服务端，从而提高访问速度。</p></li><li><p>进行负载均衡</p><p>所谓负载均衡,就是把大量的请求按照我们指定的方式均衡的分配给集群中的每台服务器。</p></li><li><p>保证后端服务安全</p><p>因为一般后台服务地址不会暴露，所以使用浏览器不能直接访问，可以把nginx作为请求访问的入口，请求到达nginx后转发到具体的服务中，从而保证后端服务的安全。</p></li></ul><img src="/2023/09/25/Nginx%E6%9C%8D%E5%8A%A1%E5%99%A8/nginx%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/image-20231016002040582.png" alt="image-20231016002040582" style="zoom:50%;"><p><strong>nginx 反向代理的配置方式：</strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs nginx">server&#123;<br>    <span class="hljs-attribute">listen</span> <span class="hljs-number">80</span>;<br>    <span class="hljs-attribute">server_name</span> localhost;<br>    <br>    <span class="hljs-section">location</span> /api/&#123;<br>        <span class="hljs-attribute">proxy_pass</span> http://localhost:8080/admin/; <span class="hljs-comment">#反向代理</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>proxy_pass：</strong>该指令是用来设置代理服务器的地址，可以是主机名称，IP地址加端口号等形式。</p>]]></content>
    
    
    <categories>
      
      <category>Nginx</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>1_VUE快速上手</title>
    <link href="/2023/09/25/%E9%BB%91%E9%A9%AC-Vue2/1_VUE%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/"/>
    <url>/2023/09/25/%E9%BB%91%E9%A9%AC-Vue2/1_VUE%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="VUE快速上手"><a href="#VUE快速上手" class="headerlink" title="VUE快速上手"></a>VUE快速上手</h1><h2 id="创建实例"><a href="#创建实例" class="headerlink" title="创建实例"></a>创建实例</h2><blockquote><p>创建Vue实例，初始化渲染<br>1.准备容器(Vue所管理的范围)<br>2.引包（开发版本包&#x2F;生产版本包）官网<br>3.创建实例<br>4.添加配置项&#x3D;&gt;完成渲染</p></blockquote><p>Vue2官网：<a href="https://v2.cn.vuejs.org/">https://v2.cn.vuejs.org/</a></p><p>引入开发版本包</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>一旦引入vuejs核心包，在全局环境中就有了vue构造函数</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        &#123;&#123;msg&#125;&#125;<br>        &#123;&#123;count&#125;&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">data</span>:&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">msg</span>:<span class="hljs-string">&#x27;hello world&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">count</span>:<span class="hljs-number">666</span></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>el 指定挂载点，选择器指定控制哪个盒子</li><li>data提供数据</li></ul><h2 id="插值表达式"><a href="#插值表达式" class="headerlink" title="插值表达式"></a>插值表达式</h2><ul><li><p>作用：利用表达式进行插值，渲染到页面中</p><p>表达式：是可以被求值的代码，JS引擎会讲其计算出一个结果</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js">money + <span class="hljs-number">100</span><br>money - <span class="hljs-number">100</span><br>money * <span class="hljs-number">10</span><br>money / <span class="hljs-number">10</span> <br>price &gt;= <span class="hljs-number">100</span> ? <span class="hljs-string">&#x27;真贵&#x27;</span>:<span class="hljs-string">&#x27;还行&#x27;</span><br>obj.<span class="hljs-property">name</span><br>arr[<span class="hljs-number">0</span>]<br><span class="hljs-title function_">fn</span>()<br>obj.<span class="hljs-title function_">fn</span>()<br></code></pre></td></tr></table></figure></li><li><p>语法</p><p>插值表达式语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;h3&gt;&#123;&#123;title&#125;&#125;&lt;h3&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123;nickName.toUpperCase()&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123;age &gt;= 18 ? &#x27;成年&#x27;:&#x27;未成年&#x27;&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123;obj.name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123;fn()&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        &#123;&#123;msg.toUpperCase()&#125;&#125;<br>        &#123;&#123;friend.name&#125;&#125;<br>        &#123;&#123;count&gt;60?&#x27;大了&#x27;:&#x27;小了&#x27;&#125;&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">data</span>:&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">msg</span>:<span class="hljs-string">&#x27;hello world&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">count</span>:<span class="hljs-number">666</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">friend</span>:&#123;</span><br><span class="language-javascript">                <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;luccy&#x27;</span></span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/assets/image-20230926093707365.png" alt="image-20230926093707365"></p></li><li><p>错误语法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-number">1.</span>在插值表达式中使用的数据 必须在data中进行了提供<br>&lt;p&gt;&#123;&#123;hobby&#125;&#125;&lt;<span class="hljs-regexp">/p&gt;  /</span><span class="hljs-regexp">/如果在data中不存在 则会报错</span><br><span class="hljs-regexp"></span><br><span class="hljs-regexp">2.支持的是表达式，而非语句，比如：if   for ...</span><br><span class="hljs-regexp">&lt;p&gt;&#123;&#123;if&#125;&#125;&lt;/</span>p&gt;<br><br><span class="hljs-number">3.</span>不能在标签属性中使用 &#123;&#123;  &#125;&#125; 插值 (插值表达式只能标签中间使用)<br>&lt;p title=<span class="hljs-string">&quot;&#123;&#123;username&#125;&#125;&quot;</span>&gt;我是P标签&lt;/p&gt;<br></code></pre></td></tr></table></figure></li></ul><h2 id="响应式特性"><a href="#响应式特性" class="headerlink" title="响应式特性"></a>响应式特性</h2><h3 id="1-什么是响应式？"><a href="#1-什么是响应式？" class="headerlink" title="1.什么是响应式？"></a>1.什么是响应式？</h3><p>​简单理解就是数据变，视图对应变。 </p><p><img src="/assets/image-20230926094117540.png" alt="image-20230926094117540"></p><h2 id="开发者工具"><a href="#开发者工具" class="headerlink" title="开发者工具"></a>开发者工具</h2><ol><li>通过谷歌应用商店安装（国外网站）</li><li>极简插件下载（推荐） <a href="https://chrome.zzzmh.cn/index">https://chrome.zzzmh.cn/index</a></li></ol><p><img src="/assets/image-20230926094726979.png" alt="image-20230926094726979"></p>]]></content>
    
    
    <categories>
      
      <category>Vue2</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>2_后台功能开发</title>
    <link href="/2023/09/24/SpringBoot%E6%95%B4%E5%90%88%E9%A1%B9%E7%9B%AE_%E5%BE%AE%E5%A4%B4%E6%9D%A1/2_%E5%90%8E%E5%8F%B0%E5%8A%9F%E8%83%BD%E5%BC%80%E5%8F%91/"/>
    <url>/2023/09/24/SpringBoot%E6%95%B4%E5%90%88%E9%A1%B9%E7%9B%AE_%E5%BE%AE%E5%A4%B4%E6%9D%A1/2_%E5%90%8E%E5%8F%B0%E5%8A%9F%E8%83%BD%E5%BC%80%E5%8F%91/</url>
    
    <content type="html"><![CDATA[<h1 id="后台功能开发"><a href="#后台功能开发" class="headerlink" title="后台功能开发"></a>后台功能开发</h1><h2 id="Token和jwt介绍"><a href="#Token和jwt介绍" class="headerlink" title="Token和jwt介绍"></a>Token和jwt介绍</h2><ol><li><p>token 替代账号密码</p><p>令牌（Token）：在计算机领域，令牌是一种代表某种访问权限或身份认证信息的令牌。它可以是一串随机生成的字符或数字，用于验证用户的身份或授权用户对特定资源的访问。普通的令牌可能以各种形式出现，如访问令牌、身份令牌、刷新令牌等。</p></li></ol><p><img src="/assets/image-20230924142823631.png" alt="image-20230924142823631"></p><blockquote><p>浏览器访问服务器时，服务器是如何判断浏览器访问者是哪一个用户？</p><p>访问者第一次通过发送账号和密码给服务器，服务器将登录的账号密码生成加密的字符串token返回给浏览器。而之后浏览器的每次请求API无需发送账号密码，只需在请求头中携带token，浏览器便能判断该访问者为哪位用户。</p></blockquote><ol start="2"><li><p>jwt Token一项规范和标准（接口）</p><p>(JSON WEB TOKEN)</p><p>是具体可以生成校验解析等动作Token的技术（实现类）</p><p><img src="/assets/image-20230924144429025.png" alt="image-20230924144429025"></p><p>工作流程：</p><ul><li>用户提供其凭据（通常是用户名和密码）进行身份验证。</li><li>服务器对这些凭据进行验证，并在验证成功后创建一个JWT。</li><li>服务器将JWT发送给客户端，并客户端在后续的请求中将JWT附加在请求头或参数中。</li><li>服务器接收到请求后，验证JWT的签名和有效性，并根据JWT中的声明进行身份验证和授权操作</li></ul><p><img src="/assets/image-20230924144519428.png" alt="image-20230924144519428"></p><p>我们需要理解的是jwt可以携带很多信息! 一般情况，需要加入:有效时间,签名秘钥，其他用户标识信息!</p><ul><li>有效时间为了保证token的时效性,过期可以重新登录获取!</li><li>签名秘钥为了防止其他人随意解析和校验token数据!</li><li>用户信息为了我们自己解析的时候,知道Token对应的具体用户!</li></ul></li></ol><h2 id="jwt的使用"><a href="#jwt的使用" class="headerlink" title="jwt的使用"></a>jwt的使用</h2><p>导入项目依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.jsonwebtoken<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jjwt<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.9.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.xml.bind<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jaxb-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">jwt:</span><br>  <span class="hljs-attr">token:</span><br><span class="hljs-comment">#    120分钟后超时token失效</span><br>    <span class="hljs-attr">tokenExpiration:</span> <span class="hljs-number">120</span><br><span class="hljs-comment">#    当前程序签名密钥</span><br>    <span class="hljs-attr">tokenSignKey:</span> <span class="hljs-string">headline123</span><br><br></code></pre></td></tr></table></figure><p>jwt工具类导入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.utils;<br><br><span class="hljs-keyword">import</span> com.alibaba.druid.util.StringUtils;<br><span class="hljs-keyword">import</span> io.jsonwebtoken.*;<br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;jwt.token&quot;)</span><br><span class="hljs-comment">//自动扫描application.yml，自动注入属性值</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JwtHelper</span> &#123;<br><br>    <span class="hljs-keyword">private</span>  <span class="hljs-type">long</span> tokenExpiration; <span class="hljs-comment">//有效时间,单位毫秒 1000毫秒 == 1秒</span><br>    <span class="hljs-keyword">private</span>  String tokenSignKey;  <span class="hljs-comment">//当前程序签名秘钥</span><br><br>    <span class="hljs-comment">//生成token字符串</span><br>    <span class="hljs-keyword">public</span>  String <span class="hljs-title function_">createToken</span><span class="hljs-params">(Long userId)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;tokenExpiration = &quot;</span> + tokenExpiration);<br>        System.out.println(<span class="hljs-string">&quot;tokenSignKey = &quot;</span> + tokenSignKey);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> Jwts.builder()<br><br>                .setSubject(<span class="hljs-string">&quot;YYGH-USER&quot;</span>)<br>                .setExpiration(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(System.currentTimeMillis() + tokenExpiration*<span class="hljs-number">1000</span>*<span class="hljs-number">60</span>)) <span class="hljs-comment">//单位分钟</span><br>                .claim(<span class="hljs-string">&quot;userId&quot;</span>, userId)<br>                .signWith(SignatureAlgorithm.HS512, tokenSignKey)<br>                .compressWith(CompressionCodecs.GZIP)<br>                .compact();<br>        <span class="hljs-keyword">return</span> token;<br>    &#125;<br><br>    <span class="hljs-comment">//从token字符串获取userid</span><br>    <span class="hljs-keyword">public</span>  Long <span class="hljs-title function_">getUserId</span><span class="hljs-params">(String token)</span> &#123;<br>        <span class="hljs-keyword">if</span>(StringUtils.isEmpty(token)) <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        Jws&lt;Claims&gt; claimsJws = Jwts.parser().setSigningKey(tokenSignKey).parseClaimsJws(token);<br>        <span class="hljs-type">Claims</span> <span class="hljs-variable">claims</span> <span class="hljs-operator">=</span> claimsJws.getBody();<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> (Integer)claims.get(<span class="hljs-string">&quot;userId&quot;</span>);<br>        <span class="hljs-keyword">return</span> userId.longValue();<br>    &#125;<br><br><br><br>    <span class="hljs-comment">//判断token是否有效</span><br>    <span class="hljs-keyword">public</span>  <span class="hljs-type">boolean</span> <span class="hljs-title function_">isExpiration</span><span class="hljs-params">(String token)</span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">isExpire</span> <span class="hljs-operator">=</span> Jwts.parser()<br>                    .setSigningKey(tokenSignKey)<br>                    .parseClaimsJws(token)<br>                    .getBody()<br>                    .getExpiration().before(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>            <span class="hljs-comment">//没有过期，有效，返回false</span><br>            <span class="hljs-keyword">return</span> isExpire;<br>        &#125;<span class="hljs-keyword">catch</span>(Exception e) &#123;<br>            <span class="hljs-comment">//过期出现异常，返回true</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> JwtHelper jwtHelper;<br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">contextLoads</span><span class="hljs-params">()</span> &#123;<br>    jwtHelper.createToken(<span class="hljs-number">1l</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;eyJhbGciOiJIUzUxMiIsInppcCI6IkdaSVAifQ.H4sIAAAAAAAA_6tWKi5NUrJSiox099ANDXYNUtJRSq0oULIyNLM0NTUxNzA30FEqLU4t8kwBitUCALZjQKsvAAAA.IPs2WxRlS74lKQTihwN2qsAYaamwDTbiEUf1uR3okwFjms37xsEETH3Nr_vzEbnf8T0P2arDQH_z-a8HnZ0ugg&quot;</span>;<br>    System.out.println(jwtHelper.getUserId(token));<br>    System.out.println(jwtHelper.isExpiration(token));<br>&#125;<br></code></pre></td></tr></table></figure><p>MD5加密类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.security.MessageDigest;<br><span class="hljs-keyword">import</span> java.security.NoSuchAlgorithmException;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MD5Util</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">encrypt</span><span class="hljs-params">(String strSrc)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">char</span> hexChars[] = &#123; <span class="hljs-string">&#x27;0&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;3&#x27;</span>, <span class="hljs-string">&#x27;4&#x27;</span>, <span class="hljs-string">&#x27;5&#x27;</span>, <span class="hljs-string">&#x27;6&#x27;</span>, <span class="hljs-string">&#x27;7&#x27;</span>, <span class="hljs-string">&#x27;8&#x27;</span>,<br>                    <span class="hljs-string">&#x27;9&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-string">&#x27;f&#x27;</span> &#125;;<br>            <span class="hljs-type">byte</span>[] bytes = strSrc.getBytes();<br>            <span class="hljs-type">MessageDigest</span> <span class="hljs-variable">md</span> <span class="hljs-operator">=</span> MessageDigest.getInstance(<span class="hljs-string">&quot;MD5&quot;</span>);<br>            md.update(bytes);<br>            bytes = md.digest();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> bytes.length;<br>            <span class="hljs-type">char</span>[] chars = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[j * <span class="hljs-number">2</span>];<br>            <span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; bytes.length; i++) &#123;<br>                <span class="hljs-type">byte</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> bytes[i];<br>                chars[k++] = hexChars[b &gt;&gt;&gt; <span class="hljs-number">4</span> &amp; <span class="hljs-number">0xf</span>];<br>                chars[k++] = hexChars[b &amp; <span class="hljs-number">0xf</span>];<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(chars);<br>        &#125; <span class="hljs-keyword">catch</span> (NoSuchAlgorithmException e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;MD5加密出错！！+&quot;</span> + e);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="登录功能实现"><a href="#登录功能实现" class="headerlink" title="登录功能实现"></a>登录功能实现</h2><ol><li><p>需求描述</p><p>用户在客户端输入用户名密码并向后端提交,后端根据用户名和密码判断登录是否成功,用户有误或者密码有误响应不同的提示信息！</p></li><li><p>接口描述</p><p>url地址： user&#x2F;login</p><p>请求方式：POST</p></li></ol><p>核心代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ServiceImpl</span>&lt;UserMapper, User&gt;<br>    <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span>&#123;<br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> UserMapper userMapper;<br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> JwtHelper jwtHelper;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据账号查询用户对象</span><br><span class="hljs-comment">     * 1.根据账号，查询用户对象-LoginUser</span><br><span class="hljs-comment">     * 2.如果用户对象为null.查询失败，账号错误！501</span><br><span class="hljs-comment">     * 3.对比，密码，失败返回503的错误</span><br><span class="hljs-comment">     * 4.根据用户id生成一个token,token-&gt;result返回</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> user</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">login</span><span class="hljs-params">(User user)</span> &#123;<br>        LambdaQueryWrapper&lt;User&gt; wrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LambdaQueryWrapper</span>&lt;&gt;();<br>        wrapper.eq(User::getUsername,user.getUsername());<br>        <span class="hljs-type">User</span> <span class="hljs-variable">one</span> <span class="hljs-operator">=</span> userMapper.selectOne(wrapper);<br>        <span class="hljs-keyword">if</span> (one == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> Result.build(<span class="hljs-literal">null</span>, ResultCodeEnum.USERNAME_ERROR);<br>        &#125;<br>        <span class="hljs-keyword">if</span> ((!StringUtils.isEmpty(user.getUserPwd())) &amp;&amp; one.getUserPwd().equals(MD5Util.encrypt(user.getUserPwd())))&#123;<br><span class="hljs-comment">//            登录成功,生成token</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> jwtHelper.createToken(Long.valueOf(one.getUid()));<br>            Map&lt;String, String&gt; tokenMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>            tokenMap.put(<span class="hljs-string">&quot;token&quot;</span>,token);<br>            <span class="hljs-keyword">return</span> Result.ok(tokenMap);<br>        &#125;<br><span class="hljs-comment">//        登录失败</span><br>        <span class="hljs-keyword">return</span> Result.build(<span class="hljs-literal">null</span>, ResultCodeEnum.PASSWORD_ERROR);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="根据token获取用户数据"><a href="#根据token获取用户数据" class="headerlink" title="根据token获取用户数据"></a>根据token获取用户数据</h3><ol><li><p>需求描述</p><p>客户端发送请求,提交token请求头,后端根据token请求头获取登录用户的详细信息并响应给客户端进行存储</p></li><li><p>接口描述</p><p>url地址：user&#x2F;getUserInfo</p><p>请求方式：GET</p><p>请求头：</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Java">token: token内容<br></code></pre></td></tr></table></figure><pre><code class="hljs">响应数据：成功</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Java">&#123;<br>    <span class="hljs-string">&quot;code&quot;</span>: <span class="hljs-number">200</span>,<br>    <span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">&quot;success&quot;</span>,<br>    <span class="hljs-string">&quot;data&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;loginUser&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;uid&quot;</span>: <span class="hljs-number">1</span>,<br>            <span class="hljs-string">&quot;username&quot;</span>: <span class="hljs-string">&quot;zhangsan&quot;</span>,<br>            <span class="hljs-string">&quot;userPwd&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>            <span class="hljs-string">&quot;nickName&quot;</span>: <span class="hljs-string">&quot;张三&quot;</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><pre><code class="hljs">失败</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Java">&#123;<br>    <span class="hljs-string">&quot;code&quot;</span>: <span class="hljs-number">504</span>,<br>    <span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">&quot;notLogin&quot;</span>,<br>    <span class="hljs-string">&quot;data&quot;</span>: <span class="hljs-literal">null</span><br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li><p>实现</p><p>核心代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">getUserInfo</span><span class="hljs-params">(String token)</span> &#123;<br><span class="hljs-comment">//        token是否在有效期</span><br>        <span class="hljs-keyword">if</span> (jwtHelper.isExpiration(token)) &#123;<br>            <span class="hljs-keyword">return</span> Result.build(<span class="hljs-literal">null</span>,ResultCodeEnum.NOTLOGIN);<br>        &#125;<br><span class="hljs-comment">//        token解析uid，根据id查数据</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">uid</span> <span class="hljs-operator">=</span> jwtHelper.getUserId(token).intValue();<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> userMapper.selectById(uid);<br><span class="hljs-comment">//        去掉密码，封装result结果返回即可</span><br>        user.setUserPwd(<span class="hljs-literal">null</span>);<br>        Map&lt;String, User&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        map.put(<span class="hljs-string">&quot;loginUser&quot;</span>,user);<br>        <span class="hljs-keyword">return</span> Result.ok(map);<br>    &#125;<br></code></pre></td></tr></table></figure><p>测试</p><p><img src="/assets/image-20230924220227328.png" alt="image-20230924220227328"></p><p><img src="/assets/image-20230924220256557.png" alt="image-20230924220256557"></p><p>问题的原因是mybatisplus (not found): com.jmin.mapper.UserMapper.selectById</p><p><img src="/assets/image-20230924220544655.png" alt="image-20230924220544655"></p><p>该方法是由BaseMapper实现的，通过id找不到数据的原因是存在bug（略），解决方法是在实体类中注解主键注解</p><p><img src="/assets/image-20230924220826972.png" alt="image-20230924220826972"></p><p>最终测试结果</p><p><img src="/assets/image-20230924220936474.png" alt="image-20230924220936474"></p></li></ol><h3 id="注册用户名检查"><a href="#注册用户名检查" class="headerlink" title="注册用户名检查"></a>注册用户名检查</h3><ol><li><p>需求描述</p><p>用户在注册时输入用户名时,立刻将用户名发送给后端,后端根据用户名查询用户名是否可用并做出响应</p></li><li><p>接口描述</p><p>url地址：user&#x2F;checkUserName</p><p>请求方式：POST</p><p>请求参数：param形式</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Java">username=zhangsan<br></code></pre></td></tr></table></figure><pre><code class="hljs">响应数据：成功</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Java">&#123;<br>   <span class="hljs-string">&quot;code&quot;</span>:<span class="hljs-string">&quot;200&quot;</span>,<br>   <span class="hljs-string">&quot;message&quot;</span>:<span class="hljs-string">&quot;success&quot;</span><br>   <span class="hljs-string">&quot;data&quot;</span>:&#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><pre><code class="hljs">失败</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Java">&#123;<br>   <span class="hljs-string">&quot;code&quot;</span>:<span class="hljs-string">&quot;505&quot;</span>,<br>   <span class="hljs-string">&quot;message&quot;</span>:<span class="hljs-string">&quot;用户名占用&quot;</span><br>   <span class="hljs-string">&quot;data&quot;</span>:&#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>实现关键代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">checkUserName</span><span class="hljs-params">(String uname)</span> &#123;<br>    LambdaQueryWrapper&lt;User&gt; wrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LambdaQueryWrapper</span>&lt;&gt;();<br>    wrapper.eq(User::getUsername,uname);<br>    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> userMapper.selectOne(wrapper);<br>    <span class="hljs-keyword">if</span> (user!=<span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> Result.build(<span class="hljs-literal">null</span>,ResultCodeEnum.USERNAME_USED);<br>    &#125;<br>    <span class="hljs-keyword">return</span> Result.ok(<span class="hljs-string">&quot;&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="用户注册功能"><a href="#用户注册功能" class="headerlink" title="用户注册功能"></a>用户注册功能</h3><ol><li><p>需求描述</p><p>客户端将新用户信息发送给服务端,服务端将新用户存入数据库,存入之前做用户名是否被占用校验,校验通过响应成功提示,否则响应失败提示</p></li><li><p>接口描述</p><p>url地址：user&#x2F;regist</p><p>请求方式：POST</p><p>请求参数：</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Java">&#123;<br>    <span class="hljs-string">&quot;username&quot;</span>:<span class="hljs-string">&quot;zhangsan&quot;</span>,<br>    <span class="hljs-string">&quot;userPwd&quot;</span>:<span class="hljs-string">&quot;123456&quot;</span>, <br>    <span class="hljs-string">&quot;nickName&quot;</span>:<span class="hljs-string">&quot;张三&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><pre><code class="hljs">响应数据：成功</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Java">&#123;<br>   <span class="hljs-string">&quot;code&quot;</span>:<span class="hljs-string">&quot;200&quot;</span>,<br>   <span class="hljs-string">&quot;message&quot;</span>:<span class="hljs-string">&quot;success&quot;</span><br>   <span class="hljs-string">&quot;data&quot;</span>:&#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><pre><code class="hljs">失败</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Java">&#123;<br>   <span class="hljs-string">&quot;code&quot;</span>:<span class="hljs-string">&quot;505&quot;</span>,<br>   <span class="hljs-string">&quot;message&quot;</span>:<span class="hljs-string">&quot;用户名占用&quot;</span><br>   <span class="hljs-string">&quot;data&quot;</span>:&#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li><p>核心代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">register</span><span class="hljs-params">(User user)</span> &#123;<br>    LambdaQueryWrapper&lt;User&gt; wrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LambdaQueryWrapper</span>&lt;&gt;();<br>    wrapper.eq(User::getUsername,user.getUsername());<br>    <span class="hljs-keyword">if</span> (userMapper.selectOne(wrapper)!=<span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> Result.build(<span class="hljs-literal">null</span>,ResultCodeEnum.USERNAME_USED);<br>    &#125;<br>    user.setUserPwd(MD5Util.encrypt(user.getUserPwd()));<br>    userMapper.insert(user);<br>    <span class="hljs-keyword">return</span> Result.ok(<span class="hljs-literal">null</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20230924234108960.png" alt="image-20230924234108960"></p></li></ol><h2 id="首页模块开发"><a href="#首页模块开发" class="headerlink" title="首页模块开发"></a>首页模块开发</h2><h3 id="查询首页分类"><a href="#查询首页分类" class="headerlink" title="查询首页分类"></a>查询首页分类</h3><ol><li><p>需求描述</p><p>进入新闻首页,查询所有分类并动态展示新闻类别栏位</p></li><li><p>接口描述</p><p>url地址：portal&#x2F;findAllTypes</p><p>请求方式：get</p><p>请求参数：无</p><p>响应数据：</p><p>成功</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs Java">&#123;<br>   <span class="hljs-string">&quot;code&quot;</span>:<span class="hljs-string">&quot;200&quot;</span>,<br>   <span class="hljs-string">&quot;message&quot;</span>:<span class="hljs-string">&quot;OK&quot;</span><br>   <span class="hljs-string">&quot;data&quot;</span>:&#123;<br>            [<br>                &#123;<br>                    <span class="hljs-string">&quot;tid&quot;</span>:<span class="hljs-string">&quot;1&quot;</span>,<br>                    <span class="hljs-string">&quot;tname&quot;</span>:<span class="hljs-string">&quot;新闻&quot;</span><br>                &#125;,<br>                &#123;<br>                    <span class="hljs-string">&quot;tid&quot;</span>:<span class="hljs-string">&quot;2&quot;</span>,<br>                    <span class="hljs-string">&quot;tname&quot;</span>:<span class="hljs-string">&quot;体育&quot;</span><br>                &#125;,<br>                &#123;<br>                    <span class="hljs-string">&quot;tid&quot;</span>:<span class="hljs-string">&quot;3&quot;</span>,<br>                    <span class="hljs-string">&quot;tname&quot;</span>:<span class="hljs-string">&quot;娱乐&quot;</span><br>                &#125;,<br>                &#123;<br>                    <span class="hljs-string">&quot;tid&quot;</span>:<span class="hljs-string">&quot;4&quot;</span>,<br>                    <span class="hljs-string">&quot;tname&quot;</span>:<span class="hljs-string">&quot;科技&quot;</span><br>                &#125;,<br>                &#123;<br>                    <span class="hljs-string">&quot;tid&quot;</span>:<span class="hljs-string">&quot;5&quot;</span>,<br>                    <span class="hljs-string">&quot;tname&quot;</span>:<span class="hljs-string">&quot;其他&quot;</span><br>                &#125;<br>            ]<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li><p>核心代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">findAllTypes</span><span class="hljs-params">()</span> &#123;<br>        List&lt;Type&gt; types = typeMapper.selectList(<span class="hljs-literal">null</span>);<br>        <span class="hljs-type">ArrayList</span> <span class="hljs-variable">list</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>        Map map;<br>        <span class="hljs-keyword">for</span> (Type type : types) &#123;<br>            map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>            map.put(<span class="hljs-string">&quot;tid&quot;</span>,type.getTid());<br>            map.put(<span class="hljs-string">&quot;tname&quot;</span>,type.getTname());<br>            list.add(map);<br>        &#125;<br>        <span class="hljs-keyword">return</span> Result.ok(list);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20230925003508385.png" alt="image-20230925003508385"></p></li></ol><h3 id="分页查询首页头条信息"><a href="#分页查询首页头条信息" class="headerlink" title="分页查询首页头条信息"></a>分页查询首页头条信息</h3><ol><li><p>需求描述</p><ul><li>客户端向服务端发送查询关键字,新闻类别,页码数,页大小</li><li>服务端根据条件搜索分页信息,返回含页码数,页大小,总页数,总记录数,当前页数据等信息,并根据时间降序,浏览量降序排序</li></ul></li><li><p>接口描述</p><p>url地址：portal&#x2F;findNewsPage</p><p>请求方式：post</p><p>请求参数:</p></li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs JSON"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;keyWords&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;马斯克&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 搜索标题关键字</span><br>    <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">0</span><span class="hljs-punctuation">,</span>           <span class="hljs-comment">// 新闻类型</span><br>    <span class="hljs-attr">&quot;pageNum&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span>        <span class="hljs-comment">// 页码数</span><br>    <span class="hljs-attr">&quot;pageSize&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">10</span>     <span class="hljs-comment">// 页大小</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><pre><code class="hljs">响应数据：成功</code></pre><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>   <span class="hljs-attr">&quot;code&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;200&quot;</span><span class="hljs-punctuation">,</span><br>   <span class="hljs-attr">&quot;message&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;success&quot;</span><br>   <span class="hljs-attr">&quot;data&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;pageInfo&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;pageData&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><br>          <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;hid&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;1&quot;</span><span class="hljs-punctuation">,</span>                     <span class="hljs-comment">// 新闻id </span><br>            <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;尚硅谷宣布 ... ...&quot;</span><span class="hljs-punctuation">,</span>   <span class="hljs-comment">// 新闻标题</span><br>            <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;1&quot;</span><span class="hljs-punctuation">,</span>                    <span class="hljs-comment">// 新闻所属类别编号</span><br>            <span class="hljs-attr">&quot;pageViews&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;40&quot;</span><span class="hljs-punctuation">,</span>              <span class="hljs-comment">// 新闻浏览量</span><br>            <span class="hljs-attr">&quot;pastHours&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;3&quot;</span> <span class="hljs-punctuation">,</span>              <span class="hljs-comment">// 发布时间已过小时数</span><br>            <span class="hljs-attr">&quot;publisher&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;1&quot;</span>                <span class="hljs-comment">// 发布用户ID</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;hid&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;1&quot;</span><span class="hljs-punctuation">,</span>                     <span class="hljs-comment">// 新闻id </span><br>            <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;尚硅谷宣布 ... ...&quot;</span><span class="hljs-punctuation">,</span>   <span class="hljs-comment">// 新闻标题</span><br>            <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;1&quot;</span><span class="hljs-punctuation">,</span>                    <span class="hljs-comment">// 新闻所属类别编号</span><br>            <span class="hljs-attr">&quot;pageViews&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;40&quot;</span><span class="hljs-punctuation">,</span>              <span class="hljs-comment">// 新闻浏览量</span><br>            <span class="hljs-attr">&quot;pastHours&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;3&quot;</span><span class="hljs-punctuation">,</span>              <span class="hljs-comment">// 发布时间已过小时数</span><br>            <span class="hljs-attr">&quot;publisher&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;1&quot;</span>                <span class="hljs-comment">// 发布用户ID</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;hid&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;1&quot;</span><span class="hljs-punctuation">,</span>                     <span class="hljs-comment">// 新闻id </span><br>            <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;尚硅谷宣布 ... ...&quot;</span><span class="hljs-punctuation">,</span>   <span class="hljs-comment">// 新闻标题</span><br>            <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;1&quot;</span><span class="hljs-punctuation">,</span>                    <span class="hljs-comment">// 新闻所属类别编号</span><br>            <span class="hljs-attr">&quot;pageViews&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;40&quot;</span><span class="hljs-punctuation">,</span>              <span class="hljs-comment">// 新闻浏览量</span><br>            <span class="hljs-attr">&quot;pastHours&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;3&quot;</span><span class="hljs-punctuation">,</span>               <span class="hljs-comment">// 发布时间已过小时数</span><br>            <span class="hljs-attr">&quot;publisher&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;1&quot;</span>                <span class="hljs-comment">// 发布用户ID</span><br>        <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;pageNum&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span>    <span class="hljs-comment">//页码数</span><br>      <span class="hljs-attr">&quot;pageSize&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">10</span><span class="hljs-punctuation">,</span>  <span class="hljs-comment">// 页大小</span><br>      <span class="hljs-attr">&quot;totalPage&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">20</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 总页数</span><br>      <span class="hljs-attr">&quot;totalSize&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">200</span> <span class="hljs-comment">// 总记录数</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><ol start="3"><li><p>核心代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">findNewsPage</span><span class="hljs-params">(PortalVo portalVo)</span> &#123;<br>        LambdaQueryWrapper&lt;Headline&gt; wrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LambdaQueryWrapper</span>&lt;&gt;();<br>        wrapper.like(!StringUtils.isEmpty(portalVo.getKeyWords()),Headline::getTitle,portalVo.getKeyWords())<br>                .eq(portalVo.getType() != <span class="hljs-literal">null</span>,Headline::getType,portalVo.getType());<br>        Page&lt;Headline&gt; page = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Page</span>&lt;&gt;(portalVo.getPageNum(),portalVo.getPageSize());<br>        List&lt;Headline&gt; headlines = headlineMapper.selectList(page, wrapper);<br><span class="hljs-comment">//        封装数据</span><br>        Map&lt;String, Object&gt; pageInfo = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        pageInfo.put(<span class="hljs-string">&quot;pageData&quot;</span>,headlines);<br>        pageInfo.put(<span class="hljs-string">&quot;pageNum&quot;</span>,page.getCurrent());<br>        pageInfo.put(<span class="hljs-string">&quot;pageSize&quot;</span>,page.getSize());<br>        pageInfo.put(<span class="hljs-string">&quot;totalPages&quot;</span>,page.getPages());<br>        pageInfo.put(<span class="hljs-string">&quot;totalSize&quot;</span>,page.getTotal());<br>        HashMap&lt;String, Object&gt; pageInfoMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        pageInfoMap.put(<span class="hljs-string">&quot;pageInfo&quot;</span>,pageInfo);<br>        <span class="hljs-keyword">return</span> Result.ok(pageInfoMap);<br>    &#125;<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20230925090009386.png" alt="image-20230925090009386"></p></li></ol><h3 id="查询头条详情"><a href="#查询头条详情" class="headerlink" title="查询头条详情"></a>查询头条详情</h3><ol><li><p>需求描述</p><ul><li>用户点击”查看全文”时,向服务端发送新闻id</li><li>后端根据新闻id查询完整新闻文章信息并返回</li><li>后端要同时让新闻的浏览量+1</li></ul></li><li><p>接口描述</p><p>url地址：portal&#x2F;showHeadlineDetail</p><p>请求方式：post</p><p>请求参数:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JSON">hid=<span class="hljs-number">1</span> param形成参数<br></code></pre></td></tr></table></figure><p>响应数据：</p><p>成功</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs Java">&#123;<br>    <span class="hljs-string">&quot;code&quot;</span>:<span class="hljs-string">&quot;200&quot;</span>,<br>    <span class="hljs-string">&quot;message&quot;</span>:<span class="hljs-string">&quot;success&quot;</span>,<br>    <span class="hljs-string">&quot;data&quot;</span>:&#123;<br>        <span class="hljs-string">&quot;headline&quot;</span>:&#123;<br>            <span class="hljs-string">&quot;hid&quot;</span>:<span class="hljs-string">&quot;1&quot;</span>,                     <span class="hljs-comment">// 新闻id </span><br>            <span class="hljs-string">&quot;title&quot;</span>:<span class="hljs-string">&quot;马斯克宣布 ... ...&quot;</span>,   <span class="hljs-comment">// 新闻标题</span><br>            <span class="hljs-string">&quot;article&quot;</span>:<span class="hljs-string">&quot;... ...&quot;</span>            <span class="hljs-comment">// 新闻正文</span><br>            <span class="hljs-string">&quot;type&quot;</span>:<span class="hljs-string">&quot;1&quot;</span>,                    <span class="hljs-comment">// 新闻所属类别编号</span><br>            <span class="hljs-string">&quot;typeName&quot;</span>:<span class="hljs-string">&quot;科技&quot;</span>,             <span class="hljs-comment">// 新闻所属类别</span><br>            <span class="hljs-string">&quot;pageViews&quot;</span>:<span class="hljs-string">&quot;40&quot;</span>,              <span class="hljs-comment">// 新闻浏览量</span><br>            <span class="hljs-string">&quot;pastHours&quot;</span>:<span class="hljs-string">&quot;3&quot;</span> ,              <span class="hljs-comment">// 发布时间已过小时数</span><br>            <span class="hljs-string">&quot;publisher&quot;</span>:<span class="hljs-string">&quot;1&quot;</span> ,              <span class="hljs-comment">// 发布用户ID</span><br>            <span class="hljs-string">&quot;author&quot;</span>:<span class="hljs-string">&quot;张三&quot;</span>                 <span class="hljs-comment">// 新闻作者</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>核心代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">showHeadlineDetail</span><span class="hljs-params">(<span class="hljs-type">int</span> hid)</span> &#123;<br>        <span class="hljs-type">Headline</span> <span class="hljs-variable">headline</span> <span class="hljs-operator">=</span> headlineMapper.selectById(hid);<br>        <span class="hljs-keyword">if</span> (headline!=<span class="hljs-literal">null</span>) &#123;<br>            LambdaUpdateWrapper&lt;Headline&gt; wrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LambdaUpdateWrapper</span>&lt;&gt;();<br><span class="hljs-comment">//            原有值加1</span><br>            wrapper.eq(Headline::getHid,headline.getHid())<br>                    .set(Headline::getPageViews,headline.getPageViews()+<span class="hljs-number">1</span>);<br>            headlineMapper.update(<span class="hljs-literal">null</span>,wrapper);<br>        &#125;<br>        headline.setPageViews(headline.getPageViews()+<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">return</span> Result.ok(headline);<br>    &#125;<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20230925092159392.png" alt="image-20230925092159392"></p></li></ol><h2 id="头条模块开发"><a href="#头条模块开发" class="headerlink" title="头条模块开发"></a>头条模块开发</h2><h3 id="登录验证和保护"><a href="#登录验证和保护" class="headerlink" title="登录验证和保护"></a>登录验证和保护</h3><ol><li><p>需求描述</p><p><img src="/assets/image-20230925101707377.png" alt="image-20230925101707377"></p><ul><li>客户端在进入发布页前、发布新闻前、进入修改页前、修改前、删除新闻前先向服务端发送请求携带token请求头</li><li>后端接收token请求头后,校验用户登录是否过期并做响应</li><li>前端根据响应信息提示用户进入登录页还是进入正常业务页面</li></ul></li><li><p>接口描述</p><p>url地址：user&#x2F;checkLogin</p><p>请求方式：get</p><p>请求参数:  无</p><p>请求头： token: 用户token</p><p>响应数据：</p><p>未过期：</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Java">&#123;<br>    <span class="hljs-string">&quot;code&quot;</span>:<span class="hljs-string">&quot;200&quot;</span>,<br>    <span class="hljs-string">&quot;message&quot;</span>:<span class="hljs-string">&quot;success&quot;</span>,<br>    <span class="hljs-string">&quot;data&quot;</span>:&#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><pre><code class="hljs">过期：</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Java">&#123;<br>    <span class="hljs-string">&quot;code&quot;</span>:<span class="hljs-string">&quot;504&quot;</span>,<br>    <span class="hljs-string">&quot;message&quot;</span>:<span class="hljs-string">&quot;loginExpired&quot;</span>,<br>    <span class="hljs-string">&quot;data&quot;</span>:&#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li><p>(拦截器)核心代码</p><p><img src="/assets/image-20230925113428617.png" alt="image-20230925113428617"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginProtectedInterception</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerInterceptor</span> &#123;<br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> JwtHelper jwtHelper;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> request.getHeader(<span class="hljs-string">&quot;token&quot;</span>);<br><span class="hljs-comment">//        token没过期，放行</span><br>        <span class="hljs-keyword">if</span> (!jwtHelper.isExpiration(token)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br><span class="hljs-comment">//        无效则返回504的json状态</span><br>        Result&lt;Object&gt; result = Result.build(<span class="hljs-literal">null</span>, ResultCodeEnum.NOTLOGIN);<br>        <span class="hljs-type">ObjectMapper</span> <span class="hljs-variable">objectMapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">json</span> <span class="hljs-operator">=</span> objectMapper.writeValueAsString(result);<br>        response.getWriter().print(json);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java">   <span class="hljs-meta">@Configuration</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebMVCConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurer</span> &#123;<br>       <span class="hljs-meta">@Resource</span><br>       <span class="hljs-keyword">private</span> LoginProtectedInterception loginProtectedInterception;<br>       <span class="hljs-meta">@Override</span><br>       <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addInterceptors</span><span class="hljs-params">(InterceptorRegistry registry)</span> &#123;<br>           registry.addInterceptor(loginProtectedInterception)<br>                   .addPathPatterns(<span class="hljs-string">&quot;/headline/**&quot;</span>);<br>       &#125;<br>   &#125;<br><br>## 头条发布实现<br><br><span class="hljs-number">1.</span> 需求描述<br><br>   - 用户在客户端输入发布的新闻信息完毕后<br>   - **发布前先请求后端的登录校验接口验证登录**<br>   - 登录通过则提交新闻信息<br>   - 后端将新闻信息存入数据库<br><br><span class="hljs-number">2.</span> 接口描述<br><br>   url地址：headline/publish<br><br>   请求方式：post<br><br>   请求头: <br><br>```Java<br>token: ... ...<br></code></pre></td></tr></table></figure><p> 请求参数:</p></li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JSON"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;在没有登录的情况下（请求头缺少有效token） ... ...&quot;</span><span class="hljs-punctuation">,</span>   <span class="hljs-comment">// 文章标题</span><br>    <span class="hljs-attr">&quot;article&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;... ...&quot;</span><span class="hljs-punctuation">,</span>          <span class="hljs-comment">// 文章内容</span><br>    <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;1&quot;</span>                    <span class="hljs-comment">// 文章类别</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><pre><code class="hljs">响应数据：未登录</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Java">&#123;<br>    <span class="hljs-string">&quot;code&quot;</span>:<span class="hljs-string">&quot;504&quot;</span>,<br>    <span class="hljs-string">&quot;message&quot;</span>:<span class="hljs-string">&quot;loginExpired&quot;</span>,<br>    <span class="hljs-string">&quot;data&quot;</span>:&#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><pre><code class="hljs">成功</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Java">&#123;<br>    <span class="hljs-string">&quot;code&quot;</span>:<span class="hljs-string">&quot;200&quot;</span>,<br>    <span class="hljs-string">&quot;message&quot;</span>:<span class="hljs-string">&quot;success&quot;</span>,<br>    <span class="hljs-string">&quot;data&quot;</span>:&#123;&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><ol start="3"><li><p>核心代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">publish</span><span class="hljs-params">(Headline headline,String token)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> jwtHelper.getUserId(token).intValue();<br>    headline.setPublisher(id);<br>    headline.setPageViews(<span class="hljs-number">0</span>);<br>    headline.setCreateTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>    headline.setUpdateTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>    headlineMapper.insert(headline);<br>    <span class="hljs-keyword">return</span> Result.ok(<span class="hljs-literal">null</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20230925113805646.png" alt="image-20230925113805646"></p><p>配置请求头token后</p><p><img src="/assets/image-20230925114037073.png" alt="image-20230925114037073"></p><p><img src="/assets/image-20230925114108822.png" alt="image-20230925114108822"></p></li></ol><h2 id="修改头条回显"><a href="#修改头条回显" class="headerlink" title="修改头条回显"></a>修改头条回显</h2><ol><li><p>需求描述</p><ul><li>前端先调用登录校验接口，校验登录是否过期</li><li>登录校验通过后，则根据新闻id查询新闻的完整信息并响应给前端</li></ul></li><li><p>接口描述</p><p>url地址：headline&#x2F;findHeadlineByHid</p><p>请求方式：post</p><p>请求参数:</p></li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JSON">hid=<span class="hljs-number">1</span> param形成参数<br></code></pre></td></tr></table></figure><pre><code class="hljs">响应数据：成功</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Java">&#123;<br>    <span class="hljs-string">&quot;code&quot;</span>:<span class="hljs-string">&quot;200&quot;</span>,<br>    <span class="hljs-string">&quot;message&quot;</span>:<span class="hljs-string">&quot;success&quot;</span>,<br>    <span class="hljs-string">&quot;data&quot;</span>:&#123;<br>        <span class="hljs-string">&quot;headline&quot;</span>:&#123;<br>            <span class="hljs-string">&quot;hid&quot;</span>:<span class="hljs-string">&quot;1&quot;</span>,<br>            <span class="hljs-string">&quot;title&quot;</span>:<span class="hljs-string">&quot;马斯克宣布&quot;</span>,<br>            <span class="hljs-string">&quot;article&quot;</span>:<span class="hljs-string">&quot;... ... &quot;</span>,<br>            <span class="hljs-string">&quot;type&quot;</span>:<span class="hljs-string">&quot;2&quot;</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li><p>核心代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;findHeadlineByHid&quot;)</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">findHeadlineByHid</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;hid&quot;)</span> <span class="hljs-type">int</span> hid)</span>&#123;<br>    <span class="hljs-type">Headline</span> <span class="hljs-variable">headline</span> <span class="hljs-operator">=</span> headlineService.getOptById(hid).get();<br>    <span class="hljs-keyword">return</span> Result.ok(headline);<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="头条修改实现"><a href="#头条修改实现" class="headerlink" title="头条修改实现"></a>头条修改实现</h2><ol><li><p>需求描述</p><ul><li>客户端将新闻信息修改后,提交前先请求登录校验接口校验登录状态</li><li>登录校验通过则提交修改后的新闻信息,后端接收并更新进入数据库</li></ul></li><li><p>接口描述</p><p>url地址：headline&#x2F;update</p><p>请求方式：post</p><p>请求参数:</p></li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs JSON"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;hid&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;1&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;尚硅谷宣布 ... ...&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;article&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;... ...&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;2&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><pre><code class="hljs">响应数据：成功</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Java">&#123;<br>    <span class="hljs-string">&quot;code&quot;</span>:<span class="hljs-string">&quot;200&quot;</span>,<br>    <span class="hljs-string">&quot;message&quot;</span>:<span class="hljs-string">&quot;success&quot;</span>,<br>    <span class="hljs-string">&quot;data&quot;</span>:&#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li><p>核心代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">updateHeadline</span><span class="hljs-params">(Headline headline)</span> &#123;<br>        headline.setUpdateTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br><span class="hljs-comment">//        版本更新 乐观锁</span><br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">version</span> <span class="hljs-operator">=</span> headlineMapper.selectById(headline.getHid()).getVersion();<br>        headline.setVersion(version);<br>        headlineMapper.updateById(headline);<br>        <span class="hljs-keyword">return</span> Result.ok(<span class="hljs-literal">null</span>);<br>    &#125;<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20230925142730049.png" alt="image-20230925142730049"></p><p><img src="/assets/image-20230925143056104.png" alt="image-20230925143056104"></p><p>乐观锁控制version</p></li></ol><h2 id="删除头条功能"><a href="#删除头条功能" class="headerlink" title="删除头条功能"></a>删除头条功能</h2><ol><li><p>需求描述</p><ul><li>将要删除的新闻id发送给服务端</li><li>服务端校验登录是否过期,未过期则直接删除,过期则响应登录过期信息</li></ul></li><li><p>接口描述</p><p>url地址：headline&#x2F;removeByHid</p><p>请求方式：post</p><p>请求参数:</p></li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JSON">hid=<span class="hljs-number">1</span> param形成参数<br></code></pre></td></tr></table></figure><pre><code class="hljs">响应数据：成功</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Java">&#123;<br>    <span class="hljs-string">&quot;code&quot;</span>:<span class="hljs-string">&quot;200&quot;</span>,<br>    <span class="hljs-string">&quot;message&quot;</span>:<span class="hljs-string">&quot;success&quot;</span>,<br>    <span class="hljs-string">&quot;data&quot;</span>:&#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li><p>核心代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;removeByHid&quot;)</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">removeByHid</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;hid&quot;)</span><span class="hljs-type">int</span> hid)</span>&#123;<br>    headlineMapper.deleteById(hid);<br>    <span class="hljs-keyword">return</span> Result.ok(<span class="hljs-literal">null</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>Springboot项目整合</category>
      
      <category>尚硅谷微头条项目</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>6_MybatisPlus代码生成器</title>
    <link href="/2023/09/24/%E5%B0%9A%E7%A1%85%E8%B0%B7-MybatisPlus/6_MybatisPlus%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E5%99%A8(MybatisX)/"/>
    <url>/2023/09/24/%E5%B0%9A%E7%A1%85%E8%B0%B7-MybatisPlus/6_MybatisPlus%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E5%99%A8(MybatisX)/</url>
    
    <content type="html"><![CDATA[<h1 id="MybatisPlus代码生成器"><a href="#MybatisPlus代码生成器" class="headerlink" title="MybatisPlus代码生成器"></a>MybatisPlus代码生成器</h1><p><img src="/assets/image-20230924112833403.png" alt="image-20230924112833403"></p><p>生成操作略</p><h2 id="生成CRUD"><a href="#生成CRUD" class="headerlink" title="生成CRUD"></a>生成CRUD</h2><p><img src="/assets/image-20230924113603806.png" alt="image-20230924113603806"></p><p>ALT+ENTER</p><p><img src="/assets/image-20230924113618939.png" alt="image-20230924113618939"></p><p><img src="/assets/image-20230924113644814.png" alt="image-20230924113644814"></p><p><img src="/assets/image-20230924113734149.png" alt="image-20230924113734149"></p><p><img src="/assets/image-20230924113748130.png" alt="image-20230924113748130"></p><p><img src="/assets/image-20230924113922143.png" alt="image-20230924113922143"></p><p><img src="/assets/image-20230924113934071.png" alt="image-20230924113934071"></p>]]></content>
    
    
    <categories>
      
      <category>MybatisPlus</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>5_MybatisPlus高级扩展</title>
    <link href="/2023/09/24/%E5%B0%9A%E7%A1%85%E8%B0%B7-MybatisPlus/5_MybatisPlus%E9%AB%98%E7%BA%A7%E6%89%A9%E5%B1%95/"/>
    <url>/2023/09/24/%E5%B0%9A%E7%A1%85%E8%B0%B7-MybatisPlus/5_MybatisPlus%E9%AB%98%E7%BA%A7%E6%89%A9%E5%B1%95/</url>
    
    <content type="html"><![CDATA[<h1 id="MybatisPlus高级扩展"><a href="#MybatisPlus高级扩展" class="headerlink" title="MybatisPlus高级扩展"></a>MybatisPlus高级扩展</h1><h2 id="逻辑删除"><a href="#逻辑删除" class="headerlink" title="逻辑删除"></a>逻辑删除</h2><p>逻辑删除是指通过更改记录的状态或添加标记字段来模拟删除操作，从而保留了删除前的数据，便于后续的数据分析和恢复。</p><ul><li>物理删除：真实删除，将对应数据从数据库中删除，之后查询不到此条被删除的数据</li><li>逻辑删除：假删除，将对应数据中代表是否被删除字段的状态修改为“被删除状态”，之后在数据库中仍旧能看到此条数据记录</li></ul><h3 id="逻辑删除实现"><a href="#逻辑删除实现" class="headerlink" title="逻辑删除实现"></a>逻辑删除实现</h3><ol><li><p>表添加逻辑删除字段</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-keyword">USER</span> <span class="hljs-keyword">ADD</span> deleted <span class="hljs-type">INT</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-number">0</span> ; <br></code></pre></td></tr></table></figure><p><img src="/assets/image-20230924084457370.png" alt="image-20230924084457370"></p></li><li><p>实体类添加逻辑删除属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-meta">@TableName(&quot;user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-meta">@TableId(value = &quot;id&quot;,type = IdType.AUTO)</span><span class="hljs-comment">//前提mysql主键设定了自增长</span><br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-meta">@TableField(value = &quot;name&quot;,exist = true)</span><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Integer age;  <span class="hljs-comment">//此处类型不能为int基本数据类型，因为默认为0</span><br>    <span class="hljs-keyword">private</span> String email;<br>    <span class="hljs-meta">@TableLogic</span> <span class="hljs-comment">//默认已逻辑删除为1</span><br>    <span class="hljs-keyword">private</span> Integer deleted;<br>&#125;<br></code></pre></td></tr></table></figure><p>全局指定</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">mybatis-plus:</span><br>  <span class="hljs-attr">configuration:</span><br>    <span class="hljs-attr">db-config:</span><br>      <span class="hljs-attr">logic-delete-field:</span> <span class="hljs-string">deleted</span><br></code></pre></td></tr></table></figure><p><img src="/assets/image-20230924085159729.png" alt="image-20230924085159729"></p></li></ol><h2 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h2><p>乐观锁和悲观锁的形象比喻，悲观锁相当于上厕所锁门，上锁别人需要门外等候直到开锁才能进去。乐观锁则不上锁</p><p>乐观锁和悲观锁是在并发编程中用于处理并发访问和资源竞争的两种不同的锁机制!!</p><p>悲观锁：<br>悲观锁的基本思想是，在整个数据访问过程中，将共享资源锁定，以确保其他线程或进程不能同时访问和修改该资源。悲观锁的核心思想是”先保护，再修改”。在悲观锁的应用中，线程在访问共享资源之前会获取到锁，并在整个操作过程中保持锁的状态，阻塞其他线程的访问。只有当前线程完成操作后，才会释放锁，让其他线程继续操作资源。这种锁机制可以确保资源独占性和数据的一致性，但是在高并发环境下，悲观锁的效率相对较低。</p><p>乐观锁：<br>乐观锁的基本思想是，认为并发冲突的概率较低，因此不需要提前加锁，而是在数据更新阶段进行冲突检测和处理。乐观锁的核心思想是”先修改，后校验”。在乐观锁的应用中，线程在读取共享资源时不会加锁，而是记录特定的版本信息。当线程准备更新资源时，会先检查该资源的版本信息是否与之前读取的版本信息一致，如果一致则执行更新操作，否则说明有其他线程修改了该资源，需要进行相应的冲突处理。乐观锁通过避免加锁操作，提高了系统的并发性能和吞吐量，但是在并发冲突较为频繁的情况下，乐观锁会导致较多的冲突处理和重试操作。</p><p>理解点: 悲观锁和乐观锁是两种解决并发数据问题的思路,不是具体技术!!!</p><h3 id="具体技术和方案"><a href="#具体技术和方案" class="headerlink" title="具体技术和方案"></a>具体技术和方案</h3><p>版本号&#x2F;时间戳：为数据添加一个版本号或时间戳字段，每次更新数据时，比较当前版本号或时间戳与期望值是否一致，若一致则更新成功，否则表示数据已被修改，需要进行冲突处理。</p><p><strong>介绍版本号乐观锁技术的实现流程:</strong></p><ul><li>每条数据添加一个版本号字段version</li><li>取出记录时，获取当前 version</li><li>更新时，检查获取版本号是不是数据库当前最新版本号</li><li>如果是[证明没有人修改数据], 执行更新, set 数据更新 , version &#x3D; version+ 1 </li><li>如果 version 不对[证明有人已经修改了]，我们现在的其他记录就是失效数据!就更新失败</li></ul><h3 id="MybatisPlus实现版本号乐观锁"><a href="#MybatisPlus实现版本号乐观锁" class="headerlink" title="MybatisPlus实现版本号乐观锁"></a>MybatisPlus实现版本号乐观锁</h3><ol><li><p>添加版本号更新插件</p><p>该插件会在更新数据的时候，对比版本号字段并版本号+1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> MybatisPlusInterceptor <span class="hljs-title function_">mybatisPlusInterceptor</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">MybatisPlusInterceptor</span> <span class="hljs-variable">mybatisPlusInterceptor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MybatisPlusInterceptor</span>();<br>    mybatisPlusInterceptor.addInnerInterceptor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">OptimisticLockerInnerInterceptor</span>());<br>    <span class="hljs-keyword">return</span> mybatisPlusInterceptor;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>对于乐观锁字段添加@Version注解</p><p>数据库也需要添加Version字段</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-keyword">USER</span> <span class="hljs-keyword">ADD</span> `version` <span class="hljs-type">INT</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-number">1</span>; <br></code></pre></td></tr></table></figure><ul><li>支持的数据类型有:int,Integer,long,Long,Date,Timestamp,LocalDateTime</li><li>仅支持 updateById(id) 与 update(entity, wrapper) 方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Version</span><br><span class="hljs-keyword">private</span> Integer version;<br></code></pre></td></tr></table></figure></li><li><p>测试（2023&#x2F;9&#x2F;24测试失败，原因不详）</p></li></ol><h2 id="防全表更新和删除实现"><a href="#防全表更新和删除实现" class="headerlink" title="防全表更新和删除实现"></a>防全表更新和删除实现</h2><p>插件补充</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> MybatisPlusInterceptor <span class="hljs-title function_">mybatisPlusInterceptor</span><span class="hljs-params">()</span> &#123;<br>  <span class="hljs-type">MybatisPlusInterceptor</span> <span class="hljs-variable">interceptor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MybatisPlusInterceptor</span>();<br>  interceptor.addInnerInterceptor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BlockAttackInnerInterceptor</span>());<br>  <span class="hljs-keyword">return</span> interceptor;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>MybatisPlus</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>4_核心注解使用</title>
    <link href="/2023/09/23/%E5%B0%9A%E7%A1%85%E8%B0%B7-MybatisPlus/4_%E6%A0%B8%E5%BF%83%E6%B3%A8%E8%A7%A3%E4%BD%BF%E7%94%A8/"/>
    <url>/2023/09/23/%E5%B0%9A%E7%A1%85%E8%B0%B7-MybatisPlus/4_%E6%A0%B8%E5%BF%83%E6%B3%A8%E8%A7%A3%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="核心注解使用"><a href="#核心注解使用" class="headerlink" title="核心注解使用"></a>核心注解使用</h1><h2 id="TableName注解"><a href="#TableName注解" class="headerlink" title="@TableName注解"></a>@TableName注解</h2><p>不是所有数据库的信息和实体类都完全映射！</p><p>例如： 表名 t_user  → 实体类 User 这时候就不对应了！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-meta">@TableName(&quot;t_user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Integer age;  <span class="hljs-comment">//此处类型不能为int基本数据类型，因为默认为0</span><br>    <span class="hljs-keyword">private</span> String email;<br>&#125;<br></code></pre></td></tr></table></figure><p>其他解决方案：全局设置前缀</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">mybatis-plus:</span> <span class="hljs-comment"># mybatis-plus的配置</span><br>  <span class="hljs-attr">global-config:</span><br>    <span class="hljs-attr">db-config:</span><br>      <span class="hljs-attr">table-prefix:</span> <span class="hljs-string">t_</span> <span class="hljs-comment"># 表名前缀字符串</span><br></code></pre></td></tr></table></figure><h2 id="TableId-注解"><a href="#TableId-注解" class="headerlink" title="@TableId 注解"></a>@TableId 注解</h2><p>用来描述主键字段</p><table><thead><tr><th>属性</th><th>类型</th><th>必须指定</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>value</td><td>String</td><td>否</td><td>“”</td><td>主键字段名</td></tr><tr><td>type</td><td>Enum</td><td>否</td><td>IdType.NONE</td><td>指定主键类型</td></tr></tbody></table><p><a href="https://github.com/baomidou/mybatis-plus/blob/3.0/mybatis-plus-annotation/src/main/java/com/baomidou/mybatisplus/annotation/IdType.java">IdType</a>属性可选值：</p><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>AUTO</td><td>数据库 ID 自增 (前提mysql配置主键自增长)</td></tr><tr><td>ASSIGN_ID（默认）</td><td>分配 ID(主键类型为 Number(Long )或 String)(since 3.3.0),使用接口<code>IdentifierGenerator</code>的方法<code>nextId</code>(默认实现类为<code>DefaultIdentifierGenerator</code>雪花算法)</td></tr></tbody></table><ol><li>@TableId 注解<ul><li>描述：主键注解</li><li>使用位置：实体类主键字段</li></ul></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@TableName(&quot;sys_user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-meta">@TableId(value=&quot;主键列名&quot;,type=主键策略)</span><br>    <span class="hljs-keyword">private</span> Long id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Integer age;<br>    <span class="hljs-keyword">private</span> String email;<br>&#125;<br><br></code></pre></td></tr></table></figure><table><thead><tr><th>属性</th><th>类型</th><th>必须指定</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>value</td><td>String</td><td>否</td><td>“”</td><td>主键字段名</td></tr><tr><td>type</td><td>Enum</td><td>否</td><td>IdType.NONE</td><td>指定主键类型</td></tr></tbody></table><pre><code class="hljs">[IdType](https://github.com/baomidou/mybatis-plus/blob/3.0/mybatis-plus-annotation/src/main/java/com/baomidou/mybatisplus/annotation/IdType.java)属性可选值：</code></pre><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>AUTO</td><td>数据库 ID 自增 (mysql配置主键自增长)</td></tr><tr><td>ASSIGN_ID（默认）</td><td>分配 ID(主键类型为 Number(Long )或 String)(since 3.3.0),使用接口<code>IdentifierGenerator</code>的方法<code>nextId</code>(默认实现类为<code>DefaultIdentifierGenerator</code>雪花算法)</td></tr></tbody></table><pre><code class="hljs">全局配置修改主键策略:</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Java">mybatis-plus:<br>  configuration:<br>    # 配置MyBatis日志<br>    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl<br>  global-config:<br>    db-config:<br>      # 配置MyBatis-Plus操作表的默认前缀<br>      table-prefix: t_<br>      # 配置MyBatis-Plus的主键策略<br>      id-type: auto<br></code></pre></td></tr></table></figure><pre><code class="hljs">在以下场景下，添加`@TableId`注解是必要的：1. 实体类的字段与数据库表的主键字段不同名：如果实体类中的字段与数据库表的主键字段不一致，需要使用`@TableId`注解来指定实体类中表示主键的字段。2. 主键生成策略不是默认策略：如果需要使用除了默认主键生成策略以外的策略，也需要添加`@TableId`注解，并通过`value`属性指定生成策略。</code></pre><p><strong>需要记住的: 雪花算法生成的数字,需要使用Long 或者 String类型主键!!</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-meta">@TableName(&quot;user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-meta">@TableId(value = &quot;id&quot;,type = IdType.AUTO)</span><br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Integer age;  <span class="hljs-comment">//此处类型不能为int基本数据类型，因为默认为0</span><br>    <span class="hljs-keyword">private</span> String email;<br>&#125;<br></code></pre></td></tr></table></figure><p>其他解决方案：全局设置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs YML"><span class="hljs-attr">mybatis-plus:</span><br>  <span class="hljs-attr">configuration:</span><br>    <span class="hljs-comment"># 配置MyBatis日志</span><br>    <span class="hljs-attr">log-impl:</span> <span class="hljs-string">org.apache.ibatis.logging.stdout.StdOutImpl</span><br>  <span class="hljs-attr">global-config:</span><br>    <span class="hljs-attr">db-config:</span><br>      <span class="hljs-comment"># 配置MyBatis-Plus操作表的默认前缀</span><br>      <span class="hljs-attr">table-prefix:</span> <span class="hljs-string">t_</span><br>      <span class="hljs-comment"># 配置MyBatis-Plus的主键策略</span><br>      <span class="hljs-attr">id-type:</span> <span class="hljs-string">auto</span><br></code></pre></td></tr></table></figure><h2 id="TableField"><a href="#TableField" class="headerlink" title="@TableField"></a>@TableField</h2><p><img src="/assets/image-20230924003551467.png" alt="image-20230924003551467"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-meta">@TableName(&quot;user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-meta">@TableId(value = &quot;id&quot;,type = IdType.AUTO)</span><span class="hljs-comment">//前提mysql主键设定了自增长</span><br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-meta">@TableField(value = &quot;name&quot;,exist = false)</span><span class="hljs-comment">//exist = false代表数据库中不存在这个列</span><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Integer age;  <span class="hljs-comment">//此处类型不能为int基本数据类型，因为默认为0</span><br>    <span class="hljs-keyword">private</span> String email;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>MybatisPlus</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>3_条件构造器的使用</title>
    <link href="/2023/09/23/%E5%B0%9A%E7%A1%85%E8%B0%B7-MybatisPlus/3_%E6%9D%A1%E4%BB%B6%E6%9E%84%E9%80%A0%E5%99%A8%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <url>/2023/09/23/%E5%B0%9A%E7%A1%85%E8%B0%B7-MybatisPlus/3_%E6%9D%A1%E4%BB%B6%E6%9E%84%E9%80%A0%E5%99%A8%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="条件构造器的使用"><a href="#条件构造器的使用" class="headerlink" title="条件构造器的使用"></a>条件构造器的使用</h1><p><strong>建议简单的sql使用wrapper，复杂的sql使用xml自己写sql！！</strong></p><p>对于</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> name <span class="hljs-operator">=</span> &quot;John&quot; <span class="hljs-keyword">and</span> age <span class="hljs-operator">&gt;</span> <span class="hljs-number">30</span> <span class="hljs-keyword">and</span> email <span class="hljs-keyword">like</span> &quot;%@qq.com&quot;;<br></code></pre></td></tr></table></figure><p>使用<code>QueryWrapper&lt;User&gt;</code>拼接，灵活构建条件</p><p><a href="https://baomidou.com/pages/10c804/#alleq">条件构造器 | MyBatis-Plus (baomidou.com)</a></p><p><img src="/assets/image-20230923164046890.png" alt="image-20230923164046890"></p><h2 id="基于QueryWrapper组装"><a href="#基于QueryWrapper组装" class="headerlink" title="基于QueryWrapper组装"></a>基于QueryWrapper组装</h2><p><img src="/assets/image-20230923164642346.png" alt="image-20230923164642346"></p><blockquote><p>&#x2F;&#x2F;查询用户名包含a，年龄在20到30之间，并且邮箱不为null的用户信息    &#x2F;&#x2F;SELECT id,username AS name,age,email,is_deleted FROM t_user WHERE is_deleted&#x3D;0 AND (username LIKE ? AND age BETWEEN ? AND ? AND email IS NOT NULL)    </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">QueryWrapperTest</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserMapper userMapper;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span>&#123;<br>        QueryWrapper&lt;User&gt; userQueryWrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;&gt;();<br>        userQueryWrapper.between(<span class="hljs-string">&quot;age&quot;</span>,<span class="hljs-number">20</span>,<span class="hljs-number">30</span>);<br>        userQueryWrapper.like(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;a&quot;</span>);<br>        userQueryWrapper.isNotNull(<span class="hljs-string">&quot;email&quot;</span>);<br>        userMapper.selectList(userQueryWrapper).forEach(System.out::println);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注意</strong>：方法like(“value”)中，指定的是sql语句like(“%value%”)，而likeLeft(“value”)指定sql的like(“%value”)，likeRight(“value”)为sql的like(“value%”)</p><blockquote><p>&#x2F;&#x2F;按年龄降序查询用户，如果年龄相同则按id升序排列    &#x2F;&#x2F;SELECT id,username AS name,age,email,is_deleted FROM t_user WHERE is_deleted&#x3D;0 ORDER BY age DESC,id ASC </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test2</span><span class="hljs-params">()</span>&#123;<br>    QueryWrapper&lt;User&gt; userQueryWrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;&gt;();<br>    userQueryWrapper.orderByDesc(<span class="hljs-string">&quot;age&quot;</span>)<br>            .orderByAsc(<span class="hljs-string">&quot;id&quot;</span>);<br>    userMapper.selectList(userQueryWrapper).forEach(System.out::println);<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p> &#x2F;&#x2F;删除email为空的用户    &#x2F;&#x2F;DELETE FROM t_user WHERE (email IS NULL)    </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test3</span><span class="hljs-params">()</span>&#123;<br>    QueryWrapper&lt;User&gt; userQueryWrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;&gt;();<br>    userQueryWrapper.isNull(<span class="hljs-string">&quot;email&quot;</span>);<br>    userMapper.delete(userQueryWrapper);<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>&#x2F;&#x2F;将年龄大于20并且用户名中包含有a或邮箱为null的用户信息修改    &#x2F;&#x2F;UPDATE t_user SET age&#x3D;?, email&#x3D;? WHERE username LIKE ? AND age &gt; ? OR email IS NULL)    </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test4</span><span class="hljs-params">()</span>&#123;<br>    QueryWrapper&lt;User&gt; userQueryWrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;&gt;();<br>    userQueryWrapper.gt(<span class="hljs-string">&quot;age&quot;</span>,<span class="hljs-number">20</span>)<br>            .like(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;a&quot;</span>)<br>            .isNull(<span class="hljs-string">&quot;email&quot;</span>);<br>    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>    user.setName(<span class="hljs-string">&quot;梨花&quot;</span>);<br>    user.setAge(<span class="hljs-number">19</span>);<br>    user.setEmail(<span class="hljs-string">&quot;444@qq.com&quot;</span>);<br>    userMapper.update(user,userQueryWrapper);<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>&#x2F;&#x2F;查询用户信息的username和age字段    &#x2F;&#x2F;SELECT username,age FROM t_user    </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test5</span><span class="hljs-params">()</span>&#123;<br>    QueryWrapper&lt;User&gt; userQueryWrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;&gt;();<br>    userQueryWrapper.select(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;age&quot;</span>);<br>    userMapper.selectList(userQueryWrapper).forEach(System.out::println);<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>&#x2F;&#x2F;判断条件拼接    &#x2F;&#x2F;当name不为null拼接等于, age &gt; 1 拼接等于判断    &#x2F;&#x2F;方案1: 手动判断    </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test6</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Tom&quot;</span>;<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> <span class="hljs-number">19</span>;<br>        QueryWrapper&lt;User&gt; userQueryWrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;&gt;();<br><span class="hljs-comment">//        方式1</span><br>        <span class="hljs-keyword">if</span> (StringUtils.isNotBlank(name))&#123;<br>            userQueryWrapper.eq(<span class="hljs-string">&quot;name&quot;</span>,name);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (age &gt; <span class="hljs-number">18</span>)&#123;<br>            userQueryWrapper.eq(<span class="hljs-string">&quot;age&quot;</span>,age);<br>        &#125;<br>        userMapper.selectList(userQueryWrapper).forEach(System.out::println);<br>    &#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test6</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Tom&quot;</span>;<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> <span class="hljs-number">19</span>;<br>        QueryWrapper&lt;User&gt; userQueryWrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;&gt;();<br><span class="hljs-comment">//        方式2</span><br>        userQueryWrapper.eq(StringUtils.isNotBlank(name),<span class="hljs-string">&quot;name&quot;</span>,name);<br>        userQueryWrapper.eq(age != <span class="hljs-literal">null</span> &amp;&amp; age &gt; <span class="hljs-number">18</span>,<span class="hljs-string">&quot;age&quot;</span>,age);<br>        userMapper.selectList(userQueryWrapper).forEach(System.out::println);<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="基于UpdateWrapper组装"><a href="#基于UpdateWrapper组装" class="headerlink" title="基于UpdateWrapper组装"></a>基于UpdateWrapper组装</h2><p>updateWrapper可以随意设置列的值！！</p><blockquote><p>&#x2F;&#x2F;将年龄大于20并且用户名中包含有a或邮箱为null的用户信息修改    &#x2F;&#x2F;UPDATE t_user SET age&#x3D;?, email&#x3D;? WHERE username LIKE ? AND age &gt; ? OR email IS NULL)   </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test7</span><span class="hljs-params">()</span>&#123;<br>    UpdateWrapper&lt;User&gt; userUpdateWrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">UpdateWrapper</span>&lt;&gt;();<br>    userUpdateWrapper.gt(<span class="hljs-string">&quot;age&quot;</span>,<span class="hljs-number">20</span>)<br>            .like(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;%a%&quot;</span>)<br>            .or()<br>            .isNull(<span class="hljs-string">&quot;email&quot;</span>)<br>            .isNull(<span class="hljs-string">&quot;email&quot;</span>)<br>            .set(<span class="hljs-string">&quot;email&quot;</span>,<span class="hljs-literal">null</span>)<br>            .set(<span class="hljs-string">&quot;age&quot;</span>,<span class="hljs-number">99</span>);<br>    userMapper.update(<span class="hljs-literal">null</span>,userUpdateWrapper);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="基于LambdaQueryWrapper组件"><a href="#基于LambdaQueryWrapper组件" class="headerlink" title="基于LambdaQueryWrapper组件"></a>基于LambdaQueryWrapper组件</h2><h3 id="对于lambda表达式的回顾"><a href="#对于lambda表达式的回顾" class="headerlink" title="对于lambda表达式的回顾"></a>对于lambda表达式的回顾</h3><p>Lambda 表达式是 Java 8 引入的一种函数式编程特性，它提供了一种更简洁、更直观的方式来表示匿名函数或函数式接口的实现。Lambda 表达式可以用于简化代码，提高代码的可读性和可维护性。</p><p>Lambda 表达式的语法可以分为以下几个部分：</p><ol><li><p><strong>参数列表：</strong> 参数列表用小括号 <code>()</code> 括起来，可以指定零个或多个参数。如果没有参数，可以省略小括号；如果只有一个参数，可以省略小括号。</p><p> 示例：<code>(a, b)</code>, <code>x -&gt;</code>, <code>() -&gt;</code></p></li><li><p><strong>箭头符号：</strong> 箭头符号 <code>-&gt;</code> 分割参数列表和 Lambda 表达式的主体部分。</p><p> 示例：<code>-&gt;</code></p></li><li><p><strong>Lambda 表达式的主体：</strong> Lambda 表达式的主体部分可以是一个表达式或一个代码块。如果是一个表达式，可以省略 return 关键字；如果是多条语句的代码块，需要使用大括号 <code>&#123;&#125;</code> 括起来，并且需要明确指定 return 关键字。</p><p> 示例：</p><ul><li>单个表达式：<code>x -&gt; x * x</code></li><li>代码块：<code>(x, y) -&gt; &#123; int sum = x + y; return sum; &#125;</code></li></ul></li></ol><p>Lambda 表达式的语法可以更具体地描述如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">// 使用 Lambda 表达式实现一个接口的方法</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Greeting</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">sayHello</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LambdaExample</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <br>        <span class="hljs-comment">//原始匿名内部类方式</span><br>        <span class="hljs-type">Greeting</span> <span class="hljs-variable">greeting</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Greeting</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sayHello</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;Hello, world!&quot;</span>);<br>            &#125;<br>        &#125;;<br>        <br>        a-&gt;System.out.println(<span class="hljs-string">&quot;Hello, world!&quot;</span>)<br>        <br>        <span class="hljs-comment">// 使用 Lambda 表达式实现接口的方法</span><br>        greeting = () -&gt; System.out.println(<span class="hljs-string">&quot;Hello, world!&quot;</span>);<br><br>          System.out::println;<br>           () -&gt;  类.XXX(); -&gt; 类：：方法名<br>        <span class="hljs-comment">// 调用接口的方法</span><br>        greeting.sayHello();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>3. 方法引用回顾:</strong></p><p>方法引用是 Java 8 中引入的一种语法特性，它提供了一种简洁的方式来直接引用已有的方法或构造函数。方法引用可以替代 Lambda 表达式，使代码更简洁、更易读。</p><p>Java 8 支持以下几种方法引用的形式：</p><ol><li><strong>静态方法引用：</strong> 引用静态方法，语法为 <code>类名::静态方法名</code>。</li><li><strong>实例方法引用：</strong> 引用实例方法，语法为 <code>实例对象::实例方法名</code>。</li><li><strong>对象方法引用：</strong> 引用特定对象的实例方法，语法为 <code>类名::实例方法名</code>。</li><li><strong>构造函数引用：</strong> 引用构造函数，语法为 <code>类名::new</code>。</li></ol><p>演示代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.function.Consumer;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MethodReferenceExample</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        List&lt;String&gt; names = Arrays.asList(<span class="hljs-string">&quot;John&quot;</span>, <span class="hljs-string">&quot;Tom&quot;</span>, <span class="hljs-string">&quot;Alice&quot;</span>);<br>        <span class="hljs-comment">// 使用 Lambda 表达式</span><br>        names.forEach(name -&gt; System.out.println(name));<br>        <span class="hljs-comment">// 使用方法引用</span><br>        names.forEach(System.out::println);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> UserMapper userMapper;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//每个条件拼接方法都condition参数,这是一个比较运算,为true追加当前条件!</span><br>        <span class="hljs-comment">//eq(condition,列名,值)</span><br><span class="hljs-comment">//        QueryWrapper&lt;User&gt; userQueryWrapper = new QueryWrapper&lt;&gt;();</span><br><span class="hljs-comment">//        userQueryWrapper.between(&quot;age&quot;,20,30);</span><br><span class="hljs-comment">//        userQueryWrapper.likeLeft(&quot;name&quot;,&quot;a&quot;);</span><br><span class="hljs-comment">//        userQueryWrapper.isNotNull(&quot;email&quot;);</span><br>        LambdaQueryWrapper&lt;User&gt; wrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LambdaQueryWrapper</span>&lt;&gt;();<br>        wrapper.between(User::getAge,<span class="hljs-number">20</span>,<span class="hljs-number">30</span>)<br>                .likeLeft(User::getName,<span class="hljs-string">&quot;a&quot;</span>)<br>                .isNotNull(User::getEmail);<br>        userMapper.selectList(wrapper).forEach(System.out::println);<br>    &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>MybatisPlus</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>2_MybatisPlus核心功能</title>
    <link href="/2023/09/23/%E5%B0%9A%E7%A1%85%E8%B0%B7-MybatisPlus/2_MybatisPlus%E6%A0%B8%E5%BF%83%E5%8A%9F%E8%83%BD/"/>
    <url>/2023/09/23/%E5%B0%9A%E7%A1%85%E8%B0%B7-MybatisPlus/2_MybatisPlus%E6%A0%B8%E5%BF%83%E5%8A%9F%E8%83%BD/</url>
    
    <content type="html"><![CDATA[<h1 id="MybatisPlus核心功能"><a href="#MybatisPlus核心功能" class="headerlink" title="MybatisPlus核心功能"></a>MybatisPlus核心功能</h1><h2 id="基于Mapper接口实现CRUD"><a href="#基于Mapper接口实现CRUD" class="headerlink" title="基于Mapper接口实现CRUD"></a>基于Mapper接口实现CRUD</h2><blockquote><p>通用 CRUD 封装<a href="https://gitee.com/baomidou/mybatis-plus/blob/3.0/mybatis-plus-core/src/main/java/com/baomidou/mybatisplus/core/mapper/BaseMapper.java">BaseMapper (opens new window)</a>接口， Mybatis-Plus 启动时自动解析实体表关系映射转换为 Mybatis 内部对象注入容器! 内部包含常见的单表操作！</p></blockquote><h3 id="增"><a href="#增" class="headerlink" title="增"></a>增</h3><table><thead><tr><th>类型</th><th>参数名</th><th>描述</th></tr></thead><tbody><tr><td>T</td><td>entity</td><td>实体对象</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">InsertTest</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">User</span> <span class="hljs-variable">xiaojia</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-number">6</span>, <span class="hljs-string">&quot;xiaojia&quot;</span>, <span class="hljs-number">23</span>, <span class="hljs-string">&quot;123@qq.com&quot;</span>);<br>    userMapper.insert(xiaojia);<br>    userMapper.selectList(<span class="hljs-literal">null</span>).forEach(System.out::println);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="删"><a href="#删" class="headerlink" title="删"></a>删</h3><table><thead><tr><th>类型</th><th>参数名</th><th>描述</th></tr></thead><tbody><tr><td>Wrapper<T></T></td><td>wrapper</td><td>实体对象封装操作类（可以为 null）</td></tr><tr><td>Collection&lt;? extends Serializable&gt;</td><td>idList</td><td>主键 ID 列表(不能为 null 以及 empty)</td></tr><tr><td>Serializable</td><td>id</td><td>主键 ID</td></tr><tr><td>Map&lt;String, Object&gt;</td><td>columnMap</td><td>表字段 map 对象</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">DeleteTest</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-comment">//        1.根据id删除</span><br>        userMapper.deleteById(<span class="hljs-number">6</span>);<br><span class="hljs-comment">//        2.map条件删除</span><br>        <span class="hljs-type">Map</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        map.put(<span class="hljs-string">&quot;age&quot;</span>,<span class="hljs-number">20</span>);<br>        map.put(<span class="hljs-string">&quot;age&quot;</span>,<span class="hljs-number">28</span>);<br>        userMapper.deleteByMap(map);<br><span class="hljs-comment">//        3.wrapper条件封装删除</span><br><br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="改"><a href="#改" class="headerlink" title="改"></a>改</h3><table><thead><tr><th>类型</th><th>参数名</th><th>描述</th></tr></thead><tbody><tr><td>T</td><td>entity</td><td>实体对象 (set 条件值,可为 null)</td></tr><tr><td>Wrapper<T></T></td><td>updateWrapper</td><td>实体对象封装操作类（可以为 null,里面的 entity 用于生成 where 语句）</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">UpdateTest</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-comment">//        UPDATE 属性值为null时不修改</span><br><span class="hljs-comment">//        update user set name = ? where id = ?</span><br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>        user.setId(<span class="hljs-number">1</span>);<br>        user.setName(<span class="hljs-string">&quot;zhanSan&quot;</span>);<br>        userMapper.updateById(user);<br><br><span class="hljs-comment">//        将所有人年龄均改为22</span><br>        <span class="hljs-type">User</span> <span class="hljs-variable">user1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>        user1.setAge(<span class="hljs-number">22</span>);<br>        userMapper.update(user1,<span class="hljs-literal">null</span>);<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="查"><a href="#查" class="headerlink" title="查"></a>查</h3><table><thead><tr><th>类型</th><th>参数名</th><th>描述</th></tr></thead><tbody><tr><td>Serializable</td><td>id</td><td>主键 ID</td></tr><tr><td>Wrapper<T></T></td><td>queryWrapper</td><td>实体对象封装操作类（可以为 null）</td></tr><tr><td>Collection&lt;? extends Serializable&gt;</td><td>idList</td><td>主键 ID 列表(不能为 null 以及 empty)</td></tr><tr><td>Map&lt;String, Object&gt;</td><td>columnMap</td><td>表字段 map 对象</td></tr><tr><td>IPage<T></T></td><td>page</td><td>分页查询条件（可以为 RowBounds.DEFAULT）</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">SelectTest</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-comment">//        SELECT id,name,age,email FROM user WHERE id IN ( ? , ? )</span><br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> userMapper.selectById(<span class="hljs-number">1</span>);<br>        ArrayList&lt;Long&gt; ids = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        ids.add(<span class="hljs-number">1l</span>);<br>        ids.add(<span class="hljs-number">2l</span>);<br>        userMapper.selectBatchIds(ids).forEach(System.out::println);<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="基于Service接口实现CRUD"><a href="#基于Service接口实现CRUD" class="headerlink" title="基于Service接口实现CRUD"></a>基于Service接口实现CRUD</h2><p>通用 Service CRUD 封装<a href="https://gitee.com/baomidou/mybatis-plus/blob/3.0/mybatis-plus-extension/src/main/java/com/baomidou/mybatisplus/extension/service/IService.java?spm=wolai.workspace.0.0.330e2306vaDnrr&file=IService.java">IService (opens new window)</a>接口，进一步封装 CRUD 采用 get 查询单行 remove 删除 list 查询集合 page 分页 前缀命名方式区分 Mapper 层避免混淆</p><h3 id="对比Mapper接口CRUD区别："><a href="#对比Mapper接口CRUD区别：" class="headerlink" title="对比Mapper接口CRUD区别："></a>对比Mapper接口CRUD区别：</h3><ul><li>service添加了批量方法</li><li>service层的方法自动添加事务</li></ul><h3 id="疑惑？service层的作用是什么"><a href="#疑惑？service层的作用是什么" class="headerlink" title="疑惑？service层的作用是什么"></a>疑惑？service层的作用是什么</h3><p>开发过程中CRUD操作以mapper为主，但在mybatisplus增强之后，service层也赋予了CRUD部分操作</p><p>增强service需要在(T)service接口类继承IService<T>，才可得到增强，其部分方法实现了，而没实现的方法需要自定义实现类并继承ServiceImpl&lt;(T)Mapper,T&gt;。</T></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserService</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">IService</span>&lt;User&gt; &#123;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ServiceImpl</span>&lt;UserMapper, User&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span> &#123;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="CRUD"><a href="#CRUD" class="headerlink" title="CRUD"></a>CRUD</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs JAVA">保存：<br><span class="hljs-comment">// 插入一条记录（选择字段，策略插入）</span><br><span class="hljs-type">boolean</span> <span class="hljs-title function_">save</span><span class="hljs-params">(T entity)</span>;<br><span class="hljs-comment">// 插入（批量）</span><br><span class="hljs-type">boolean</span> <span class="hljs-title function_">saveBatch</span><span class="hljs-params">(Collection&lt;T&gt; entityList)</span>;<br><span class="hljs-comment">// 插入（批量）</span><br><span class="hljs-type">boolean</span> <span class="hljs-title function_">saveBatch</span><span class="hljs-params">(Collection&lt;T&gt; entityList, <span class="hljs-type">int</span> batchSize)</span>;<br><br>修改或者保存：<br><span class="hljs-comment">// TableId 注解存在更新记录，否插入一条记录</span><br><span class="hljs-type">boolean</span> <span class="hljs-title function_">saveOrUpdate</span><span class="hljs-params">(T entity)</span>;<br><span class="hljs-comment">// 根据updateWrapper尝试更新，否继续执行saveOrUpdate(T)方法</span><br><span class="hljs-type">boolean</span> <span class="hljs-title function_">saveOrUpdate</span><span class="hljs-params">(T entity, Wrapper&lt;T&gt; updateWrapper)</span>;<br><span class="hljs-comment">// 批量修改插入</span><br><span class="hljs-type">boolean</span> <span class="hljs-title function_">saveOrUpdateBatch</span><span class="hljs-params">(Collection&lt;T&gt; entityList)</span>;<br><span class="hljs-comment">// 批量修改插入</span><br><span class="hljs-type">boolean</span> <span class="hljs-title function_">saveOrUpdateBatch</span><span class="hljs-params">(Collection&lt;T&gt; entityList, <span class="hljs-type">int</span> batchSize)</span>;<br><br>移除：<br><span class="hljs-comment">// 根据 queryWrapper 设置的条件，删除记录</span><br><span class="hljs-type">boolean</span> <span class="hljs-title function_">remove</span><span class="hljs-params">(Wrapper&lt;T&gt; queryWrapper)</span>;<br><span class="hljs-comment">// 根据 ID 删除</span><br><span class="hljs-type">boolean</span> <span class="hljs-title function_">removeById</span><span class="hljs-params">(Serializable id)</span>;<br><span class="hljs-comment">// 根据 columnMap 条件，删除记录</span><br><span class="hljs-type">boolean</span> <span class="hljs-title function_">removeByMap</span><span class="hljs-params">(Map&lt;String, Object&gt; columnMap)</span>;<br><span class="hljs-comment">// 删除（根据ID 批量删除）</span><br><span class="hljs-type">boolean</span> <span class="hljs-title function_">removeByIds</span><span class="hljs-params">(Collection&lt;? extends Serializable&gt; idList)</span>;<br><br>更新：<br><span class="hljs-comment">// 根据 UpdateWrapper 条件，更新记录 需要设置sqlset</span><br><span class="hljs-type">boolean</span> <span class="hljs-title function_">update</span><span class="hljs-params">(Wrapper&lt;T&gt; updateWrapper)</span>;<br><span class="hljs-comment">// 根据 whereWrapper 条件，更新记录</span><br><span class="hljs-type">boolean</span> <span class="hljs-title function_">update</span><span class="hljs-params">(T updateEntity, Wrapper&lt;T&gt; whereWrapper)</span>;<br><span class="hljs-comment">// 根据 ID 选择修改</span><br><span class="hljs-type">boolean</span> <span class="hljs-title function_">updateById</span><span class="hljs-params">(T entity)</span>;<br><span class="hljs-comment">// 根据ID 批量更新</span><br><span class="hljs-type">boolean</span> <span class="hljs-title function_">updateBatchById</span><span class="hljs-params">(Collection&lt;T&gt; entityList)</span>;<br><span class="hljs-comment">// 根据ID 批量更新</span><br><span class="hljs-type">boolean</span> <span class="hljs-title function_">updateBatchById</span><span class="hljs-params">(Collection&lt;T&gt; entityList, <span class="hljs-type">int</span> batchSize)</span>;<br><br>数量： <br><span class="hljs-comment">// 查询总记录数</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">count</span><span class="hljs-params">()</span>;<br><span class="hljs-comment">// 根据 Wrapper 条件，查询总记录数</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">count</span><span class="hljs-params">(Wrapper&lt;T&gt; queryWrapper)</span>;<br><br>查询：<br><span class="hljs-comment">// 根据 ID 查询</span><br>T <span class="hljs-title function_">getById</span><span class="hljs-params">(Serializable id)</span>;<br><span class="hljs-comment">// 根据 Wrapper，查询一条记录。结果集，如果是多个会抛出异常，随机取一条加上限制条件 wrapper.last(&quot;LIMIT 1&quot;)</span><br>T <span class="hljs-title function_">getOne</span><span class="hljs-params">(Wrapper&lt;T&gt; queryWrapper)</span>;<br><span class="hljs-comment">// 根据 Wrapper，查询一条记录</span><br>T <span class="hljs-title function_">getOne</span><span class="hljs-params">(Wrapper&lt;T&gt; queryWrapper, <span class="hljs-type">boolean</span> throwEx)</span>;<br><span class="hljs-comment">// 根据 Wrapper，查询一条记录</span><br>Map&lt;String, Object&gt; <span class="hljs-title function_">getMap</span><span class="hljs-params">(Wrapper&lt;T&gt; queryWrapper)</span>;<br><span class="hljs-comment">// 根据 Wrapper，查询一条记录</span><br>&lt;V&gt; V <span class="hljs-title function_">getObj</span><span class="hljs-params">(Wrapper&lt;T&gt; queryWrapper, Function&lt;? <span class="hljs-built_in">super</span> Object, V&gt; mapper)</span>;<br><br>集合：<br><span class="hljs-comment">// 查询所有</span><br>List&lt;T&gt; <span class="hljs-title function_">list</span><span class="hljs-params">()</span>;<br><span class="hljs-comment">// 查询列表</span><br>List&lt;T&gt; <span class="hljs-title function_">list</span><span class="hljs-params">(Wrapper&lt;T&gt; queryWrapper)</span>;<br><span class="hljs-comment">// 查询（根据ID 批量查询）</span><br>Collection&lt;T&gt; <span class="hljs-title function_">listByIds</span><span class="hljs-params">(Collection&lt;? extends Serializable&gt; idList)</span>;<br><span class="hljs-comment">// 查询（根据 columnMap 条件）</span><br>Collection&lt;T&gt; <span class="hljs-title function_">listByMap</span><span class="hljs-params">(Map&lt;String, Object&gt; columnMap)</span>;<br><span class="hljs-comment">// 查询所有列表</span><br>List&lt;Map&lt;String, Object&gt;&gt; <span class="hljs-title function_">listMaps</span><span class="hljs-params">()</span>;<br><span class="hljs-comment">// 查询列表</span><br>List&lt;Map&lt;String, Object&gt;&gt; <span class="hljs-title function_">listMaps</span><span class="hljs-params">(Wrapper&lt;T&gt; queryWrapper)</span>;<br><span class="hljs-comment">// 查询全部记录</span><br>List&lt;Object&gt; <span class="hljs-title function_">listObjs</span><span class="hljs-params">()</span>;<br><span class="hljs-comment">// 查询全部记录</span><br>&lt;V&gt; List&lt;V&gt; <span class="hljs-title function_">listObjs</span><span class="hljs-params">(Function&lt;? <span class="hljs-built_in">super</span> Object, V&gt; mapper)</span>;<br><span class="hljs-comment">// 根据 Wrapper 条件，查询全部记录</span><br>List&lt;Object&gt; <span class="hljs-title function_">listObjs</span><span class="hljs-params">(Wrapper&lt;T&gt; queryWrapper)</span>;<br><span class="hljs-comment">// 根据 Wrapper 条件，查询全部记录</span><br>&lt;V&gt; List&lt;V&gt; <span class="hljs-title function_">listObjs</span><span class="hljs-params">(Wrapper&lt;T&gt; queryWrapper, Function&lt;? <span class="hljs-built_in">super</span> Object, V&gt; mapper)</span>;<br></code></pre></td></tr></table></figure><h2 id="分页查询实现"><a href="#分页查询实现" class="headerlink" title="分页查询实现"></a>分页查询实现</h2><p>回顾mybatis中的pageHelper</p><p><img src="/assets/image-20230923115916100.png" alt="image-20230923115916100"></p><ol><li><p>在springboot添加mybatisplus配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(Main.class,args);<br>    &#125;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> MybatisPlusInterceptor <span class="hljs-title function_">mybatisPlusInterceptor</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-comment">//        mp插件集合，分页插件，乐观锁等等插件配置</span><br>        <span class="hljs-type">MybatisPlusInterceptor</span> <span class="hljs-variable">mybatisPlusInterceptor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MybatisPlusInterceptor</span>();<br><span class="hljs-comment">//        添加分页插件</span><br>        mybatisPlusInterceptor.addInnerInterceptor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">PaginationInnerInterceptor</span>(DbType.MYSQL));<br>        <span class="hljs-keyword">return</span> mybatisPlusInterceptor;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PageTest</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserMapper userMapper;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-comment">//        第1页3条数据</span><br>        Page&lt;User&gt; userPage = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Page</span>&lt;&gt;(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>);<br>        Page&lt;User&gt; page = userMapper.selectPage(userPage, <span class="hljs-literal">null</span>);<br>        page.getRecords().forEach(System.out::println);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="自定义查询分页"><a href="#自定义查询分页" class="headerlink" title="自定义查询分页"></a>自定义查询分页</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseMapper</span>&lt;User&gt; &#123;<br><span class="hljs-comment">//    根据年龄参数查询，并且分页的方法</span><br>    IPage&lt;User&gt; <span class="hljs-title function_">queryByAge</span><span class="hljs-params">(IPage&lt;User&gt; page,<span class="hljs-meta">@Param(&quot;age&quot;)</span> Integer age)</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>在资源包中创建mapper目录，mapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.jmin.mapper.UserMapper&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queryByAge&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.jmin.pojo.User&quot;</span>&gt;</span><br>        select *<br>        from user<br>        where age &gt; #&#123;age&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test2</span><span class="hljs-params">()</span>&#123;<br>    userMapper.queryByAge(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Page</span>&lt;User&gt;(<span class="hljs-number">1</span>,<span class="hljs-number">3</span>),<span class="hljs-number">23</span>).getRecords().forEach(System.out::println);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="条件构造器"><a href="#条件构造器" class="headerlink" title="条件构造器"></a>条件构造器</h2><h2 id="核心注解"><a href="#核心注解" class="headerlink" title="核心注解"></a>核心注解</h2>]]></content>
    
    
    <categories>
      
      <category>MybatisPlus</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>1_MybatisPlus简介</title>
    <link href="/2023/09/22/%E5%B0%9A%E7%A1%85%E8%B0%B7-MybatisPlus/1_MybatisPlus%E7%AE%80%E4%BB%8B/"/>
    <url>/2023/09/22/%E5%B0%9A%E7%A1%85%E8%B0%B7-MybatisPlus/1_MybatisPlus%E7%AE%80%E4%BB%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="MybatisPlus简介"><a href="#MybatisPlus简介" class="headerlink" title="MybatisPlus简介"></a>MybatisPlus简介</h1><p><a href="https://baomidou.com/">MyBatis-Plus (baomidou.com)</a></p><p>特性：</p><ul><li><strong>无侵入</strong>：只做增强不做改变，引入它不会对现有工程产生影响，如丝般顺滑</li><li><strong>损耗小</strong>：启动即会自动注入基本 CURD，性能基本无损耗，直接面向对象操作</li><li><strong>强大的 CRUD 操作</strong>：内置通用 Mapper、通用 Service，仅仅通过少量配置即可实现单表大部分 CRUD 操作，更有强大的条件构造器，满足各类使用需求</li><li><strong>支持 Lambda 形式调用</strong>：通过 Lambda 表达式，方便的编写各类查询条件，无需再担心字段写错</li><li><strong>支持主键自动生成</strong>：支持多达 4 种主键策略（内含分布式唯一 ID 生成器 - Sequence），可自由配置，完美解决主键问题</li><li><strong>支持 ActiveRecord 模式</strong>：支持 ActiveRecord 形式调用，实体类只需继承 Model 类即可进行强大的 CRUD 操作</li><li><strong>支持自定义全局通用操作</strong>：支持全局通用方法注入（ Write once, use anywhere ）</li><li><strong>内置代码生成器</strong>：采用代码或者 Maven 插件可快速生成 Mapper 、 Model 、 Service 、 Controller 层代码，支持模板引擎，更有超多自定义配置等您来使用</li><li><strong>内置分页插件</strong>：基于 MyBatis 物理分页，开发者无需关心具体操作，配置好插件之后，写分页等同于普通 List 查询</li><li><strong>分页插件支持多种数据库</strong>：支持 MySQL、MariaDB、Oracle、DB2、H2、HSQL、SQLite、Postgre、SQLServer 等多种数据库</li><li><strong>内置性能分析插件</strong>：可输出 SQL 语句以及其执行时间，建议开发测试时启用该功能，能快速揪出慢查询</li><li><strong>内置全局拦截插件</strong>：提供全表 delete 、 update 操作智能分析阻断，也可自定义拦截规则，预防误操作</li></ul><p>支持数据库：</p><ul><li>MySQL，Oracle，DB2，H2，HSQL，SQLite，PostgreSQL，SQLServer，Phoenix，Gauss ，ClickHouse，Sybase，OceanBase，Firebird，Cubrid，Goldilocks，csiidb，informix，TDengine，redshift</li><li>达梦数据库，虚谷数据库，人大金仓数据库，南大通用(华库)数据库，南大通用数据库，神通数据库，瀚高数据库，优炫数据库</li></ul><p>mybatis-plus总结：</p><p>  自动生成单表的CRUD功能</p><p>  提供丰富的条件拼接方式</p><p>  全自动ORM类型持久层框架</p><h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> <span class="hljs-keyword">user</span>;<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-keyword">user</span><br>(<br>    id <span class="hljs-type">BIGINT</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;主键ID&#x27;</span>,<br>    name <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">30</span>) <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;姓名&#x27;</span>,<br>    age <span class="hljs-type">INT</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;年龄&#x27;</span>,<br>    email <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;邮箱&#x27;</span>,<br>    <span class="hljs-keyword">PRIMARY</span> KEY (id)<br>);<br><br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> <span class="hljs-keyword">user</span> (id, name, age, email) <span class="hljs-keyword">VALUES</span><br>(<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;Jone&#x27;</span>, <span class="hljs-number">18</span>, <span class="hljs-string">&#x27;test1@baomidou.com&#x27;</span>),<br>(<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;Jack&#x27;</span>, <span class="hljs-number">20</span>, <span class="hljs-string">&#x27;test2@baomidou.com&#x27;</span>),<br>(<span class="hljs-number">3</span>, <span class="hljs-string">&#x27;Tom&#x27;</span>, <span class="hljs-number">28</span>, <span class="hljs-string">&#x27;test3@baomidou.com&#x27;</span>),<br>(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;Sandy&#x27;</span>, <span class="hljs-number">21</span>, <span class="hljs-string">&#x27;test4@baomidou.com&#x27;</span>),<br>(<span class="hljs-number">5</span>, <span class="hljs-string">&#x27;Billie&#x27;</span>, <span class="hljs-number">24</span>, <span class="hljs-string">&#x27;test5@baomidou.com&#x27;</span>);<br><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.3.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid-spring-boot-3-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.18<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.28<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">druid:</span><br>      <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>      <span class="hljs-attr">password:</span> <span class="hljs-string">lzm123456</span><br>      <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br>      <span class="hljs-attr">initial-size:</span> <span class="hljs-number">5</span><br>      <span class="hljs-attr">min-idle:</span> <span class="hljs-number">5</span><br>      <span class="hljs-attr">max-active:</span> <span class="hljs-number">20</span><br>      <span class="hljs-attr">max-wait:</span> <span class="hljs-number">60000</span><br>      <span class="hljs-attr">test-while-idle:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-attr">time-between-eviction-runs-millis:</span> <span class="hljs-number">60000</span><br>      <span class="hljs-attr">min-evictable-idle-time-millis:</span> <span class="hljs-number">30000</span><br>      <span class="hljs-attr">validation-query:</span> <span class="hljs-string">select</span> <span class="hljs-number">1</span><br>      <span class="hljs-attr">test-on-borrow:</span> <span class="hljs-literal">false</span><br>      <span class="hljs-attr">test-on-return:</span> <span class="hljs-literal">false</span><br>      <span class="hljs-attr">pool-prepared-statements:</span> <span class="hljs-literal">false</span><br>      <span class="hljs-attr">max-pool-prepared-statement-per-connection-size:</span> <span class="hljs-number">-1</span><br>      <span class="hljs-attr">use-global-data-source-stat:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql:///day1</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">com.alibaba.druid.pool.DruidDataSource</span><br><br><span class="hljs-attr">mybatis-plus:</span><br>  <span class="hljs-attr">configuration:</span><br>    <span class="hljs-attr">log-impl:</span> <span class="hljs-string">org.apache.ibatis.logging.stdout.StdOutImpl</span><br>    <span class="hljs-attr">auto-mapping-behavior:</span> <span class="hljs-string">full</span><br>    <span class="hljs-attr">map-underscore-to-camel-case:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseMapper</span>&lt;User&gt; &#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MybatisPlusTest</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserMapper userMapper;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;<br>        userMapper.selectList(<span class="hljs-literal">null</span>).forEach(System.out::println);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>MybatisPlus</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>7_项目打包和运行</title>
    <link href="/2023/09/22/%E5%B0%9A%E7%A1%85%E8%B0%B7SpringBoot3/7_%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85%E5%92%8C%E8%BF%90%E8%A1%8C/"/>
    <url>/2023/09/22/%E5%B0%9A%E7%A1%85%E8%B0%B7SpringBoot3/7_%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85%E5%92%8C%E8%BF%90%E8%A1%8C/</url>
    
    <content type="html"><![CDATA[<h1 id="项目打包和运行"><a href="#项目打包和运行" class="headerlink" title="项目打包和运行"></a>项目打包和运行</h1><p>在Spring Boot项目中添加spring-boot-maven-plugin插件是为了支持将项目打包成可执行的可运行jar包。如果不添加spring-boot-maven-plugin插件配置，使用常规的java -jar命令来运行打包后的Spring Boot项目是无法找到应用程序的入口点，因此导致无法运行。</p><h2 id="添加打包插件"><a href="#添加打包插件" class="headerlink" title="添加打包插件"></a>添加打包插件</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--    SpringBoot应用打包插件--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="执行打包"><a href="#执行打包" class="headerlink" title="执行打包"></a>执行打包</h2><p>在idea点击package进行打包</p><p>可以在编译的target文件中查看jar包</p><p>先clean再package！</p><p><img src="/assets/image-20230922171301595.png" alt="image-20230922171301595"></p><h2 id="命令启动和参数说明"><a href="#命令启动和参数说明" class="headerlink" title="命令启动和参数说明"></a>命令启动和参数说明</h2><p>java -jar命令用于在Java环境中执行可执行的JAR文件</p><p>命令说明</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">命令格式：java -jar  [选项] [参数] <span class="hljs-tag">&lt;<span class="hljs-name">jar文件名</span>&gt;</span><br></code></pre></td></tr></table></figure><ol><li><code>-D&lt;name&gt;=&lt;value&gt;</code>：设置系统属性，可以通过<code>System.getProperty()</code>方法在应用程序中获取该属性值。例如：<code>java -jar -Dserver.port=8080 myapp.jar</code>。</li><li><code>-X</code>：设置JVM参数，例如内存大小、垃圾回收策略等。常用的选项包括：<ul><li><code>-Xmx&lt;size&gt;</code>：设置JVM的最大堆内存大小，例如 <code>-Xmx512m</code> 表示设置最大堆内存为512MB。</li><li><code>-Xms&lt;size&gt;</code>：设置JVM的初始堆内存大小，例如 <code>-Xms256m</code> 表示设置初始堆内存为256MB。</li></ul></li><li><code>-Dspring.profiles.active=&lt;profile&gt;</code>：指定Spring Boot的激活配置文件，可以通过<code>application-&lt;profile&gt;.properties</code>或<code>application-&lt;profile&gt;.yml</code>文件来加载相应的配置。例如：<code>java -jar -Dspring.profiles.active=dev myapp.jar</code>。</li></ol><p><img src="/assets/image-20230922172532183.png" alt="image-20230922172532183"></p>]]></content>
    
    
    <categories>
      
      <category>SpringBoot</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>6_整合AOP</title>
    <link href="/2023/09/22/%E5%B0%9A%E7%A1%85%E8%B0%B7SpringBoot3/6_%E6%95%B4%E5%90%88AOP/"/>
    <url>/2023/09/22/%E5%B0%9A%E7%A1%85%E8%B0%B7SpringBoot3/6_%E6%95%B4%E5%90%88AOP/</url>
    
    <content type="html"><![CDATA[<h1 id="整合AOP"><a href="#整合AOP" class="headerlink" title="整合AOP"></a>整合AOP</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>直接使用aop注解即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Aspect</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LogAdvice</span> &#123;<br><br>    <span class="hljs-meta">@Before(&quot;execution(* com..service.*.*(..))&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">before</span><span class="hljs-params">(JoinPoint joinPoint)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;LogAdvice.before&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;joinPoint = &quot;</span> + joinPoint);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20230922170443381.png" alt="image-20230922170443381"></p><p><img src="/assets/image-20230922170458273.png" alt="image-20230922170458273"></p><p><img src="/assets/image-20230922170614873.png" alt="image-20230922170614873"></p>]]></content>
    
    
    <categories>
      
      <category>SpringBoot</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>5_整合DRUID</title>
    <link href="/2023/09/22/%E5%B0%9A%E7%A1%85%E8%B0%B7SpringBoot3/5_%E6%95%B4%E5%90%88DRUID/"/>
    <url>/2023/09/22/%E5%B0%9A%E7%A1%85%E8%B0%B7SpringBoot3/5_%E6%95%B4%E5%90%88DRUID/</url>
    
    <content type="html"><![CDATA[<h1 id="整合DRUID"><a href="#整合DRUID" class="headerlink" title="整合DRUID"></a>整合DRUID</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--  web开发的场景启动器 --&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>       <span class="hljs-comment">&lt;!-- 数据库相关配置启动器 jdbctemplate 事务相关--&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>       <span class="hljs-comment">&lt;!-- druid启动器的依赖  --&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid-spring-boot-3-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.18<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>       <span class="hljs-comment">&lt;!-- 驱动类--&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.28<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.18.28<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br></code></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-comment"># 连接池类型 </span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">com.alibaba.druid.pool.DruidDataSource</span><br><br>    <span class="hljs-comment"># Druid的其他属性配置 springboot3整合情况下,数据库连接信息必须在Druid属性下!</span><br>    <span class="hljs-attr">druid:</span><br>      <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://localhost:3306/mybatis-example</span><br>      <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>      <span class="hljs-attr">password:</span> <span class="hljs-string">root</span><br>      <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br>      <span class="hljs-comment"># 初始化时建立物理连接的个数</span><br>      <span class="hljs-attr">initial-size:</span> <span class="hljs-number">5</span><br>      <span class="hljs-comment"># 连接池的最小空闲数量</span><br>      <span class="hljs-attr">min-idle:</span> <span class="hljs-number">5</span><br>      <span class="hljs-comment"># 连接池最大连接数量</span><br>      <span class="hljs-attr">max-active:</span> <span class="hljs-number">20</span><br>      <span class="hljs-comment"># 获取连接时最大等待时间，单位毫秒</span><br>      <span class="hljs-attr">max-wait:</span> <span class="hljs-number">60000</span><br>      <span class="hljs-comment"># 申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。</span><br>      <span class="hljs-attr">test-while-idle:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-comment"># 既作为检测的间隔时间又作为testWhileIdel执行的依据</span><br>      <span class="hljs-attr">time-between-eviction-runs-millis:</span> <span class="hljs-number">60000</span><br>      <span class="hljs-comment"># 销毁线程时检测当前连接的最后活动时间和当前时间差大于该值时，关闭当前连接(配置连接在池中的最小生存时间)</span><br>      <span class="hljs-attr">min-evictable-idle-time-millis:</span> <span class="hljs-number">30000</span><br>      <span class="hljs-comment"># 用来检测数据库连接是否有效的sql 必须是一个查询语句(oracle中为 select 1 from dual)</span><br>      <span class="hljs-attr">validation-query:</span> <span class="hljs-string">select</span> <span class="hljs-number">1</span><br>      <span class="hljs-comment"># 申请连接时会执行validationQuery检测连接是否有效,开启会降低性能,默认为true</span><br>      <span class="hljs-attr">test-on-borrow:</span> <span class="hljs-literal">false</span><br>      <span class="hljs-comment"># 归还连接时会执行validationQuery检测连接是否有效,开启会降低性能,默认为true</span><br>      <span class="hljs-attr">test-on-return:</span> <span class="hljs-literal">false</span><br>      <span class="hljs-comment"># 是否缓存preparedStatement, 也就是PSCache,PSCache对支持游标的数据库性能提升巨大，比如说oracle,在mysql下建议关闭。</span><br>      <span class="hljs-attr">pool-prepared-statements:</span> <span class="hljs-literal">false</span><br>      <span class="hljs-comment"># 要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100</span><br>      <span class="hljs-attr">max-pool-prepared-statement-per-connection-size:</span> <span class="hljs-number">-1</span><br>      <span class="hljs-comment"># 合并多个DruidDataSource的监控数据</span><br>      <span class="hljs-attr">use-global-data-source-stat:</span> <span class="hljs-literal">true</span><br><br><span class="hljs-attr">logging:</span><br>  <span class="hljs-attr">level:</span><br>    <span class="hljs-attr">root:</span> <span class="hljs-string">debug</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> JdbcTemplate jdbcTemplate;<br>    <span class="hljs-meta">@GetMapping(&quot;list&quot;)</span><br>    <span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title function_">list</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select * from user&quot;</span>;<br>        List&lt;User&gt; query = jdbcTemplate.query(sql, <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanPropertyRowMapper</span>&lt;&gt;(User.class));<br>        <span class="hljs-keyword">return</span> query;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>通过源码分析，druid-spring-boot-3-starter目前最新版本是1.2.18，虽然适配了SpringBoot3，但缺少自动装配的配置文件，需要手动在resources目录下创建META-INF&#x2F;spring&#x2F;org.springframework.boot.autoconfigure.AutoConfiguration.imports兼容配置类</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs imports">com.alibaba.druid.spring.boot3.autoconfigure.DruidDataSourceAutoConfigure<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20230922165756930.png" alt="image-20230922165756930"></p>]]></content>
    
    
    <categories>
      
      <category>SpringBoot</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>4_整合MVC</title>
    <link href="/2023/09/22/%E5%B0%9A%E7%A1%85%E8%B0%B7SpringBoot3/4_%E6%95%B4%E5%90%88MVC/"/>
    <url>/2023/09/22/%E5%B0%9A%E7%A1%85%E8%B0%B7SpringBoot3/4_%E6%95%B4%E5%90%88MVC/</url>
    
    <content type="html"><![CDATA[<h1 id="整合MVC"><a href="#整合MVC" class="headerlink" title="整合MVC"></a>整合MVC</h1><p>web项目创建略</p><h2 id="静态资源处理"><a href="#静态资源处理" class="headerlink" title="静态资源处理"></a>静态资源处理</h2><blockquote><p>在WEB开发中我们需要引入一些静态资源 , 例如 : HTML , CSS , JS , 图片等 , 如果是普通的项目静态资源可以放在项目的webapp目录下。现在使用Spring Boot做开发 , 项目中没有webapp目录 , 我们的项目是一个jar工程，那么就没有webapp，我们的静态资源该放哪里呢？</p></blockquote><p><strong>默认的静态资源路径为：</strong></p><p><strong>· classpath:&#x2F;META-INF&#x2F;resources&#x2F;</strong></p><p><strong>· classpath:&#x2F;resources&#x2F;</strong></p><p><strong>· classpath:&#x2F;static&#x2F;</strong></p><p><strong>· classpath:&#x2F;public&#x2F;</strong></p><p>我们只要静态资源放在这些目录中任何一个，SpringMVC都会帮我们处理。 我们习惯会把静态资源放在classpath:&#x2F;static&#x2F; 目录下。在resources目录下创建index.html文件</p><p>亦可自定义覆盖路径，假设静态资源存放于resources&#x2F;webapp</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">web:</span><br>    <span class="hljs-attr">resources:</span><br>      <span class="hljs-comment"># 配置静态资源地址,如果设置,会覆盖默认值</span><br>      <span class="hljs-attr">static-locations:</span> <span class="hljs-string">classpath:/webapp</span><br></code></pre></td></tr></table></figure><h2 id="自定义拦截器"><a href="#自定义拦截器" class="headerlink" title="自定义拦截器"></a>自定义拦截器</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerInterceptor</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;request = &quot;</span> + request + <span class="hljs-string">&quot;, response = &quot;</span> + response + <span class="hljs-string">&quot;, handler = &quot;</span> + handler);<br>        <span class="hljs-keyword">return</span> HandlerInterceptor.<span class="hljs-built_in">super</span>.preHandle(request, response, handler);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">postHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        HandlerInterceptor.<span class="hljs-built_in">super</span>.postHandle(request, response, handler, modelAndView);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterCompletion</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        HandlerInterceptor.<span class="hljs-built_in">super</span>.afterCompletion(request, response, handler, ex);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurer</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addInterceptors</span><span class="hljs-params">(InterceptorRegistry registry)</span> &#123;<br>        registry.addInterceptor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyInterceptor</span>());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>SpringBoot</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>3_SpringBoot配置文件</title>
    <link href="/2023/09/22/%E5%B0%9A%E7%A1%85%E8%B0%B7SpringBoot3/3_%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
    <url>/2023/09/22/%E5%B0%9A%E7%A1%85%E8%B0%B7SpringBoot3/3_%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h1><h2 id="统一配置文件"><a href="#统一配置文件" class="headerlink" title="统一配置文件"></a>统一配置文件</h2><p>SpringBoot工程下，进行统一的配置管理，你想设置的任何参数（端口号、项目根路径、数据库连接信息等等)都集中到一个固定位置和命名的配置文件（application.properties或application.yml）中！</p><p>细节总结：</p><ul><li><p>集中式管理配置。统一在一个文件完成程序功能参数设置和自定义参数声明 。</p></li><li><p>位置：resources文件夹下，必须命名application  后缀 .properties &#x2F; .yaml &#x2F;  .yml 。</p></li><li><p>如果同时存在application.properties | application.yml(.yaml) , properties的优先级更高。</p></li><li><p>配置基本有默认值</p><p><img src="/assets/image-20230922083923861.png" alt="image-20230922083923861"></p></li></ul><h2 id="配置文件的属性创建和使用"><a href="#配置文件的属性创建和使用" class="headerlink" title="配置文件的属性创建和使用"></a>配置文件的属性创建和使用</h2><h3 id="配置文件-1"><a href="#配置文件-1" class="headerlink" title="配置文件"></a>配置文件</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># application.properties 为统一配置文件</span><br><span class="hljs-comment"># 内部包含: 固定功能的key,自定义的key</span><br><span class="hljs-comment"># 此处的配置信息,我们都可以在程序中@Value等注解读取</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># 固定的key</span><br><span class="hljs-comment"># 启动端口号</span><br><span class="hljs-attr">server.port</span>=<span class="hljs-string">80 </span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># 自定义</span><br><span class="hljs-attr">spring.jdbc.datasource.driverClassName</span>=<span class="hljs-string">com.mysql.cj.jdbc.driver</span><br><span class="hljs-attr">spring.jdbc.datasource.url</span>=<span class="hljs-string">jdbc:mysql:///springboot_01</span><br><span class="hljs-attr">spring.jdbc.datasource.username</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">spring.jdbc.datasource.password</span>=<span class="hljs-string">root</span><br></code></pre></td></tr></table></figure><p>或者yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">80</span> <br><br><span class="hljs-comment"># 自定义</span><br><span class="hljs-attr">spring:</span> <br>  <span class="hljs-attr">jdbc:</span><br>    <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">driverClassName:</span> <br>    <span class="hljs-string">com.mysql.cj.jdbc.driver</span><br><span class="hljs-string">spring.jdbc.datasource.url=jdbc:mysql:///springboot_01</span><br><span class="hljs-attr">spring:</span><br><span class="hljs-attr">jdbc:</span><br><span class="hljs-attr">datasource:</span><br><span class="hljs-attr">username:</span><br><span class="hljs-string">root</span><br></code></pre></td></tr></table></figure><p>批量配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">jmin:</span><br>  <span class="hljs-attr">user:</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-number">123456</span><br>    <span class="hljs-attr">collection:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">wuyanzu</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">penyuyan</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">ergouzi</span><br></code></pre></td></tr></table></figure><h3 id="读取配置文件属性"><a href="#读取配置文件属性" class="headerlink" title="读取配置文件属性"></a>读取配置文件属性</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DataSourceProperties</span> &#123;<br>    <span class="hljs-meta">@Value(&quot;$&#123;spring.jdbc.datasource.driverClassName&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String driverClassName;<br>&#125;<br></code></pre></td></tr></table></figure><p>对于批量配置文件，不能使用@Value(key)读取。</p><p>@ConfigurationProperties是SpringBoot提供的重要注解, 他可以将一些配置属性批量注入到bean对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;jmin.user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Jmin</span> &#123;<br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-keyword">private</span> String password;<br>    <span class="hljs-keyword">private</span> List&lt;String&gt; collection;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="多环境配置使用"><a href="#多环境配置使用" class="headerlink" title="多环境配置使用"></a>多环境配置使用</h2><p><img src="/assets/image-20230922102004375.png" alt="image-20230922102004375"></p><p><img src="/assets/image-20230922102158253.png" alt="image-20230922102158253"></p><p>以下是实现Spring Boot多环境配置的常见方法：</p><ol><li>属性文件分离：将应用程序的配置参数分离到不同的属性文件中，每个环境对应一个属性文件。例如，可以创建<code>application-dev.properties</code>、<code>application-prod.properties</code>和<code>application-test.properties</code>等文件。在这些文件中，可以定义各自环境的配置参数，如数据库连接信息、端口号等。然后，在<code>application.properties</code>中通过<code>spring.profiles.active</code>属性指定当前使用的环境。Spring Boot会根据该属性来加载对应环境的属性文件，覆盖默认的配置。</li><li>YAML配置文件：与属性文件类似，可以将配置参数分离到不同的YAML文件中，每个环境对应一个文件。例如，可以创建<code>application-dev.yml</code>、<code>application-prod.yml</code>和<code>application-test.yml</code>等文件。在这些文件中，可以使用YAML语法定义各自环境的配置参数。同样，通过<code>spring.profiles.active</code>属性指定当前的环境，Spring Boot会加载相应的YAML文件。</li><li>命令行参数(动态)：可以通过命令行参数来指定当前的环境。例如，可以使用<code>--spring.profiles.active=dev</code>来指定使用开发环境的配置。</li></ol><p>通过上述方法，Spring Boot会根据当前指定的环境来加载相应的配置文件或参数，从而实现多环境配置。这样可以简化在不同环境之间的配置切换，并且确保应用程序在不同环境中具有正确的配置。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># application-test.yml</span><br><span class="hljs-attr">user:</span><br>  <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br></code></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># application-dev.yml</span><br><span class="hljs-attr">user:</span><br>  <span class="hljs-attr">password:</span> <span class="hljs-string">lzm123456</span><br></code></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># application.yml</span><br><span class="hljs-attr">user:</span><br>  <span class="hljs-attr">age:</span> <span class="hljs-number">1</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">profiles:</span><br>    <span class="hljs-attr">active:</span> <span class="hljs-string">test,dev</span><br></code></pre></td></tr></table></figure><p><img src="/assets/image-20230922103431294.png" alt="image-20230922103431294"></p><p>多配置文件属性重复问题，如果设置了spring.profiles.active，并且和application有重叠属性，以active设置优先。active内的文件遵循后者覆盖</p>]]></content>
    
    
    <categories>
      
      <category>SpringBoot</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>2_SpringBoot快速入门</title>
    <link href="/2023/09/21/%E5%B0%9A%E7%A1%85%E8%B0%B7SpringBoot3/2_SpringBoot%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"/>
    <url>/2023/09/21/%E5%B0%9A%E7%A1%85%E8%B0%B7SpringBoot3/2_SpringBoot%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="SpringBoot快速入门"><a href="#SpringBoot快速入门" class="headerlink" title="SpringBoot快速入门"></a>SpringBoot快速入门</h1><p>idea创建项目，略</p>]]></content>
    
    
    <categories>
      
      <category>SpringBoot</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>1_SpringBoot3介绍</title>
    <link href="/2023/09/21/%E5%B0%9A%E7%A1%85%E8%B0%B7SpringBoot3/1_Springboot%E4%BB%8B%E7%BB%8D/"/>
    <url>/2023/09/21/%E5%B0%9A%E7%A1%85%E8%B0%B7SpringBoot3/1_Springboot%E4%BB%8B%E7%BB%8D/</url>
    
    <content type="html"><![CDATA[<h1 id="SpringBoot3介绍"><a href="#SpringBoot3介绍" class="headerlink" title="SpringBoot3介绍"></a>SpringBoot3介绍</h1><p>SpringBoot 可以帮我们简单、快速地创建一个独立的、生产级别的 <strong>Spring 应用（说明：SpringBoot底层是Spring）</strong>，大多数 SpringBoot 应用只需要编写少量配置即可快速整合 Spring 平台以及第三方技术！</p><p>SpringBoot的主要目标是：</p><ul><li>为所有 Spring 开发提供更快速、可广泛访问的入门体验。</li><li>开箱即用，设置合理的默认值，但是也可以根据需求进行适当的调整。</li><li>提供一系列大型项目通用的非功能性程序（如嵌入式服务器、安全性、指标、运行检查等）。</li><li>约定大于配置，基本不需要主动编写配置类、也不需要 XML 配置文件。</li></ul><p><strong>总结：简化开发，简化配置，简化整合，简化部署，简化监控，简化运维。</strong></p>]]></content>
    
    
    <categories>
      
      <category>SpringBoot</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>1_SSM整合理解</title>
    <link href="/2023/09/21/%E5%B0%9A%E7%A1%85%E8%B0%B7-SSM/SSM%E6%95%B4%E5%90%88/1_SSM%E6%95%B4%E5%90%88%E7%90%86%E8%A7%A3/"/>
    <url>/2023/09/21/%E5%B0%9A%E7%A1%85%E8%B0%B7-SSM/SSM%E6%95%B4%E5%90%88/1_SSM%E6%95%B4%E5%90%88%E7%90%86%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="SSM整合理解"><a href="#SSM整合理解" class="headerlink" title="SSM整合理解"></a>SSM整合理解</h1><h2 id="什么是SSM整合"><a href="#什么是SSM整合" class="headerlink" title="什么是SSM整合"></a>什么是SSM整合</h2><p><strong>微观</strong>：将学习的Spring SpringMVC Mybatis框架应用到项目中!</p><ul><li>SpringMVC框架负责控制层</li><li>Spring 框架负责整体和业务层的声明式事务管理</li><li>MyBatis框架负责数据库访问层</li></ul><p><strong>宏观</strong>：Spring接管一切（将框架核心组件交给Spring进行IoC管理），代码更加简洁。</p><ul><li>SpringMVC管理表述层、SpringMVC相关组件</li><li>Spring管理业务层、持久层、以及数据库相关（DataSource,MyBatis）的组件</li><li>使用IoC的方式管理一切所需组件</li></ul><p><strong>实施</strong>：通过编写配置文件，实现SpringIoC容器接管一切组件。</p><h2 id="SSM整合的核心问题明确"><a href="#SSM整合的核心问题明确" class="headerlink" title="SSM整合的核心问题明确"></a>SSM整合的核心问题明确</h2><h3 id="第一问：SSM整合需要几个IoC容器？"><a href="#第一问：SSM整合需要几个IoC容器？" class="headerlink" title="第一问：SSM整合需要几个IoC容器？"></a>第一问：SSM整合需要几个IoC容器？</h3><p>两个容器</p><p>本质上说，整合就是将三层架构和框架核心API组件交给SpringIoC容器管理！</p><p>一个容器可能就够了，但是我们常见的操作是创建两个IoC容器（web容器和root容器），组件分类管理！</p><p>这种做法有以下好处和目的：</p><ol><li>分离关注点：通过初始化两个容器，可以将各个层次的关注点进行分离。这种分离使得各个层次的组件能够更好地聚焦于各自的责任和功能。</li><li>解耦合：各个层次组件分离装配不同的IoC容器，这样可以进行解耦。这种解耦合使得各个模块可以独立操作和测试，提高了代码的可维护性和可测试性。</li><li>灵活配置：通过使用两个容器，可以为每个容器提供各自的配置，以满足不同层次和组件的特定需求。每个配置文件也更加清晰和灵活。</li></ol><p>总的来说，初始化两个容器在SSM整合中可以实现关注点分离、解耦合、灵活配置等好处。它们各自负责不同的层次和功能，并通过合适的集成方式协同工作，提供一个高效、可维护和可扩展的应用程序架构！</p><h3 id="第二问：每个IoC容器对应哪些类型组件？"><a href="#第二问：每个IoC容器对应哪些类型组件？" class="headerlink" title="第二问：每个IoC容器对应哪些类型组件？"></a>第二问：每个IoC容器对应哪些类型组件？</h3><p><img src="/assets/image-20230921091647850.png" alt="image-20230921091647850"></p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>容器名</td><td>盛放组件</td></tr><tr><td>web容器</td><td>web相关组件（controller,springmvc核心组件）</td></tr><tr><td>root容器</td><td>业务和持久层相关组件（service,aop,tx,dataSource,mybatis,mapper等）</td></tr></tbody></table><h3 id="第三问：IoC容器之间关系和调用方向？"><a href="#第三问：IoC容器之间关系和调用方向？" class="headerlink" title="第三问：IoC容器之间关系和调用方向？"></a>第三问：IoC容器之间关系和调用方向？</h3><p><img src="/assets/image-20230921091920951.png" alt="image-20230921091920951"></p><p>web容器是root容器的子容器，父子容器关系。</p><ul><li>父容器：root容器，盛放service、mapper、mybatis等相关组件</li><li>子容器：web容器，盛放controller、web相关组件<br><img src="/assets/image-20230921092222590.png" alt="image-20230921092222590"></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> WebApplicationContext <span class="hljs-title function_">createWebApplicationContext</span><span class="hljs-params">(<span class="hljs-meta">@Nullable</span> ApplicationContext parent)</span> &#123;<br>    Class&lt;?&gt; contextClass = getContextClass();<br>    <span class="hljs-keyword">if</span> (!ConfigurableWebApplicationContext.class.isAssignableFrom(contextClass)) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ApplicationContextException</span>(<br>          <span class="hljs-string">&quot;Fatal initialization error in servlet with name &#x27;&quot;</span> + getServletName() +<br>          <span class="hljs-string">&quot;&#x27;: custom WebApplicationContext class [&quot;</span> + contextClass.getName() +<br>          <span class="hljs-string">&quot;] is not of type ConfigurableWebApplicationContext&quot;</span>);<br>    &#125;<br>    <span class="hljs-type">ConfigurableWebApplicationContext</span> <span class="hljs-variable">wac</span> <span class="hljs-operator">=</span><br>        (ConfigurableWebApplicationContext) BeanUtils.instantiateClass(contextClass);<br><br>    wac.setEnvironment(getEnvironment());<br>    <span class="hljs-comment">//wac 就是web ioc容器</span><br>    <span class="hljs-comment">//parent 就是root ioc容器</span><br>    <span class="hljs-comment">//web容器设置root容器为父容器，所以web容器可以引用root容器</span><br>    wac.setParent(parent);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">configLocation</span> <span class="hljs-operator">=</span> getContextConfigLocation();<br>    <span class="hljs-keyword">if</span> (configLocation != <span class="hljs-literal">null</span>) &#123;<br>      wac.setConfigLocation(configLocation);<br>    &#125;<br>    configureAndRefreshWebApplicationContext(wac);<br><br>    <span class="hljs-keyword">return</span> wac;<br>  &#125;<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20230921092509045.png" alt="image-20230921092509045"><img src="/assets/image-20230921092625761.png" alt="image-20230921092625761"></p><h3 id="第四问：具体多少配置类以及对应容器关系？"><a href="#第四问：具体多少配置类以及对应容器关系？" class="headerlink" title="第四问：具体多少配置类以及对应容器关系？"></a>第四问：具体多少配置类以及对应容器关系？</h3><p>至少两个配置类</p><p><img src="/assets/image-20230921092715526.png" alt="image-20230921092715526"></p><p>建议配置文件：</p><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td>配置名</td><td>对应内容</td><td>对应容器</td></tr><tr><td>WebJavaConfig</td><td>controller,springmvc相关</td><td>web容器</td></tr><tr><td>ServiceJavaConfig</td><td>service,aop,tx相关</td><td>root容器</td></tr><tr><td>MapperJavaConfig</td><td>mapper,datasource,mybatis相关</td><td>root容器</td></tr></tbody></table><h3 id="第五问：IoC初始化方式和配置位置？"><a href="#第五问：IoC初始化方式和配置位置？" class="headerlink" title="第五问：IoC初始化方式和配置位置？"></a>第五问：IoC初始化方式和配置位置？</h3><p>在web项目下，我们可以选择web.xml和配置类方式进行ioc配置，推荐配置类。</p><p>对于使用基于 web 的 Spring 配置的应用程序，建议这样做，如以下示例所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyWebAppInitializer</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractAnnotationConfigDispatcherServletInitializer</span> &#123;<br><br>  <span class="hljs-comment">//指定root容器对应的配置类</span><br>  <span class="hljs-comment">//root容器的配置类</span><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">protected</span> Class&lt;?&gt;[] getRootConfigClasses() &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>&lt;?&gt;[] &#123; ServiceJavaConfig.class,MapperJavaConfig.class &#125;;<br>  &#125;<br>  <br>  <span class="hljs-comment">//指定web容器对应的配置类 webioc容器的配置类</span><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">protected</span> Class&lt;?&gt;[] getServletConfigClasses() &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>&lt;?&gt;[] &#123; WebJavaConfig.class &#125;;<br>  &#125;<br>  <br>  <span class="hljs-comment">//指定dispatcherServlet处理路径，通常为 / </span><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">protected</span> String[] getServletMappings() &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[] &#123; <span class="hljs-string">&quot;/&quot;</span> &#125;;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20230921093212333.png" alt="image-20230921093212333"></p>]]></content>
    
    
    <categories>
      
      <category>SSM</category>
      
      <category>SSM整合实战</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>12_SpringMVC总结</title>
    <link href="/2023/09/21/%E5%B0%9A%E7%A1%85%E8%B0%B7-SSM/SpringMVC/12_SpringMVC%E6%80%BB%E7%BB%93/"/>
    <url>/2023/09/21/%E5%B0%9A%E7%A1%85%E8%B0%B7-SSM/SpringMVC/12_SpringMVC%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="SpringMVC总结"><a href="#SpringMVC总结" class="headerlink" title="SpringMVC总结"></a>SpringMVC总结</h1><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>核心点</td><td>掌握目标</td></tr><tr><td>springmvc框架</td><td>主要作用、核心组件、调用流程</td></tr><tr><td>简化参数接收</td><td>路径设计、参数接收、请求头接收、cookie接收</td></tr><tr><td>简化数据响应</td><td>模板页面、转发和重定向、JSON数据、静态资源</td></tr><tr><td>restful风格设计</td><td>主要作用、具体规范、请求方式和请求参数选择</td></tr><tr><td>功能扩展</td><td>全局异常处理、拦截器、参数校验注解</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>SSM</category>
      
      <category>SpringMVC</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>11_参数校验</title>
    <link href="/2023/09/20/%E5%B0%9A%E7%A1%85%E8%B0%B7-SSM/SpringMVC/11_%E5%8F%82%E6%95%B0%E6%A0%A1%E9%AA%8C/"/>
    <url>/2023/09/20/%E5%B0%9A%E7%A1%85%E8%B0%B7-SSM/SpringMVC/11_%E5%8F%82%E6%95%B0%E6%A0%A1%E9%AA%8C/</url>
    
    <content type="html"><![CDATA[<h1 id="JSR-303-参数校验"><a href="#JSR-303-参数校验" class="headerlink" title="JSR 303 参数校验"></a>JSR 303 参数校验</h1><blockquote><p>在 Web 应用三层架构体系中，表述层负责接收浏览器提交的数据，业务逻辑层负责数据的处理。为了能够让业务逻辑层基于正确的数据进行处理，我们需要在表述层对数据进行检查，将错误的数据隔绝在业务逻辑层之外。</p></blockquote><h2 id="校验概述"><a href="#校验概述" class="headerlink" title="校验概述"></a>校验概述</h2><blockquote><p>JSR 303 是 Java 为 Bean 数据合法性校验提供的标准框架，它已经包含在 JavaEE 6.0 标准中。JSR 303 通过在 Bean 属性上标注类似于 @NotNull、@Max 等标准的注解指定校验规则，并通过标准的验证接口对Bean进行验证。</p></blockquote><table><thead><tr><th>注解</th><th>规则</th></tr></thead><tbody><tr><td>@Null</td><td>标注值必须为 null</td></tr><tr><td>@NotNull</td><td>标注值不可为 null</td></tr><tr><td>@AssertTrue</td><td>标注值必须为 true</td></tr><tr><td>@AssertFalse</td><td>标注值必须为 false</td></tr><tr><td>@Min(value)</td><td>标注值必须大于或等于 value</td></tr><tr><td>@Max(value)</td><td>标注值必须小于或等于 value</td></tr><tr><td>@DecimalMin(value)</td><td>标注值必须大于或等于 value</td></tr><tr><td>@DecimalMax(value)</td><td>标注值必须小于或等于 value</td></tr><tr><td>@Size(max,min)</td><td>标注值大小必须在 max 和 min 限定的范围内</td></tr><tr><td>@Digits(integer,fratction)</td><td>标注值值必须是一个数字，且必须在可接受的范围内</td></tr><tr><td>@Past</td><td>标注值只能用于日期型，且必须是过去的日期</td></tr><tr><td>@Future</td><td>标注值只能用于日期型，且必须是将来的日期</td></tr><tr><td>@Pattern(value)</td><td>标注值必须符合指定的正则表达式</td></tr><tr><td>@NotEmpty</td><td>集合类型长度大于0</td></tr><tr><td>@NotBlank</td><td>集合类型长度大于0</td></tr></tbody></table><p>JSR 303 只是一套标准，需要提供其实现才可以使用。Hibernate Validator 是 JSR 303 的一个参考实现，除支持所有标准的校验注解外，它还支持以下的扩展注解</p><table><thead><tr><th>注解</th><th>规则</th></tr></thead><tbody><tr><td>@Email</td><td>标注值必须是格式正确的 Email 地址</td></tr><tr><td>@Length</td><td>标注值字符串大小必须在指定的范围内</td></tr><tr><td>@NotEmpty</td><td>标注值字符串不能是空字符串</td></tr><tr><td>@Range</td><td>标注值必须在指定的范围内</td></tr></tbody></table><h2 id="易混注解"><a href="#易混注解" class="headerlink" title="易混注解"></a>易混注解</h2><p>@NotNull、@NotEmpty、@NotBlank 都是用于在数据校验中检查字段值是否为空的注解，但是它们的用法和校验规则有所不同。</p><ol><li><p>@NotNull  (包装类型不为null)</p><p> @NotNull 注解是 JSR 303 规范中定义的注解，当被标注的字段值为 null 时，会认为校验失败而抛出异常。该注解不能用于字符串类型的校验，若要对字符串进行校验，应该使用 @NotBlank 或 @NotEmpty 注解。</p></li><li><p>@NotEmpty (集合类型长度大于0)</p><p> @NotEmpty 注解同样是 JSR 303 规范中定义的注解，对于 CharSequence、Collection、Map 或者数组对象类型的属性进行校验，校验时会检查该属性是否为 Null 或者 size()&#x3D;&#x3D;0，如果是的话就会校验失败。但是对于其他类型的属性，该注解无效。需要注意的是只校验空格前后的字符串，如果该字符串中间只有空格，不会被认为是空字符串，校验不会失败。</p></li><li><p>@NotBlank （字符串，不为null，切不为”  “字符串）</p><p> @NotBlank 注解是 Hibernate Validator 附加的注解，对于字符串类型的属性进行校验，校验时会检查该属性是否为 Null 或 “” 或者只包含空格，如果是的话就会校验失败。需要注意的是，@NotBlank 注解只能用于字符串类型的校验。</p></li></ol><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 校验注解 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>jakarta.platform<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jakarta.jakartaee-web-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>9.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <br><span class="hljs-comment">&lt;!-- 校验注解实现--&gt;</span>        <br><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.hibernate.validator/hibernate-validator --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.hibernate.validator<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>hibernate-validator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.0.Final<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.hibernate.validator<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>hibernate-validator-annotation-processor<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.0.Final<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-meta">@NotBlank</span><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-meta">@Length(min = 6)</span><br>    <span class="hljs-keyword">private</span> String password;<br>    <span class="hljs-meta">@Min(1)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-meta">@Email</span><br>    <span class="hljs-keyword">private</span> String email;<br>    <span class="hljs-meta">@Past</span><br>    <span class="hljs-keyword">private</span> Date birthday;<br>&#125;<br></code></pre></td></tr></table></figure><p>controller实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br>    <span class="hljs-keyword">public</span> User user;<br>    <span class="hljs-meta">@PostMapping(&quot;sendUser&quot;)</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">getUser</span><span class="hljs-params">(<span class="hljs-meta">@Validated</span> <span class="hljs-meta">@RequestBody</span> User user)</span>&#123;<br>        System.out.println(user);<br>        <span class="hljs-keyword">return</span> user;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>实体类属性添加校验注解</li><li>handler(@Validated @RequestBody 实体类 对象)</li></ol><p><img src="/assets/image-20230921003827222.png" alt="image-20230921003827222"></p><p><img src="/assets/image-20230921003926387.png" alt="image-20230921003926387"></p><p>如果不符合校验规则，直接向前端抛出异常是不正确，需要接收错误绑定信息，自定义返回结果，约定：参数错误 -&gt; {code:400} -&gt; 前端</p><p>捕捉错误，绑定错误信息</p><ol><li><p>handler(校验对象,BindingResult result) </p><p>要求BindingResult形参紧挨着校验对象</p></li><li><p>bindingResult获取绑定错误</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br>    <span class="hljs-meta">@PostMapping(&quot;sendUser&quot;)</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getUser</span><span class="hljs-params">(<span class="hljs-meta">@Validated</span> <span class="hljs-meta">@RequestBody</span> User user, BindingResult result)</span>&#123;<br>        <span class="hljs-keyword">if</span> (result.hasErrors()) &#123;<br><span class="hljs-comment">//            有绑定错误，就不直接返回，自定义返回结果</span><br>            <span class="hljs-type">Map</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>            map.put(<span class="hljs-string">&quot;code&quot;</span>,<span class="hljs-number">400</span>);<br>            map.put(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;参数校验异常了&quot;</span>);<br>            <span class="hljs-keyword">return</span> map;<br>        &#125;<br>        System.out.println(user);<br>        <span class="hljs-keyword">return</span> user;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><p><img src="/assets/image-20230921005638299.png" alt="image-20230921005638299"></p>]]></content>
    
    
    <categories>
      
      <category>SSM</category>
      
      <category>SpringMVC</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>10_SpringMVC扩展</title>
    <link href="/2023/09/19/%E5%B0%9A%E7%A1%85%E8%B0%B7-SSM/SpringMVC/10_SpringMVC%E6%89%A9%E5%B1%95/"/>
    <url>/2023/09/19/%E5%B0%9A%E7%A1%85%E8%B0%B7-SSM/SpringMVC/10_SpringMVC%E6%89%A9%E5%B1%95/</url>
    
    <content type="html"><![CDATA[<h1 id="SpringMVC扩展"><a href="#SpringMVC扩展" class="headerlink" title="SpringMVC扩展"></a>SpringMVC扩展</h1><h2 id="异常处理的两种方式"><a href="#异常处理的两种方式" class="headerlink" title="异常处理的两种方式"></a>异常处理的两种方式</h2><p>开发过程中是不可避免地会出现各种异常情况的，例如网络连接异常、数据格式异常、空指针异常等等。异常的出现可能导致程序的运行出现问题，甚至直接导致程序崩溃。因此，在开发过程中，合理处理异常、避免异常产生、以及对异常进行有效的调试是非常重要的。</p><p><img src="/assets/image-20230919232429217.png" alt="image-20230919232429217"></p><p><img src="/assets/image-20230919235147955.png" alt="image-20230919235147955"></p><h3 id="编程式异常处理"><a href="#编程式异常处理" class="headerlink" title="编程式异常处理"></a>编程式异常处理</h3><p>简单说，try-catch处理</p><h3 id="声明式异常处理"><a href="#声明式异常处理" class="headerlink" title="声明式异常处理"></a>声明式异常处理</h3><p>简单说，将异常处理的逻辑从具体的业务逻辑中分离出来，通过配置等方式进行统一的管理和处理。开发人员只需要为方法或类标注相应的注解（如 @Throws 或 @ExceptionHandler）</p><h3 id="站在宏观角度来看待声明式事务处理"><a href="#站在宏观角度来看待声明式事务处理" class="headerlink" title="站在宏观角度来看待声明式事务处理"></a>站在宏观角度来看待声明式事务处理</h3><blockquote><p> 整个项目从架构这个层面设计的异常处理的统一机制和规范。</p><p>一个项目中会包含很多个模块，各个模块需要分工完成。如果张三负责的模块按照 A 方案处理异常，李四负责的模块按照 B 方案处理异常……各个模块处理异常的思路、代码、命名细节都不一样，那么就会让整个项目非常混乱。 使用声明式异常处理，可以统一项目处理异常思路，项目更加清晰明了！</p></blockquote><h3 id="基于注解异常声明异常处理"><a href="#基于注解异常声明异常处理" class="headerlink" title="基于注解异常声明异常处理"></a>基于注解异常声明异常处理</h3><ol><li><p>声明异常处理控制器类</p></li><li><p>声明异常处理handler方法</p></li><li><p>配置文件扫描控制器类配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestControllerAdvice</span> <span class="hljs-comment">//直接返回json</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GlobalExceptionHandler</span> &#123;<br>    <span class="hljs-meta">@ExceptionHandler(ArithmeticException.class)</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">ArithmeticExceptionHandler</span><span class="hljs-params">(ArithmeticException arithmeticException)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;ArithmeticException&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> arithmeticException.getMessage();<br>        <span class="hljs-keyword">return</span> message; <span class="hljs-comment">//可以转发或重定向到视图页面</span><br>    &#125;<br>    <span class="hljs-meta">@ExceptionHandler(Exception.class)</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">ExceptionHandler</span><span class="hljs-params">(Exception e)</span>&#123;<br>        <span class="hljs-keyword">return</span> e.getMessage();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableWebMvc</span><br><span class="hljs-meta">@ComponentScan(&#123;&quot;com.jmin.controller&quot;,&quot;com.jmin.error&quot;&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MvcConfig</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20230920002753742.png" alt="image-20230920002753742"></p><p><img src="/assets/image-20230920002810565.png" alt="image-20230920002810565"></p></li></ol><h2 id="拦截器使用"><a href="#拦截器使用" class="headerlink" title="拦截器使用"></a>拦截器使用</h2><h3 id="拦截器概念"><a href="#拦截器概念" class="headerlink" title="拦截器概念"></a>拦截器概念</h3><p><img src="/assets/image-20230920004000735.png" alt="image-20230920004000735"></p><p>拦截器 Springmvc VS 过滤器 javaWeb：</p><ul><li>相似点<ul><li>拦截：必须先把请求拦住，才能执行后续操作</li><li>过滤：拦截器或过滤器存在的意义就是对请求进行统一处理</li><li>放行：对请求执行了必要操作后，放请求过去，让它访问原本想要访问的资源</li></ul></li><li>不同点<ul><li>工作平台不同<ul><li>过滤器工作在 Servlet 容器中</li><li>拦截器工作在 SpringMVC 的基础上</li></ul></li><li>拦截的范围<ul><li>过滤器：能够拦截到的最大范围是整个 Web 应用</li><li>拦截器：能够拦截到的最大范围是整个 SpringMVC 负责的请求</li></ul></li><li>IOC 容器支持<ul><li>过滤器：想得到 IOC 容器需要调用专门的工具方法，是间接的</li><li>拦截器：它自己就在 IOC 容器中，所以可以直接从 IOC 容器中装配组件，也就是可以直接得到 IOC 容器的支持</li></ul></li></ul></li></ul><p>拦截器 Springmvc VS 过滤器 javaWeb：</p><ul><li>相似点<ul><li>拦截：必须先把请求拦住，才能执行后续操作</li><li>过滤：拦截器或过滤器存在的意义就是对请求进行统一处理</li><li>放行：对请求执行了必要操作后，放请求过去，让它访问原本想要访问的资源</li></ul></li><li>不同点<ul><li>工作平台不同<ul><li>过滤器工作在 Servlet 容器中</li><li>拦截器工作在 SpringMVC 的基础上</li></ul></li><li>拦截的范围<ul><li>过滤器：能够拦截到的最大范围是整个 Web 应用</li><li>拦截器：能够拦截到的最大范围是整个 SpringMVC 负责的请求</li></ul></li><li>IOC 容器支持<ul><li>过滤器：想得到 IOC 容器需要调用专门的工具方法，是间接的</li><li>拦截器：它自己就在 IOC 容器中，所以可以直接从 IOC 容器中装配组件，也就是可以直接得到 IOC 容器的支持</li></ul></li></ul></li></ul><p>拦截器 Springmvc VS 过滤器 javaWeb：</p><ul><li>相似点<ul><li>拦截：必须先把请求拦住，才能执行后续操作</li><li>过滤：拦截器或过滤器存在的意义就是对请求进行统一处理</li><li>放行：对请求执行了必要操作后，放请求过去，让它访问原本想要访问的资源</li></ul></li><li>不同点<ul><li>工作平台不同<ul><li>过滤器工作在 Servlet 容器中</li><li>拦截器工作在 SpringMVC 的基础上</li></ul></li><li>拦截的范围<ul><li>过滤器：能够拦截到的最大范围是整个 Web 应用</li><li>拦截器：能够拦截到的最大范围是整个 SpringMVC 负责的请求</li></ul></li><li>IOC 容器支持<ul><li>过滤器：想得到 IOC 容器需要调用专门的工具方法，是间接的</li><li>拦截器：它自己就在 IOC 容器中，所以可以直接从 IOC 容器中装配组件，也就是可以直接得到 IOC 容器的支持</li></ul></li></ul></li></ul><p>选择：</p><p>功能需要如果用 SpringMVC 的拦截器能够实现，就不使用过滤器。</p><p><img src="/assets/image-20230920004854090.png" alt="image-20230920004854090"></p><h3 id="拦截器实现"><a href="#拦截器实现" class="headerlink" title="拦截器实现"></a>拦截器实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyInterception</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerInterceptor</span> &#123;<br><span class="hljs-comment">//    接口方法是默认实现的，可以重写</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 执行handler之前，拦截</span><br><span class="hljs-comment">     * 常用于编码格式设置，登录保护，权限处理</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> request 请求对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> response 响应对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> handler 调用方法的对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> true 放行 false 拦截</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;request = &quot;</span> + request + <span class="hljs-string">&quot;, response = &quot;</span> + response + <span class="hljs-string">&quot;, handler = &quot;</span> + handler);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * handler执行完毕后，触发的方法 没有拦截机制</span><br><span class="hljs-comment">     * 对结果处理，敏感词汇检查</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> request</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> response</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> handler</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> modelAndView 返回视图和共享域数据对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">postHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;MyInterception.postHandle&quot;</span>);<br>        HandlerInterceptor.<span class="hljs-built_in">super</span>.postHandle(request, response, handler, modelAndView);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *  整体处理完毕</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> request</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> response</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> handler</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> ex handler报错的异常</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterCompletion</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;MyInterception.afterCompletion&quot;</span>);<br>        HandlerInterceptor.<span class="hljs-built_in">super</span>.afterCompletion(request, response, handler, ex);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="拦截器配置"><a href="#拦截器配置" class="headerlink" title="拦截器配置"></a>拦截器配置</h3><ol><li><p>方式一 拦截全局</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableWebMvc</span><br><span class="hljs-meta">@ComponentScan(&#123;&quot;com.jmin.controller&quot;,&quot;com.jmin.error&quot;&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MvcConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurer</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addInterceptors</span><span class="hljs-params">(InterceptorRegistry registry)</span> &#123;<br><span class="hljs-comment">//        配置方法1 拦截全局请求</span><br>        registry.addInterceptor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyInterception</span>());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>方式二 拦截部分路径</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MvcConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurer</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addInterceptors</span><span class="hljs-params">(InterceptorRegistry registry)</span> &#123;<br><span class="hljs-comment">//        配置方法2 拦截部分请求,精准拦截</span><br><span class="hljs-comment">//        * 任意一层字符串</span><br>        registry.addInterceptor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyInterception</span>())<br>                .addPathPatterns(<span class="hljs-string">&quot;/user/*&quot;</span>);<br><span class="hljs-comment">//        ** 任意多层字符串</span><br>        registry.addInterceptor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyInterception</span>())<br>                .addPathPatterns(<span class="hljs-string">&quot;/**&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>方式三 排除拦截</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableWebMvc</span><br><span class="hljs-meta">@ComponentScan(&#123;&quot;com.jmin.controller&quot;,&quot;com.jmin.error&quot;&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MvcConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurer</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addInterceptors</span><span class="hljs-params">(InterceptorRegistry registry)</span> &#123;<br><span class="hljs-comment">//        配置方法3 排除拦截 排除地址应该在拦截地址内部</span><br>        registry.addInterceptor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyInterception</span>())<br>                .addPathPatterns(<span class="hljs-string">&quot;/user/*&quot;</span>)<br>                .excludePathPatterns(<span class="hljs-string">&quot;/user/data1&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="多个拦截器的优先级问题"><a href="#多个拦截器的优先级问题" class="headerlink" title="多个拦截器的优先级问题"></a>多个拦截器的优先级问题</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableWebMvc</span><br><span class="hljs-meta">@ComponentScan(&#123;&quot;com.jmin.controller&quot;,&quot;com.jmin.error&quot;&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MvcConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurer</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addInterceptors</span><span class="hljs-params">(InterceptorRegistry registry)</span> &#123;<br><span class="hljs-comment">//        多个拦截器执行顺序</span><br>        registry.addInterceptor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyInterception1</span>());<br>        registry.addInterceptor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyInterception2</span>());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>执行结果：</p><p><img src="/assets/image-20230920191722591.png" alt="image-20230920191722591"></p><p><img src="/assets/image-20230920191757434.png" alt="image-20230920191757434"></p><ol><li>preHandle() 方法：SpringMVC 会把所有拦截器收集到一起，然后按照配置顺序调用各个 preHandle() 方法。</li><li>postHandle() 方法：SpringMVC 会把所有拦截器收集到一起，然后按照配置相反的顺序调用各个 postHandle() 方法。</li><li>afterCompletion() 方法：SpringMVC 会把所有拦截器收集到一起，然后按照配置相反的顺序调用各个 afterCompletion() 方法。</li></ol><h3 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h3><p>mvc中所有的请求由DispatcherServlet分发，分发过程中自动调用了拦截器</p><p><img src="/assets/image-20230920194630723.png" alt="image-20230920194630723"></p><p>该方法为mvc的整体调用流程</p><p><img src="/assets/image-20230920195527218.png" alt="image-20230920195527218"></p><p>mapping（秘书）和adapter（经理）（由秘书寻找）</p><p><img src="/assets/image-20230920195910862.png" alt="image-20230920195910862"></p><p><img src="/assets/image-20230920195933553.png" alt="image-20230920195933553"></p><p>adapter（经理）调用handler，在调用handler之前经理进行一段拦截动作，寻找是否存在前置拦截器，条件applyPreHandle方法如果返回false，则该if为true，跳出当前方法</p><p><img src="/assets/image-20230920200207882.png" alt="image-20230920200207882"></p><p>对于applyPreHandle方法，会顺序遍历所有的拦截器PreHandle方法并调用PreHandle方法，直到调用结束后返回true，而回到上述if语句中条件为false，执行下面的程序。</p><p><img src="/assets/image-20230920200642235.png" alt="image-20230920200642235"></p><p>目标方法执行完毕后，经理执行拦截器的applyPostHandler方法</p><p><img src="/assets/image-20230920201426769.png" alt="image-20230920201426769"></p><p>applyPostHandler方法，会倒序遍历所有的拦截器并调用PostHandler方法</p><p><img src="/assets/image-20230920201706552.png" alt="image-20230920201706552"></p><p>applyPostHandler方法执行完毕后，将请求和响应向上传递</p><p><img src="/assets/image-20230920202136879.png" alt="image-20230920202136879"></p><p>而在传递过程中，如果存在异常，会执行processHandlerException异常处理方法。</p><p><img src="/assets/image-20230920202245064.png" alt="image-20230920202245064"></p><p>不存在异常，最终会调用triggerAfterCompletion拦截器后置处理方法</p><p><img src="/assets/image-20230920202452383.png" alt="image-20230920202452383"></p><p>triggerAfterCompletion方法，会倒序遍历所有的拦截器并调用afterCompletion方法</p><p><img src="/assets/image-20230920202536250.png" alt="image-20230920202536250"></p>]]></content>
    
    
    <categories>
      
      <category>SSM</category>
      
      <category>SpringMVC</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>9_RestFul实战</title>
    <link href="/2023/09/19/%E5%B0%9A%E7%A1%85%E8%B0%B7-SSM/SpringMVC/9_RestFul%E5%AE%9E%E6%88%98/"/>
    <url>/2023/09/19/%E5%B0%9A%E7%A1%85%E8%B0%B7-SSM/SpringMVC/9_RestFul%E5%AE%9E%E6%88%98/</url>
    
    <content type="html"><![CDATA[<h1 id="RestFul实战"><a href="#RestFul实战" class="headerlink" title="RestFul实战"></a>RestFul实战</h1><h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><ul><li>数据结构： User {id 唯一标识,name 用户名，age 用户年龄}</li><li>功能分析<ul><li>用户数据分页展示功能（条件：page 页数 默认1，size 每页数量 默认 10）</li><li>保存用户功能</li><li>根据用户id查询用户详情功能</li><li>根据用户id更新用户数据功能</li><li>根据用户id删除用户数据功能</li><li>多条件模糊查询用户功能（条件：keyword 模糊关键字，page 页数 默认1，size 每页数量 默认 10）</li></ul></li></ul><h2 id="接口设计"><a href="#接口设计" class="headerlink" title="接口设计"></a>接口设计</h2><table><thead><tr><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>功能</td><td>接口和请求方式</td><td>请求参数</td><td>返回值</td></tr><tr><td>分页查询</td><td>GET  &#x2F;user</td><td>page&#x3D;1&amp;size&#x3D;10</td><td>{ 响应数据 }</td></tr><tr><td>用户添加</td><td>POST &#x2F;user</td><td>{ user 数据 }</td><td>{响应数据}</td></tr><tr><td>用户详情</td><td>GET &#x2F;user&#x2F;1</td><td>路径参数</td><td>{响应数据}</td></tr><tr><td>用户更新</td><td>PUT &#x2F;user</td><td>{ user 更新数据}</td><td>{响应数据}</td></tr><tr><td>用户删除</td><td>DELETE &#x2F;user&#x2F;1</td><td>路径参数</td><td>{响应数据}</td></tr><tr><td>条件模糊</td><td>GET &#x2F;user&#x2F;search</td><td>page&#x3D;1&amp;size&#x3D;10&amp;keywork&#x3D;关键字</td><td>{响应数据}</td></tr></tbody></table><p><img src="/assets/image-20230919221331303.png" alt="image-20230919221331303"></p><h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RestfulController</span> &#123;<br><span class="hljs-comment">//    分页查询</span><br>    <span class="hljs-meta">@GetMapping</span><br>    <span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title function_">page</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(required = false,defaultValue = &quot;1&quot;)</span> <span class="hljs-type">int</span> page,</span><br><span class="hljs-params">                           <span class="hljs-meta">@RequestParam(required = false,defaultValue = &quot;10&quot;)</span> <span class="hljs-type">int</span> size)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;page=&quot;</span> + page + <span class="hljs-string">&quot;\n&quot;</span> + <span class="hljs-string">&quot;size=&quot;</span> +size);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><span class="hljs-comment">//    用户添加</span><br>    <span class="hljs-meta">@PostMapping</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">addUser</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> User user)</span>&#123;<br>        <span class="hljs-keyword">return</span> user.toString();<br>    &#125;<br><span class="hljs-comment">//    用户详情</span><br>    <span class="hljs-meta">@GetMapping(&quot;&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">userDetail</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Integer id)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><span class="hljs-comment">//    用户更新</span><br>    <span class="hljs-meta">@PutMapping</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">updateUser</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> User user)</span>&#123;<br>        <span class="hljs-keyword">return</span> user.toString();<br>    &#125;<br><span class="hljs-comment">//    用户删除</span><br>    <span class="hljs-meta">@DeleteMapping(&quot;&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">deleteUser</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Integer id)</span>&#123;<br>        <span class="hljs-keyword">return</span> id.toString();<br>    &#125;<br><span class="hljs-comment">//    条件模糊</span><br>    <span class="hljs-meta">@GetMapping</span><br>    <span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title function_">searchUser</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(required = false,defaultValue = &quot;1&quot;)</span> <span class="hljs-type">int</span> page,</span><br><span class="hljs-params">                                 <span class="hljs-meta">@RequestParam(required = false,defaultValue = &quot;10&quot;)</span> <span class="hljs-type">int</span> size,</span><br><span class="hljs-params">                                 String keyWord)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>SSM</category>
      
      <category>SpringMVC</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>8_RestFul风格设计</title>
    <link href="/2023/09/19/%E5%B0%9A%E7%A1%85%E8%B0%B7-SSM/SpringMVC/8_RestFul%E9%A3%8E%E6%A0%BC%E8%AE%BE%E8%AE%A1/"/>
    <url>/2023/09/19/%E5%B0%9A%E7%A1%85%E8%B0%B7-SSM/SpringMVC/8_RestFul%E9%A3%8E%E6%A0%BC%E8%AE%BE%E8%AE%A1/</url>
    
    <content type="html"><![CDATA[<h1 id="RestFul风格设计"><a href="#RestFul风格设计" class="headerlink" title="RestFul风格设计"></a>RestFul风格设计</h1><h2 id="Restful风格概述"><a href="#Restful风格概述" class="headerlink" title="Restful风格概述"></a>Restful风格概述</h2><p>RESTful（Representational State Transfer）是一种软件架构风格，用于设计网络应用程序和服务之间的通信。它是一种基于标准 HTTP 方法的简单和轻量级的通信协议，广泛应用于现代的Web服务开发。</p><p>通过遵循 RESTful 架构的设计原则，可以构建出易于理解、可扩展、松耦合和可重用的 Web 服务。RESTful API 的特点是简单、清晰，并且易于使用和理解，它们使用标准的 HTTP 方法和状态码进行通信，不需要额外的协议和中间件。</p><p>总而言之，RESTful 是一种基于 HTTP 和标准化的设计原则的软件架构风格，用于设计和实现可靠、可扩展和易于集成的 Web 服务和应用程序！</p><h2 id="Restful特点"><a href="#Restful特点" class="headerlink" title="Restful特点"></a>Restful特点</h2><ol><li>每一个URI代表1种资源（URI 是名词）；</li><li>客户端使用GET、POST、PUT、DELETE 4个表示操作方式的动词对服务端资源进行操作：GET用来获取资源，POST用来新建资源（也可以用于更新资源），PUT用来更新资源，DELETE用来删除资源；</li><li>资源的表现形式是XML或者<strong>JSON</strong>；</li><li>客户端与服务端之间的交互在请求之间是无状态的，从客户端到服务端的每个请求都必须包含理解请求所必需的信息。</li></ol><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-number">1</span>.对于根据id查询数据<br><span class="hljs-regexp">/user/</span><span class="hljs-keyword">find</span>?id=<span class="hljs-number">1</span>  (GET) <br><span class="hljs-regexp">/user/</span><span class="hljs-number">1</span>  GET<br><span class="hljs-number">2</span>.根据id删除数据<br><span class="hljs-regexp">/user/</span>remove?id=<span class="hljs-number">1</span> (GET)<br><span class="hljs-regexp">/user/</span><span class="hljs-number">1</span>  <span class="hljs-keyword">DELETE</span><br></code></pre></td></tr></table></figure><h2 id="Restful规范"><a href="#Restful规范" class="headerlink" title="Restful规范"></a>Restful规范</h2><h3 id="HTTP协议请求方式要求"><a href="#HTTP协议请求方式要求" class="headerlink" title="HTTP协议请求方式要求"></a>HTTP协议请求方式要求</h3><p>REST 风格主张在项目设计、开发过程中，具体的操作符合HTTP协议定义的请求方式的语义。</p><table><thead><tr><th>操作</th><th>请求方式</th></tr></thead><tbody><tr><td>查询操作</td><td>GET</td></tr><tr><td>保存操作</td><td>POST</td></tr><tr><td>删除操作</td><td>DELETE</td></tr><tr><td>更新操作</td><td>PUT</td></tr></tbody></table><h3 id="URL路径风格要求"><a href="#URL路径风格要求" class="headerlink" title="URL路径风格要求"></a>URL路径风格要求</h3><p>REST风格下每个资源都应该有一个唯一的标识符，例如一个 URI（统一资源标识符）或者一个 URL（统一资源定位符）。资源的标识符应该能明确地说明该资源的信息，同时也应该是可被理解和解释的！</p><p>使用URL+请求方式确定具体的动作，他也是一种标准的HTTP协议请求！</p><table><thead><tr><th>操作</th><th>传统风格</th><th>REST 风格</th></tr></thead><tbody><tr><td>保存</td><td>&#x2F;CRUD&#x2F;saveEmp</td><td>URL 地址：&#x2F;CRUD&#x2F;emp 请求方式：POST</td></tr><tr><td>删除</td><td>&#x2F;CRUD&#x2F;removeEmp?empId&#x3D;2</td><td>URL 地址：&#x2F;CRUD&#x2F;emp&#x2F;2 请求方式：DELETE</td></tr><tr><td>更新</td><td>&#x2F;CRUD&#x2F;updateEmp</td><td>URL 地址：&#x2F;CRUD&#x2F;emp 请求方式：PUT</td></tr><tr><td>查询</td><td>&#x2F;CRUD&#x2F;editEmp?empId&#x3D;2</td><td>URL 地址：&#x2F;CRUD&#x2F;emp&#x2F;2 请求方式：GET</td></tr></tbody></table><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>根据接口的具体动作，选择具体的HTTP协议请求方式</li><li>路径设计从原来携带动标识，改成名词，对应资源的唯一标识即可！</li></ol><h2 id="好处"><a href="#好处" class="headerlink" title="好处"></a>好处</h2><ol><li><p>含蓄，安全</p><p> 使用问号键值对的方式给服务器传递数据太明显，容易被人利用来对系统进行破坏。使用 REST 风格携带数据不再需要明显的暴露数据的名称。</p></li><li><p>风格统一</p><p> URL 地址整体格式统一，从前到后始终都使用斜杠划分各个单词，用简单一致的格式表达语义。</p></li><li><p>无状态</p><p> 在调用一个接口（访问、操作资源）的时候，可以不用考虑上下文，不用考虑当前状态，极大的降低了系统设计的复杂度。</p></li><li><p>严谨，规范</p><p> 严格按照 HTTP1.1 协议中定义的请求方式本身的语义进行操作。</p></li><li><p>简洁，优雅</p><p> 过去增删改查需要设计4个不同的URL，而现在只需要一个即可</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>SSM</category>
      
      <category>SpringMVC</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>7_SpringMVC响应数据</title>
    <link href="/2023/09/19/%E5%B0%9A%E7%A1%85%E8%B0%B7-SSM/SpringMVC/7_SpringMVC%E5%93%8D%E5%BA%94%E6%95%B0%E6%8D%AE/"/>
    <url>/2023/09/19/%E5%B0%9A%E7%A1%85%E8%B0%B7-SSM/SpringMVC/7_SpringMVC%E5%93%8D%E5%BA%94%E6%95%B0%E6%8D%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="SpringMVC响应数据"><a href="#SpringMVC响应数据" class="headerlink" title="SpringMVC响应数据"></a>SpringMVC响应数据</h1><h2 id="handler方法分析"><a href="#handler方法分析" class="headerlink" title="handler方法分析"></a>handler方法分析</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">TODO:</span> 一个controller的方法是控制层的一个处理器,我们称为handler</span><br><span class="hljs-comment"> * <span class="hljs-doctag">TODO:</span> handler需要使用<span class="hljs-doctag">@RequestMapping</span>/<span class="hljs-doctag">@GetMapping</span>系列,声明路径,在HandlerMapping中注册,供DS查找!</span><br><span class="hljs-comment"> * <span class="hljs-doctag">TODO:</span> handler作用总结:</span><br><span class="hljs-comment"> *       1.接收请求参数(param,json,pathVariable,共享域等) </span><br><span class="hljs-comment"> *       2.调用业务逻辑 </span><br><span class="hljs-comment"> *       3.响应前端数据(页面（不讲解模版页面跳转）,json,转发和重定向等)</span><br><span class="hljs-comment"> * <span class="hljs-doctag">TODO:</span> handler如何处理呢</span><br><span class="hljs-comment"> *       1.接收参数: handler(形参列表: 主要的作用就是用来接收参数)</span><br><span class="hljs-comment"> *       2.调用业务: &#123; 方法体  可以向后调用业务方法 service.xx() &#125;</span><br><span class="hljs-comment"> *       3.响应数据: return 返回结果,可以快速响应前端数据</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@GetMapping</span><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">handler</span><span class="hljs-params">(简化请求参数接收)</span>&#123;<br>    调用业务方法<br>    返回的结果 （页面跳转，返回数据（json））<br>    <span class="hljs-keyword">return</span> 简化响应前端数据;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="页面跳转控制"><a href="#页面跳转控制" class="headerlink" title="页面跳转控制"></a>页面跳转控制</h2><h3 id="混合开发模式"><a href="#混合开发模式" class="headerlink" title="混合开发模式"></a>混合开发模式</h3><p><img src="/assets/image-20230919101141319.png" alt="image-20230919101141319"></p><p>指将前端和后端的代码集成在同一个项目中，共享相同的技术栈和框架。这种模式在小型项目中比较常见，可以减少学习成本和部署难度。但是，在大型项目中，这种模式会导致代码耦合性很高，维护和升级难度较大。</p><p>对于混合开发，我们就需要使用动态页面技术，动态展示Java的共享域数据！！</p><h3 id="前后端分离"><a href="#前后端分离" class="headerlink" title="前后端分离"></a>前后端分离</h3><p> <img src="/assets/image-20230919132416221.png" alt="image-20230919132416221"></p><h2 id="JSP"><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h2><h3 id="返回模板视图"><a href="#返回模板视图" class="headerlink" title="返回模板视图"></a>返回模板视图</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>jakarta.servlet.jsp.jstl<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jakarta.servlet.jsp.jstl-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/assets/image-20230919140534242.png" alt="image-20230919140534242"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ComponentScan(&quot;com.jmin.controller&quot;)</span><br><span class="hljs-meta">@EnableWebMvc</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MvcConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurer</span> &#123;<br><span class="hljs-comment">//    视图解析器</span><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configureViewResolvers</span><span class="hljs-params">(ViewResolverRegistry registry)</span> &#123;<br><span class="hljs-comment">//        registry可以快速添加前后缀</span><br>        registry.jsp(<span class="hljs-string">&quot;/WEB-INF/views/&quot;</span>,<span class="hljs-string">&quot;.jsp&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;jsp&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JSPController</span> &#123;<br>    <span class="hljs-meta">@GetMapping(&quot;index&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">index</span><span class="hljs-params">(HttpServletRequest request)</span>&#123;<br>        request.setAttribute(<span class="hljs-string">&quot;data&quot;</span>,<span class="hljs-string">&quot;hello jsp&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;JSPController.index&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;index&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>需要注意此处不能加@ResponseBody，因为标注@ResponseBody会使Handler返回的字符串直接响应到浏览器，而不走视图解析器。</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;Title&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;h1&gt;$&#123;data&#125;&lt;/h1&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br><br></code></pre></td></tr></table></figure><h3 id="转发"><a href="#转发" class="headerlink" title="转发"></a>转发</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;forward&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">forWord</span><span class="hljs-params">()</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;forward to JSPController.index&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;forward:/jsp/index&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>返回值必须为字符串</li><li>不能添加@ResponseBody</li><li>返回字符串前缀必须是forward:&#x2F;转发地址</li></ol><h3 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;redirect&quot;)</span><br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">redirect</span><span class="hljs-params">()</span>&#123;<br>       System.out.println(<span class="hljs-string">&quot;redirect to JSPController.index&quot;</span>);<br>       <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/jsp/index&quot;</span>;<br>   &#125;<br><br>   <span class="hljs-meta">@GetMapping(&quot;redirect/baidu&quot;)</span><br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">redirectBaidu</span><span class="hljs-params">()</span>&#123;<br>       System.out.println(<span class="hljs-string">&quot;JSPController.redirectBaidu&quot;</span>);<br>       <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:https://www.baidu.com&quot;</span>;<br>   &#125;<br></code></pre></td></tr></table></figure><ol><li>返回值必须为字符串</li><li>不能添加@ResponseBody</li><li>返回字符串前缀必须是redirect:&#x2F;转发地址</li></ol><h3 id="路径细节"><a href="#路径细节" class="headerlink" title="路径细节"></a>路径细节</h3><p>所谓根路径</p><p><img src="/assets/image-20230919163404694.png" alt="image-20230919163404694"></p><h4 id="不使用springmvc"><a href="#不使用springmvc" class="headerlink" title="不使用springmvc"></a>不使用springmvc</h4><ul><li>转发是项目下的资源跳转，转发路径只能是该项目下的地址，可以忽略applicationContext</li><li>重定向可以指定项目内外的资源，属于二次请求，不可以忽略applicationContext</li></ul><h4 id="使用springmvc"><a href="#使用springmvc" class="headerlink" title="使用springmvc"></a>使用springmvc</h4><ul><li>“forward:路径 | redirect:路径”</li><li>对于重定向，资源的地址可以不写项目的根路径</li></ul><h2 id="JSON接收与发送"><a href="#JSON接收与发送" class="headerlink" title="JSON接收与发送"></a>JSON接收与发送</h2><h3 id="接收"><a href="#接收" class="headerlink" title="接收"></a>接收</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//    接收json数据</span><br>    <span class="hljs-meta">@GetMapping(&quot;sendjson&quot;)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getUserJson</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> User user)</span>&#123;<br>        System.out.println(user);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;ok&quot;</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><blockquote><p>对此理解：后端Get得到sendjson请求，该请求中携带着json数据，通过@RequestBody注解到形参，形参自动装配，得到由json格式转化为User实例，而@ResponseBody的标注，使得该handler返回的字符串直接映射到浏览器。</p></blockquote><h3 id="发送"><a href="#发送" class="headerlink" title="发送"></a>发送</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//    发送json数据</span><br>    <span class="hljs-meta">@Controller</span><br>    <span class="hljs-meta">@GetMapping(&quot;getjson&quot;)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">sendUserJson</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>        user.setAge(<span class="hljs-number">19</span>);<br>        user.setName(<span class="hljs-string">&quot;lihua&quot;</span>);<br>        user.setGender(<span class="hljs-string">&quot;nan&quot;</span>);<br>        <span class="hljs-keyword">return</span> user;<br>    &#125;<br></code></pre></td></tr></table></figure><blockquote><p>对此理解，后端Get得到getjson请求，执行handler，将User实例化并将此对象返回，该对象会经过json格式的转化，@ResponseBody将转化后的数据直接映射到浏览器。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//    发送一堆json</span><br><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-meta">@RestController(&quot;getUserList&quot;)</span><br>    <span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title function_">sendUserListJson</span><span class="hljs-params">()</span>&#123;<br>        List&lt;User&gt; users = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        users.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;aa&quot;</span>,<span class="hljs-number">1</span>,<span class="hljs-string">&quot;man&quot;</span>));<br>        users.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;bb&quot;</span>,<span class="hljs-number">2</span>,<span class="hljs-string">&quot;woman&quot;</span>));<br>        users.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;cc&quot;</span>,<span class="hljs-number">3</span>,<span class="hljs-string">&quot;man&quot;</span>));<br>        <span class="hljs-keyword">return</span> users;<br>    &#125;<br></code></pre></td></tr></table></figure><p>@RestController 等价于 @Controller + @ResponseBody</p><h2 id="返回静态资源处理"><a href="#返回静态资源处理" class="headerlink" title="返回静态资源处理"></a>返回静态资源处理</h2><p><img src="/assets/image-20230919194949612.png" alt="image-20230919194949612"></p><p>为什么访问不到图片？</p><blockquote><p>浏览器中所有的请求都交由DispatcherServlet处理，servlet通过handlerMapping寻找是否存在对应的路径，如果不存在则返回404</p></blockquote><p>解决方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//    开启静态资源查找</span><br>    <span class="hljs-comment">// servlet通过handlerMapping查找是否存在对应的handler，假如没有则访问静态资源</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configureDefaultServletHandling</span><span class="hljs-params">(DefaultServletHandlerConfigurer configurer)</span> &#123;<br>        configurer.enable();<br>    &#125;<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20230919200026885.png" alt="image-20230919200026885"></p><p>此方法重写相当于</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mvc:default-servlet-handler</span>/&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/assets/image-20230919200812864.png" alt="image-20230919200812864"></p><p><img src="/assets/image-20230919201013176.png" alt="image-20230919201013176"></p><p><img src="/assets/image-20230919201043716.png" alt="image-20230919201043716"></p><p><img src="/assets/image-20230919201702363.png" alt="image-20230919201702363"></p>]]></content>
    
    
    <categories>
      
      <category>SSM</category>
      
      <category>SpringMVC</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>6_共享域对象操作</title>
    <link href="/2023/09/19/%E5%B0%9A%E7%A1%85%E8%B0%B7-SSM/SpringMVC/6_%E5%85%B1%E4%BA%AB%E5%9F%9F%E5%AF%B9%E8%B1%A1%E6%93%8D%E4%BD%9C/"/>
    <url>/2023/09/19/%E5%B0%9A%E7%A1%85%E8%B0%B7-SSM/SpringMVC/6_%E5%85%B1%E4%BA%AB%E5%9F%9F%E5%AF%B9%E8%B1%A1%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<h1 id="共享域对象操作"><a href="#共享域对象操作" class="headerlink" title="共享域对象操作"></a>共享域对象操作</h1><h2 id="属性（共享）域作用"><a href="#属性（共享）域作用" class="headerlink" title="属性（共享）域作用"></a>属性（共享）域作用</h2><p>在 JavaWeb 中，共享域指的是在 Servlet 中存储数据，以便在同一 Web 应用程序的多个组件中进行共享和访问。常见的共享域有四种：ServletContext、HttpSession、HttpServletRequest、PageContext。</p><ol><li><code>ServletContext</code> 共享域：<code>ServletContext</code> 对象可以在整个 Web 应用程序中共享数据，是最大的共享域。一般可以用于保存整个 Web 应用程序的全局配置信息，以及所有用户都共享的数据。在 <code>ServletContext</code> 中保存的数据是线程安全的。</li><li><code>HttpSession</code> 共享域：<code>HttpSession</code> 对象可以在同一用户发出的多个请求之间共享数据，但只能在同一个会话中使用。比如，可以将用户登录状态保存在 <code>HttpSession</code> 中，让用户在多个页面间保持登录状态。</li><li><code>HttpServletRequest</code> 共享域：<code>HttpServletRequest</code> 对象可以在同一个请求的多个处理器方法之间共享数据。比如，可以将请求的参数和属性存储在 <code>HttpServletRequest</code> 中，让处理器方法之间可以访问这些数据。</li><li><code>PageContext</code> 共享域：<code>PageContext</code> 对象是在 JSP 页面Servlet 创建时自动创建的。它可以在 JSP 的各个作用域中共享数据，包括<code>pageScope</code>、<code>requestScope</code>、<code>sessionScope</code>、<code>applicationScope</code> 等作用域。</li></ol><p>共享域的作用是提供了方便实用的方式在同一 Web 应用程序的多个组件之间传递数据，并且可以将数据保存在不同的共享域中，根据需要进行选择和使用。</p><p><img src="/assets/image-20230919094104162.png" alt="image-20230919094104162"></p><h2 id="Request级别共享域"><a href="#Request级别共享域" class="headerlink" title="Request级别共享域"></a>Request级别共享域</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//    springmvc提供的方法：request</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">data1</span><span class="hljs-params">(Model model, ModelMap modelMap, Map map)</span>&#123;<br>        model.addAttribute(<span class="hljs-string">&quot;key1&quot;</span>,<span class="hljs-string">&quot;value1&quot;</span>);<br>        modelMap.addAttribute(<span class="hljs-string">&quot;key2&quot;</span>,<span class="hljs-string">&quot;value2&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;key3&quot;</span>,<span class="hljs-string">&quot;value3&quot;</span>);<br>        <span class="hljs-type">ModelAndView</span> <span class="hljs-variable">modelAndView</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ModelAndView</span>();<br>        modelAndView.addObject(<span class="hljs-string">&quot;key4&quot;</span>,<span class="hljs-string">&quot;value4&quot;</span>);<br>        modelAndView.setViewName(<span class="hljs-string">&quot;mAv&quot;</span>);<br>    &#125;<br></code></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>接收参数</p><ol><li><p>路径设置<br>@RequestMapping(value&#x3D;”地址”，method&#x3D;”请求方式”) 类 | 方法<br>@GetMapping&#x2F;@PostMapping方法</p></li><li><p>接收参数【重点】<br>param</p><ul><li><p>直接接收handler(类型形参名) 形参名&#x3D;请求参数名</p></li><li><p>注解指定handler(@RequestParam(name&#x3D;”请求参数名”，required&#x3D;true,defaultValue&#x3D;”默认值”)</p></li><li><p>一名多值handler(@RequestParam List key）</p></li><li><p>实体接收handler(实体对象)对象的属性名&#x3D;请求参数名</p></li></ul><p>路径参数</p><ul><li>设置动态路径和标识&#x2F;{key}&#x2F;info&#x2F;{key}</li><li>接收路径handler(@PathVariable(动态路径key)类型形参名)<br>JSON</li><li>数据接收 handler(@RequestBody 实体类 对象)</li><li>准备工作：</li></ul><ol><li>导入jacksont依赖</li><li>@EnableWebMvc[加入handlerMapping加入handlerAdapter给handlerAdapteri配置json处理器]</li></ol></li><li><p>cookie接收<br>handler(@CookieValue(“cookie的名字”)</p></li><li><p>请求头接收<br>handler(@RequestHeader(“cookie的名字”)</p></li><li><p>原生api获取<br>handler(httpServletRequest,response,session)<br>ServletContext-&gt;ioc-&gt;全局变量@Autowired</p></li><li><p>共享域获取<br>原生api方式即可</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>SSM</category>
      
      <category>SpringMVC</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>5_原生Api对象操作</title>
    <link href="/2023/09/19/%E5%B0%9A%E7%A1%85%E8%B0%B7-SSM/SpringMVC/5_%E5%8E%9F%E7%94%9FApi%E5%AF%B9%E8%B1%A1%E6%93%8D%E4%BD%9C/"/>
    <url>/2023/09/19/%E5%B0%9A%E7%A1%85%E8%B0%B7-SSM/SpringMVC/5_%E5%8E%9F%E7%94%9FApi%E5%AF%B9%E8%B1%A1%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<h1 id="原生Api对象操作"><a href="#原生Api对象操作" class="headerlink" title="原生Api对象操作"></a>原生Api对象操作</h1><p>下表描述了支持的控制器方法参数</p><table><thead><tr><th>Controller method argument 控制器方法参数</th><th>Description</th></tr></thead><tbody><tr><td><code>jakarta.servlet.ServletRequest</code>, <code>jakarta.servlet.ServletResponse</code></td><td>请求&#x2F;响应对象</td></tr><tr><td><code>jakarta.servlet.http.HttpSession</code></td><td>强制存在会话。因此，这样的参数永远不会为 <code>null</code> 。</td></tr><tr><td><code>java.io.InputStream</code>, <code>java.io.Reader</code></td><td>用于访问由 Servlet API 公开的原始请求正文。</td></tr><tr><td><code>java.io.OutputStream</code>, <code>java.io.Writer</code></td><td>用于访问由 Servlet API 公开的原始响应正文。</td></tr><tr><td><code>@PathVariable</code></td><td>接收路径参数注解</td></tr><tr><td><code>@RequestParam</code></td><td>用于访问 Servlet 请求参数，包括多部分文件。参数值将转换为声明的方法参数类型。</td></tr><tr><td><code>@RequestHeader</code></td><td>用于访问请求标头。标头值将转换为声明的方法参数类型。</td></tr><tr><td><code>@CookieValue</code></td><td>用于访问Cookie。Cookie 值将转换为声明的方法参数类型。</td></tr><tr><td><code>@RequestBody</code></td><td>用于访问 HTTP 请求正文。正文内容通过使用 <code>HttpMessageConverter</code> 实现转换为声明的方法参数类型。</td></tr><tr><td><code>java.util.Map</code>, <code>org.springframework.ui.Model</code>, <code>org.springframework.ui.ModelMap</code></td><td>共享域对象，并在视图呈现过程中向模板公开。</td></tr><tr><td><code>Errors</code>, <code>BindingResult</code></td><td>验证和数据绑定中的错误信息获取对象！</td></tr></tbody></table><p><img src="/assets/image-20230919012218506.png" alt="image-20230919012218506"></p>]]></content>
    
    
    <categories>
      
      <category>SSM</category>
      
      <category>SpringMVC</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>4_Cookie数据以及请求头数据获取</title>
    <link href="/2023/09/19/%E5%B0%9A%E7%A1%85%E8%B0%B7-SSM/SpringMVC/4_Cookie%E6%95%B0%E6%8D%AE%E8%8E%B7%E5%8F%96/"/>
    <url>/2023/09/19/%E5%B0%9A%E7%A1%85%E8%B0%B7-SSM/SpringMVC/4_Cookie%E6%95%B0%E6%8D%AE%E8%8E%B7%E5%8F%96/</url>
    
    <content type="html"><![CDATA[<h1 id="Cookie数据以及请求头数据获取"><a href="#Cookie数据以及请求头数据获取" class="headerlink" title="Cookie数据以及请求头数据获取"></a>Cookie数据以及请求头数据获取</h1><h2 id="cookie数据的发送和获取"><a href="#cookie数据的发送和获取" class="headerlink" title="cookie数据的发送和获取"></a>cookie数据的发送和获取</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;cookie&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CookieController</span> &#123;<br>    <span class="hljs-meta">@RequestMapping(&quot;data&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">data</span><span class="hljs-params">(<span class="hljs-meta">@CookieValue(value = &quot;cookieName&quot;)</span> String value)</span>&#123;<br>        System.out.println(value);<br>        <span class="hljs-keyword">return</span> value;<br>    &#125;<br>    <span class="hljs-meta">@GetMapping(&quot;save&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">save</span><span class="hljs-params">(HttpServletResponse response)</span>&#123;<br>        <span class="hljs-type">Cookie</span> <span class="hljs-variable">cookie</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cookie</span>(<span class="hljs-string">&quot;cookieName&quot;</span>, <span class="hljs-string">&quot;root&quot;</span>);<br>        response.addCookie(cookie);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;ok&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20230919003822177.png" alt="image-20230919003822177"></p><p><img src="/assets/image-20230919003852660.png" alt="image-20230919003852660"></p><p><img src="/assets/image-20230919003924316.png" alt="image-20230919003924316"></p><h2 id="获取请求头的数据"><a href="#获取请求头的数据" class="headerlink" title="获取请求头的数据"></a>获取请求头的数据</h2><p>假设后台需要获取请求头中Host的值</p><p><img src="/assets/image-20230919004618918.png" alt="image-20230919004618918"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;header&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HeaderController</span> &#123;<br>    <span class="hljs-meta">@GetMapping(&quot;data&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">queryHeaderInfo</span><span class="hljs-params">(<span class="hljs-meta">@RequestHeader(&quot;Host&quot;)</span> String host)</span>&#123;<br>        System.out.println(host);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20230919005317746.png" alt="image-20230919005317746"></p><p><img src="/assets/image-20230919005401319.png" alt="image-20230919005401319"></p>]]></content>
    
    
    <categories>
      
      <category>SSM</category>
      
      <category>SpringMVC</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>3_@EnableWebMvc注解的说明</title>
    <link href="/2023/09/18/%E5%B0%9A%E7%A1%85%E8%B0%B7-SSM/SpringMVC/3_@EnableWebMvc%E6%B3%A8%E8%A7%A3%E7%9A%84%E8%AF%B4%E6%98%8E/"/>
    <url>/2023/09/18/%E5%B0%9A%E7%A1%85%E8%B0%B7-SSM/SpringMVC/3_@EnableWebMvc%E6%B3%A8%E8%A7%A3%E7%9A%84%E8%AF%B4%E6%98%8E/</url>
    
    <content type="html"><![CDATA[<h1 id="EnableWebMvc注解的说明"><a href="#EnableWebMvc注解的说明" class="headerlink" title="@EnableWebMvc注解的说明"></a>@EnableWebMvc注解的说明</h1><p>@EnableWebMvc注解效果等同于在 XML 配置中，可以使用 <a href="mvc:annotation-driven">mvc:annotation-driven</a> 元素！</p><p><em>handlerAdapter</em> <em>配置了<strong>json</strong>转化器</em></p><p><img src="/assets/image-20230918235131422.png" alt="image-20230918235131422"></p><p><img src="/assets/image-20230919000739046.png" alt="image-20230919000739046"></p><p><img src="/assets/image-20230919000941653.png" alt="image-20230919000941653"></p><p><img src="/assets/image-20230919001511379.png" alt="image-20230919001511379"></p><p><img src="/assets/image-20230919001521248.png" alt="image-20230919001521248"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableWebMvc</span> <span class="hljs-comment">//handlerAdapter 配置了json转化器</span><br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ComponentScan(&quot;com.Jmin.controller&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MvcConfig</span> &#123;<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>SSM</category>
      
      <category>SpringMVC</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>2_SpringMVC接收数据</title>
    <link href="/2023/09/17/%E5%B0%9A%E7%A1%85%E8%B0%B7-SSM/SpringMVC/2_SpringMVC%E6%8E%A5%E6%94%B6%E6%95%B0%E6%8D%AE/"/>
    <url>/2023/09/17/%E5%B0%9A%E7%A1%85%E8%B0%B7-SSM/SpringMVC/2_SpringMVC%E6%8E%A5%E6%94%B6%E6%95%B0%E6%8D%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="SpringMVC接收数据"><a href="#SpringMVC接收数据" class="headerlink" title="SpringMVC接收数据"></a>SpringMVC接收数据</h1><p>当我们定义一个<em>WebApplicationInitializer</em>接口的实现类，并且重写onStartup(ServletContext servletContext)方法，当服务器启动时，会自动加载此重写的方法。</p><h2 id="IOC装配原理"><a href="#IOC装配原理" class="headerlink" title="IOC装配原理"></a>IOC装配原理</h2><p>原因是：对初始配置类的父类<code>AbstractAnnotationConfigDispatcherServletInitializer</code> 展开</p><p><img src="/assets/image-20230917190635930.png" alt="image-20230917190635930"></p><p><img src="/assets/image-20230917190759614.png" alt="image-20230917190759614"></p><p><img src="/assets/image-20230917190819369.png" alt="image-20230917190819369"></p><p><img src="/assets/image-20230917190834222.png" alt="image-20230917190834222"></p><p><img src="/assets/image-20230917190911863.png" alt="image-20230917190911863"></p><p>在WebApplicationInitializer接口类中有官方注释到：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java">Interface to be implemented in Servlet environments in order to configure the ServletContext programmatically -- as opposed <span class="hljs-title function_">to</span> <span class="hljs-params">(or possibly in conjunction with)</span> the traditional web.xml-based approach.<br>Implementations of <span class="hljs-built_in">this</span> SPI will be detected automatically by SpringServletContainerInitializer, which itself is bootstrapped automatically by any Servlet container. See its Javadoc <span class="hljs-keyword">for</span> details on <span class="hljs-built_in">this</span> bootstrapping mechanism.<br>Example<br>The traditional, XML-based approach<br>Most Spring users building a web application will need to register Spring<span class="hljs-string">&#x27;s DispatcherServlet. For reference, in WEB-INF/web.xml, this would typically be done as follows:</span><br><span class="hljs-string">  &lt;servlet&gt;</span><br><span class="hljs-string">    &lt;servlet-name&gt;dispatcher&lt;/servlet-name&gt;</span><br><span class="hljs-string">    &lt;servlet-class&gt;</span><br><span class="hljs-string">      org.springframework.web.servlet.DispatcherServlet</span><br><span class="hljs-string">    &lt;/servlet-class&gt;</span><br><span class="hljs-string">    &lt;init-param&gt;</span><br><span class="hljs-string">      &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;</span><br><span class="hljs-string">      &lt;param-value&gt;/WEB-INF/spring/dispatcher-config.xml&lt;/param-value&gt;</span><br><span class="hljs-string">    &lt;/init-param&gt;</span><br><span class="hljs-string">    &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;</span><br><span class="hljs-string">  &lt;/servlet&gt;</span><br><span class="hljs-string"> </span><br><span class="hljs-string">  &lt;servlet-mapping&gt;</span><br><span class="hljs-string">    &lt;servlet-name&gt;dispatcher&lt;/servlet-name&gt;</span><br><span class="hljs-string">    &lt;url-pattern&gt;/&lt;/url-pattern&gt;</span><br><span class="hljs-string">  &lt;/servlet-mapping&gt;</span><br><span class="hljs-string">The code-based approach with WebApplicationInitializer</span><br><span class="hljs-string">Here is the equivalent DispatcherServlet registration logic, WebApplicationInitializer-style:</span><br><span class="hljs-string">  public class MyWebAppInitializer implements WebApplicationInitializer &#123;</span><br><span class="hljs-string"> </span><br><span class="hljs-string">     @Override</span><br><span class="hljs-string">     public void onStartup(ServletContext container) &#123;</span><br><span class="hljs-string">       XmlWebApplicationContext appContext = new XmlWebApplicationContext();</span><br><span class="hljs-string">       appContext.setConfigLocation(&quot;/WEB-INF/spring/dispatcher-config.xml&quot;);</span><br><span class="hljs-string"> </span><br><span class="hljs-string">       ServletRegistration.Dynamic dispatcher =</span><br><span class="hljs-string">         container.addServlet(&quot;dispatcher&quot;, new DispatcherServlet(appContext));</span><br><span class="hljs-string">       dispatcher.setLoadOnStartup(1);</span><br><span class="hljs-string">       dispatcher.addMapping(&quot;/&quot;);</span><br><span class="hljs-string">     &#125;</span><br><span class="hljs-string"> </span><br><span class="hljs-string">  &#125;</span><br></code></pre></td></tr></table></figure><p><img src="/assets/image-20230917193835280.png" alt="image-20230917193835280"></p><p><img src="/assets/image-20230917194144075.png" alt="image-20230917194144075"></p><p><img src="/assets/image-20230917194156608.png" alt="image-20230917194156608"></p><p><img src="/assets/image-20230917194626144.png" alt="image-20230917194626144"></p><p><img src="/assets/image-20230917194525926.png" alt="image-20230917194525926"></p><p><img src="/assets/image-20230917195958346.png" alt="image-20230917195958346"></p><p><img src="/assets/image-20230917195933623.png" alt="image-20230917195933623"></p><p><img src="/assets/image-20230917200533128.png" alt="image-20230917200533128"></p><p><img src="/assets/image-20230917200659421.png" alt="image-20230917200659421"><img src="/assets/image-20230917200925980.png" alt="image-20230917200925980"></p><h2 id="访问路径设置"><a href="#访问路径设置" class="headerlink" title="访问路径设置"></a>访问路径设置</h2><p>@RequestMapping</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs awk">@WebServlet(<span class="hljs-string">&quot;必须以/开头&quot;</span>)<br>@RequestMapping(没有以上要求)<br><span class="hljs-number">1</span>.精准地址【一个<span class="hljs-regexp">/多个】 /u</span>ser<span class="hljs-regexp">/login 或者/u</span>ser/login<br><span class="hljs-number">2</span>.支持模糊 * 任意一层字符串<br>          ** 任意层任意字符串<br>         <span class="hljs-regexp">/user/</span>* --&gt; <span class="hljs-regexp">/user/</span>a<br>         <span class="hljs-regexp">/user/</span>** --&gt; <span class="hljs-regexp">/user/</span>a<span class="hljs-regexp">/b/</span>c<br><span class="hljs-number">3</span>.类上和方法上可添加@RequestMapping<br>     类上提取通用访问地址<br>     方法上是具体的handler地址<br><span class="hljs-number">4</span>.请求方式指定<br>     客户端 -&gt; http(get | post | put | <span class="hljs-keyword">delete</span>) -&gt; DispatcherServlet -&gt; handler<br>     @RequestMapping 默认任何请求方式都可以访问<br>     指定请求方式 (value = <span class="hljs-string">&quot;login&quot;</span>,method = RequestMethod.POST) (value = <span class="hljs-string">&quot;register&quot;</span>,method = &#123;RequestMethod.GET,RequestMethod.POST&#125;)<br>     不符合请求方式出现<span class="hljs-number">405</span>异常<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br>    <span class="hljs-meta">@RequestMapping</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">index</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>    <span class="hljs-meta">@RequestMapping(value = &quot;login&quot;,method = RequestMethod.POST)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">login</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>    <span class="hljs-meta">@RequestMapping(value = &quot;register&quot;,method = &#123;RequestMethod.GET,RequestMethod.POST&#125;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">register</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>进阶注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-meta">@GetMapping(&quot;login&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">login</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@PostMapping(&quot;register&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">register</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><span class="hljs-comment">// 这些注解只能使用在方法上</span><br></code></pre></td></tr></table></figure><h2 id="接收参数"><a href="#接收参数" class="headerlink" title="接收参数"></a>接收参数</h2><h3 id="param和json参数对比"><a href="#param和json参数对比" class="headerlink" title="param和json参数对比"></a>param和json参数对比</h3><p>在HTTP请求中，可选择两种参数类型，如param和json类型</p><ol><li><p>参数编码：  </p><p> param 类型的参数会被编码为 ASCII 码。例如，假设 <code>name=john doe</code>，则会被编码为 <code>name=john%20doe</code>。而 JSON 类型的参数会被编码为 UTF-8。</p></li><li><p>参数顺序：  </p><p> param 类型的参数没有顺序限制。但是，JSON 类型的参数是有序的。JSON 采用键值对的形式进行传递，其中键值对是有序排列的。 </p></li><li><p>数据类型：  </p><p> param 类型的参数仅支持字符串类型、数值类型和布尔类型等简单数据类型。而 JSON 类型的参数则支持更复杂的数据类型，如数组、对象等。</p></li><li><p>嵌套性：  </p><p> param 类型的参数不支持嵌套。但是，JSON 类型的参数支持嵌套，可以传递更为复杂的数据结构。</p></li><li><p>可读性：  </p><p> param 类型的参数格式比 JSON 类型的参数更加简单、易读。但是，JSON 格式在传递嵌套数据结构时更加清晰易懂。</p></li></ol><p>总的来说，param 类型的参数适用于单一的数据传递，而 JSON 类型的参数则更适用于更复杂的数据结构传递。根据具体的业务需求，需要选择合适的参数类型。在实际开发中，常见的做法是：在 GET 请求中采用 param 类型的参数，而在 POST 请求中采用 JSON 类型的参数传递。</p><h3 id="param参数接收"><a href="#param参数接收" class="headerlink" title="param参数接收"></a>param参数接收</h3><h4 id="直接接收"><a href="#直接接收" class="headerlink" title="直接接收"></a>直接接收</h4><ul><li>浏览器访问：&#x2F;param&#x2F;data?name &#x3D; root&amp;age&#x3D;18</li><li>后端接收，形参列表填写对应名称的参数即可，请求参数名&#x3D;形参参数名即可<ol><li>名称相同</li><li>可以不传递，不报错</li></ol></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;param&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ParamController</span> &#123;<br><span class="hljs-comment">//    直接接收</span><br>    <span class="hljs-meta">@RequestMapping(&quot;data&quot;)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">data</span><span class="hljs-params">(String name,<span class="hljs-type">int</span> age)</span>&#123;<br>        System.out.println(name + <span class="hljs-string">&quot;,&quot;</span> + age);<br>        <span class="hljs-keyword">return</span> name + <span class="hljs-string">&quot;,&quot;</span> + age;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20230918103957970.png" alt="image-20230918103957970"></p><p><img src="/assets/image-20230918104033722.png" alt="image-20230918104033722"></p><h4 id="注解指定"><a href="#注解指定" class="headerlink" title="注解指定"></a>注解指定</h4><p>@RequestParam()</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">用法：@RequestParam<span class="hljs-params">(<span class="hljs-attr">value</span>=&quot;指定请求参数名，如果形参名和请求参数名一致，可以省略！如果不一致，强制使用请求参数名”，</span><br><span class="hljs-params"><span class="hljs-attr">required</span>=false前端是否必须传递此参数，默认是必须，不传400异常！，</span><br><span class="hljs-params"><span class="hljs-attr">defaultValue</span>=&quot;1&quot;当非必须传递false,可以设置默认值)</span><br></code></pre></td></tr></table></figure><p><img src="/assets/image-20230918105337942.png" alt="image-20230918105337942"></p><p><img src="/assets/image-20230918105848026.png" alt="image-20230918105848026"></p><h4 id="特殊值"><a href="#特殊值" class="headerlink" title="特殊值"></a>特殊值</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">一名多值 例如<span class="hljs-attribute">key</span>=1&amp;key=2 可以直接使用集合接值<br>/param/data2?<span class="hljs-attribute">dowhat</span>=play&amp;dowhat=study<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;data2&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">data2</span><span class="hljs-params">(List&lt;String&gt; dowhat)</span>&#123;<br>    dowhat.forEach(System.out::println);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;ok&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20230918110347945.png" alt="image-20230918110347945"></p><p>报错原因：形参之前没有加注解@RequestParam，就会将dowhat对应的一个字符串直接赋值到集合，类型异常!</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;data2&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">data2</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam</span> List&lt;String&gt; dowhat)</span>&#123;<br>    dowhat.forEach(System.out::println);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;ok&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20230918110633491.png" alt="image-20230918110633491"></p><h4 id="使用实体对象接值"><a href="#使用实体对象接值" class="headerlink" title="使用实体对象接值"></a>使用实体对象接值</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;data3&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">data3</span><span class="hljs-params">(User user)</span>&#123;<br>    System.out.println(user.getName() + <span class="hljs-string">&quot;,&quot;</span> + user.getAge());<br>    <span class="hljs-keyword">return</span> user.getName() + <span class="hljs-string">&quot;,&quot;</span> + user.getAge();<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20230918111629767.png" alt="image-20230918111629767"></p><p><img src="/assets/image-20230918111702082.png" alt="image-20230918111702082"></p><h4 id="路径参数接收"><a href="#路径参数接收" class="headerlink" title="路径参数接收"></a>路径参数接收</h4><p>路径传递参数是一种在 URL 路径中传递参数的方式。在 RESTful 的 Web 应用程序中，经常使用路径传递参数来表示资源的唯一标识符或更复杂的表示方式。而 Spring MVC 框架提供了<code>@PathVariable</code>注解来处理路径传递参数。</p><ol><li><p>设置动态路径</p></li><li><p>接收动态路径参数</p><p><img src="/assets/image-20230918113332663.png" alt="image-20230918113332663"></p></li></ol><h4 id="json参数接收"><a href="#json参数接收" class="headerlink" title="json参数接收"></a>json参数接收</h4><p>前端传递 JSON 数据时，Spring MVC 框架可以使用 @RequestBody 注解来将 JSON 数据转换为 Java 对象。@RequestBody 注解表示当前方法参数的值应该从请求体中获取，并且需要指定 value 属性来指示请求体应该映射到哪个参数上。</p><ol><li><p>前端发送json数据</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;张三&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">18</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;gender&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;男&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li><li><p>实体类创建</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">private</span> String gender;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;json&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JsonController</span> &#123;<br><span class="hljs-comment">//    data -&gt; 请求体post(name,age,gender)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-meta">@PostMapping(&quot;data1&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">data1</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> Person person)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;person:&quot;</span> + person);<br>        <span class="hljs-keyword">return</span> person.toString();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20230918152454177.png" alt="image-20230918152454177"></p><p>415异常解释</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">原因：java原生api只支持路径参数和param参数，但不支持<span class="hljs-type">json</span>，因为<span class="hljs-type">json</span>是前端的技术，<br>// 解决方案<br><span class="hljs-number">1.</span>导入相关依赖<br><span class="hljs-number">2.</span>给handlerAdapter配置<span class="hljs-type">json</span>转换器<br></code></pre></td></tr></table></figure><ol><li><p>导入相关依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-databind<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.15.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>在配置类上注解@EnableWebMvc</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ComponentScan(&quot;com.jmin.controller&quot;)</span><br><span class="hljs-meta">@EnableWebMvc</span> <span class="hljs-comment">//给handlerAdapter配置了json转化器</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MvcConfig</span> &#123;<br>&#125;<br><span class="hljs-comment">// 注意：此处不需要实现requestMappingHandlerAdapter()方法，因为标注了@EnableWebMvc </span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;demo1&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JsonController</span> &#123;<br>    <span class="hljs-meta">@PostMapping(&quot;json&quot;)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">demo1</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> User user)</span>&#123;<br>        System.out.println(user);<br>        <span class="hljs-keyword">return</span> user.toString();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20230918222057795.png" alt="image-20230918222057795"></p></li></ol></li></ol>]]></content>
    
    
    <categories>
      
      <category>SSM</category>
      
      <category>SpringMVC</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>1_SpringMVC简介和体验</title>
    <link href="/2023/09/17/%E5%B0%9A%E7%A1%85%E8%B0%B7-SSM/SpringMVC/1_SpringMVC%E7%AE%80%E4%BB%8B%E5%92%8C%E4%BD%93%E9%AA%8C/"/>
    <url>/2023/09/17/%E5%B0%9A%E7%A1%85%E8%B0%B7-SSM/SpringMVC/1_SpringMVC%E7%AE%80%E4%BB%8B%E5%92%8C%E4%BD%93%E9%AA%8C/</url>
    
    <content type="html"><![CDATA[<h1 id="SpringMVC简介和体验"><a href="#SpringMVC简介和体验" class="headerlink" title="SpringMVC简介和体验"></a>SpringMVC简介和体验</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Spring Web MVC是基于Servlet API构建的原始Web框架，从一开始就包含在Spring Framework中。正式名称“Spring Web MVC”来自其源模块的名称（ spring-webmvc ），但它通常被称为“Spring MVC”。</p><p>SpringMVC具备如下显著优势：</p><ul><li><strong>Spring 家族原生产品</strong>，与IOC容器等基础设施无缝对接</li><li>表述层各细分领域需要解决的问题<strong>全方位覆盖</strong>，提供<strong>全面解决方案</strong></li><li><strong>代码清新简洁</strong>，大幅度提升开发效率</li><li>内部组件化程度高，可插拔式组件<strong>即插即用</strong>，想要什么功能配置相应组件即可</li><li><strong>性能卓著</strong>，尤其适合现代大型、超大型互联网项目要求</li></ul><h2 id="主要作用"><a href="#主要作用" class="headerlink" title="主要作用"></a>主要作用</h2><p><img src="/assets/image-20230917093043440.png" alt="image-20230917093043440"></p><p>SpringMVC的作用主要覆盖的是表述层，例如：</p><ul><li>请求映射</li><li>数据输入</li><li>视图界面</li><li>请求分发</li><li>表单回显</li><li>会话控制</li><li>过滤拦截</li><li>异步交互</li><li>文件上传</li><li>文件下载</li><li>数据校验</li><li>类型转换</li><li>等等等</li></ul><p><strong>最终总结：</strong></p><ol><li>简化前端参数接收( 形参列表 )</li><li>简化后端数据响应(返回值)</li><li>以及其他……</li></ol><h2 id="核心组件和调用流程理解"><a href="#核心组件和调用流程理解" class="headerlink" title="核心组件和调用流程理解"></a>核心组件和调用流程理解</h2><p><img src="/assets/image-20230917095931165.png" alt="image-20230917095931165"></p><p><img src="/assets/image-20230917095943019.png" alt="image-20230917095943019"></p><p>组件的理解：</p><ol><li>DispatcherServlet :  SpringMVC提供，我们需要使用web.xml配置使其生效，它是整个流程处理的核心，所有请求都经过它的处理和分发！[ CEO ]</li><li>HandlerMapping :  SpringMVC提供，我们需要进行IoC配置使其加入IoC容器方可生效，它内部缓存handler(controller方法)和handler访问路径数据，被DispatcherServlet调用，用于查找路径对应的handler！[秘书]</li><li>HandlerAdapter : SpringMVC提供，我们需要进行IoC配置使其加入IoC容器方可生效，它可以处理请求参数和处理响应数据数据，每次DispatcherServlet都是通过handlerAdapter间接调用handler，他是handler和DispatcherServlet之间的适配器！[经理]</li><li>Handler : handler又称处理器，他是Controller类内部的方法简称，是由我们自己定义，用来接收参数，向后调用业务，最终返回响应结果！[打工人]</li><li>ViewResovler : SpringMVC提供，我们需要进行IoC配置使其加入IoC容器方可生效！视图解析器主要作用简化模版视图页面查找的，但是需要注意，前后端分离项目，<strong>后端只返回JSON数据</strong>，不返回页面，那就不需要视图解析器！所以，视图解析器，相对其他的组件不是必须的！[财务]</li></ol><blockquote><p>当一个请求经过DispatcherServlet之后，会先走HandlerMapping,它会将请求映射为HandlerExecutionChain,依次经过<br>HandlerInterceptor有点类似于之前我们所学的过滤器，不过在SpringMVC中我们使用的是拦截器，然后再交给HandlerAdapter,<br>根据请求的路径选择合适的控制器进行处理，控制器处理完成之后，会返回一个ModelAndView对象，包括数据模型和视图，通俗的讲就<br>是页面中数据和页面本身（只包含视图名称即可）。<br>返回ModelAndView之后，会交给ViewResolver(视图解析器)进行处理，视图解析器会对整个视图页面进行解析，SpringMVC自带<br>了一些视图解析器，但是只适用于JSP页面，我们也可以像之前一样使用Thymeleaf作为视图解析器，这样我们就可以根据给定的视图名<br>称，直接读取HTML编写的页面，解析为一个真正的View。<br>解析完成后，就需要将页面中的数据全部渲染到View中，最后返回给DispatcherServlet一个包含所有数据的成形页面，再响应给浏览<br>器，完成整个过程。<br>因此，实际上整个过程我们只需要编写对应请求路径的的Controller以及配置好我们需要的ViewResolver即可，之后还可以继续补充添加<br>拦截器，而其他的流程已经由SpringMVC帮助我们完成了。</p></blockquote><h2 id="体验"><a href="#体验" class="headerlink" title="体验"></a>体验</h2><h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p><img src="/assets/image-20230917101637081.png" alt="image-20230917101637081"></p><h3 id="配置分析"><a href="#配置分析" class="headerlink" title="配置分析"></a>配置分析</h3><ol><li>DispatcherServlet，设置处理所有请求！</li><li>HandlerMapping,HandlerAdapter,Handler需要加入到IoC容器，供DS调用！</li><li>Handler自己声明（Controller）需要配置到HandlerMapping中供DS查找！</li></ol><h3 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs xml">  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-context<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>6.0.10<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-comment">&lt;!--        servlet相关依赖--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>jakarta.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jakarta.servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-comment">&lt;!--        SpringMVC相关依赖--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webmvc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>6.0.10<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.tomcat<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>tomcat-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-comment">&lt;!--        对应使用的tomcat版本--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>10.1.13<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/assets/image-20230917103816239.png" alt="image-20230917103816239"></p><p><img src="/assets/image-20230917103943113.png" alt="image-20230917103943113"></p><p>发现webapp文件夹没变蓝，刷新maven</p><p><img src="/assets/image-20230917104205968.png" alt="image-20230917104205968"></p><p><img src="/assets/image-20230917104154057.png" alt="image-20230917104154057"></p><h3 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloController</span> &#123;<br>    <span class="hljs-comment">//    handler -&gt; springmvc</span><br>    <span class="hljs-meta">@RequestMapping(&quot;springmvc/hello&quot;)</span> <span class="hljs-comment">//对外访问的地址，到handlerMapping注册的注解</span><br>    <span class="hljs-meta">@ResponseBody</span> <span class="hljs-comment">//直接返回字符串给前端，不用找视图解析器</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;hello()&quot;</span>);<br><span class="hljs-comment">//        返回给前端</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello mvc&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="配置类"><a href="#配置类" class="headerlink" title="配置类"></a>配置类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringMVCInit</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractAnnotationConfigDispatcherServletInitializer</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> Class&lt;?&gt;[] getRootConfigClasses() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[<span class="hljs-number">0</span>];<br>    &#125;<br><br><span class="hljs-comment">//    设置项目对应的配置</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> Class&lt;?&gt;[] getServletConfigClasses() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;mvcConfig.class&#125;;<br>    &#125;<br><br><span class="hljs-comment">//    配置Springmvc内部自带的servlet的访问地址</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> String[] getServletMappings() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;/&quot;</span>&#125;;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="启动测试"><a href="#启动测试" class="headerlink" title="启动测试"></a>启动测试</h3><p><img src="/assets/image-20230917110824794.png" alt="image-20230917110824794"></p><p><img src="/assets/image-20230917112552815.png" alt="image-20230917112552815"></p>]]></content>
    
    
    <categories>
      
      <category>SSM</category>
      
      <category>SpringMVC</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>10_Mybatis总结</title>
    <link href="/2023/09/17/%E5%B0%9A%E7%A1%85%E8%B0%B7-SSM/MyBatis/10_Mybatis%E6%80%BB%E7%BB%93/"/>
    <url>/2023/09/17/%E5%B0%9A%E7%A1%85%E8%B0%B7-SSM/MyBatis/10_Mybatis%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="Mybatis总结"><a href="#Mybatis总结" class="headerlink" title="Mybatis总结"></a>Mybatis总结</h1><table><thead><tr><th>核心点</th><th>掌握目标</th></tr></thead><tbody><tr><td>mybatis基础</td><td>使用流程, 参数输入,#{} ${},参数输出</td></tr><tr><td>mybatis多表</td><td>实体类设计,resultMap多表结果映射</td></tr><tr><td>mybatis动态语句</td><td>Mybatis动态语句概念, where , if , foreach标签</td></tr><tr><td>mybatis扩展</td><td>Mapper批量处理,分页插件,逆向工程</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>SSM</category>
      
      <category>MyBatis</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>9_逆向工程和MybatisX插件</title>
    <link href="/2023/09/16/%E5%B0%9A%E7%A1%85%E8%B0%B7-SSM/MyBatis/9_%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E5%92%8CMybatisX%E6%8F%92%E4%BB%B6/"/>
    <url>/2023/09/16/%E5%B0%9A%E7%A1%85%E8%B0%B7-SSM/MyBatis/9_%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E5%92%8CMybatisX%E6%8F%92%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="逆向工程和MybatisX插件"><a href="#逆向工程和MybatisX插件" class="headerlink" title="逆向工程和MybatisX插件"></a>逆向工程和MybatisX插件</h1><h2 id="ORM思维"><a href="#ORM思维" class="headerlink" title="ORM思维"></a>ORM思维</h2><p>ORM(Object-Relational Mapping，对象-关系映射)</p><p>这是一种将数据库和面向对象编程语言中的对象之间进行转换的技术。它将对象和关系数据库的概念进行映射，最后我们就可以通过方法调用进行数据库操作!!</p><p>最终: <strong>让我们可以使用面向对象思维进行数据库操作！！！</strong></p><p><img src="/assets/image-20230916234726067.png" alt="image-20230916234726067"></p><h2 id="ORM-框架通常有半自动和全自动两种方式"><a href="#ORM-框架通常有半自动和全自动两种方式" class="headerlink" title="ORM 框架通常有半自动和全自动两种方式"></a>ORM 框架通常有半自动和全自动两种方式</h2><ul><li>半自动 ORM 通常需要程序员手动编写 SQL 语句或者配置文件，将实体类和数据表进行映射，还需要手动将查询的结果集转换成实体对象。</li><li>全自动 ORM 则是将实体类和数据表进行自动映射，使用 API 进行数据库操作时，ORM 框架会自动执行 SQL 语句并将查询结果转换成实体对象，程序员无需再手动编写 SQL 语句和转换代码。</li></ul><h2 id="半自动和全自动-ORM-框架的区别"><a href="#半自动和全自动-ORM-框架的区别" class="headerlink" title="半自动和全自动 ORM 框架的区别"></a>半自动和全自动 ORM 框架的区别</h2><ol><li>映射方式：半自动 ORM 框架需要程序员手动指定实体类和数据表之间的映射关系，通常使用 XML 文件或注解方式来指定；全自动 ORM 框架则可以自动进行实体类和数据表的映射，无需手动干预。</li><li>查询方式：半自动 ORM 框架通常需要程序员手动编写 SQL 语句并将查询结果集转换成实体对象；全自动 ORM 框架可以自动组装 SQL 语句、执行查询操作，并将查询结果转换成实体对象。</li><li>性能：由于半自动 ORM 框架需要手动编写 SQL 语句，因此程序员必须对 SQL 语句和数据库的底层知识有一定的了解，才能编写高效的 SQL 语句；而全自动 ORM 框架通过自动优化生成的 SQL 语句来提高性能，程序员无需进行优化。</li><li>学习成本：半自动 ORM 框架需要程序员手动编写 SQL 语句和映射配置，要求程序员具备较高的数据库和 SQL 知识；全自动 ORM 框架可以自动生成 SQL 语句和映射配置，程序员无需了解过多的数据库和 SQL 知识。</li></ol><p>常见的半自动 ORM 框架包括 MyBatis 等；常见的全自动 ORM 框架包括 Hibernate、Spring Data JPA、MyBatis-Plus 等。</p><h2 id="MybatisX插件"><a href="#MybatisX插件" class="headerlink" title="MybatisX插件"></a>MybatisX插件</h2><p><strong>半自动orm框架，也能实现单表的crud自动生成的逆向工程：半自动orm -&gt; 全自动orm迈进</strong></p><p>但是需要注意，逆向工程只能生成CRUD的操作，多表查询依然需要自己编写！</p><ol><li><p>安装插件</p><p><img src="/assets/image-20230917000632173.png" alt="image-20230917000632173"></p></li><li><p>连接数据库</p><p><img src="/assets/image-20230917001255410.png" alt="image-20230917001255410"></p><p><img src="/assets/image-20230917001642649.png" alt="image-20230917001642649"></p></li><li><p>mybatisx配置</p><p><img src="/assets/image-20230917002559830.png" alt="image-20230917002559830"></p><p><img src="/assets/image-20230917002700490.png" alt="image-20230917002700490"></p></li><li><p>生成src</p><p><img src="/assets/image-20230917002943396.png" alt="image-20230917002943396"></p></li></ol>]]></content>
    
    
    <categories>
      
      <category>SSM</category>
      
      <category>MyBatis</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>8_MyBatis高级扩展</title>
    <link href="/2023/09/16/%E5%B0%9A%E7%A1%85%E8%B0%B7-SSM/MyBatis/8_MyBatis%E9%AB%98%E7%BA%A7%E6%89%A9%E5%B1%95/"/>
    <url>/2023/09/16/%E5%B0%9A%E7%A1%85%E8%B0%B7-SSM/MyBatis/8_MyBatis%E9%AB%98%E7%BA%A7%E6%89%A9%E5%B1%95/</url>
    
    <content type="html"><![CDATA[<h1 id="MyBatis高级扩展"><a href="#MyBatis高级扩展" class="headerlink" title="MyBatis高级扩展"></a>MyBatis高级扩展</h1><h2 id="mapper映射"><a href="#mapper映射" class="headerlink" title="mapper映射"></a>mapper映射</h2><p>建议使用此方式！</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.jmin.mapper&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><p>批量指定，要求xml文件和mapper文件的命名必须相同</p></li><li><p>要求打包的位置必须一致，都是指定的包地址</p><ul><li><p>方案1 xml文件放进mapper类包中</p><p><img src="/assets/image-20230916220853224.png" alt="image-20230916220853224"></p><p>打包后发现，mapper.xml没有被打包进行mapper类包中，解决方法是在maven中添加build(不推荐)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/java<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.*<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><p>再次打包结果：</p><p><img src="/assets/image-20230916221557844.png" alt="image-20230916221557844"></p></li><li><p>方案2：resource文件下创建对应的文件夹结构</p><p><img src="/assets/image-20230916221721699.png" alt="image-20230916221721699"></p><p><img src="/assets/image-20230916223240295.png" alt="image-20230916223240295"></p></li></ul></li></ul><h2 id="插件和分页插件PageHelper"><a href="#插件和分页插件PageHelper" class="headerlink" title="插件和分页插件PageHelper"></a>插件和分页插件PageHelper</h2><h3 id="插件机制和PageHelper插件介绍"><a href="#插件机制和PageHelper插件介绍" class="headerlink" title="插件机制和PageHelper插件介绍"></a>插件机制和PageHelper插件介绍</h3><p>MyBatis对插件进行了标准化的设计，并提供了一套可扩展的插件机制。插件可以在用于语句执行过程中进行拦截，并允许通过自定义处理程序来拦截和修改 SQL 语句、映射语句的结果等。</p><p><img src="/assets/image-20230916224530940.png" alt="image-20230916224530940"></p><p><strong>PageHelper</strong></p><p>以往的分页操作：</p><p><img src="/assets/image-20230916224709446.png" alt="image-20230916224709446"></p><p>使用PageHelper插件：</p><p><img src="/assets/image-20230916224744469.png" alt="image-20230916224744469"></p><p>使用步骤</p><ol><li><p>maven依赖导入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.github.pagehelper<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>pagehelper<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>config.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span> <span class="hljs-attr">interceptor</span>=<span class="hljs-string">&quot;com.github.pagehelper.PageInterceptor&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;helperDialect&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;mysql&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>mapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.jmin.mapper.EmployeeMapper&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queryList&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;employee&quot;</span>&gt;</span><br>        select *<br>        from t_emp where emp_salary &gt; 100<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>test</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-comment">//        使用pageHelper插件</span><br>        <span class="hljs-type">EmployeeMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(EmployeeMapper.class);<br><span class="hljs-comment">//        调用之前，先设置分页数据</span><br>        PageHelper.startPage(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>);<span class="hljs-comment">//第1页查询2两个数据</span><br>        List&lt;Employee&gt; employees = mapper.queryList();<br><span class="hljs-comment">//       将查询数据封装到PageInfo的分页实体类中</span><br>        PageInfo&lt;Employee&gt; pageInfo = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PageInfo</span>&lt;&gt;(employees);<br><span class="hljs-comment">//        pageInfo获取分页的数据</span><br><span class="hljs-comment">//        当前页的数据</span><br>        List&lt;Employee&gt; list = pageInfo.getList();<br>        System.out.println(list);<br><span class="hljs-comment">//        获取总条数</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">total</span> <span class="hljs-operator">=</span> pageInfo.getTotal();<br>        System.out.println(total);<br><span class="hljs-comment">//        获取总页数</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">pageNum</span> <span class="hljs-operator">=</span> pageInfo.getPageNum();<br>        System.out.println(pageNum);<br>    &#125;<br></code></pre></td></tr></table></figure><p><strong>需要注意，多条查询不能装到一个分页区</strong></p></li></ol>]]></content>
    
    
    <categories>
      
      <category>SSM</category>
      
      <category>MyBatis</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>7_Mybatis动态语句</title>
    <link href="/2023/09/15/%E5%B0%9A%E7%A1%85%E8%B0%B7-SSM/MyBatis/7_Mybatis%E5%8A%A8%E6%80%81%E8%AF%AD%E5%8F%A5/"/>
    <url>/2023/09/15/%E5%B0%9A%E7%A1%85%E8%B0%B7-SSM/MyBatis/7_Mybatis%E5%8A%A8%E6%80%81%E8%AF%AD%E5%8F%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="Mybatis动态语句"><a href="#Mybatis动态语句" class="headerlink" title="Mybatis动态语句"></a>Mybatis动态语句</h1><p>在JDBC 或其它类似的框架</p><p>需要根据不同条件拼接 SQL 语句十分繁琐，例如拼接时要确保不能忘记添加必要的空格，还要注意去掉列表最后一个列名的逗号。利用动态 SQL，可以彻底摆脱这种问题。</p><p>动态 SQL 并非一件易事，但借助可用于任何 SQL 映射语句中的强大的动态 SQL 语言，MyBatis 显著地提升了这一特性的易用性。在 MyBatis 之前的版本中，需要花时间了解大量的元素。借助功能强大的基于 OGNL 的表达式，MyBatis 3 替换了之前的大部分元素，大大精简了元素种类，现在要学习的元素种类比原来的一半还要少。</p><h2 id="if和where标签"><a href="#if和where标签" class="headerlink" title="if和where标签"></a>if和where标签</h2><p>对于<code>select * from t_emp where emp_name = #&#123;empName&#125; and emp_salary = #&#123;empSalary&#125;</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;name != null&quot;</span>&gt;</span><br>     emp_name = #&#123;name&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br></code></pre></td></tr></table></figure><p>if标签，text值为条件语句，能读取mapper接口中的方法参数，在text值中需要注意的是大小于号不推荐直接写符号，可以用<code>&amp;gt;</code>代替<code>&gt;</code>，用<code>&amp;lt</code>代替<code>&lt;</code></p><p>即</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;salary != null and salary <span class="hljs-symbol">&amp;gt;</span> 100&quot;</span>&gt;</span><br>    and emp_salary = #&#123;salary&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br></code></pre></td></tr></table></figure><p>此刻有个细节在于<code>and</code>是否要删除，可以将整个if语句用where标签框起来</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;query&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;employee&quot;</span>&gt;</span><br>    select *<br>    from t_emp<br>    <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;name != null&quot;</span>&gt;</span><br>            emp_name = #&#123;name&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;salary != null and salary <span class="hljs-symbol">&amp;gt;</span> 100&quot;</span>&gt;</span><br>            and emp_salary = #&#123;salary&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>如果where标签有任意一个if可以满足，自动添加where关键字，不满足则会去除where</li><li>自动删除and和or关键字</li></ul><p><img src="/assets/image-20230915204900653.png" alt="image-20230915204900653"></p><p><img src="/assets/image-20230915204946671.png" alt="image-20230915204946671"></p><h2 id="set标签"><a href="#set标签" class="headerlink" title="set标签"></a>set标签</h2><p>对于update t_emp set emp_name &#x3D; #{empName},emp_salary&#x3D;#{empSalary} where emp_id &#x3D; #{empId};</p><p>先配合if标签</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;update&quot;</span>&gt;</span><br>    update t_emp<br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;empName != null&quot;</span>&gt;</span><br>            emp_name = #&#123;empName&#125;,<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;empSalary != null&quot;</span>&gt;</span><br>            emp_salary = #&#123;empSalary&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    where emp_id = #&#123;empId&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>两个if全部满足没问题</li><li>第一个if满足第二个if不满足，多一个逗号<code>,</code></li><li>第二个if满足第一个if不满足，没问题</li><li>两个都不满足，语法错误！</li></ul><p>再配合set标签，可以解决逗号问题</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;update&quot;</span>&gt;</span><br>    update t_emp<br>        <span class="hljs-tag">&lt;<span class="hljs-name">set</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;empName != null&quot;</span>&gt;</span><br>                emp_name = #&#123;empName&#125;,<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;empSalary != null&quot;</span>&gt;</span><br>                emp_salary = #&#123;empSalary&#125;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">set</span>&gt;</span><br>    where emp_id = #&#123;empId&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/assets/image-20230915212952656.png" alt="image-20230915212952656"></p><p><img src="/assets/image-20230915213150891.png" alt="image-20230915213150891"></p><p><img src="/assets/image-20230915213232629.png" alt="image-20230915213232629"></p><h2 id="trim（了解）"><a href="#trim（了解）" class="headerlink" title="trim（了解）"></a>trim（了解）</h2><p>使用trim标签控制条件部分两端是否包含某些字符</p><ul><li>prefix 制定动态添加的前缀</li><li>suffix 指定要动态添加的后缀</li><li>prefixOverrides 指定要动态去掉的前缀，使用”|”分割有可能的多个值</li><li>suffixOverrides 指定要动态去掉的后缀，使用”|”分隔有可能的多个值</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queryTrim&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;employee&quot;</span>&gt;</span><br>        select *<br>        from t_emp<br>        <span class="hljs-tag">&lt;<span class="hljs-name">trim</span> <span class="hljs-attr">prefix</span>=<span class="hljs-string">&quot;where&quot;</span> <span class="hljs-attr">prefixOverrides</span>=<span class="hljs-string">&quot;and&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;name != null&quot;</span>&gt;</span><br>                emp_name = #&#123;name&#125;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;salary != null and salary <span class="hljs-symbol">&amp;gt;</span> 100&quot;</span>&gt;</span><br>                and emp_salary = #&#123;salary&#125;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">trim</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>    <br><br><span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;updateTrim&quot;</span>&gt;</span><br>        update t_emp<br>        <span class="hljs-tag">&lt;<span class="hljs-name">trim</span> <span class="hljs-attr">prefix</span>=<span class="hljs-string">&quot;set&quot;</span> <span class="hljs-attr">suffixOverrides</span>=<span class="hljs-string">&quot;,&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;empName != null&quot;</span>&gt;</span><br>                emp_name = #&#123;empName&#125;,<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;empSalary != null&quot;</span>&gt;</span><br>                emp_salary = #&#123;empSalary&#125;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">trim</span>&gt;</span><br>        where emp_id = #&#123;empId&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="choose-when-otherwise"><a href="#choose-when-otherwise" class="headerlink" title="choose&#x2F;when&#x2F;otherwise"></a>choose&#x2F;when&#x2F;otherwise</h2><p>与between cace break相当;只有一个when标签满足</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queryChoose&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;employee&quot;</span>&gt;</span><br>    select * from t_emp<br>    where<br>        <span class="hljs-tag">&lt;<span class="hljs-name">choose</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">when</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;name != null&quot;</span>&gt;</span><br>                emp_name = #&#123;name&#125;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">when</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">when</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;salary != null&quot;</span>&gt;</span><br>                emp_salary = #&#123;salary&#125;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">when</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">otherwise</span>&gt;</span>1=1<span class="hljs-tag">&lt;/<span class="hljs-name">otherwise</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">choose</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/assets/image-20230915225559499.png" alt="image-20230915225559499"></p><p><img src="/assets/image-20230915225624755.png" alt="image-20230915225624755"></p><ul><li>第一种情况：第一个when满足条件emp_name &#x3D; #{name}</li><li>第二种情况：第二个when满足条件emp_salary &#x3D; #{salary}</li><li>第三种情况：两个when都不满足where1&#x3D;1执行了otherwise</li></ul><h2 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a>foreach</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">open</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">item</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">close</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">nullable</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">collection</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;ids | arg0 | list&quot;</span><br>open 遍历之前要追加的字符串<br>separator 每次遍历中间的分割符号，最后一次不会追加<br>item 获取每个遍历项，遍历的内容<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queryBatch&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;employee&quot;</span>&gt;</span><br>    select * from t_emp<br>    where emp_id in<br>    <span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;ids&quot;</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot;,&quot;</span> <span class="hljs-attr">open</span>=<span class="hljs-string">&quot;(&quot;</span> <span class="hljs-attr">close</span>=<span class="hljs-string">&quot;)&quot;</span> <span class="hljs-attr">item</span>=<span class="hljs-string">&quot;id&quot;</span>&gt;</span><br>        #&#123;id&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/assets/image-20230915232421609.png" alt="image-20230915232421609"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;updateBatch&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;employeeList&quot;</span> <span class="hljs-attr">item</span>=<span class="hljs-string">&quot;employee&quot;</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot;;&quot;</span>&gt;</span><br>        update t_emp set emp_name = #&#123;employee.empName&#125;,emp_salary = #&#123;employee.empSalary&#125; where emp_id = #&#123;employee.empId&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/assets/image-20230916000439011.png" alt="image-20230916000439011"></p><p>如果单条update标签中执行批量多条sql语句，会报错。解决方法：在资源配置文件中设置允许多语句执行</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">jmin.dev.url=jdbc:mysql:///mybatis-example?allowMultiQueries=true<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20230916000659310.png" alt="image-20230916000659310"></p><p>设置后：</p><p><img src="/assets/image-20230916000840552.png" alt="image-20230916000840552"></p><p><img src="/assets/image-20230916000856701.png" alt="image-20230916000856701"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queryBatch&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;employee&quot;</span>&gt;</span><br>    select * from t_emp<br>    where emp_id in<br>    <span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;ids&quot;</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot;,&quot;</span> <span class="hljs-attr">open</span>=<span class="hljs-string">&quot;(&quot;</span> <span class="hljs-attr">close</span>=<span class="hljs-string">&quot;)&quot;</span> <span class="hljs-attr">item</span>=<span class="hljs-string">&quot;id&quot;</span>&gt;</span><br>        #&#123;id&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;deleteBatch&quot;</span>&gt;</span><br>    delete from t_emp where id in<br>    <span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;ids&quot;</span> <span class="hljs-attr">item</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">open</span>=<span class="hljs-string">&quot;(&quot;</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot;,&quot;</span> <span class="hljs-attr">close</span>=<span class="hljs-string">&quot;)&quot;</span>&gt;</span><br>        #&#123;id&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insertBatch&quot;</span>&gt;</span><br>    insert into t_emp(emp_name,emp_salary) values<br>    <span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;employeeList&quot;</span>  <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot;,&quot;</span> <span class="hljs-attr">item</span>=<span class="hljs-string">&quot;employee&quot;</span>&gt;</span><br>        (#&#123;employee.empName&#125;,#&#123;employee.empSalary&#125;)<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;updateBatch&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;employeeList&quot;</span> <span class="hljs-attr">item</span>=<span class="hljs-string">&quot;employee&quot;</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot;;&quot;</span>&gt;</span><br>        update t_emp set emp_name = #&#123;employee.empName&#125;,emp_salary = #&#123;employee.empSalary&#125; where emp_id = #&#123;employee.empId&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="SQL片段"><a href="#SQL片段" class="headerlink" title="SQL片段"></a>SQL片段</h2><p>提取sql片段，减少sql冗余</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">sql</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectSql&quot;</span>&gt;</span><br>    select *<br>    from t_emp;<br><span class="hljs-tag">&lt;/<span class="hljs-name">sql</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;query&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;employee&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">refid</span>=<span class="hljs-string">&quot;select&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;name!=null&quot;</span>&gt;</span><br>            emp_name = #&#123;name&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;salary!=null&quot;</span>&gt;</span><br>            emp_salary = #&#123;salary&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>SSM</category>
      
      <category>MyBatis</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>6_Mybatis多表映射</title>
    <link href="/2023/09/14/%E5%B0%9A%E7%A1%85%E8%B0%B7-SSM/MyBatis/6_Mybatis%E5%A4%9A%E8%A1%A8%E6%98%A0%E5%B0%84/"/>
    <url>/2023/09/14/%E5%B0%9A%E7%A1%85%E8%B0%B7-SSM/MyBatis/6_Mybatis%E5%A4%9A%E8%A1%A8%E6%98%A0%E5%B0%84/</url>
    
    <content type="html"><![CDATA[<h1 id="Mybatis多表映射"><a href="#Mybatis多表映射" class="headerlink" title="Mybatis多表映射"></a>Mybatis多表映射</h1><h2 id="多表查询概论"><a href="#多表查询概论" class="headerlink" title="多表查询概论"></a>多表查询概论</h2><p><img src="/assets/image-20230914223109998.png" alt="image-20230914223109998"></p><h3 id="实体类设计方案"><a href="#实体类设计方案" class="headerlink" title="实体类设计方案"></a>实体类设计方案</h3><p>多表关系回顾：（双向查看）</p><ul><li><p>一对一</p><p>  夫妻关系，人和身份证号</p></li><li><p>一对多| 多对一</p><p>  用户和订单，锁和钥匙</p></li><li><p>多对多</p><p>  老师和学生，部门和员工</p></li></ul><p>实体类设计关系(查询)：（单向查看）</p><ul><li><p>对一 ： 夫妻一方对应另一方，订单对应用户都是对一关系</p><p>  实体类设计：对一关系下，类中只要包含单个对方对象类型属性即可！</p><p>  例如：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Customer</span> &#123;<br>  <span class="hljs-keyword">private</span> Integer customerId;<br>  <span class="hljs-keyword">private</span> String customerName;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Order</span> &#123;<br><br>  <span class="hljs-keyword">private</span> Integer orderId;<br>  <span class="hljs-keyword">private</span> String orderName;<br>  <span class="hljs-keyword">private</span> Customer customer;<span class="hljs-comment">// 体现的是对一的关系</span><br><br>&#125;  <br><br></code></pre></td></tr></table></figure><ul><li><p>对多: 用户对应的订单，讲师对应的学生或者学生对应的讲师都是对多关系：</p><p>  实体类设计：对多关系下，类中只要包含对方类型集合属性即可！</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Customer</span> &#123;<br>  <span class="hljs-keyword">private</span> Integer customerId;<br>  <span class="hljs-keyword">private</span> String customerName;<br>  <span class="hljs-keyword">private</span> List&lt;Order&gt; orderList;<span class="hljs-comment">// 体现的是对多的关系</span><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Order</span> &#123;<br><br>  <span class="hljs-keyword">private</span> Integer orderId;<br>  <span class="hljs-keyword">private</span> String orderName;<br>  <span class="hljs-keyword">private</span> Customer customer;<span class="hljs-comment">// 体现的是对一的关系</span><br>  <br>&#125;<br><br><span class="hljs-comment">//查询客户和客户对应的订单集合  不要管!</span><br></code></pre></td></tr></table></figure><p>多表结果实体类设计小技巧：</p><ul><li>对一，属性中包含对方对象</li><li>对多，属性中包含对方对象集合</li></ul><blockquote><p>只有真实发生多表查询时，才需要设计和修改实体类，否则不提前设计和修改实体类！</p></blockquote><p>  无论多少张表联查，实体类设计都是两两考虑!</p><p>  在查询映射的时候，只需要关注本次查询相关的属性！</p><p>例如：查询订单和对应的客户，就不要关注客户中的订单集合！</p><h2 id="对一映射"><a href="#对一映射" class="headerlink" title="对一映射"></a>对一映射</h2><h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p>根据ID查询订单，以及订单关联的用户的信息</p><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `t_customer` (`customer_id` <span class="hljs-type">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT, `customer_name` <span class="hljs-type">CHAR</span>(<span class="hljs-number">100</span>), <span class="hljs-keyword">PRIMARY</span> KEY (`customer_id`) );<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `t_order` ( `order_id` <span class="hljs-type">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT, `order_name` <span class="hljs-type">CHAR</span>(<span class="hljs-number">100</span>), `customer_id` <span class="hljs-type">INT</span>, <span class="hljs-keyword">PRIMARY</span> KEY (`order_id`) ); <br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `t_customer` (`customer_name`) <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;c01&#x27;</span>);<br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `t_order` (`order_name`, `customer_id`) <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;o1&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `t_order` (`order_name`, `customer_id`) <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;o2&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `t_order` (`order_name`, `customer_id`) <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;o3&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>); <br></code></pre></td></tr></table></figure><blockquote><p>实际开发时，一般在开发过程中，不给数据库表设置外键约束。 原因是避免调试不方便。 一般是功能开发完成，再加外键约束检查是否有bug。</p></blockquote><h3 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Order</span> &#123;<br>    <span class="hljs-keyword">private</span> Integer orderId;<br>    <span class="hljs-keyword">private</span> String orderName;<br>    <span class="hljs-keyword">private</span> Integer customerId;<br>    <span class="hljs-comment">//一个订单对应一个客户</span><br>    <span class="hljs-keyword">private</span> Customer customer;<br>&#125;<br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Customer</span> &#123;<br>    <span class="hljs-keyword">private</span> Integer customerId;<br>    <span class="hljs-keyword">private</span> String customerName;<br><span class="hljs-comment">//    一个客户对应多个订单 对多就是对方类型的集合</span><br>    <span class="hljs-keyword">private</span> List&lt;Order&gt; orders;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="mapper"><a href="#mapper" class="headerlink" title="mapper"></a>mapper</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">OrderMapper</span> &#123;<br>    Order <span class="hljs-title function_">queryOrderById</span><span class="hljs-params">(Integer id)</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.jmin.mapper.OrderMapper&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;orderMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;order&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--        order的主键， id标签--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;order_id&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;orderId&quot;</span>/&gt;</span><br><span class="hljs-comment">&lt;!--        普通列都用result标签--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;order_name&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;orderName&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;customer_id&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;customerId&quot;</span>/&gt;</span><br><span class="hljs-comment">&lt;!--        对象属性赋值--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">association</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;customer&quot;</span> <span class="hljs-attr">javaType</span>=<span class="hljs-string">&quot;Customer&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;customer_id&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;customerId&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;customer_name&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;customerName&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">association</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queryOrderById&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;orderMap&quot;</span>&gt;</span><br>        SELECT * FROM t_order tor<br>                          JOIN t_customer tcr ON tor.customer_id = tcr.customer_id<br>        WHERE tor.order_id = #&#123;id&#125;;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><p>对应关系如下：</p><p><img src="/assets/image-20230915000331445.png" alt="image-20230915000331445"></p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p><img src="/assets/image-20230915001544915.png" alt="image-20230915001544915"></p><p>测试升级版</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MybatisTest</span> &#123;<br>    <span class="hljs-keyword">private</span> SqlSession sqlSession;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testToOne</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">OrderMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(OrderMapper.class);<br>        <span class="hljs-type">Order</span> <span class="hljs-variable">order</span> <span class="hljs-operator">=</span> mapper.queryOrderById(<span class="hljs-number">1</span>);<br>        System.out.println(order);<br>        System.out.println(order.getCustomer());<br>    &#125;<br>    <span class="hljs-meta">@BeforeEach</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        sqlSession = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>()<br>                .build(Resources.getResourceAsReader(<span class="hljs-string">&quot;mybatisConfig.xml&quot;</span>))<br>                .openSession();<br>    &#125;<br>    <span class="hljs-meta">@AfterEach</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">clean</span><span class="hljs-params">()</span>&#123;<br>        sqlSession.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="对多映射"><a href="#对多映射" class="headerlink" title="对多映射"></a>对多映射</h2><h3 id="需求-1"><a href="#需求-1" class="headerlink" title="需求"></a>需求</h3><p>查询客户和客户关联的订单信息</p><h3 id="实体类-1"><a href="#实体类-1" class="headerlink" title="实体类"></a>实体类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Customer</span> &#123;<br>    <span class="hljs-keyword">private</span> Integer customerId;<br>    <span class="hljs-keyword">private</span> String customerName;<br><span class="hljs-comment">//    一个客户对应多个订单 对多就是对方类型的集合</span><br>    <span class="hljs-keyword">private</span> List&lt;Order&gt; orders;<br>&#125;<br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Order</span> &#123;<br>    <span class="hljs-keyword">private</span> Integer orderId;<br>    <span class="hljs-keyword">private</span> String orderName;<br>    <span class="hljs-keyword">private</span> Integer customerId;<br>    <span class="hljs-comment">//一个订单对应一个客户</span><br>    <span class="hljs-keyword">private</span> Customer customer;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Mapper"><a href="#Mapper" class="headerlink" title="Mapper"></a>Mapper</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Customer&gt; <span class="hljs-title function_">queryAll</span><span class="hljs-params">()</span>;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.jmin.mapper.CustomerMapper&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;CustomerMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;customer&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;customerId&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;customer_id&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;customerName&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;customer_name&quot;</span>/&gt;</span><br><span class="hljs-comment">&lt;!--        property 集合属性名</span><br><span class="hljs-comment">            ofType 集合的泛型类型--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">collection</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;orderList&quot;</span> <span class="hljs-attr">ofType</span>=<span class="hljs-string">&quot;order&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;order_id&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;orderId&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;order_name&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;orderName&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;customer_id&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;customerId&quot;</span>/&gt;</span><br><span class="hljs-comment">&lt;!--            customer不需要赋值！！！！--&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">collection</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queryAll&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;CustomerMap&quot;</span>&gt;</span><br>        SELECT * FROM t_order tor<br>                          join t_customer tcr on tor.customer_id = tcr.customer_id;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h3><p><img src="/assets/image-20230915004719297.png" alt="image-20230915004719297"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="多表映射优化"><a href="#多表映射优化" class="headerlink" title="多表映射优化"></a>多表映射优化</h2><table><thead><tr><th>setting属性</th><th>属性含义</th><th>可选值</th><th>默认值</th></tr></thead><tbody><tr><td>autoMappingBehavior</td><td>指定 MyBatis 应如何自动映射列到字段或属性。 NONE 表示关闭自动映射；PARTIAL 只会自动映射没有定义嵌套结果映射的字段。 FULL 会自动映射任何复杂的结果集（无论是否嵌套）。</td><td>NONE, PARTIAL, FULL</td><td>PARTIAL</td></tr></tbody></table><blockquote><p>默认情况下，resultMap会自动映射一层的result标签，列名和属性名能够系统匹配的前提下。如果嵌套了association&#x2F;collection 则不会自动映射，需要开启autoMappingBehavior并设置为FULL</p></blockquote><p>默认时：</p><p><img src="/assets/image-20230915010525873.png" alt="image-20230915010525873"></p><p>设置后：</p><p><img src="/assets/image-20230915010403864.png" alt="image-20230915010403864"></p><h2 id="对一和对多"><a href="#对一和对多" class="headerlink" title="对一和对多"></a>对一和对多</h2><table><thead><tr><th>关联关系</th><th>配置项关键词</th><th>所在配置文件和具体位置</th></tr></thead><tbody><tr><td>对一</td><td>association标签&#x2F;javaType属性&#x2F;property属性</td><td>Mapper配置文件中的resultMap标签内</td></tr><tr><td>对多</td><td>collection标签&#x2F;ofType属性&#x2F;property属性</td><td>Mapper配置文件中的resultMap标签内</td></tr></tbody></table><p><img src="/assets/image-20230915011029852.png" alt="image-20230915011029852"></p>]]></content>
    
    
    <categories>
      
      <category>SSM</category>
      
      <category>MyBatis</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>5_mapperXML总结</title>
    <link href="/2023/09/14/%E5%B0%9A%E7%A1%85%E8%B0%B7-SSM/MyBatis/5_mapperXML%E6%80%BB%E7%BB%93/"/>
    <url>/2023/09/14/%E5%B0%9A%E7%A1%85%E8%B0%B7-SSM/MyBatis/5_mapperXML%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="mapperXML总结"><a href="#mapperXML总结" class="headerlink" title="mapperXML总结"></a>mapperXML总结</h1><p>MyBatis 的真正强大在于它的语句映射，这是它的魔力所在。由于它的异常强大，映射器的 XML 文件就显得相对简单。如果拿它跟具有相同功能的 JDBC 代码进行对比，你会立即发现省掉了将近 95% 的代码。MyBatis 致力于减少使用成本，让用户能更专注于 SQL 代码。</p><p>SQL 映射文件只有很少的几个顶级元素（按照应被定义的顺序列出）：</p><ul><li><code>insert</code> – 映射插入语句。</li><li><code>update</code> – 映射更新语句。</li><li><code>delete</code> – 映射删除语句。</li><li><code>select</code> – 映射查询语句。</li></ul><p><strong>select标签：</strong></p><p>  MyBatis 在查询和结果映射做了相当多的改进。一个简单查询的 select 元素是非常简单：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectPerson&quot;</span> </span><br><span class="hljs-tag"><span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;hashmap&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;自定义结构&quot;</span>&gt;</span> SELECT * FROM PERSON WHERE ID = #&#123;id&#125; <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>  这个语句名为 selectPerson，接受一个 int（或 Integer）类型的参数，并返回一个 HashMap 类型的对象，其中的键是列名，值便是结果行中的对应值。</p><p>  注意参数符号：#{id}  ${key}</p><p>  MyBatis 创建一个预处理语句（PreparedStatement）参数，在 JDBC 中，这样的一个参数在 SQL 中会由一个“?”来标识，并被传递到一个新的预处理语句中，就像这样：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">// 近似的 JDBC 代码，非 MyBatis 代码...</span><br><span class="hljs-type">String</span> <span class="hljs-variable">selectPerson</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;SELECT * FROM PERSON WHERE ID=?&quot;</span>;<br><span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">ps</span> <span class="hljs-operator">=</span> conn.prepareStatement(selectPerson);<br>ps.setInt(<span class="hljs-number">1</span>,id);<br></code></pre></td></tr></table></figure><p>  select 元素允许你配置很多属性来配置每条语句的行为细节：</p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td><code>id</code></td><td>在命名空间中唯一的标识符，可以被用来引用这条语句。</td></tr><tr><td><code>resultType</code></td><td>期望从这条语句中返回结果的类全限定名或别名。 注意，如果返回的是集合，那应该设置为集合包含的类型，而不是集合本身的类型。 resultType 和 resultMap 之间只能同时使用一个。</td></tr><tr><td><code>resultMap</code></td><td>对外部 resultMap 的命名引用。结果映射是 MyBatis 最强大的特性，如果你对其理解透彻，许多复杂的映射问题都能迎刃而解。 resultType 和 resultMap 之间只能同时使用一个。</td></tr><tr><td><code>timeout</code></td><td>这个设置是在抛出异常之前，驱动程序等待数据库返回请求结果的秒数。默认值为未设置（unset）（依赖数据库驱动）。</td></tr><tr><td><code>statementType</code></td><td>可选 STATEMENT，PREPARED 或 CALLABLE。这会让 MyBatis 分别使用 Statement，PreparedStatement 或 CallableStatement，默认值：PREPARED。</td></tr></tbody></table><p><strong>insert, update 和 delete标签：</strong></p><p>  数据变更语句 insert，update 和 delete 的实现非常接近：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-tag">&lt;<span class="hljs-name">insert</span></span><br><span class="hljs-tag">  <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insertAuthor&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">statementType</span>=<span class="hljs-string">&quot;PREPARED&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">keyProperty</span>=<span class="hljs-string">&quot;&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">keyColumn</span>=<span class="hljs-string">&quot;&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">useGeneratedKeys</span>=<span class="hljs-string">&quot;&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">timeout</span>=<span class="hljs-string">&quot;20&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">update</span></span><br><span class="hljs-tag">  <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;updateAuthor&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">statementType</span>=<span class="hljs-string">&quot;PREPARED&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">timeout</span>=<span class="hljs-string">&quot;20&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">delete</span></span><br><span class="hljs-tag">  <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;deleteAuthor&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">statementType</span>=<span class="hljs-string">&quot;PREPARED&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">timeout</span>=<span class="hljs-string">&quot;20&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td><code>id</code></td><td>在命名空间中唯一的标识符，可以被用来引用这条语句。</td></tr><tr><td><code>timeout</code></td><td>这个设置是在抛出异常之前，驱动程序等待数据库返回请求结果的秒数。默认值为未设置（unset）（依赖数据库驱动）。</td></tr><tr><td><code>statementType</code></td><td>可选 STATEMENT，PREPARED 或 CALLABLE。这会让 MyBatis 分别使用 Statement，PreparedStatement 或 CallableStatement，默认值：PREPARED。</td></tr><tr><td><code>useGeneratedKeys</code></td><td>（仅适用于 insert 和 update）这会令 MyBatis 使用 JDBC 的 getGeneratedKeys 方法来取出由数据库内部生成的主键（比如：像 MySQL 和 SQL Server 这样的关系型数据库管理系统的自动递增字段），默认值：false。</td></tr><tr><td><code>keyProperty</code></td><td>（仅适用于 insert 和 update）指定能够唯一识别对象的属性，MyBatis 会使用 getGeneratedKeys 的返回值或 insert 语句的 selectKey 子元素设置它的值，默认值：未设置（<code>unset</code>）。如果生成列不止一个，可以用逗号分隔多个属性名称。</td></tr><tr><td><code>keyColumn</code></td><td>（仅适用于 insert 和 update）设置生成键值在表中的列名，在某些数据库（像 PostgreSQL）中，当主键列不是表中的第一列的时候，是必须设置的。如果生成列不止一个，可以用逗号分隔多个属性名称。</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>SSM</category>
      
      <category>MyBatis</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>4_Mybatis_CRUD练习</title>
    <link href="/2023/09/14/%E5%B0%9A%E7%A1%85%E8%B0%B7-SSM/MyBatis/4_CRUD%E7%BB%83%E4%B9%A0/"/>
    <url>/2023/09/14/%E5%B0%9A%E7%A1%85%E8%B0%B7-SSM/MyBatis/4_CRUD%E7%BB%83%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="Mybatis-CRUD练习"><a href="#Mybatis-CRUD练习" class="headerlink" title="Mybatis_CRUD练习"></a>Mybatis_CRUD练习</h1><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `<span class="hljs-keyword">user</span>` (<br>  `id` <span class="hljs-type">INT</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>  `username` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `password` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`)<br>) ENGINE<span class="hljs-operator">=</span>INNODB AUTO_INCREMENT<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8;<br><br></code></pre></td></tr></table></figure><h3 id="mapper接口"><a href="#mapper接口" class="headerlink" title="mapper接口"></a>mapper接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserMapper</span> &#123;<br>  <br>  <span class="hljs-type">int</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(User user)</span>;<br><br>  <span class="hljs-type">int</span> <span class="hljs-title function_">update</span><span class="hljs-params">(User user)</span>;<br><br>  <span class="hljs-type">int</span> <span class="hljs-title function_">delete</span><span class="hljs-params">(Integer id)</span>;<br><br>  User <span class="hljs-title function_">selectById</span><span class="hljs-params">(Integer id)</span>;<br><br>  List&lt;User&gt; <span class="hljs-title function_">selectAll</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>Lombok引入</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">&lt;dependency&gt;</span><br>    <span class="hljs-attr">&lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br>    <span class="hljs-attr">&lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br>    <span class="hljs-attr">&lt;version&gt;1.18.28&lt;/version&gt;</span><br><span class="hljs-attr">&lt;/dependency&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/assets/image-20230914193116644.png" alt="image-20230914193116644"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-keyword">private</span> String password;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="/assets/image-20230914193223611.png" alt="image-20230914193223611"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs xml">    <span class="hljs-tag">&lt;<span class="hljs-name">settings</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;logImpl&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;STDOUT_LOGGING&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.jmin.mapper.UserMapper&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insert&quot;</span> <span class="hljs-attr">useGeneratedKeys</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">keyColumn</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">keyProperty</span>=<span class="hljs-string">&quot;id&quot;</span>&gt;</span><br>        insert into user(username,password) values (#&#123;username&#125;,#&#123;password&#125;);<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;update&quot;</span>&gt;</span><br>        update user set username = #&#123;username&#125; , password = #&#123;password&#125;<br>        where id = #&#123;id&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;delete&quot;</span>&gt;</span><br>        delete from user where id = #&#123;id&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectById&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span><br>        select * from user where id = #&#123;id&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectAll&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span><br>        select *<br>        from user;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>SSM</category>
      
      <category>MyBatis</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>2_ibatis方式和原理</title>
    <link href="/2023/09/13/%E5%B0%9A%E7%A1%85%E8%B0%B7-SSM/MyBatis/2_ibatis%E6%96%B9%E5%BC%8F%E5%92%8C%E5%8E%9F%E7%90%86/"/>
    <url>/2023/09/13/%E5%B0%9A%E7%A1%85%E8%B0%B7-SSM/MyBatis/2_ibatis%E6%96%B9%E5%BC%8F%E5%92%8C%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="ibatis方式和原理"><a href="#ibatis方式和原理" class="headerlink" title="ibatis方式和原理"></a>ibatis方式和原理</h1><p><img src="/assets/image-20230913145458528.png" alt="image-20230913145458528"></p><p><img src="/assets/image-20230913145754049.png" alt="image-20230913145754049"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--使用ibatis--&gt;</span><br><span class="hljs-comment">&lt;!--不要求写接口--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;xx.jj&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sele&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.jmin.pojo.Student&quot;</span>&gt;</span><br>        select *<br>        from student where sid = #&#123;id&#125;;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> Resources.getResourceAsStream(<span class="hljs-string">&quot;mybatis-config.xml&quot;</span>);<br>        <span class="hljs-type">SqlSessionFactory</span> <span class="hljs-variable">sqlSessionFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>().build(inputStream);<br>        <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> sqlSessionFactory.openSession();<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> sqlSession.selectOne(<span class="hljs-string">&quot;xx.jj.sele&quot;</span>, <span class="hljs-number">1</span>);<br><span class="hljs-comment">//        ibatis通过selectOne selectList insert delete update查找对应的sql语句标签</span><br><span class="hljs-comment">//        缺点 1.是sql语句标签对应的字符串标识，容易出现错误</span><br><span class="hljs-comment">//             2.参数需要进行整合，只能传递一个参数</span><br><span class="hljs-comment">//             3.返回值问题，必须自己判断不会自行提示</span><br>        System.out.println(o);<br>    &#125;<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20230913163252658.png" alt="image-20230913163252658"></p><p><img src="/assets/image-20230913163205947.png" alt="image-20230913163205947"></p><p><img src="/assets/image-20230913162928182.png" alt="image-20230913162928182"></p><h2 id="缺陷"><a href="#缺陷" class="headerlink" title="缺陷"></a>缺陷</h2><blockquote><p>ibatis中的namespace即key参数模糊定义可能导致sql误判，mybatis会针对参数做出优化</p></blockquote><p><img src="/assets/image-20230913164333786.png" alt="image-20230913164333786"></p><p>Mybatis底层仍然调用ibatis只不过有固定的模式</p>]]></content>
    
    
    <categories>
      
      <category>SSM</category>
      
      <category>MyBatis</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>3_MyBatis基本使用</title>
    <link href="/2023/09/13/%E5%B0%9A%E7%A1%85%E8%B0%B7-SSM/MyBatis/3_Mybatis%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <url>/2023/09/13/%E5%B0%9A%E7%A1%85%E8%B0%B7-SSM/MyBatis/3_Mybatis%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="MyBatis基本使用"><a href="#MyBatis基本使用" class="headerlink" title="MyBatis基本使用"></a>MyBatis基本使用</h1><h2 id="向SQL语句传参"><a href="#向SQL语句传参" class="headerlink" title="向SQL语句传参"></a>向SQL语句传参</h2><h3 id="mybatis日志输出配置"><a href="#mybatis日志输出配置" class="headerlink" title="mybatis日志输出配置"></a>mybatis日志输出配置</h3><p>MyBatis 的配置文件包含了会深深影响 MyBatis 行为的设置和属性信息。 配置文档的顶层结构如下：</p><ul><li>configuration（配置）<ul><li><a href="https://mybatis.org/mybatis-3/zh/configuration.html#properties">properties（属性）</a></li><li><a href="https://mybatis.org/mybatis-3/zh/configuration.html#settings">settings（设置）</a></li><li><a href="https://mybatis.org/mybatis-3/zh/configuration.html#typeAliases">typeAliases（类型别名）</a></li><li><a href="https://mybatis.org/mybatis-3/zh/configuration.html#typeHandlers">typeHandlers（类型处理器）</a></li><li><a href="https://mybatis.org/mybatis-3/zh/configuration.html#objectFactory">objectFactory（对象工厂）</a></li><li><a href="https://mybatis.org/mybatis-3/zh/configuration.html#plugins">plugins（插件）</a></li><li>environments（环境配置）<ul><li>environment（环境变量）<ul><li>transactionManager（事务管理器）</li><li>dataSource（数据源）</li></ul></li></ul></li><li><a href="https://mybatis.org/mybatis-3/zh/configuration.html#databaseIdProvider">databaseIdProvider（数据库厂商标识）</a></li><li><a href="https://mybatis.org/mybatis-3/zh/configuration.html#mappers">mappers（映射器）</a></li></ul></li></ul><p>我们可以在mybatis的配置文件使用settings标签设置，输出运过程SQL日志！</p><p>通过查看日志，我们可以判定#{} 和 ${}的输出效果！</p><p><img src="/assets/image-20230913183307322.png" alt="image-20230913183307322"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">configuration</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">settings</span>&gt;</span><br><span class="hljs-comment">&lt;!--        开启mybatis的日志输出，选择使用System_logging输出--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;logImpl&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;STDOUT_LOGGING&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- environments表示配置Mybatis的开发环境，可以配置多个环境，在众多具体环境中，使用default属性指定实际运行时使用的环境。default属性的取值是environment标签的id属性的值。 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- environment表示配置Mybatis的一个具体的环境 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- Mybatis的内置的事务管理器 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>/&gt;</span><br>            <span class="hljs-comment">&lt;!-- 配置数据源 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><br>                <span class="hljs-comment">&lt;!-- 建立数据库连接的具体信息 --&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/mybatis-example&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;lzm123456&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- Mapper注册：指定Mybatis映射文件的具体位置 --&gt;</span><br>        <span class="hljs-comment">&lt;!-- mapper标签：配置一个具体的Mapper映射文件 --&gt;</span><br>        <span class="hljs-comment">&lt;!-- resource属性：指定Mapper映射文件的实际存储位置，这里需要使用一个以类路径根目录为基准的相对路径 --&gt;</span><br>        <span class="hljs-comment">&lt;!--    对Maven工程的目录结构来说，resources目录下的内容会直接放入类路径，所以这里我们可以以resources目录为基准 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;mappers/EmployeeMapper.xml&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;mappers/StudentMapper.xml&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="value-和-value"><a href="#value-和-value" class="headerlink" title="#{value}和${value}"></a>#{value}和${value}</h3><p>Idea的XML模板创建</p><p><img src="/assets/image-20230913184746611.png" alt="image-20230913184746611"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queryById&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.jmin.pojo.Employee&quot;</span>&gt;</span><br>    SELECT emp_id,emp_name,emp_salary FROM t_emp WHERE emp_id = #&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>通常不会采用${}的方式传值。一个特定的适用场景是：通过Java程序动态生成数据库表，表名部分需要Java程序通过参数传入；而JDBC对于表名部分是不能使用问号占位符的，此时只能使用</p><p>结论：实际开发中，能用#{}实现的，肯定不用${}。</p><p>特殊情况： 动态的不是值，是列名或者关键字，需要使用${}拼接</p><h2 id="数据输入"><a href="#数据输入" class="headerlink" title="数据输入"></a>数据输入</h2><p><img src="/assets/image-20230913215508709.png" alt="image-20230913215508709"></p><h3 id="概念说明"><a href="#概念说明" class="headerlink" title="概念说明"></a>概念说明</h3><p>这里数据输入具体是指上层方法（例如Service方法）调用Mapper接口时，数据传入的形式。</p><ul><li>简单类型：只包含一个值的数据类型<ul><li>基本数据类型：int、byte、short、double、……</li><li>基本数据类型的包装类型：Integer、Character、Double、……</li><li>字符串类型：String</li></ul></li><li>复杂类型：包含多个值的数据类型<ul><li>实体类类型：Employee、Department、……</li><li>集合类型：List、Set、Map、……</li><li>数组类型：int[]、String[]、……</li><li>复合类型：List<Employee>、实体类中包含集合……</Employee></li></ul></li></ul><h3 id="单个简单类型参数"><a href="#单个简单类型参数" class="headerlink" title="单个简单类型参数"></a>单个简单类型参数</h3><p>Mapper接口中抽象方法的声明</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">Employee <span class="hljs-title function_">queryById</span><span class="hljs-params">(Integer id)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">deleteById</span><span class="hljs-params">(Integer id)</span>;<br>List&lt;Employee&gt; <span class="hljs-title function_">queryBySalaries</span><span class="hljs-params">(Double salary)</span>;<br></code></pre></td></tr></table></figure><p>SQL语句</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queryById&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.jmin.pojo.Employee&quot;</span>&gt;</span><br>    SELECT emp_id,emp_name,emp_salary FROM t_emp WHERE emp_id = #&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;deleteById&quot;</span>&gt;</span><br>    -- key值可随便写<br>    delete from t_emp where emp_id = #&#123;key&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queryBySalary&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.jmin.pojo.Employee&quot;</span>&gt;</span><br>    SELECT emp_id,emp_name,emp_salary FROM t_emp WHERE emp_salary = #&#123;salary&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>单个简单类型参数，在#{}中可以随意命名，但是没有必要。通常还是使用和接口方法参数同名。</p></blockquote><h3 id="实体类类型参数"><a href="#实体类类型参数" class="headerlink" title="实体类类型参数"></a>实体类类型参数</h3><p>Mapper接口中抽象方法的声明</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-title function_">insertEmp</span><span class="hljs-params">(Employee employee)</span>;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml">    <span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insertEmp&quot;</span>&gt;</span><br>-- key必须写实体类的属性名<br>        insert into t_emp (emp_name,emp_salary) values (#&#123;empname&#125;,#&#123;empsalary&#125;)<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/assets/image-20230913222249405.png" alt="image-20230913222249405"></p><ul><li>总结</li></ul><blockquote><p>Mybatis会根据#{}中传入的数据，加工成getXxx()方法，通过反射在实体类对象中调用这个方法，从而获取到对应的数据。填充到#{}解析后的问号占位符这个位置。</p></blockquote><h3 id="多个零散的简单数据类型"><a href="#多个零散的简单数据类型" class="headerlink" title="多个零散的简单数据类型"></a>多个零散的简单数据类型</h3><p>零散的多个简单类型参数，如果没有特殊处理，那么Mybatis无法识别自定义名称</p><ol><li><p>@Param注解指定，指定多个简单参数的key</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Employee&gt; <span class="hljs-title function_">queryByNameAndSalary</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;name&quot;)</span> String name,<span class="hljs-meta">@Param(&quot;salary&quot;)</span> Double sl)</span>;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queryByNameAndSalary&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.jmin.pojo.Employee&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>mybatis默认机制，形参从左往右依次对应 arg0 arg1 …或者param1 param2 …</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Employee&gt; <span class="hljs-title function_">queryByNameAndSalary</span><span class="hljs-params">(String name,Double sl)</span>;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queryByNameAndSalary&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.jmin.pojo.Employee&quot;</span>&gt;</span><br>    SELECT emp_id,emp_name,emp_salary FROM t_emp WHERE emp_name = #&#123;arg0&#125; emp_salary = #&#123;arg1&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queryByNameAndSalary&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.jmin.pojo.Employee&quot;</span>&gt;</span><br>    SELECT emp_id,emp_name,emp_salary FROM t_emp WHERE emp_name = #&#123;param1&#125; emp_salary = #&#123;param2&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="Map类型参数"><a href="#Map类型参数" class="headerlink" title="Map类型参数"></a>Map类型参数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-title function_">insertEmpMap</span><span class="hljs-params">(Map data)</span>;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insertEmpMap&quot;</span>&gt;</span><br>    insert into t_emp (emp_name,emp_salary) values (#&#123;empname&#125;,#&#123;empsalary&#125;)<br><span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="数据输出"><a href="#数据输出" class="headerlink" title="数据输出"></a>数据输出</h2><h3 id="数据输出形式"><a href="#数据输出形式" class="headerlink" title="数据输出形式"></a>数据输出形式</h3><p>总体上有两种形式：</p><ul><li>增删改操作返回的受影响行数：直接使用 int 或 long 类型接收即可</li><li>查询操作的查询结果</li></ul><p>我们需要做的是，指定查询的输出数据类型即可！</p><p>并且插入场景下，实现主键数据回显示！</p><h3 id="单个简单类型"><a href="#单个简单类型" class="headerlink" title="单个简单类型"></a>单个简单类型</h3><p>DML插入删除修改 直接返回int 不解释</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">String <span class="hljs-title function_">queryNameById</span><span class="hljs-params">(Integer id)</span>;<br>Double <span class="hljs-title function_">querySalaryById</span><span class="hljs-params">(Integer id)</span>;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--    String--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queryNameById&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;java.lang.String&quot;</span>&gt;</span><br>        select emp_name<br>        from t_emp<br>        where emp_id = #&#123;id&#125;;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queryNameById&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;string&quot;</span>&gt;</span><br>        select emp_name<br>        from t_emp<br>        where emp_id = #&#123;id&#125;;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-comment">&lt;!--    Double--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;querySalaryById&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;java.lang.Double&quot;</span>&gt;</span><br>        select emp_salary<br>        from t_emp<br>        where emp_id = #&#123;id&#125;;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;querySalaryById&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;_double&quot;</span>&gt;</span><br>        select emp_salary<br>        from t_emp<br>        where emp_id = #&#123;id&#125;;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>细节解释：</p><p>select标签，通过resultType指定查询返回值类型！</p><p>resultType &#x3D; “全限定符 ｜ 别名 ｜ 如果是返回集合类型，写范型类型即可”</p></blockquote><p>Mybatis 内部给常用的数据类型设定了很多别名。 以 int 类型为例，可以写的名称有：int、integer、Integer、java.lang.Integer、Int、INT、INTEGER 等等。</p><p><a href="https://mybatis.org/mybatis-3/zh/configuration.html#typeAliases">mybatis – MyBatis 3 | 配置</a></p><blockquote><p>如果没有提供的 需要自己在config文件中定义或者写类的全限定符号</p></blockquote><p>起别名</p><p><img src="/assets/image-20230913235722523.png" alt="image-20230913235722523"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml">    <span class="hljs-tag">&lt;<span class="hljs-name">typeAliases</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--        alias别名--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">typeAlias</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;com.jmin.pojo.Employee&quot;</span> <span class="hljs-attr">alias</span>=<span class="hljs-string">&quot;emp&quot;</span>/&gt;</span><br><span class="hljs-comment">&lt;!--        批量将包下的类给与别名，别名就是首字母小写的类的名称</span><br><span class="hljs-comment">   如果不用批量的别名可以用注解起别名，配合@Alias--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.jmin.pojo&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">typeAliases</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="实体类型"><a href="#实体类型" class="headerlink" title="实体类型"></a>实体类型</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Employee <span class="hljs-title function_">queryEMPById</span><span class="hljs-params">(Integer id)</span>;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queryEMPById&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.jmin.pojo.Employee&quot;</span>&gt;</span><br>    SELECT emp_id empid,emp_name empname,emp_salary empsalary FROM t_emp WHERE emp_id = #&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>默认要求：查询返回单个实体类型，要求别名和属性名要一致，这样才可以进行实体类的属性映射。</p><p>但是可以通过设置，支持驼峰式映射mapUnderscoreToCamelCase</p><p><img src="/assets/image-20230914002831373.png" alt="image-20230914002831373"></p><p><img src="/assets/image-20230914002929428.png" alt="image-20230914002929428"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queryEMPById&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.jmin.pojo.Employee&quot;</span>&gt;</span><br>    SELECT * FROM t_emp WHERE emp_id = #&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="Map类型"><a href="#Map类型" class="headerlink" title="Map类型"></a>Map类型</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Map&lt;String,Object&gt; <span class="hljs-title function_">selectEmpNameAndMaxSalary</span><span class="hljs-params">()</span>;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- Map&lt;String,Object&gt; selectEmpNameAndMaxSalary(); --&gt;</span><br><span class="hljs-comment">&lt;!-- 返回工资最高的员工的姓名和他的工资 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectEmpNameAndMaxSalary&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;map&quot;</span>&gt;</span><br>    SELECT<br>        emp_name 最高工资的员工姓名,<br>        emp_salary 最高员工工资,<br>        (SELECT AVG(emp_salary) FROM t_emp) 部门平均工资<br>    FROM t_emp WHERE emp_salary=(<br>        SELECT MAX(emp_salary) FROM t_emp<br>    )<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>疑问？map的resultType属性可以设置为泛型吗？</p></blockquote><h3 id="List类型"><a href="#List类型" class="headerlink" title="List类型"></a>List类型</h3><p>查询结果返回多个实体类对象，希望把多个实体类对象放在List集合中返回。此时不需要任何特殊处理，在resultType属性中还是设置实体类类型（泛型）即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;String&gt; <span class="hljs-title function_">queryNamesBySalary</span><span class="hljs-params">(Double salary)</span>;<br>List&lt;Employee&gt; <span class="hljs-title function_">selectAll</span><span class="hljs-params">()</span>;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--    不能写list而是写list的泛型--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queryNamesBySalary&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;string&quot;</span>&gt;</span><br>        select emp_name<br>        from t_emp where emp_salary &gt; #&#123;salary&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectAll&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;employee&quot;</span>&gt;</span><br>        select *<br>        from t_emp;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>为什么呢？</p><p>mybatis -&gt; ibatis -&gt; selectOne | selectList</p><p>当调用selectOne时会通过调用selectList获得第一个元素返回</p></blockquote><h3 id="返回主键值"><a href="#返回主键值" class="headerlink" title="返回主键值"></a>返回主键值</h3><h4 id="自增长类型主键"><a href="#自增长类型主键" class="headerlink" title="自增长类型主键"></a>自增长类型主键</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-title function_">insertEmployee</span><span class="hljs-params">(Employee employee)</span>;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--    主键回显 获取插入数据的主键--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insertEmployee&quot;</span>&gt;</span><br>        insert into t_emp(emp_name,emp_salary)<br>        values (#&#123;empName&#125;,#&#123;empSalary&#125;);<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/assets/image-20230914091103246.png" alt="image-20230914091103246"></p><p>控制台输出1（插入成功），但是！！</p><p><img src="/assets/image-20230914085157708.png" alt="image-20230914085157708"></p><p>数据库没有更新数据。因为事务没有提交。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//事务必须提交，数据库才会更新数据！</span><br><span class="hljs-comment">//方法1</span><br>sqlSession.commit();<br><span class="hljs-comment">//方法2</span><br><span class="hljs-comment">//openSession方法自动开启事务，不会自动提交，需要手动开启openSession(true)，设置开启自动提交</span><br><span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> sqlSessionFactory.openSession(<span class="hljs-literal">true</span>);<br><br></code></pre></td></tr></table></figure><p><img src="/assets/image-20230914085348572.png" alt="image-20230914085348572"></p><p>此时还发现一个点，当我们成功提交事务之后应用程序中实体对象的id属性值为null，并没有被增值赋值</p><p><img src="/assets/image-20230914091253626.png" alt="image-20230914091253626"></p><p>解决方法</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--    主键回显 获取插入数据的主键--&gt;</span><br><span class="hljs-comment">&lt;!--    useGeneratedKeys=&quot;true&quot; 数据库自动增长的主键值</span><br><span class="hljs-comment">        keyColumn=&quot;emp_id&quot; 主键列的值</span><br><span class="hljs-comment">        keyProperty=&quot;empId&quot; 接收主键列值的属性</span><br><span class="hljs-comment">         useGeneratedKeys=&quot;true&quot; keyColumn=&quot;emp_id&quot; keyProperty=&quot;empId&quot;</span><br><span class="hljs-comment">        --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insertEmployee&quot;</span> <span class="hljs-attr">useGeneratedKeys</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">keyColumn</span>=<span class="hljs-string">&quot;emp_id&quot;</span> <span class="hljs-attr">keyProperty</span>=<span class="hljs-string">&quot;empId&quot;</span>&gt;</span><br>        insert into t_emp(emp_name,emp_salary)<br>        values (#&#123;empName&#125;,#&#123;empSalary&#125;);<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/assets/image-20230914091619418.png" alt="image-20230914091619418"></p><p>Mybatis是将自增主键的值设置到实体类对象中，而不是以Mapper接口方法返回值的形式返回。</p><h4 id="非自增长类型主键"><a href="#非自增长类型主键" class="headerlink" title="非自增长类型主键"></a>非自增长类型主键</h4><p>对于不支持自增型主键的数据库（例如 Oracle）或者字符串类型主键，则可以使用 selectKey 子元素：selectKey 元素将会首先运行，id 会被设置，然后插入语句会被调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-title function_">insertTeacher</span><span class="hljs-params">(Teacher teacher)</span>;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.jmin.mapper.TeacherMapper&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insertTeacher&quot;</span>&gt;</span><br>        insert into teacher (t_id,t_name)<br>        values (#&#123;tId&#125;,#&#123;tName&#125;);<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/assets/image-20230914094741935.png" alt="image-20230914094741935"></p><p>我们可以交由mybatis维护主键</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml">    <span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insertTeacher&quot;</span>&gt;</span><br>--         插入之前，向指定一段sql语句，生成一个主键值<br>--         selectKey order=&quot;BEFORE||AFTER&quot; 分别表示sql语句是在插入语句之前还是之后执行<br>--         resultType=&quot;string&quot; 返回字符串类型<br>--         keyProperty=&quot;tId&quot; 查询结果给哪个属性赋值<br>        <span class="hljs-tag">&lt;<span class="hljs-name">selectKey</span> <span class="hljs-attr">order</span>=<span class="hljs-string">&quot;BEFORE&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;string&quot;</span> <span class="hljs-attr">keyProperty</span>=<span class="hljs-string">&quot;tId&quot;</span>&gt;</span><br>            SELECT REPLACE(UUID(),&#x27;-&#x27;,&#x27;&#x27;)<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">selectKey</span>&gt;</span><br>        insert into teacher (t_id,t_name)<br>        values (#&#123;tId&#125;,#&#123;tName&#125;);<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/assets/image-20230914100047396.png" alt="image-20230914100047396"></p><h3 id="实体类属性和数据库字段的对应关系"><a href="#实体类属性和数据库字段的对应关系" class="headerlink" title="实体类属性和数据库字段的对应关系"></a>实体类属性和数据库字段的对应关系</h3><blockquote><p>–         列名与属性不一致如何解决？<br>–         方案1：别名<br>–         方案2：开启驼峰式映射<br>–         resultMap自定义映射<br>–    resultType按照驼峰式，自动规则映射，只能映射一层结构<br>–   Order   SQL<br>–  orderId  order_id<br>– orderName order_name<br>– orderItem orderItem orderId      order_id无法映射!!! 深层次的对象结构无法映射，可以用ResultMap</p></blockquote><p>全局驼峰式映射的方式： </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">settings</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;logImpl&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;STDOUT_LOGGING&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>resultType按照规则自动映射，按照是否开启驼峰式映射，自己映射属性和列名，只能映射单层结构</li><li>resultMap自定义映射关系，可以深层次也可以单层次</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;tMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;teacher&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;t_name&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;tName&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queryById&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;tMap&quot;</span>&gt;</span><br>    select * from teacher;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>SSM</category>
      
      <category>MyBatis</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>1_MyBatis简介</title>
    <link href="/2023/09/12/%E5%B0%9A%E7%A1%85%E8%B0%B7-SSM/MyBatis/1_Mybatis%E7%AE%80%E4%BB%8B/"/>
    <url>/2023/09/12/%E5%B0%9A%E7%A1%85%E8%B0%B7-SSM/MyBatis/1_Mybatis%E7%AE%80%E4%BB%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="1-MyBatis简介"><a href="#1-MyBatis简介" class="headerlink" title="1_MyBatis简介"></a>1_MyBatis简介</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><a href="https://mybatis.net.cn/">MyBatis中文网</a></p><h3 id="什么是-MyBatis？"><a href="#什么是-MyBatis？" class="headerlink" title="什么是 MyBatis？"></a>什么是 MyBatis？</h3><p>MyBatis 是一款优秀的持久层框架，它支持自定义 SQL、存储过程以及高级映射。MyBatis 免除了几乎所有的 JDBC 代码以及设置参数和获取结果集的工作。MyBatis 可以通过简单的 XML 或注解来配置和映射原始类型、接口和 Java POJO（Plain Old Java Objects，普通老式 Java 对象）为数据库中的记录。</p><h2 id="持久层框架对比"><a href="#持久层框架对比" class="headerlink" title="持久层框架对比"></a>持久层框架对比</h2><ul><li>JDBC<ul><li>SQL 夹杂在Java代码中耦合度高，导致硬编码内伤</li><li>维护不易且实际开发需求中 SQL 有变化，频繁修改的情况多见</li><li>代码冗长，开发效率低</li></ul></li><li>Hibernate 和 JPA<ul><li>操作简便，开发效率高</li><li>程序中的长难复杂 SQL 需要绕过框架</li><li>内部自动生成的 SQL，不容易做特殊优化</li><li>基于全映射的全自动框架，大量字段的 POJO 进行部分映射时比较困难。</li><li>反射操作太多，导致数据库性能下降</li></ul></li><li>MyBatis<ul><li>轻量级，性能出色</li><li>SQL 和 Java 编码分开，功能边界清晰。Java代码专注业务、SQL语句专注数据</li><li>开发效率稍逊于 Hibernate，但是完全能够接收</li></ul></li></ul><blockquote><p>开发效率：Hibernate&gt;Mybatis&gt;JDBC</p><p>运行效率：JDBC&gt;Mybatis&gt;Hibernate</p></blockquote><h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><h3 id="数据模型准备"><a href="#数据模型准备" class="headerlink" title="数据模型准备"></a>数据模型准备</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> DATABASE `mybatis<span class="hljs-operator">-</span>example`;<br><br>USE `mybatis<span class="hljs-operator">-</span>example`;<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `t_emp`(<br>  emp_id <span class="hljs-type">INT</span> AUTO_INCREMENT,<br>  emp_name <span class="hljs-type">CHAR</span>(<span class="hljs-number">100</span>),<br>  emp_salary <span class="hljs-keyword">DOUBLE</span>(<span class="hljs-number">10</span>,<span class="hljs-number">5</span>),<br>  <span class="hljs-keyword">PRIMARY</span> KEY(emp_id)<br>);<br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `t_emp`(emp_name,emp_salary) <span class="hljs-keyword">VALUES</span>(&quot;tom&quot;,<span class="hljs-number">200.33</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `t_emp`(emp_name,emp_salary) <span class="hljs-keyword">VALUES</span>(&quot;jerry&quot;,<span class="hljs-number">666.66</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `t_emp`(emp_name,emp_salary) <span class="hljs-keyword">VALUES</span>(&quot;andy&quot;,<span class="hljs-number">777.77</span>);<br></code></pre></td></tr></table></figure><h3 id="项目搭建"><a href="#项目搭建" class="headerlink" title="项目搭建"></a>项目搭建</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- mybatis依赖 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.11<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>  <span class="hljs-comment">&lt;!-- MySQL驱动 mybatis底层依赖jdbc驱动实现,本次不需要导入连接池,mybatis自带! --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.25<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>  <span class="hljs-comment">&lt;!--junit5测试--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.junit.jupiter<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit-jupiter-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="实体类准备"><a href="#实体类准备" class="headerlink" title="实体类准备"></a>实体类准备</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Employee</span> &#123;<br><br>    <span class="hljs-keyword">private</span> Integer empId;<br><br>    <span class="hljs-keyword">private</span> String empName;<br><br>    <span class="hljs-keyword">private</span> Double empSalary;<br>    <br>    <span class="hljs-comment">//getter | setter</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Mybatis配置文件xml"><a href="#Mybatis配置文件xml" class="headerlink" title="Mybatis配置文件xml"></a>Mybatis配置文件xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">configuration</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- environments表示配置Mybatis的开发环境，可以配置多个环境，在众多具体环境中，使用default属性指定实际运行时使用的环境。default属性的取值是environment标签的id属性的值。 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- environment表示配置Mybatis的一个具体的环境 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- Mybatis的内置的事务管理器 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>/&gt;</span><br>            <span class="hljs-comment">&lt;!-- 配置数据源 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><br>                <span class="hljs-comment">&lt;!-- 建立数据库连接的具体信息 --&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/mybatis-example&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;lzm123456&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- Mapper注册：指定Mybatis映射文件的具体位置 --&gt;</span><br>        <span class="hljs-comment">&lt;!-- mapper标签：配置一个具体的Mapper映射文件 --&gt;</span><br>        <span class="hljs-comment">&lt;!-- resource属性：指定Mapper映射文件的实际存储位置，这里需要使用一个以类路径根目录为基准的相对路径 --&gt;</span><br>        <span class="hljs-comment">&lt;!--    对Maven工程的目录结构来说，resources目录下的内容会直接放入类路径，所以这里我们可以以resources目录为基准 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;mappers/EmployeeMapper.xml&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="准备Mapper接口和MapperXML文件"><a href="#准备Mapper接口和MapperXML文件" class="headerlink" title="准备Mapper接口和MapperXML文件"></a>准备Mapper接口和MapperXML文件</h3><p>MyBatis 框架下，SQL语句编写位置发生改变，从原来的Java类，改成<strong>XML</strong>或者注解定义！</p><p>推荐在XML文件中编写SQL语句，让用户能更专注于 SQL 代码，不用关注其他的JDBC代码。</p><p>如果拿它跟具有相同功能的 JDBC 代码进行对比，你会立即发现省掉了将近 95% 的代码！！</p><p>一般编写SQL语句的文件命名：XxxMapper.xml  Xxx一般取表名！！</p><blockquote><p>Mybatis 中的 Mapper 接口相当于以前的 Dao。但是区别在于，Mapper 仅仅只是建接口即可，我们不需要提供实现类，具体的SQL写到对应的Mapper文件，该用法的思路如下图所示：</p></blockquote><p><img src="/assets/image-20230912164722776.png" alt="image-20230912164722776"></p><h4 id="Mapper接口"><a href="#Mapper接口" class="headerlink" title="Mapper接口"></a>Mapper接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">EmployeeMapper</span> &#123;<br><span class="hljs-comment">//    根据id查询员工信息</span><br>    Employee <span class="hljs-title function_">queryByID</span><span class="hljs-params">(Integer id)</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-title function_">deleteByID</span><span class="hljs-params">(Integer id)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="MapperXML文件"><a href="#MapperXML文件" class="headerlink" title="MapperXML文件"></a>MapperXML文件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--namespace = mapper 对应接口的全限定符--&gt;</span><br><span class="hljs-comment">&lt;!--mapper接口定义的方法不可重载,mapper.xml无法根据方法名识别--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.jmin.mapper.EmployeeMapper&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--    声明标签写sql语句</span><br><span class="hljs-comment">        每个标签对应一个方法，方法一个实现--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queryByID&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.jmin.pojo.Employee&quot;</span>&gt;</span><br>        select emp_id empId,emp_name empName, emp_salary empSalary from<br>            t_emp where emp_id = #&#123;empId&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;deleteByID&quot;</span>&gt;</span><br>        delete<br>        from t_emp<br>        where emp_id = #&#123;id&#125;;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">mybatis_text</span> &#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> Resources.getResourceAsStream(<span class="hljs-string">&quot;mybatis-config.xml&quot;</span>);<br>        <span class="hljs-type">SqlSessionFactory</span> <span class="hljs-variable">sqlSessionFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>().build(inputStream);<br>        <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> sqlSessionFactory.openSession();<br>        <span class="hljs-type">EmployeeMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(EmployeeMapper.class);<br>        System.out.println(mapper.queryByID(<span class="hljs-number">1</span>));<br>        sqlSession.commit();<br>        sqlSession.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20230912174300776.png" alt="image-20230912174300776"></p><blockquote><p>我根据工厂的图纸（mybatis-config）建造一个工厂（sqlsessionactory），造好工厂后，我需要成立一个业务部门（sqlsession）根据业务要求（employeemaper）设定一个代理人(mapper)，代理人去执行业务方法</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>SSM</category>
      
      <category>MyBatis</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>20_Spring的面试题</title>
    <link href="/2023/09/12/%E5%B0%9A%E7%A1%85%E8%B0%B7-SSM/Spring/20_Spring%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <url>/2023/09/12/%E5%B0%9A%E7%A1%85%E8%B0%B7-SSM/Spring/20_Spring%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="Spring面试题"><a href="#Spring面试题" class="headerlink" title="Spring面试题"></a>Spring面试题</h1><h2 id="Spring中有两个id相同的bean会报错吗？"><a href="#Spring中有两个id相同的bean会报错吗？" class="headerlink" title="Spring中有两个id相同的bean会报错吗？"></a>Spring中有两个id相同的bean会报错吗？</h2><blockquote><p>答：在同一个XML文件中，不能同时存在多个id相同的bean，否则Spring容器在启动时会报错。id是表示Bean的唯一标识符，Spring在启动的时候会验证Bean的唯一性，一旦发现重复就会报错，这个错误发生在Spring对XML文件进行解析，转化为BeanDefinition的阶段。但是在两个不同的Spring配置文件中，可以存在id相同的两个bean，IOC容器在加载Bean的时候，默认会把多个相同id的bean进行覆盖。Spring3.0以后该问题发生了变化，提供了注解@Configuration可以声明一个配置类，然后在类中采用@Bean注解实现bean的声明，该方式完全取代了老旧的XML配置方式，那么如果我们在同一个配置类里面同时声明多个id相同的bean，SpringIOC容器在解析时只会注册第一个声明Bean的一个实例，后面重复的Bean的实例将不会被注册。</p></blockquote><h2 id="介绍下SpringIOC的工作流程"><a href="#介绍下SpringIOC的工作流程" class="headerlink" title="介绍下SpringIOC的工作流程"></a>介绍下SpringIOC的工作流程</h2><blockquote><p>IOC的全称叫Inversion of Control也就是控制反转，它的核心思想是把对象的管理权限交给容器，应用程序如果需要使用某个对象的实例，那么可以直接从IOC容器中获取。这种设计的好处是降低了程序里面对象与对象之间的耦合性，使得整个程序的体系结构变得更加灵活。</p><p>Spring提供了很多方式去声明一个Bean，比如在XML配置文件中，通过bean标签或者通过@Service，@Controller，@Component或者@Configuration配置类中的@Bean去声明等等，Spring在启动时候会去解析这些Bean然后保存到IOC容器里面。</p><p>SpringIOC的工作流程大致可分为两个阶段，第一个阶段是IOC容器的初始化阶段，这个阶段主要是根据程序里面定义的XML或者注解配XML或者注解配置类声明方式，通过解析和加载后生成BeanDefinition，然后把BeanDefinition注册到IOC容器中，通过注解或者XML声明的bean都会解析得到一个BeanDefinition实体，这个实体会包含bean的一些定义和一些基本的属性，最后把这个BeanDefinition实体保存到一个Map集合中，从而完成IOC的一个初始化,IOC容器的作用是对这些注册的Bean的定义信息进行处理和维护，它是IOC容器控制反转的一个核心。第二个阶段是完成bean的初始化和依赖注入，进入该阶段后会经过两件事情，第一个是通过反射去针对没有设置lazy-init属性的单例bean进行初始化；第二个是完成bean的依赖注入。最后的阶段是bean的使用，通过@Autowired的注解或者BeanFatory.getBean()从IOC容器中获取一个指定Bean的实例，另外针对设置lazy-easy属性以及非单例bean的一个实例化，是在每一次获取bean对象的时候调用bean的初始化方法来完成实例化的，并且SpringIOC容器不会去管理这些bean</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>SSM</category>
      
      <category>Spring</category>
      
      <category>Summary</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>19_对Spring的理解</title>
    <link href="/2023/09/11/%E5%B0%9A%E7%A1%85%E8%B0%B7-SSM/Spring/19_%E6%88%91%E5%AF%B9Spring%E7%9A%84%E7%90%86%E8%A7%A3/"/>
    <url>/2023/09/11/%E5%B0%9A%E7%A1%85%E8%B0%B7-SSM/Spring/19_%E6%88%91%E5%AF%B9Spring%E7%9A%84%E7%90%86%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<p>Spring的主要功能一共有三个，分别是IOC，AOP，TX(声明式事务的管理)。</p><p>Spring家族，Spring是一个全家桶，内有许多框架的支持，而这些框架都是基于SpringFramework框架。不论是AOP还是TX等等都是要基于IOC容器的组件进行的动态操作。</p><p>Spring的核心功能，ioc&#x2F;di，aop，tx</p><p>ioc&#x2F;di的组件管理是个很简单的事，但他引发了整个Spring，组件管理就是对java中对象的存储和周期管理过程。通常我们都是自己new对象，但是有了Spring就不需要我们自己new，而是可以把类的信息交付给SpringIOC容器，让它管理。SpringIOC就成为帮我们创建存储管理对象的组件，其最大的容器就是beanfactory，BeanFactory 接口提供了访问 bean 的方式，例如 getBean() 方法获取指定的 bean 实例。它可以从不同的来源获取 bean 定义，并将其转换为 bean 实例。同时，BeanFactory 还包含很多子类提供了额外的强大功能。</p><p>ioc是存储组件的容器，控制反转指的是权限从成员交给Spring的核心容器的过程。权限交给ioc管理后，组件之间存在引用关系，di可以协助我们引用装配，将组件引用到另一个组件。di有三种配置方式，xml，xml+注解，纯注解（注解+配置类）</p><p>AOP是一种编程思维，完善oop的缺点，oop是垂直思维，如果需要局部修改方法内部的功能，oop是很难做到的，因此出现了aop横向编程思维。aop是横切技术，可以剖析方法的内部，将冗余的非核心代码批出来，再用动态代理技术接回核心代码中。</p><p>AOP框架是实现aop思维的具体框架，这是技术的封装，代理技术有jdk和cglib。基于注解的aop注解，有对应的位置注解，前置后置返回异常环绕增强的注解，切点切面</p><p>编程式事务和声明式事务管理</p><p>Springtx事务操作</p>]]></content>
    
    
    <categories>
      
      <category>SSM</category>
      
      <category>Spring</category>
      
      <category>Summary</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>18_基于注解的声明式事务实践</title>
    <link href="/2023/09/11/%E5%B0%9A%E7%A1%85%E8%B0%B7-SSM/Spring/18_%E5%9F%BA%E4%BA%8E%E6%B3%A8%E8%A7%A3%E7%9A%84%E5%A3%B0%E6%98%8E%E5%BC%8F%E4%BA%8B%E5%8A%A1%E5%AE%9E%E8%B7%B5/"/>
    <url>/2023/09/11/%E5%B0%9A%E7%A1%85%E8%B0%B7-SSM/Spring/18_%E5%9F%BA%E4%BA%8E%E6%B3%A8%E8%A7%A3%E7%9A%84%E5%A3%B0%E6%98%8E%E5%BC%8F%E4%BA%8B%E5%8A%A1%E5%AE%9E%E8%B7%B5/</url>
    
    <content type="html"><![CDATA[<h1 id="基于注解的声明式事务实践"><a href="#基于注解的声明式事务实践" class="headerlink" title="基于注解的声明式事务实践"></a>基于注解的声明式事务实践</h1><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="maven"><a href="#maven" class="headerlink" title="maven"></a>maven</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- spring-jdbc --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-jdbc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>6.0.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 声明式事务依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-tx<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>6.0.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-aop<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>6.0.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="jdbc-properties"><a href="#jdbc-properties" class="headerlink" title="jdbc.properties"></a>jdbc.properties</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">Jmin.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/studb</span><br><span class="hljs-attr">Jmin.driver</span>=<span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br><span class="hljs-attr">Jmin.username</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">Jmin.password</span>=<span class="hljs-string">lzm123456</span><br></code></pre></td></tr></table></figure><h3 id="spring配置文件"><a href="#spring配置文件" class="headerlink" title="spring配置文件"></a>spring配置文件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ComponentScan(&quot;com.jmin&quot;)</span><br><span class="hljs-meta">@PropertySource(&quot;classpath:jdbc.properties&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringConfig</span> &#123;<br>    <span class="hljs-meta">@Value(&quot;$&#123;Jmin.url&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String url;<br>    <span class="hljs-meta">@Value(&quot;$&#123;Jmin.username&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-meta">@Value(&quot;$&#123;Jmin.password&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String password;<br>    <span class="hljs-meta">@Value(&quot;$&#123;Jmin.driver&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String driver;<br>    <span class="hljs-meta">@Bean(&quot;datasource&quot;)</span><br>    <span class="hljs-keyword">public</span> DruidDataSource <span class="hljs-title function_">dataSource</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">DruidDataSource</span> <span class="hljs-variable">druidDataSource</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DruidDataSource</span>();<br>        druidDataSource.setUrl(url);<br>        druidDataSource.setDriverClassName(driver);<br>        druidDataSource.setUsername(username);<br>        druidDataSource.setPassword(password);<br>        <span class="hljs-keyword">return</span> druidDataSource;<br>    &#125;<br>    <span class="hljs-meta">@Bean(&quot;template&quot;)</span><br>    <span class="hljs-keyword">public</span> JdbcTemplate <span class="hljs-title function_">jdbctemplate</span><span class="hljs-params">(DruidDataSource dataSource)</span>&#123;<br>        <span class="hljs-type">JdbcTemplate</span> <span class="hljs-variable">jdbcTemplate</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JdbcTemplate</span>(dataSource);<br>        <span class="hljs-keyword">return</span> jdbcTemplate;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="基本事务控制"><a href="#基本事务控制" class="headerlink" title="基本事务控制"></a>基本事务控制</h2><h3 id="配置事务管理器"><a href="#配置事务管理器" class="headerlink" title="配置事务管理器"></a>配置事务管理器</h3><p>选择对应的事务管理器实现加入到ioc容器中，Spring声明式事务给我们提供了对各种管理器的实现。</p><p>例如mybatis jdbcTemplate -&gt; DataSourceTM</p><p>​hibernate -&gt; hibernateTM</p><h4 id="数据库相关配置"><a href="#数据库相关配置" class="headerlink" title="数据库相关配置"></a>数据库相关配置</h4><ol><li><p>在配置类中定义TransactionManager方法，将数据库数据源DataSource封装进容器中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> TransactionManager <span class="hljs-title function_">transactionManager</span><span class="hljs-params">(DataSource dataSource)</span>&#123;<br>    <span class="hljs-type">DataSourceTransactionManager</span> <span class="hljs-variable">dataSourceTransactionManager</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataSourceTransactionManager</span>();<br>    dataSourceTransactionManager.setDataSource(dataSource);<br>    <span class="hljs-keyword">return</span> dataSourceTransactionManager;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>配置类上方添加注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableAspectJAutoProxy</span> <span class="hljs-comment">//开启aspectj注解的支持</span><br><span class="hljs-meta">@EnableTransactionManagement</span> <span class="hljs-comment">//开启事务注解的支持</span><br></code></pre></td></tr></table></figure></li><li><p>在controller类中，类上或者方法上添加事务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StudentController</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> StudentService studentService;<br>    <span class="hljs-meta">@Transactional</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">updateAgeById</span><span class="hljs-params">(Integer id,Integer age)</span>&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">rt</span> <span class="hljs-operator">=</span> studentService.updateAgeById(age, id);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>/<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">return</span> rt;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p>测试</p><p><img src="/assets/image-20230911132502699.png" alt="image-20230911132502699"></p><p><img src="/assets/image-20230911132523307.png" alt="image-20230911132523307"></p><p>当将@TransactionManager取消后，事务关闭。</p><p><img src="/assets/image-20230911132755471.png" alt="image-20230911132755471"></p><p><img src="/assets/image-20230911132738077.png" alt="image-20230911132738077"></p><p>异常报出，但update事件仍成功提交</p><p>因此结论：事务注解开启后，如果程序异常，数据库的更新数据无效，即回滚到原来的状态！</p></li></ol><h3 id="事务属性：只读"><a href="#事务属性：只读" class="headerlink" title="事务属性：只读"></a>事务属性：只读</h3><p>readOnly &#x3D; false(defualt)&#x2F;true</p><p>如果我们将查询操作设置为只读，就能明确地通知数据库，此操作不涉及写入操作。这样数据库就能够针对查询操作来进行优化。好处是提高查询效率。</p><p><img src="/assets/image-20230911143551796.png" alt="image-20230911143551796"></p><p><img src="/assets/image-20230911143754299.png" alt="image-20230911143754299"></p><p><img src="/assets/image-20230911144404701.png" alt="image-20230911144404701"></p><p>通常情况下，都是通过类添加注解添加事务！</p><p>类下所有方法都有事务，查询方法可以通过再次添加注解，设置只读模式来提高数据库的访问效率。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@Transactional(readOnly = false)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StudentController</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> StudentService studentService;<br><span class="hljs-comment">//    @Transactional</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">updateNameById</span><span class="hljs-params">(Integer id,String name)</span>&#123;<br><br>        <span class="hljs-keyword">return</span> studentService.updateNameById(name,id);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">updateAgeById</span><span class="hljs-params">(Integer id,Integer age)</span>&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">rt</span> <span class="hljs-operator">=</span> studentService.updateAgeById(age, id);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>/<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">return</span> rt;<br>    &#125;<br>    <span class="hljs-meta">@Transactional(readOnly = true)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getStudentsInfo</span><span class="hljs-params">()</span>&#123;<br>        studentService.getStudentsInfo().forEach(System.out::println);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="事务属性：超过时间"><a href="#事务属性：超过时间" class="headerlink" title="事务属性：超过时间"></a>事务属性：超过时间</h3><p>timeout(seconds)默认永远不超时 -1</p><p>超时回滚，释放资源 </p><p><img src="/assets/image-20230911145719789.png" alt="image-20230911145719789"></p><p><img src="/assets/image-20230911150111163.png" alt="image-20230911150111163"></p><p>如果类上和方法上同时设值超时事件，则遵循就近原则，取方法上的超时事件（覆盖）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@Transactional(readOnly = false,timeout = 1)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StudentController</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> StudentService studentService;<br>    <span class="hljs-meta">@Transactional(readOnly = true,timeout = 3)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getStudentsInfo</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        Thread.sleep(<span class="hljs-number">2000</span>);<br>        studentService.getStudentsInfo().forEach(System.out::println);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="事务属性：事务异常"><a href="#事务属性：事务异常" class="headerlink" title="事务属性：事务异常"></a>事务属性：事务异常</h3><p><img src="/assets/image-20230911151540999.png" alt="image-20230911151540999"></p><h4 id="实验测试"><a href="#实验测试" class="headerlink" title="实验测试"></a>实验测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Transactional</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">updateAgeById</span><span class="hljs-params">(Integer id,Integer age)</span> <span class="hljs-keyword">throws</span> FileNotFoundException &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">rt</span> <span class="hljs-operator">=</span> studentService.updateAgeById(age, id);<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;xxx&quot;</span>);<span class="hljs-comment">//异常</span><br>    <span class="hljs-keyword">return</span> rt;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20230911152044762.png" alt="image-20230911152044762"></p><p><img src="/assets/image-20230911152058807.png" alt="image-20230911152058807"></p><p>报出异常，但是事务没有回滚，成功提交</p><p>解决方法，指定异常回滚。在默认情况下，指定发生运行时异常事务才会回滚!</p><p>当我们指定Exception异常时，控制所有的所有异常都会回滚。</p><p><img src="/assets/image-20230911152559120.png" alt="image-20230911152559120"></p><p>在@Transactional()中设置属性，rollbackFor&#x3D;（相关异常类）</p><blockquote><p>rollbackFor&#x3D;（相关异常类） 若运行时出现相关类的异常，事务将回滚。</p><p>对应的还有noRollbackFor &#x3D; （相关异常类） 若运行时出现相关类的异常，事务不会回滚。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Transactional(rollbackFor = FileNotFoundException.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">updateAgeById</span><span class="hljs-params">(Integer id,Integer age)</span> <span class="hljs-keyword">throws</span> FileNotFoundException &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">rt</span> <span class="hljs-operator">=</span> studentService.updateAgeById(age, id);<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;xxx&quot;</span>);<span class="hljs-comment">//异常</span><br>    <span class="hljs-keyword">return</span> rt;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20230911153423261.png" alt="image-20230911153423261"></p><p><img src="/assets/image-20230911153438812.png" alt="image-20230911153438812"></p><p>报出异常，事务回滚，提交失败即事务生效！</p><h3 id="事务属性：事务隔离级别"><a href="#事务属性：事务隔离级别" class="headerlink" title="事务属性：事务隔离级别"></a>事务属性：事务隔离级别</h3><ol><li><p>事务隔离级别</p><p>数据库事务的隔离级别是指在多个事务并发执行时，数据库系统为了保证数据一致性所遵循的规定。常见的隔离级别包括：</p><ol><li>读未提交（Read Uncommitted）：事务可以读取未被提交的数据，容易产生脏读、不可重复读和幻读等问题。实现简单但不太安全，一般不用。</li><li>读已提交（Read Committed）（Oracle）：事务只能读取已经提交的数据，可以避免脏读问题，但可能引发不可重复读和幻读。</li><li>可重复读（Repeatable Read）（Mysql）：在一个事务中，相同的查询将返回相同的结果集，不管其他事务对数据做了什么修改。可以避免脏读和不可重复读，但仍有幻读的问题。</li><li>串行化（Serializable）：最高的隔离级别，完全禁止了并发，只允许一个事务执行完毕之后才能执行另一个事务。可以避免以上所有问题，但效率较低，不适用于高并发场景。</li></ol><p>不同的隔离级别适用于不同的场景，需要根据实际业务需求进行选择和调整。</p></li></ol><p>脏读：没提交的数据。不可重复读和幻读：提交前后状态可能不一致</p><ol start="2"><li><p>事务隔离级别配置</p><p>在@Transactional()中设置属性，isolation &#x3D; Isolation.READ_COMMITTED 推荐第二个级别</p></li></ol><p><img src="/assets/image-20230911154853982.png" alt="image-20230911154853982"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-meta">@Transactional(rollbackFor = FileNotFoundException.class,isolation = Isolation.READ_COMMITTED)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">updateAgeById</span><span class="hljs-params">(Integer id,Integer age)</span> <span class="hljs-keyword">throws</span> FileNotFoundException &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">rt</span> <span class="hljs-operator">=</span> studentService.updateAgeById(age, id);<br><span class="hljs-comment">//        new FileInputStream(&quot;xxx&quot;);//异常</span><br>        <span class="hljs-keyword">return</span> rt;<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="事务属性：事务传播行为"><a href="#事务属性：事务传播行为" class="headerlink" title="事务属性：事务传播行为"></a>事务属性：事务传播行为</h3><ol><li>事务传播行为</li></ol><p><img src="/assets/image-20230911161522156.png" alt="image-20230911161522156"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TopController</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    StudentController studentController;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">topMethod</span><span class="hljs-params">()</span>&#123;<br>        studentController.updateNameById(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;laowang&quot;</span>);<br>        studentController.updateAgeById(<span class="hljs-number">1</span>,<span class="hljs-number">200</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> StudentService studentService;<br><br><span class="hljs-meta">@Transactional</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">updateNameById</span><span class="hljs-params">(Integer id,String name)</span>&#123;<br><br>    <span class="hljs-keyword">return</span> studentService.updateNameById(name,id);<br>&#125;<br><span class="hljs-meta">@Transactional</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">updateAgeById</span><span class="hljs-params">(Integer id,Integer age)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">rt</span> <span class="hljs-operator">=</span> studentService.updateAgeById(age, id);<br>    <span class="hljs-keyword">return</span> rt;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>疑问：下面两个方法的事务会不会传递到第一个方法中？</p><p>答：默认，会。</p></blockquote><ol start="2"><li><p>事务传播行为配置</p><p>在@Transactional()中设置属性，propagation设置传播行为，其默认值为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Propagation <span class="hljs-title function_">propagation</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> Propagation.REQUIRED;<br></code></pre></td></tr></table></figure><table><thead><tr><th>名称</th><th>含义</th></tr></thead><tbody><tr><td>REQUIRED  默认值</td><td>如果父方法有事务，就加入，如果没有就新建自己独立！</td></tr><tr><td>REQUIRES_NEW</td><td>不管父方法是否有事务，我都新建事务，都是独立的！</td></tr></tbody></table></li></ol><p>测试如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Transactional(timeout = 1)</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">updateNameById</span><span class="hljs-params">(Integer id,String name)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    Thread.sleep(<span class="hljs-number">2000</span>);<br>    <span class="hljs-keyword">return</span> studentService.updateNameById(name,id);<br>&#125;<br><br><span class="hljs-meta">@Transactional</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">updateAgeById</span><span class="hljs-params">(Integer id,Integer age)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">rt</span> <span class="hljs-operator">=</span> studentService.updateAgeById(age, id);<br>    <span class="hljs-keyword">return</span> rt;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TopController</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    StudentController studentController;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">topMethod</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        studentController.updateNameById(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;laowang&quot;</span>);<br>        studentController.updateAgeById(<span class="hljs-number">1</span>,<span class="hljs-number">200</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20230911163702874.png" alt="image-20230911163702874"></p><p>解决此问题，可以设置独立事务如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TopController</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    StudentController studentController;<br>    <span class="hljs-meta">@Transactional(propagation = Propagation.REQUIRES_NEW)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">topMethod</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        studentController.updateNameById(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;laowang&quot;</span>);<br>        studentController.updateAgeById(<span class="hljs-number">1</span>,<span class="hljs-number">200</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20230911164155568.png" alt="image-20230911164155568"></p><p>需要注意的是，同一个类中，对于@Transactional注解的方法调用，事务传播不会生效。因为Spring框架中使用代理模式实现了事务机制，在同一个类中的方法调用并不经过代理，而是通过对象的方法调用。</p><ol start="3"><li>其他传播行为<ol><li>Propagation.REQUIRED：如果当前存在事务，则加入当前事务，否则创建一个新事务。</li><li>Propagation.REQUIRES_NEW：创建一个新事务，并在新事务中执行。如果当前存在事务，则挂起当前事务，即使新事务抛出异常，也不会影响当前事务。</li><li>Propagation.NESTED：如果当前存在事务，则在该事务中嵌套一个新事务，如果没有事务，则与Propagation.REQUIRED一样。</li><li>Propagation.SUPPORTS：如果当前存在事务，则加入该事务，否则以非事务方式执行。</li><li>Propagation.NOT_SUPPORTED：以非事务方式执行，如果当前存在事务，挂起该事务。</li><li>Propagation.MANDATORY：必须在一个已有的事务中执行，否则抛出异常。</li><li>Propagation.NEVER：必须在没有事务的情况下执行，否则抛出异常。</li></ol></li></ol>]]></content>
    
    
    <categories>
      
      <category>SSM</category>
      
      <category>Spring</category>
      
      <category>AOP</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>17_Spring声明式事务</title>
    <link href="/2023/09/11/%E5%B0%9A%E7%A1%85%E8%B0%B7-SSM/Spring/17_Spring%E5%A3%B0%E6%98%8E%E5%BC%8F%E4%BA%8B%E5%8A%A1/"/>
    <url>/2023/09/11/%E5%B0%9A%E7%A1%85%E8%B0%B7-SSM/Spring/17_Spring%E5%A3%B0%E6%98%8E%E5%BC%8F%E4%BA%8B%E5%8A%A1/</url>
    
    <content type="html"><![CDATA[<h1 id="Spring声明式事务"><a href="#Spring声明式事务" class="headerlink" title="Spring声明式事务"></a>Spring声明式事务</h1><h2 id="编程式事务"><a href="#编程式事务" class="headerlink" title="编程式事务"></a>编程式事务</h2><p>编程式事务是指手动编写程序来管理事务，即通过编写代码的方式直接控制事务的提交和回滚。</p><p>在 Java 中，通常使用事务管理器(如 Spring 中的 PlatformTransactionManager)来实现编程式事务。</p><p>注意：编写大量的事务控制代码容易出现问题，对代码的可读性和可维护性有一定影响。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> ...;<br>  <br><span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-comment">// 开启事务：关闭事务的自动提交</span><br>    conn.setAutoCommit(<span class="hljs-literal">false</span>);<br>    <span class="hljs-comment">// 核心操作</span><br>    <span class="hljs-comment">// 业务代码</span><br>    <span class="hljs-comment">// 提交事务</span><br>    conn.commit();<br>  <br>&#125;<span class="hljs-keyword">catch</span>(Exception e)&#123;<br>  <br>    <span class="hljs-comment">// 回滚事务</span><br>    conn.rollBack();<br>  <br>&#125;<span class="hljs-keyword">finally</span>&#123;<br>  <br>    <span class="hljs-comment">// 释放数据库连接</span><br>    conn.close();<br>  <br>&#125;<br></code></pre></td></tr></table></figure><p>编程式的实现方式存在缺陷：</p><ul><li>细节没有被屏蔽：具体操作过程中，所有细节都需要程序员自己来完成，比较繁琐。</li><li>代码复用性不高：如果没有有效抽取出来，每次实现功能都需要自己编写代码，代码就没有得到复用。</li></ul><h2 id="声明式事务"><a href="#声明式事务" class="headerlink" title="声明式事务"></a>声明式事务</h2><p>声明式事务是指使用注解或 XML 配置的方式来控制事务的提交和回滚。</p><p>开发者只需要添加配置即可， 具体事务的实现由第三方框架实现，避免我们直接进行事务操作！</p><p>使用声明式事务可以将事务的控制和业务逻辑分离开来，提高代码的可读性和可维护性。</p><p>区别：</p><ul><li>编程式事务需要手动编写代码来管理事务</li><li>而声明式事务可以通过配置文件或注解来控制事务。</li></ul><h2 id="Spring事务管理器"><a href="#Spring事务管理器" class="headerlink" title="Spring事务管理器"></a>Spring事务管理器</h2><p>Spring-tx是对SpringAOP的再一次封装</p><p><img src="/assets/image-20230911111421095.png" alt="image-20230911111421095"></p><p>我的理解：对于mybatis在spring中的使用，需要提前导入spring-tx和spring-jdbc的包，因为mybatis的事务管理器需要由DataSourceTransactionManager实现，而这个实现类存放在spring-jdbc中。而事务管理器接口在spring-tx中。</p><h3 id="Spring声明式事务对应依赖"><a href="#Spring声明式事务对应依赖" class="headerlink" title="Spring声明式事务对应依赖"></a>Spring声明式事务对应依赖</h3><ul><li>spring-tx 包含声明式事务实现的基本规范</li><li>spring-jdbc 包含DataSource方式事务管理器实现类<code>DataSourceTransactionManager</code></li><li>spring-orm 包含其他持久层框架的事务管理器实现类例如：Hibernate&#x2F;Jpa等</li></ul><p><img src="/assets/image-20230911112808046.png" alt="image-20230911112808046"></p><p>事务管理器是org.springframework.jdbc.datasource.DataSourceTransactionManager，将来整合 JDBC方式、JdbcTemplate方式、Mybatis方式的事务实现！</p><h3 id="DataSourceTransactionManager类中的主要方法："><a href="#DataSourceTransactionManager类中的主要方法：" class="headerlink" title="DataSourceTransactionManager类中的主要方法："></a>DataSourceTransactionManager类中的主要方法：</h3><ul><li>doBegin()：开启事务</li><li>doSuspend()：挂起事务</li><li>doResume()：恢复挂起的事务</li><li>doCommit()：提交事务</li><li>doRollback()：回滚事务</li></ul>]]></content>
    
    
    <categories>
      
      <category>SSM</category>
      
      <category>Spring</category>
      
      <category>AOP</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>16_SpringAOP对获取bean的影响</title>
    <link href="/2023/09/11/%E5%B0%9A%E7%A1%85%E8%B0%B7-SSM/Spring/16_SpringAOP%E5%AF%B9%E8%8E%B7%E5%8F%96bean%E7%9A%84%E5%BD%B1%E5%93%8D/"/>
    <url>/2023/09/11/%E5%B0%9A%E7%A1%85%E8%B0%B7-SSM/Spring/16_SpringAOP%E5%AF%B9%E8%8E%B7%E5%8F%96bean%E7%9A%84%E5%BD%B1%E5%93%8D/</url>
    
    <content type="html"><![CDATA[<h1 id="SpringAOP对获取bean的影响"><a href="#SpringAOP对获取bean的影响" class="headerlink" title="SpringAOP对获取bean的影响"></a>SpringAOP对获取bean的影响</h1><ol><li><p>情景一</p><ul><li>bean 对应的类没有实现任何接口</li><li>根据 bean 本身的类型获取 bean<ul><li><p>测试：IOC容器中同类型的 bean 只有一个</p><p>  正常获取到 IOC 容器中的那个 bean 对象</p></li><li><p>测试：IOC 容器中同类型的 bean 有多个</p><p>  会抛出 NoUniqueBeanDefinitionException 异常，表示 IOC 容器中这个类型的 bean 有多个</p></li></ul></li></ul></li><li><p>情景二</p><ul><li>bean 对应的类实现了接口，这个接口也只有这一个实现类<ul><li><p>测试：根据接口类型获取 bean</p></li><li><p>测试：根据类获取 bean</p><p>结论：上面两种情况其实都能够正常获取到 bean，而且是同一个对象</p></li></ul></li></ul></li><li><p>情景三</p><ul><li>声明一个接口</li><li>接口有多个实现类</li><li>接口所有实现类都放入 IOC 容器<ul><li><p>测试：根据接口类型获取 bean</p><p>  会抛出 NoUniqueBeanDefinitionException 异常，表示 IOC 容器中这个类型的 bean 有多个</p></li><li><p>测试：根据类获取bean</p><p>  正常</p></li></ul></li></ul></li><li><p>情景四</p><ul><li>声明一个接口</li><li>接口有一个实现类</li><li>创建一个切面类，对上面接口的实现类应用通知<ul><li><p>测试：根据接口类型获取bean</p><p>  正常</p></li><li><p>测试：根据类获取bean</p><p>  无法获取</p></li></ul></li></ul><p> 原因分析：</p><ul><li><p>应用了切面后，真正放在IOC容器中的是代理类的对象</p></li><li><p>目标类并没有被放到IOC容器中，所以根据目标类的类型从IOC容器中是找不到的</p><p><img src="/assets/image-20230911100922767.png" alt="image-20230911100922767"></p></li></ul></li><li><p>情景五</p></li></ol><ul><li><p>声明一个类</p></li><li><p>创建一个切面类，对上面的类应用通知</p><ul><li>测试：根据类获取 bean，能获取到</li></ul><p>  <img src="/assets/image-20230911101031834.png" alt="image-20230911101031834"></p><p>  debug查看实际类型：</p><p>  <img src="/assets/image-20230911101048284.png" alt="image-20230911101048284"></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>SSM</category>
      
      <category>Spring</category>
      
      <category>AOP</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>15_基于XML实现SpringAOP的实现(了解)</title>
    <link href="/2023/09/11/%E5%B0%9A%E7%A1%85%E8%B0%B7-SSM/Spring/15_%E5%9F%BA%E4%BA%8EXML%E5%AE%9E%E7%8E%B0SpringAOP%E7%9A%84%E5%AE%9E%E7%8E%B0(%E4%BA%86%E8%A7%A3)/"/>
    <url>/2023/09/11/%E5%B0%9A%E7%A1%85%E8%B0%B7-SSM/Spring/15_%E5%9F%BA%E4%BA%8EXML%E5%AE%9E%E7%8E%B0SpringAOP%E7%9A%84%E5%AE%9E%E7%8E%B0(%E4%BA%86%E8%A7%A3)/</url>
    
    <content type="html"><![CDATA[<h1 id="基于XML实现SpringAOP的实现"><a href="#基于XML实现SpringAOP的实现" class="headerlink" title="基于XML实现SpringAOP的实现"></a>基于XML实现SpringAOP的实现</h1><p>配置xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:aop</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/aop&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.jmin&quot;</span>/&gt;</span><br><span class="hljs-comment">&lt;!--    切面配置，声明切点，位置指定--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:config</span>&gt;</span><br><span class="hljs-comment">&lt;!--        声明切点标签--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:pointcut</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;pc&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;execution(* com.jmin.*.*(..))&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:aspect</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;logAdvice&quot;</span> <span class="hljs-attr">order</span>=<span class="hljs-string">&quot;5&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">aop:before</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;start&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;pc&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">aop:aspect</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">aop:config</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringJUnitConfig(locations = &quot;classpath:Spring.xml&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringTest</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    Calculator calculator;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;<br>        calculator.add(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>SSM</category>
      
      <category>Spring</category>
      
      <category>AOP</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>14_SpringAOP切点表达式语法</title>
    <link href="/2023/09/10/%E5%B0%9A%E7%A1%85%E8%B0%B7-SSM/Spring/14_SpringAOP%E5%88%87%E7%82%B9%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <url>/2023/09/10/%E5%B0%9A%E7%A1%85%E8%B0%B7-SSM/Spring/14_SpringAOP%E5%88%87%E7%82%B9%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="SpringAOP切点表达式"><a href="#SpringAOP切点表达式" class="headerlink" title="SpringAOP切点表达式"></a>SpringAOP切点表达式</h1><h2 id="切点表达式的作用"><a href="#切点表达式的作用" class="headerlink" title="切点表达式的作用"></a>切点表达式的作用</h2><p>AOP切点表达式是一种用于指定切点的语言，它可以通过定义匹配规则，来选择需要被切入的目标对象。</p><p><img src="/assets/image-20230910232244337.png" alt="image-20230910232244337"></p><h2 id="切点表达式的语法"><a href="#切点表达式的语法" class="headerlink" title="切点表达式的语法"></a>切点表达式的语法</h2><p><img src="/assets/image-20230910232410627.png" alt="image-20230910232410627"></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs text">固定语法 execution(切入表达式)<br>execution(1,2,3,4.5(6))<br>1 访问修饰符<br>public / private<br>2 方法的返回参数类型<br>String int void<br>（1，2都不考虑，两位整合一起写*）<br>3 包的位置<br>具体包：com.jmin.impl<br>单层模糊：com.jmin.*<br>多层模糊：com..impl      ..是任意层的模<br>4 类的名称<br>具体：Calculator<br>模糊：*<br>部分模糊：*tor<br>.5 方法名 语法与类名一致<br>(6) 形参列表<br>没有参数()<br>有具体参数(String,int)<br>模糊参数(..)<br>部分模糊(String...) (..,String)<br></code></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs text">练习<br>1.查询某包某类下，访问修饰符是公有，返回值是int的全部方法<br>execution(public int com.jmin.impl.CalculatorPureImpl.add(..))<br>2.查询某包下类中第一个参数是String的方法<br>execution(public int com.jmin.impl.CalculatorPureImpl.add())<br>3.查询全部包下，无参数的方法！<br>execution(* *..*.*())<br>4.查询com包下，以int参数类型结尾的方法<br>execution(* com..*.*(..,int))<br>5.查询指定包下，Service开头类的私有返回值int的无参数方法<br>execution(private int com.jmin.impl.Service*.*())<br></code></pre></td></tr></table></figure><h2 id="切点表达式的提取和复用"><a href="#切点表达式的提取和复用" class="headerlink" title="切点表达式的提取和复用"></a>切点表达式的提取和复用</h2><ol><li><p>从当前类中获取，定义一个空方法，注解，增强注解中引用切点表达式。不推荐</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Pointcut(&quot;execution(* com.jmin.impl.*.*(..,int))&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pc</span><span class="hljs-params">()</span>&#123;&#125;;<br></code></pre></td></tr></table></figure><p>引用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Before(&quot;pc()&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">()</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;方法开始&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>创建存储切点的类，可用于单独维护切点表达式，其他类的切点方法 类的全限定符号.方法名()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyPointcut</span> &#123;<br>    <span class="hljs-meta">@Pointcut(&quot;execution(* com.jmin.impl.*.*(..,int))&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pc</span><span class="hljs-params">()</span>&#123;&#125;;<br><br>    <span class="hljs-meta">@Pointcut(&quot;execution(* com.jmin.impl.*.*(..))&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">myPC</span><span class="hljs-params">()</span>&#123;&#125;;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Aspect</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyAdvice</span> &#123;<br>    <span class="hljs-meta">@Before(&quot;com.jmin.pointcut.MyPointcut.myPC()&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">(JoinPoint joinPoint)</span>&#123;<br>        System.out.println(joinPoint.getTarget().getClass().getSimpleName());<br>        System.out.println(joinPoint.getTarget().getClass().getPackageName());<br>        System.out.println(joinPoint.getTarget().getClass().getCanonicalName());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="环绕通知"><a href="#环绕通知" class="headerlink" title="环绕通知"></a>环绕通知</h2>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Before(&quot;com.jmin.pointcut.MyPointcut.pc()&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">begin</span><span class="hljs-params">()</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;开启事务&quot;</span>);<br>&#125;<br><span class="hljs-meta">@Before(&quot;com.jmin.pointcut.MyPointcut.pc()&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">commit</span><span class="hljs-params">()</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;提交事务&quot;</span>);<br>&#125;<br><span class="hljs-meta">@Before(&quot;com.jmin.pointcut.MyPointcut.pc()&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">rollback</span><span class="hljs-params">()</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;事务回滚&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Around(&quot;com.jmin.pointcut.MyPointcut.pc()&quot;)</span><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">transaction</span><span class="hljs-params">(ProceedingJoinPoint joinPoint)</span> &#123;<br>    Object[] args = joinPoint.getArgs();<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">proceed</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;开启事务&quot;</span>);<br>        proceed = joinPoint.proceed(args);<br>        System.out.println(<span class="hljs-string">&quot;结束事务&quot;</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (Throwable e) &#123;<br>        System.out.println(<span class="hljs-string">&quot;事务回滚&quot;</span>);<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>    &#125;<span class="hljs-keyword">finally</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;一定通知&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> proceed;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="切面优先级设置"><a href="#切面优先级设置" class="headerlink" title="切面优先级设置"></a>切面优先级设置</h2><p>在增强类上注解@Order(value)</p><p>value指定优先级，设置值越低，优先级越高，优先级越高的前置先执行，后置后执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Aspect</span><br><span class="hljs-meta">@Order(1)</span> <span class="hljs-comment">//指定优先级，设置值越低，优先级越高，优先级越高的前置先执行，后置后执行</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LogAdvice</span> &#123;<br>    <span class="hljs-meta">@Before(&quot;com.jmin.pointcut.MyPointcut.pc()&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;方法开始&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@AfterReturning(&quot;com.jmin.pointcut.MyPointcut.pc()&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">after</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;方法结束&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@AfterThrowing(&quot;com.jmin.pointcut.MyPointcut.pc()&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">error</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;方法错误&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Aspect</span><br><span class="hljs-meta">@Order(10)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TxAdvice</span> &#123;<br>    <span class="hljs-meta">@Before(&quot;com.jmin.pointcut.MyPointcut.pc()&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">begin</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;开启事务&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@Before(&quot;com.jmin.pointcut.MyPointcut.pc()&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">commit</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;提交事务&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@Before(&quot;com.jmin.pointcut.MyPointcut.pc()&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">rollback</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;事务回滚&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>SSM</category>
      
      <category>Spring</category>
      
      <category>AOP</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>13_SpringAOP基于注解方式实现和细节</title>
    <link href="/2023/09/10/%E5%B0%9A%E7%A1%85%E8%B0%B7-SSM/Spring/13_SpringAOP%E5%9F%BA%E4%BA%8E%E6%B3%A8%E8%A7%A3%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0%E5%92%8C%E7%BB%86%E8%8A%82/"/>
    <url>/2023/09/10/%E5%B0%9A%E7%A1%85%E8%B0%B7-SSM/Spring/13_SpringAOP%E5%9F%BA%E4%BA%8E%E6%B3%A8%E8%A7%A3%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0%E5%92%8C%E7%BB%86%E8%8A%82/</url>
    
    <content type="html"><![CDATA[<h1 id="SpringAOP基于注解方式实现和细节"><a href="#SpringAOP基于注解方式实现和细节" class="headerlink" title="SpringAOP基于注解方式实现和细节"></a>SpringAOP基于注解方式实现和细节</h1><h2 id="SpringAOC底层技术组成"><a href="#SpringAOC底层技术组成" class="headerlink" title="SpringAOC底层技术组成"></a>SpringAOC底层技术组成</h2><p><img src="/assets/image-20230910120131262.png" alt="image-20230910120131262"></p><p>AspectJ：早期的AOP实现的框架，SpringAOP借用了AspectJ中的AOP注解。</p><h2 id="加入依赖"><a href="#加入依赖" class="headerlink" title="加入依赖"></a>加入依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- spring-aspects会帮我们传递过来aspectjweaver --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-aop<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>6.0.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--只需导入下面的依赖 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-aspects<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>6.0.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="配置类"><a href="#配置类" class="headerlink" title="配置类"></a>配置类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ComponentScan(&quot;com.jmin&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringConfig</span> &#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="目标方法"><a href="#目标方法" class="headerlink" title="目标方法"></a>目标方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CalculatorPureImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Calculator</span> &#123;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span> &#123;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> i + j;<br><br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sub</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span> &#123;<br>    <br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> i - j;<br>    <br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">mul</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span> &#123;<br>    <br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> i * j;<br>    <br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">div</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span> &#123;<br>    <br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> i / j;<br>    <br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="增强方法定义"><a href="#增强方法定义" class="headerlink" title="增强方法定义"></a>增强方法定义</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Aspect</span> <span class="hljs-comment">//必须添加@Aspect注解</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LogAdvice</span> &#123;<br>    <span class="hljs-comment">//切入点表达式</span><br>    <span class="hljs-meta">@Before(&quot;execution(* com.jmin.impl.*.*(..))&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;方法开始&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@After(&quot;execution(* com.jmin.impl.*.*(..))&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">after</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;方法结束&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@AfterThrowing(&quot;execution(* com.jmin.impl.*.*(..))&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">error</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;方法错误&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="在配置类中添加代理开启注解"><a href="#在配置类中添加代理开启注解" class="headerlink" title="在配置类中添加代理开启注解"></a>在配置类中添加代理开启注解</h2><p>@EnableAspectJAutoProxy &#x2F;&#x2F;开启aspectj</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ComponentScan(&quot;com.jmin&quot;)</span><br><span class="hljs-meta">@EnableAspectJAutoProxy</span> <span class="hljs-comment">//开启aspectj</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringConfig</span> &#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringJUnitConfig(value = SpringConfig.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringTest</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> Calculator calculator;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testAOP</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(calculator.add(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20230910201926810.png" alt="image-20230910201926810"></p><h3 id="测试类注入实现类报错，而注入接口正常"><a href="#测试类注入实现类报错，而注入接口正常" class="headerlink" title="测试类注入实现类报错，而注入接口正常"></a>测试类注入实现类报错，而注入接口正常</h3><p>因为aop-代理默认选择的代理方式是jdk方式，必须通过接口才能执行代理。</p><blockquote><p>aop-代理-jdk-接口-生成代理类-代理对象和目标对象</p><p>即接口接值</p></blockquote><p>解决方法：删掉接口类，Spring会自动使用cglib技术实现代理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CalculatorPureImpl</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> i + j;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringJUnitConfig(value = SpringConfig.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringTest</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> CalculatorPureImpl calculator;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testAOP</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(calculator.add(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20230911010735610.png" alt="image-20230911010735610"></p><h2 id="获取通知细节信息"><a href="#获取通知细节信息" class="headerlink" title="获取通知细节信息"></a>获取通知细节信息</h2><h3 id="JointPoint接口"><a href="#JointPoint接口" class="headerlink" title="JointPoint接口"></a>JointPoint接口</h3><p>需要获取方法签名、传入的实参等信息时，可以在通知方法声明JoinPoint类型的形参。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Aspect</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyAdvice</span> &#123;<br>    <span class="hljs-meta">@Before(&quot;execution(* com.jmin.impl.*.*(..))&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">(JoinPoint joinPoint)</span>&#123;<br>        System.out.println(joinPoint.getTarget().getClass().getSimpleName());<br>        System.out.println(joinPoint.getTarget().getClass().getPackageName());<br>        System.out.println(joinPoint.getTarget().getClass().getCanonicalName());<br>        System.out.println(joinPoint.getSignature());<br>        System.out.println(Modifier.toString(joinPoint.getSignature().getModifiers()));<span class="hljs-comment">//返回方法信息</span><br>        System.out.println(joinPoint.getArgs());<br>    &#125;<br>    <span class="hljs-meta">@After(&quot;execution(* com.jmin.impl.*.*(..))&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">after</span><span class="hljs-params">()</span>&#123;<br><br>    &#125;<br>    <span class="hljs-meta">@AfterReturning(value = &quot;execution(* com.jmin.impl.*.*(..))&quot;,returning = &quot;result&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterRetuning</span><span class="hljs-params">(JoinPoint joinPoint,Object result)</span>&#123;<br>        System.out.println(result.getClass().getName());<span class="hljs-comment">//java.lang.Integer</span><br>    &#125;<br>    <span class="hljs-meta">@AfterThrowing(value = &quot;execution(* com.jmin.impl.*.*(..))&quot;,throwing = &quot;throwable&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterThrowing</span><span class="hljs-params">(JoinPoint joinPoint,Throwable throwable)</span>&#123;<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="/assets/image-20230910212323852.png" alt="image-20230910212323852"></p>]]></content>
    
    
    <categories>
      
      <category>SSM</category>
      
      <category>Spring</category>
      
      <category>AOP</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>12_SpringAOP面向切面编程思想</title>
    <link href="/2023/09/09/%E5%B0%9A%E7%A1%85%E8%B0%B7-SSM/Spring/12_SpringAOP%E9%9D%A2%E5%90%91%E5%88%87%E9%9D%A2%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3/"/>
    <url>/2023/09/09/%E5%B0%9A%E7%A1%85%E8%B0%B7-SSM/Spring/12_SpringAOP%E9%9D%A2%E5%90%91%E5%88%87%E9%9D%A2%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3/</url>
    
    <content type="html"><![CDATA[<h1 id="Spring面向切面编程思想AOP"><a href="#Spring面向切面编程思想AOP" class="headerlink" title="Spring面向切面编程思想AOP"></a>Spring面向切面编程思想AOP</h1><h2 id="AOP面向切面编程"><a href="#AOP面向切面编程" class="headerlink" title="AOP面向切面编程"></a>AOP面向切面编程</h2><p>AOP就是OOP（面向对象编程）的补充和完善。OOP引入封装、继承、多态等概念来建立一种对象层次结构，用于模拟公共行为的一个集合。不过OOP允许开发者定义纵向 的关系，但并不适合定义横向的关系，例如日志功能。</p><p><img src="/assets/image-20230910102426048.png" alt="image-20230910102426048"></p><p>AOP是OOP的完善和补充，AOP是面向切面编程，横向的编程思维。</p><p>可以将代码中重复的非核心代码提取到一个公共模块，最终在利用动态代理技术，横向插入到各个方法中！</p><h2 id="AOP主要应用场景"><a href="#AOP主要应用场景" class="headerlink" title="AOP主要应用场景"></a>AOP主要应用场景</h2><ol><li>日志记录：在系统中记录日志是非常重要的，可以使用AOP来实现日志记录的功能，可以在方法执行前、执行后或异常抛出时记录日志。</li><li>事务处理：在数据库操作中使用事务可以保证数据的一致性，可以使用AOP来实现事务处理的功能，可以在方法开始前开启事务，在方法执行完毕后提交或回滚事务。</li><li>安全控制：在系统中包含某些需要安全控制的操作，如登录、修改密码、授权等，可以使用AOP来实现安全控制的功能。可以在方法执行前进行权限判断，如果用户没有权限，则抛出异常或转向到错误页面，以防止未经授权的访问。</li><li>性能监控：在系统运行过程中，有时需要对某些方法的性能进行监控，以找到系统的瓶颈并进行优化。可以使用AOP来实现性能监控的功能，可以在方法执行前记录时间戳，在方法执行完毕后计算方法执行时间并输出到日志中。</li><li>异常处理：系统中可能出现各种异常情况，如空指针异常、数据库连接异常等，可以使用AOP来实现异常处理的功能，在方法执行过程中，如果出现异常，则进行异常处理（如记录日志、发送邮件等）。</li><li>缓存控制：在系统中有些数据可以缓存起来以提高访问速度，可以使用AOP来实现缓存控制的功能，可以在方法执行前查询缓存中是否有数据，如果有则返回，否则执行方法并将方法返回值存入缓存中。</li><li>动态代理：AOP的实现方式之一是通过动态代理，可以代理某个类的所有方法，用于实现各种功能。</li></ol><h2 id="AOP术语名词"><a href="#AOP术语名词" class="headerlink" title="AOP术语名词"></a>AOP术语名词</h2><h3 id="横切关注点"><a href="#横切关注点" class="headerlink" title="横切关注点"></a>横切关注点</h3><p>从每个方法中抽取出来的同一类的非核心业务。在同一项目中，我们可以使用多个横切关注点对方法进行多方面的增强。</p><p>AOP把软件系统分为两个部分：核心关注点和横切关注点。业务处理的主要流程是核心关注点，与之关系不大的部分是横切关注点。</p><h3 id="通知（增强）"><a href="#通知（增强）" class="headerlink" title="通知（增强）"></a>通知（增强）</h3><p>每个横切关注点上要做的事情都需要写一个方法来实现，就叫通知方法。</p><ul><li>前置通知：在被代理的目标方法前执行。</li><li>返回通知：在被代理的目标方法成功结束后执行。</li><li>异常通知：在被代理的目标方法异常结束后执行。</li><li>后置通知：在被代理的目标方法最终结束后执行。（不管是否异常）</li><li>环绕通知：使用try…catch…finally结构围绕整个被代理的目标方法，包括上面四种通知对应的所有位置。</li></ul><h3 id="连接点joinpoint"><a href="#连接点joinpoint" class="headerlink" title="连接点joinpoint"></a>连接点joinpoint</h3><p>可以被切入的方法</p><h3 id="切入点pointcut"><a href="#切入点pointcut" class="headerlink" title="切入点pointcut"></a>切入点pointcut</h3><p>切点就是连接点，被选中切入的连接点</p><h3 id="切面"><a href="#切面" class="headerlink" title="切面"></a>切面</h3><p>切点+增强</p><h3 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h3><p>要被切入类的对象</p><h3 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h3><p>目标的核心代码，增强代码</p><h3 id="织入"><a href="#织入" class="headerlink" title="织入"></a>织入</h3><p>配置的动作，将增强插入到切点的过程，形成切面</p>]]></content>
    
    
    <categories>
      
      <category>SSM</category>
      
      <category>Spring</category>
      
      <category>AOP</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>11_面向切面编程</title>
    <link href="/2023/09/09/%E5%B0%9A%E7%A1%85%E8%B0%B7-SSM/Spring/11_%E9%9D%A2%E5%90%91%E5%88%87%E9%9D%A2%E7%BC%96%E7%A8%8B/"/>
    <url>/2023/09/09/%E5%B0%9A%E7%A1%85%E8%B0%B7-SSM/Spring/11_%E9%9D%A2%E5%90%91%E5%88%87%E9%9D%A2%E7%BC%96%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="面向切面编程入门"><a href="#面向切面编程入门" class="headerlink" title="面向切面编程入门"></a>面向切面编程入门</h1><h2 id="场景设定，问题复现"><a href="#场景设定，问题复现" class="headerlink" title="场景设定，问题复现"></a>场景设定，问题复现</h2><p>定义四个加减乘除方法，要求分别输出需要运算的数值和运算结果</p><ol><li><p>声明接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *       + - * / 运算的标准接口!</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Calculator</span> &#123;<br>    <br>    <span class="hljs-type">int</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span>;<br>    <br>    <span class="hljs-type">int</span> <span class="hljs-title function_">sub</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span>;<br>    <br>    <span class="hljs-type">int</span> <span class="hljs-title function_">mul</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span>;<br>    <br>    <span class="hljs-type">int</span> <span class="hljs-title function_">div</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span>;<br>    <br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>接口实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 实现计算接口,单纯添加 + - * / 实现! 掺杂其他功能!</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CalculatorPureImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Calculator</span> &#123;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span> &#123;<br>    <span class="hljs-comment">//sout</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> i + j;<br>    <span class="hljs-comment">//sout 冗余问题出现</span><br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sub</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span> &#123;<br>    <br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> i - j;<br>    <br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">mul</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span> &#123;<br>    <br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> i * j;<br>    <br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">div</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span> &#123;<br>    <br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> i / j;<br>    <br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在每个方法中，先输出i和j的值，再输出result的值，实践发现，这样的代码十分冗余！！而且不方便维护！</p></li><li><p>解决思路：解耦，将重复代码统一提取，并且动态插入到每个业务方法中。</p><p><img src="/assets/image-20230909231429135.png" alt="image-20230909231429135"></p></li></ol><h2 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h2><p>代理：将非核心逻辑剥离出来以后，封装这些非核心逻辑的类，对象，方法（中介）。</p><p>目标：被代理“套用”课核心逻辑代码的类，对象，方法（房东）。</p><p>代理的两种实现方式：静态代理和动态代理技术</p><h3 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StaticProxyCalculator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Calculator</span> &#123;<br>    <span class="hljs-keyword">private</span> Calculator calculator;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">StaticProxyCalculator</span><span class="hljs-params">(Calculator calculator)</span> &#123;<br>        <span class="hljs-built_in">this</span>.calculator = calculator;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;i = &quot;</span> + i + <span class="hljs-string">&quot;,j = &quot;</span> + j);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> calculator.add(i, j);<br>        System.out.println(<span class="hljs-string">&quot;result = &quot;</span> + result);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sub</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;i = &quot;</span> + i + <span class="hljs-string">&quot;,j = &quot;</span> + j);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> calculator.sub(i, j);<br>        System.out.println(<span class="hljs-string">&quot;result = &quot;</span> + result);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">mul</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;i = &quot;</span> + i + <span class="hljs-string">&quot;,j = &quot;</span> + j);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> calculator.mul(i, j);<br>        System.out.println(<span class="hljs-string">&quot;result = &quot;</span> + result);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">div</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;i = &quot;</span> + i + <span class="hljs-string">&quot;,j = &quot;</span> + j);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> calculator.div(i, j);<br>        System.out.println(<span class="hljs-string">&quot;result = &quot;</span> + result);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h3><p>动态代理技术分类：</p><ol><li><p>JDK动态代理：JDK原生的实现方式，需要被代理的目标类必须实现接口，JDK动态代理会根据此接口生成代理对象。代理对象和目标对象有相同的接口！（Java原生）</p><p><img src="/assets/image-20230910095814197.png" alt="image-20230910095814197"></p></li><li><p>cglib：通过继承被代理的目标类实现代理，不需要目标类实现接口！（第三方-&gt;Spring）</p><p><img src="/assets/image-20230910095842382.png" alt="image-20230910095842382"></p></li></ol><p>两种动态代理技术操作十分繁琐。需要自己编写代理工厂，在实际开发中，可以使用SpringAOP框架，简化代理的实现。</p><p>新需求： 需要在每个方法中，添加控制台输出，输出参数和输出计算后的返回值！</p><p><img src="/assets/image-20230909230714132.png" alt="image-20230909230714132"></p>]]></content>
    
    
    <categories>
      
      <category>SSM</category>
      
      <category>Spring</category>
      
      <category>AOP</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>10_Spring-text-测试环境搭建</title>
    <link href="/2023/09/09/%E5%B0%9A%E7%A1%85%E8%B0%B7-SSM/Spring/10_Spring-text-%E6%B5%8B%E8%AF%95%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <url>/2023/09/09/%E5%B0%9A%E7%A1%85%E8%B0%B7-SSM/Spring/10_Spring-text-%E6%B5%8B%E8%AF%95%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="Spring-text测试环境搭建"><a href="#Spring-text测试环境搭建" class="headerlink" title="Spring-text测试环境搭建"></a>Spring-text测试环境搭建</h1><h2 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>6.0.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="创建组件"><a href="#创建组件" class="headerlink" title="创建组件"></a>创建组件</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="创建测试类"><a href="#创建测试类" class="headerlink" title="创建测试类"></a>创建测试类</h2><p>在测试类上注解</p><p><img src="/assets/image-20230909181222695.png" alt="image-20230909181222695"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringJUnitConfig(JavaConfig.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">javaTest</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> A a;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(a);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20230909182032516.png" alt="image-20230909182032516"></p>]]></content>
    
    
    <categories>
      
      <category>SSM</category>
      
      <category>Spring</category>
      
      <category>Test</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>9_基于注解+配置类方式的SpringIOC容器</title>
    <link href="/2023/09/08/%E5%B0%9A%E7%A1%85%E8%B0%B7-SSM/Spring/9_%E5%9F%BA%E4%BA%8E%E9%85%8D%E7%BD%AE%E7%B1%BB%E7%9A%84%E7%AE%A1%E7%90%86IOC%E7%BB%83%E4%B9%A0/"/>
    <url>/2023/09/08/%E5%B0%9A%E7%A1%85%E8%B0%B7-SSM/Spring/9_%E5%9F%BA%E4%BA%8E%E9%85%8D%E7%BD%AE%E7%B1%BB%E7%9A%84%E7%AE%A1%E7%90%86IOC%E7%BB%83%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="基于注解-配置类方式整合三层架构组件"><a href="#基于注解-配置类方式整合三层架构组件" class="headerlink" title="基于注解+配置类方式整合三层架构组件"></a>基于注解+配置类方式整合三层架构组件</h1><h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><p>搭建一个三层架构案例，模拟查询全部学生（学生表）信息，持久层使用JdbcTemplate和Druid技术，使用注解+配置类方式进行组件管理！</p><p><img src="/assets/image-20230908191853863.png" alt="image-20230908191853863"></p><h2 id="jdbc-properties"><a href="#jdbc-properties" class="headerlink" title="jdbc.properties"></a>jdbc.properties</h2><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">Jmin.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/studb</span><br><span class="hljs-attr">Jmin.driver</span>=<span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br><span class="hljs-attr">Jmin.username</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">Jmin.password</span>=<span class="hljs-string">lzm123456</span><br></code></pre></td></tr></table></figure><h2 id="Config类"><a href="#Config类" class="headerlink" title="Config类"></a>Config类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ComponentScan(&quot;com.Jmin&quot;)</span><br><span class="hljs-meta">@PropertySource(&quot;classpath:jdbc.properties&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Config</span> &#123;<br>    <span class="hljs-meta">@Value(&quot;$&#123;Jmin.username&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-meta">@Value(&quot;$&#123;Jmin.password&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String password;<br>    <span class="hljs-meta">@Value(&quot;$&#123;Jmin.url&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String url;<br>    <span class="hljs-meta">@Value(&quot;$&#123;Jmin.driver&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String driver;<br>    <span class="hljs-meta">@Bean(&quot;datasource&quot;)</span><br>    <span class="hljs-keyword">public</span> DruidDataSource <span class="hljs-title function_">dataSource</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">DruidDataSource</span> <span class="hljs-variable">druidDataSource</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DruidDataSource</span>();<br>        druidDataSource.setDriverClassName(driver);<br>        druidDataSource.setUsername(username);<br>        druidDataSource.setPassword(password);<br>        druidDataSource.setUrl(url);<br>        <span class="hljs-keyword">return</span> druidDataSource;<br>    &#125;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> JdbcTemplate <span class="hljs-title function_">jdbcTemplate</span><span class="hljs-params">(DruidDataSource dataSource)</span>&#123;<br>        <span class="hljs-type">JdbcTemplate</span> <span class="hljs-variable">jdbcTemplate</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JdbcTemplate</span>();<br>        jdbcTemplate.setDataSource(dataSource);<br>        <span class="hljs-keyword">return</span> jdbcTemplate;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="POJO"><a href="#POJO" class="headerlink" title="POJO"></a>POJO</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br><br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String gender;<br>    <span class="hljs-keyword">private</span> Integer age;<br>    <span class="hljs-keyword">private</span> String classes;<br><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setId</span><span class="hljs-params">(Integer id)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getGender</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> gender;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setGender</span><span class="hljs-params">(String gender)</span> &#123;<br>        <span class="hljs-built_in">this</span>.gender = gender;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(Integer age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getClasses</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> classes;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setClasses</span><span class="hljs-params">(String classes)</span> &#123;<br>        <span class="hljs-built_in">this</span>.classes = classes;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Student&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;id=&quot;</span> + id +<br>                <span class="hljs-string">&quot;, name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, gender=&#x27;&quot;</span> + gender + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&quot;, classes=&#x27;&quot;</span> + classes + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="Dao"><a href="#Dao" class="headerlink" title="Dao"></a>Dao</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">StudentsDao</span> &#123;<br>    List&lt;Student&gt; <span class="hljs-title function_">queryAll</span><span class="hljs-params">()</span>;<br>&#125;<br><span class="hljs-meta">@Repository</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StudentsDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">StudentsDao</span>&#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> JdbcTemplate jdbcTemplate;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> List&lt;Student&gt; <span class="hljs-title function_">queryAll</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select id , name , age , gender , class as classes from students ;&quot;</span>;<br>        <span class="hljs-keyword">return</span> jdbcTemplate.query(sql,<span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanPropertyRowMapper</span>&lt;&gt;(Student.class));<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">StudentService</span> &#123;<br>    List&lt;Student&gt; <span class="hljs-title function_">queryAll</span><span class="hljs-params">()</span>;<br>&#125;<br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StudentServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">StudentService</span>&#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> StudentsDao studentsDao;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> List&lt;Student&gt; <span class="hljs-title function_">queryAll</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> studentsDao.queryAll();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="CONTROLLER"><a href="#CONTROLLER" class="headerlink" title="CONTROLLER"></a>CONTROLLER</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StudentController</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> StudentService studentService;<br>    <span class="hljs-keyword">public</span> List&lt;Student&gt; <span class="hljs-title function_">queryAllStudents</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> studentService.queryAll();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="/assets/image-20230908203823499.png" alt="image-20230908203823499"></p>]]></content>
    
    
    <categories>
      
      <category>SSM</category>
      
      <category>Spring</category>
      
      <category>IOC</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>8_基于配置类方式的SpringIOC容器</title>
    <link href="/2023/09/08/%E5%B0%9A%E7%A1%85%E8%B0%B7-SSM/Spring/8_%E5%9F%BA%E4%BA%8E%E9%85%8D%E7%BD%AE%E7%B1%BB%E6%96%B9%E5%BC%8F%E7%9A%84SpringIOC%E5%AE%B9%E5%99%A8/"/>
    <url>/2023/09/08/%E5%B0%9A%E7%A1%85%E8%B0%B7-SSM/Spring/8_%E5%9F%BA%E4%BA%8E%E9%85%8D%E7%BD%AE%E7%B1%BB%E6%96%B9%E5%BC%8F%E7%9A%84SpringIOC%E5%AE%B9%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="基于配置类方式的SpringIOC容器"><a href="#基于配置类方式的SpringIOC容器" class="headerlink" title="基于配置类方式的SpringIOC容器"></a>基于配置类方式的SpringIOC容器</h1><h2 id="完全注解开发理解"><a href="#完全注解开发理解" class="headerlink" title="完全注解开发理解"></a>完全注解开发理解</h2><p><img src="/assets/image-20230908120030887.png" alt="image-20230908120030887"></p><h2 id="配置类"><a href="#配置类" class="headerlink" title="配置类"></a>配置类</h2><ol><li>包扫描注解配置 @ComponentScan()</li><li>引用外部的配置文件@PropertySource()</li><li>声明第三方依赖的三个功能注解</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span> <span class="hljs-comment">//代表配置类</span><br><span class="hljs-meta">@ComponentScan(&#123;&quot;com.Jmin.ioc_01&quot;,&quot;com.Jmin.ioc_02&quot;&#125;)</span> <span class="hljs-comment">//扫描包</span><br><span class="hljs-meta">@PropertySource(&quot;classpath:jdbc.properties&quot;)</span> <span class="hljs-comment">//properties扫描</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Config</span> &#123;<br><span class="hljs-meta">@Value(&quot;$&#123;Jmin.url&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String url;<br>    <span class="hljs-meta">@Value(&quot;$&#123;Jmin.driver&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String driver;<br>    <span class="hljs-meta">@Value(&quot;$&#123;Jmin.username&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-meta">@Value(&quot;$&#123;Jmin.password&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String password;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> DruidDataSource <span class="hljs-title function_">dataSource</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">DruidDataSource</span> <span class="hljs-variable">druidDataSource</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DruidDataSource</span>();<br>        druidDataSource.setUrl(url);<br>        druidDataSource.setUsername(username);<br>        druidDataSource.setPassword(password);<br>        druidDataSource.setDriverClassName(driver);<br>        <span class="hljs-keyword">return</span> druidDataSource;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test</span> &#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testioc1</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-comment">//        ApplicationContext context = new AnnotationConfigApplicationContext(Config.class);</span><br>        <span class="hljs-type">AnnotationConfigApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnnotationConfigApplicationContext</span>();<br>        context.register(Config.class);<br>        context.refresh();<br>        <span class="hljs-type">StudentController</span> <span class="hljs-variable">bean</span> <span class="hljs-operator">=</span> context.getBean(StudentController.class);<br>        System.out.println(bean);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20230908164529015.png" alt="image-20230908164529015"></p><h2 id="Bean细节"><a href="#Bean细节" class="headerlink" title="@Bean细节"></a>@Bean细节</h2><h3 id="Bean生成BeanName问题"><a href="#Bean生成BeanName问题" class="headerlink" title="Bean生成BeanName问题"></a>Bean生成BeanName问题</h3><p>@Bean注解源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Target(&#123;ElementType.METHOD, ElementType.ANNOTATION_TYPE&#125;)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Documented</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Bean &#123;<br>    <span class="hljs-meta">@AliasFor(&quot;name&quot;)</span><br>    String[] value() <span class="hljs-keyword">default</span> &#123;&#125;;<br><br>    <span class="hljs-meta">@AliasFor(&quot;value&quot;)</span><br>    String[] name() <span class="hljs-keyword">default</span> &#123;&#125;;<br><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">autowireCandidate</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-literal">true</span>;<br><br>    String <span class="hljs-title function_">initMethod</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&quot;&quot;</span>;<br><br>    String <span class="hljs-title function_">destroyMethod</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&quot;(inferred)&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean(name = &quot;druid&quot;)</span><br><span class="hljs-keyword">public</span> DruidDataSource <span class="hljs-title function_">dataSource</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">DruidDataSource</span> <span class="hljs-variable">druidDataSource</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DruidDataSource</span>();<br>    druidDataSource.setUrl(url);<br>    druidDataSource.setUsername(username);<br>    druidDataSource.setPassword(password);<br>    druidDataSource.setDriverClassName(driver);<br>    <span class="hljs-keyword">return</span> druidDataSource;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="Bean周期方法如何指定"><a href="#Bean周期方法如何指定" class="headerlink" title="Bean周期方法如何指定"></a>Bean周期方法如何指定</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Scope(scopeName = ConfigurableBeanFactory.SCOPE_SINGLETON)</span><br><span class="hljs-meta">@Bean(name = &quot;druid&quot;,initMethod = &quot;&quot;,destroyMethod = &quot;&quot;)</span><br><span class="hljs-keyword">public</span> DruidDataSource <span class="hljs-title function_">dataSource</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">DruidDataSource</span> <span class="hljs-variable">druidDataSource</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DruidDataSource</span>();<br>    druidDataSource.setUrl(url);<br>    druidDataSource.setUsername(username);<br>    druidDataSource.setPassword(password);<br>    druidDataSource.setDriverClassName(driver);<br>    <span class="hljs-keyword">return</span> druidDataSource;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Bean如何引用其他ioc组件"><a href="#Bean如何引用其他ioc组件" class="headerlink" title="Bean如何引用其他ioc组件"></a>Bean如何引用其他ioc组件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean(name = &quot;druid&quot;)</span><br><span class="hljs-keyword">public</span> DruidDataSource <span class="hljs-title function_">dataSource</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">DruidDataSource</span> <span class="hljs-variable">druidDataSource</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DruidDataSource</span>();<br>    druidDataSource.setUrl(url);<br>    druidDataSource.setUsername(username);<br>    druidDataSource.setPassword(password);<br>    druidDataSource.setDriverClassName(driver);<br>    <span class="hljs-keyword">return</span> druidDataSource;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">public</span> JdbcTemplate <span class="hljs-title function_">jdbcTemplate</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">JdbcTemplate</span> <span class="hljs-variable">jdbcTemplate</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JdbcTemplate</span>();<br><span class="hljs-comment">//        jdbcTemplate需要DataSource，如何在ioc中获取？</span><br>        <span class="hljs-keyword">return</span> jdbcTemplate;<br>    &#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> JdbcTemplate <span class="hljs-title function_">jdbcTemplate1</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">JdbcTemplate</span> <span class="hljs-variable">jdbcTemplate</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JdbcTemplate</span>();<br><span class="hljs-comment">//        方案1：如果其他组件也是bean方法，那么可以直接调用该组件，等价于从ioc容器中获取组件</span><br>        jdbcTemplate.setDataSource(dataSource());<br><span class="hljs-comment">//        jdbcTemplate需要DataSource，如何在ioc中获取？</span><br>        <span class="hljs-keyword">return</span> jdbcTemplate;<br>    &#125;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> JdbcTemplate <span class="hljs-title function_">jdbcTemplate2</span><span class="hljs-params">(DruidDataSource dataSource)</span>&#123;<br>        <span class="hljs-type">JdbcTemplate</span> <span class="hljs-variable">jdbcTemplate</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JdbcTemplate</span>();<br><span class="hljs-comment">//        方案2：在形参列表声明想要的组件类型，可以是一个也可以是多个,ioc也会注入</span><br>        jdbcTemplate.setDataSource(dataSource);<br><span class="hljs-comment">//        jdbcTemplate需要DataSource，如何在ioc中获取？</span><br>        <span class="hljs-keyword">return</span> jdbcTemplate;<br>    &#125;<br><br></code></pre></td></tr></table></figure><h4 id="特别注意！！"><a href="#特别注意！！" class="headerlink" title="特别注意！！"></a>特别注意！！</h4><ol><li><p>如果调用的外部没有与形参同类型组件注解，那么该参数就不属于组件，如果在组件中采用形参变量注入该外部变量，该形参会报异常！！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> DruidDataSource <span class="hljs-title function_">dataSource1</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">DruidDataSource</span> <span class="hljs-variable">druidDataSource</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DruidDataSource</span>();<br>    druidDataSource.setUrl(url);<br>    druidDataSource.setUsername(username);<br>    druidDataSource.setPassword(password);<br>    druidDataSource.setDriverClassName(driver);<br>    <span class="hljs-keyword">return</span> druidDataSource;<br>&#125;<br><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> JdbcTemplate <span class="hljs-title function_">jdbcTemplate</span><span class="hljs-params">(DruidDataSource druid)</span>&#123; <span class="hljs-comment">//编译器报异常</span><br>    <span class="hljs-type">JdbcTemplate</span> <span class="hljs-variable">jdbcTemplate</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JdbcTemplate</span>();<br>    jdbcTemplate.setDataSource(druid1);<br>    <span class="hljs-keyword">return</span> jdbcTemplate;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>如果调用的外部与形参同一类型的组件存在两个及以上的，那么需要将这多个组件用别名区分开，参数必须用别名定义。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean(name = &quot;druid1&quot;)</span><br>   <span class="hljs-keyword">public</span> DruidDataSource <span class="hljs-title function_">dataSource1</span><span class="hljs-params">()</span>&#123;<br>       <span class="hljs-type">DruidDataSource</span> <span class="hljs-variable">druidDataSource</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DruidDataSource</span>();<br>       druidDataSource.setUrl(url);<br>       druidDataSource.setUsername(username);<br>       druidDataSource.setPassword(password);<br>       druidDataSource.setDriverClassName(driver);<br>       <span class="hljs-keyword">return</span> druidDataSource;<br>   &#125;<br>   <span class="hljs-meta">@Bean(name = &quot;druid2&quot;)</span><br>   <span class="hljs-keyword">public</span> DruidDataSource <span class="hljs-title function_">dataSource2</span><span class="hljs-params">()</span>&#123;<br>       <span class="hljs-type">DruidDataSource</span> <span class="hljs-variable">druidDataSource</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DruidDataSource</span>();<br>       druidDataSource.setUrl(url);<br>       druidDataSource.setUsername(username);<br>       druidDataSource.setPassword(password);<br>       druidDataSource.setDriverClassName(driver);<br>       <span class="hljs-keyword">return</span> druidDataSource;<br>   &#125;<br>   <span class="hljs-meta">@Bean</span><br>   <span class="hljs-keyword">public</span> JdbcTemplate <span class="hljs-title function_">jdbcTemplate</span><span class="hljs-params">(DruidDataSource druid1)</span>&#123;<br>       <span class="hljs-type">JdbcTemplate</span> <span class="hljs-variable">jdbcTemplate</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JdbcTemplate</span>();<br>       jdbcTemplate.setDataSource(druid1);<br>       <span class="hljs-keyword">return</span> jdbcTemplate;<br>   &#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="Import扩展"><a href="#Import扩展" class="headerlink" title="@Import扩展"></a>@Import扩展</h2><p>   @Import注解允许从另一个配置类加载@Bean定义，如下：</p><p><img src="/assets/image-20230908190336284.png" alt="image-20230908190336284"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><img src="/assets/image-20230908191217095.png" alt="image-20230908191217095"></p>]]></content>
    
    
    <categories>
      
      <category>SSM</category>
      
      <category>Spring</category>
      
      <category>IOC</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>7_基于注解+XML整合三层框架组件</title>
    <link href="/2023/09/08/%E5%B0%9A%E7%A1%85%E8%B0%B7-SSM/Spring/7_%E5%9F%BA%E4%BA%8E%E6%B3%A8%E8%A7%A3+XML%E7%AE%A1%E7%90%86IOC%E7%BB%83%E4%B9%A0/"/>
    <url>/2023/09/08/%E5%B0%9A%E7%A1%85%E8%B0%B7-SSM/Spring/7_%E5%9F%BA%E4%BA%8E%E6%B3%A8%E8%A7%A3+XML%E7%AE%A1%E7%90%86IOC%E7%BB%83%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="基于注解-XML整合三层框架组件"><a href="#基于注解-XML整合三层框架组件" class="headerlink" title="基于注解+XML整合三层框架组件"></a>基于注解+XML整合三层框架组件</h1><h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><p>搭建一个三层架构案例，模拟查询全部学生（学生表）信息，持久层使用JdbcTemplate和Druid技术，使用XML+注解方式进行组件管理！</p><p><img src="/assets/image-20230908103920645.png" alt="image-20230908103920645"></p><h2 id="数据库准备"><a href="#数据库准备" class="headerlink" title="数据库准备"></a>数据库准备</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> database studb;<br><br>use studb;<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> students (<br>  id <span class="hljs-type">INT</span> <span class="hljs-keyword">PRIMARY</span> KEY,<br>  name <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  gender <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  age <span class="hljs-type">INT</span>,<br>  class <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">50</span>)<br>);<br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> students (id, name, gender, age, class)<br><span class="hljs-keyword">VALUES</span><br>  (<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;张三&#x27;</span>, <span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-number">20</span>, <span class="hljs-string">&#x27;高中一班&#x27;</span>),<br>  (<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;李四&#x27;</span>, <span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-number">19</span>, <span class="hljs-string">&#x27;高中二班&#x27;</span>),<br>  (<span class="hljs-number">3</span>, <span class="hljs-string">&#x27;王五&#x27;</span>, <span class="hljs-string">&#x27;女&#x27;</span>, <span class="hljs-number">18</span>, <span class="hljs-string">&#x27;高中一班&#x27;</span>),<br>  (<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;赵六&#x27;</span>, <span class="hljs-string">&#x27;女&#x27;</span>, <span class="hljs-number">20</span>, <span class="hljs-string">&#x27;高中三班&#x27;</span>),<br>  (<span class="hljs-number">5</span>, <span class="hljs-string">&#x27;刘七&#x27;</span>, <span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-number">19</span>, <span class="hljs-string">&#x27;高中二班&#x27;</span>),<br>  (<span class="hljs-number">6</span>, <span class="hljs-string">&#x27;陈八&#x27;</span>, <span class="hljs-string">&#x27;女&#x27;</span>, <span class="hljs-number">18</span>, <span class="hljs-string">&#x27;高中一班&#x27;</span>),<br>  (<span class="hljs-number">7</span>, <span class="hljs-string">&#x27;杨九&#x27;</span>, <span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-number">20</span>, <span class="hljs-string">&#x27;高中三班&#x27;</span>),<br>  (<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;吴十&#x27;</span>, <span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-number">19</span>, <span class="hljs-string">&#x27;高中二班&#x27;</span>);<br><br></code></pre></td></tr></table></figure><h2 id="主要依赖"><a href="#主要依赖" class="headerlink" title="主要依赖"></a>主要依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>      <span class="hljs-comment">&lt;!--spring context依赖--&gt;</span><br>      <span class="hljs-comment">&lt;!--当你引入SpringContext依赖之后，表示将Spring的基础依赖引入了--&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-context<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>6.0.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>      <span class="hljs-comment">&lt;!-- 数据库驱动和连接池--&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.25<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.8<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>      <br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>jakarta.annotation<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jakarta.annotation-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.1.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>      <span class="hljs-comment">&lt;!-- spring-jdbc --&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-jdbc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>6.0.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span> <br></code></pre></td></tr></table></figure><h2 id="实体类准备"><a href="#实体类准备" class="headerlink" title="实体类准备"></a>实体类准备</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br><br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String gender;<br>    <span class="hljs-keyword">private</span> Integer age;<br>    <span class="hljs-keyword">private</span> String classes;<br><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setId</span><span class="hljs-params">(Integer id)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getGender</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> gender;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setGender</span><span class="hljs-params">(String gender)</span> &#123;<br>        <span class="hljs-built_in">this</span>.gender = gender;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(Integer age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getClasses</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> classes;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setClasses</span><span class="hljs-params">(String classes)</span> &#123;<br>        <span class="hljs-built_in">this</span>.classes = classes;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Student&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;id=&quot;</span> + id +<br>                <span class="hljs-string">&quot;, name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, gender=&#x27;&quot;</span> + gender + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&quot;, classes=&#x27;&quot;</span> + classes + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="DAO"><a href="#DAO" class="headerlink" title="DAO"></a>DAO</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">StudentDao</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 查询全部学生数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    List&lt;Student&gt; <span class="hljs-title function_">queryAll</span><span class="hljs-params">()</span>;<br>&#125;<br><span class="hljs-meta">@Repository</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StudentDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">StudentDao</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> JdbcTemplate jdbcTemplate;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 查询全部学生数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> List&lt;Student&gt; <span class="hljs-title function_">queryAll</span><span class="hljs-params">()</span> &#123;<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select id , name , age , gender , class as classes from students ;&quot;</span>;<br><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">          query可以返回集合!</span><br><span class="hljs-comment">          BeanPropertyRowMapper就是封装好RowMapper的实现,要求属性名和列名相同即可</span><br><span class="hljs-comment">         */</span><br>        List&lt;Student&gt; studentList = jdbcTemplate.query(sql, <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanPropertyRowMapper</span>&lt;&gt;(Student.class));<br><br>        <span class="hljs-keyword">return</span> studentList;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">StudentService</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 查询全部学员业务</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    List&lt;Student&gt; <span class="hljs-title function_">findAll</span><span class="hljs-params">()</span>;<br><br>&#125;<br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StudentServiceImpl</span>  <span class="hljs-keyword">implements</span> <span class="hljs-title class_">StudentService</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> StudentDao studentDao;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 查询全部学员业务</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> List&lt;Student&gt; <span class="hljs-title function_">findAll</span><span class="hljs-params">()</span> &#123;<br><br>        List&lt;Student&gt; studentList =  studentDao.queryAll();<br><br>        <span class="hljs-keyword">return</span> studentList;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StudentController</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> StudentService studentService;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">findAll</span><span class="hljs-params">()</span>&#123;<br>        List&lt;Student&gt; all = studentService.findAll();<br>        System.out.println(all);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Spring-xml"><a href="#Spring-xml" class="headerlink" title="Spring.xml"></a>Spring.xml</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.jmin&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:property-placeholder</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;classpath:jdbc.properties&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dataSource&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClassName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;Jmin.driver&#125;&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;Jmin.username&#125;&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;Jmin.password&#125;&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;Jmin.url&#125;&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;jdbcTemplate&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/assets/image-20230908111416414.png" alt="image-20230908111416414"></p>]]></content>
    
    
    <categories>
      
      <category>SSM</category>
      
      <category>Spring</category>
      
      <category>IOC</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>6_基于注解的SpringIOC容器实践和应用</title>
    <link href="/2023/09/07/%E5%B0%9A%E7%A1%85%E8%B0%B7-SSM/Spring/6_%E5%9F%BA%E4%BA%8E%E6%B3%A8%E8%A7%A3%E7%9A%84SpringIOC%E5%AE%B9%E5%99%A8%E5%AE%9E%E8%B7%B5%E5%92%8C%E5%BA%94%E7%94%A8/"/>
    <url>/2023/09/07/%E5%B0%9A%E7%A1%85%E8%B0%B7-SSM/Spring/6_%E5%9F%BA%E4%BA%8E%E6%B3%A8%E8%A7%A3%E7%9A%84SpringIOC%E5%AE%B9%E5%99%A8%E5%AE%9E%E8%B7%B5%E5%92%8C%E5%BA%94%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="基于注解的SpringIOC容器实践和应用"><a href="#基于注解的SpringIOC容器实践和应用" class="headerlink" title="基于注解的SpringIOC容器实践和应用"></a>基于注解的SpringIOC容器实践和应用</h1><p>和 XML 配置文件一样，注解本身并不能执行，注解本身仅仅只是做一个标记，具体的功能是框架检测到注解标记的位置，然后针对这个位置按照注解标记的功能来执行具体操作。</p><p><strong>本质上：所有一切的操作都是 Java 代码来完成的，XML 和注解只是告诉框架中的 Java 代码如何执行。</strong></p><p>Spring 为了知道程序员在哪些地方标记了什么注解，就需要通过扫描的方式，来进行检测。然后根据注解进行后续操作。</p><h2 id="组件添加标记注解"><a href="#组件添加标记注解" class="headerlink" title="组件添加标记注解"></a>组件添加标记注解</h2><ol><li>组件标记注解和区别</li></ol><p>Spring 提供了以下多个注解，这些注解可以直接标注在 Java 类上，将它们定义成 Spring Bean。</p><table><thead><tr><th>注解</th><th>说明</th></tr></thead><tbody><tr><td>@Component</td><td>该注解用于描述 Spring 中的 Bean，它是一个泛化的概念，仅仅表示容器中的一个组件（Bean），并且可以作用在应用的任何层次，例如 Service 层、Dao 层等。 使用时只需将该注解标注在相应类上即可。</td></tr><tr><td>@Repository</td><td>该注解用于将数据访问层（Dao 层）的类标识为 Spring 中的 Bean，其功能与 @Component 相同。</td></tr><tr><td>@Service</td><td>该注解通常作用在业务层（Service 层），用于将业务层的类标识为 Spring 中的 Bean，其功能与 @Component 相同。</td></tr><tr><td>@Controller</td><td>该注解通常作用在控制层（如SpringMVC 的 Controller），用于将控制层的类标识为 Spring 中的 Bean，其功能与 @Component 相同。</td></tr></tbody></table><p>通过查看源码我们得知，@Controller、@Service、@Repository这三个注解只是在@Component注解的基础上起了三个新的名字。</p><p><img src="/assets/image-20230907095711542.png" alt="image-20230907095711542"><img src="/assets/image-20230907095732120.png" alt="image-20230907095732120"><img src="/assets/image-20230907095751274.png" alt="image-20230907095751274"><img src="/assets/image-20230907095845880.png" alt="image-20230907095845880"></p><p>对于Spring使用IOC容器管理这些组件来说没有区别，也就是语法层面没有区别。所以@Controller、@Service、@Repository这三个注解只是给开发人员看的，让我们能够便于分辨组件的作用。</p><p><strong>注意：虽然它们本质上一样，但是为了代码的可读性、程序结构严谨！我们肯定不能随便胡乱标记。</strong></p><h2 id="配置文件确定扫描范围"><a href="#配置文件确定扫描范围" class="headerlink" title="配置文件确定扫描范围"></a>配置文件确定扫描范围</h2><h3 id="基本扫描配置"><a href="#基本扫描配置" class="headerlink" title="基本扫描配置"></a>基本扫描配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--    普通配置包扫描</span><br><span class="hljs-comment">        base-package 指定ioc容器去哪些包查找注解类 可以包含多个包 </span><br><span class="hljs-comment">com.xx,com.yy--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.Jmin.ioc_01&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testioc1</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">ClassPathXmlApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;spring-01.xml&quot;</span>);<br>        <span class="hljs-type">XxxDao</span> <span class="hljs-variable">bean</span> <span class="hljs-operator">=</span> context.getBean(XxxDao.class);<br>        System.out.println(bean);<br><span class="hljs-comment">//        ioc注解，默认的组件名为 类的全名并且其首字母小写</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">bean1</span> <span class="hljs-operator">=</span> context.getBean(<span class="hljs-string">&quot;xxxService&quot;</span>);<br>        System.out.println(bean1);<br>    &#125;<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20230907101212911.png" alt="image-20230907101212911"></p><h3 id="指定排除组件"><a href="#指定排除组件" class="headerlink" title="指定排除组件"></a>指定排除组件</h3><p><img src="/assets/image-20230907101346153.png" alt="image-20230907101346153"></p><p>三层架构中，基础整合中web会存在两种容器，WebIOC和RootIOC，在同个包的范围内，WebIOC只能装配Controller类，而RootIOC可以装配包内所有资源，需要将@Controller排除</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--    指定包，排除注解--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.Jmin.ioc_01&quot;</span> &gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">context:exclude-filter</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;annotation&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;org.springframework.stereotype.Service&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">context:component-scan</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/assets/image-20230907213238028.png" alt="image-20230907213238028"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--    修改指定包内所有注解先不生效--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.Jmin.ioc_01&quot;</span> <span class="hljs-attr">use-default-filters</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--        开启某个注解生效--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">context:include-filter</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;annotation&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;org.springframework.stereotype.Service&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">context:component-scan</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/assets/image-20230907214250509.png" alt="image-20230907214250509"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol><li>注解方式IoC只是标记哪些类要被Spring管理</li><li>最终，我们还需要XML方式或者后面讲解Java配置类方式指定注解生效的包</li><li>现阶段配置方式为 注解（标记）+ XML（扫描）</li></ol><h2 id="组件作用域和周期方法注解"><a href="#组件作用域和周期方法注解" class="headerlink" title="组件作用域和周期方法注解"></a>组件作用域和周期方法注解</h2><h3 id="组件周期方法配置"><a href="#组件周期方法配置" class="headerlink" title="组件周期方法配置"></a>组件周期方法配置</h3><ol><li><p>周期方法概念</p><p>我们可以在组件类中定义方法，然后当IoC容器实例化和销毁组件对象的时候进行调用！这两个方法我们成为生命周期方法！</p></li><li><p>周期方法声明</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaBean</span> &#123;<br>    <span class="hljs-meta">@PostConstruct</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span>&#123;<br><br>    &#125;<br>    <span class="hljs-meta">@PreDestroy</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span>&#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="组件作用域配置"><a href="#组件作用域配置" class="headerlink" title="组件作用域配置"></a>组件作用域配置</h3><ol><li><p>Bean作用域回顾</p><p>&lt;bean 标签声明Bean，只是将Bean的信息配置给SpringIOC容器中，在IOC容器中，这些通过bean标签声明的信息将转化为Spring内部的BeanDefinition对象，在BeanDefinition对象内，包含了定义的信息。</p><p>意味着BeanDefinition与类的概念一样，SpringIOC容器可以根据BeanDefinition对象反射创建多个Bean对象实例。</p><p>而具体要创建多少个bean的实例对象，由Bean的作用域Scope所决定。</p></li><li><p>作用域可选值</p><table><thead><tr><th>取值</th><th>含义</th><th>创建对象的时机</th><th>默认值</th></tr></thead><tbody><tr><td>singleton</td><td>在 IOC 容器中，这个 bean 的对象始终为单实例</td><td>IOC 容器初始化时</td><td>是</td></tr><tr><td>prototype</td><td>这个 bean 在 IOC 容器中有多个实例</td><td>获取 bean 时</td><td>否</td></tr></tbody></table><p>而在WebApplicationContext中</p><table><thead><tr><th>取值</th><th>含义</th><th>创建对象的时机</th><th>默认值</th></tr></thead><tbody><tr><td>request</td><td>请求范围内有效的实例</td><td>每次请求</td><td>否</td></tr><tr><td>session</td><td>会话范围内有效的实例</td><td>每次会话</td><td>否</td></tr></tbody></table></li><li><p>作用域配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Scope(scopeName = ConfigurableBeanFactory.SCOPE_PROTOTYPE)</span><span class="hljs-comment">//多例设置</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaBean</span> &#123;<br>    <span class="hljs-meta">@PostConstruct</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;init()......&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@PreDestroy</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;destroy()......&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20230907233145357.png" alt="image-20230907233145357"></p><p>多例状态时关闭资源不会调用销毁方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-comment">//单例设置</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaBean</span> &#123;<br>    <span class="hljs-meta">@PostConstruct</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;init()......&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@PreDestroy</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;destroy()......&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20230907233321152.png" alt="image-20230907233321152"></p></li></ol><h2 id="Bean属性赋值，引用类型自动装配DI"><a href="#Bean属性赋值，引用类型自动装配DI" class="headerlink" title="Bean属性赋值，引用类型自动装配DI"></a>Bean属性赋值，引用类型自动装配DI</h2><h3 id="自动装配"><a href="#自动装配" class="headerlink" title="自动装配"></a>自动装配</h3><ol><li><p>前提</p><p>参与自动装配的组件不管是否需要注入的都要存放进IoC容器中，不区分装配方式，XML和注解本质是一样的。</p></li><li><p>@Autowrited注解</p></li></ol><h4 id="IoC容器中仅有一个UserService接口对应的实现类对象。"><a href="#IoC容器中仅有一个UserService接口对应的实现类对象。" class="headerlink" title="IoC容器中仅有一个UserService接口对应的实现类对象。"></a>IoC容器中仅有一个<strong>UserService</strong>接口对应的实现类对象。</h4>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserService</span> &#123;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">show</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">show</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;userServiceShow&quot;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>   成员变量上直接标记，不需要配置set方法。</p>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br><span class="hljs-comment">//     &lt;property ref=&quot;service&quot; name=&quot;userService&quot;/&gt;</span><br><span class="hljs-comment">//    自动装配注解DI，在IOC容器中查找符合类型的组件对象。设置给当前属性DI</span><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserService userService;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">show</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> userService.show();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>   <img src="/assets/image-20230908004241418.png" alt="image-20230908004241418"></p><h4 id="IoC容器没有默认的类型，把service类中的-Controller去掉，即去掉bean"><a href="#IoC容器没有默认的类型，把service类中的-Controller去掉，即去掉bean" class="headerlink" title="IoC容器没有默认的类型，把service类中的**@Controller去掉，即去掉bean**"></a><strong>IoC</strong>容器没有默认的类型，把<strong>service</strong>类中的**@Controller<strong>去掉，即去掉</strong>bean**</h4>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserService</span> &#123;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">show</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-comment">//@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">show</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;userServiceShow&quot;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>   <img src="/assets/image-20230908084805370.png" alt="image-20230908084805370"></p><p>   @Autowired 装配【默认】至少要求有一个bean，否则报错</p><p>   原因：</p><p>   <img src="/assets/image-20230908085458658.png" alt="image-20230908085458658"></p><p>   @Autowired的默认要求，我们可以设置不要求bean存在，即佛系装配(不推荐)。但值为空。</p>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired(required = false)</span><br><span class="hljs-keyword">private</span> UserService userService;<br></code></pre></td></tr></table></figure><p>   <img src="/assets/image-20230908085634555.png" alt="image-20230908085634555"></p><h4 id="一个类型同时存在多个对应的组件"><a href="#一个类型同时存在多个对应的组件" class="headerlink" title="一个类型同时存在多个对应的组件"></a><em>一个类型同时存在多个对应的组件</em></h4>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserService</span> &#123;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">show</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">show</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;userServiceShow&quot;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NewUserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">show</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;new show()&quot;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br><span class="hljs-comment">//     &lt;property ref=&quot;service&quot; name=&quot;userService&quot;/&gt;</span><br><span class="hljs-comment">//    自动装配注解DI，在IOC容器中查找符合类型的组件对象。设置给当前属性DI</span><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserService userService;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">show</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> userService.show();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>   <img src="/assets/image-20230908090555468.png" alt="image-20230908090555468"></p><p>   解决方法1：</p><p>   成员属性名指定@Autowired多个组件时，默认会根据成员属性名newUserServiceImpl查找对应的bean</p>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br><span class="hljs-comment">//     &lt;property ref=&quot;service&quot; name=&quot;userService&quot;/&gt;</span><br><span class="hljs-comment">//    自动装配注解DI，在IOC容器中查找符合类型的组件对象。设置给当前属性DI</span><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserService newUserServiceImpl;<br><br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">show</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> newUserServiceImpl.show();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>   <img src="/assets/image-20230908091244805.png" alt="image-20230908091244805"></p><p>   解决方法2：</p><p>   在@Autowired之后使用@Qualifier(value &#x3D; “beanName”)来指定bean的id，必须搭配使用！</p>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br><span class="hljs-meta">@Qualifier(value = &quot;userServiceImpl&quot;)</span><br><span class="hljs-keyword">private</span> UserService userService;<br></code></pre></td></tr></table></figure><p>   <img src="/assets/image-20230908092015202.png" alt="image-20230908092015202"></p><p>   优化：@Autowired+@Qualifier&#x3D;@Resource</p>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Resource(name = &quot;userServiceImpl&quot;)</span><br><span class="hljs-keyword">private</span> UserService userService;<br></code></pre></td></tr></table></figure><p>   JDK17的错误示例（导包错误）：</p><p>   <img src="/assets/image-20230908092638736.png" alt="image-20230908092638736"></p><p>   <img src="/assets/image-20230908092813289.png" alt="image-20230908092813289"></p><p>   去掉该注解时</p><p>   <img src="/assets/image-20230908092901840.png" alt="image-20230908092901840"></p><p>   错误一致，因此结出导包出错！</p><p>   在高于JDK11或低于JDK8版本中，@Resource需要由JSR-250提供技术规范（规定了注解和注解的含义），第三方框架（Spring）和库才能实现和提供对应的功能。</p>   <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>jakarta.annotation<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jakarta.annotation-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.1.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>   修正：</p><p>   <img src="/assets/image-20230908093618662.png" alt="image-20230908093618662"></p><p>   <img src="/assets/image-20230908093646919.png" alt="image-20230908093646919"></p><h2 id="Bean属性赋值，基本类型自动装配DI"><a href="#Bean属性赋值，基本类型自动装配DI" class="headerlink" title="Bean属性赋值，基本类型自动装配DI"></a>Bean属性赋值，基本类型自动装配DI</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.Jmin.ioc_04&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:property-placeholder</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;jdbc.properties&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">Jmin.username</span> = <span class="hljs-string">root</span><br><span class="hljs-attr">Jmin.password</span> = <span class="hljs-string">123456</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.Jmin.ioc_04;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Value;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaBean04</span> &#123;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getUsername</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> username;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getPassword</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> password;<br>    &#125;<br><br>    <span class="hljs-comment">//    直接赋值</span><br><span class="hljs-comment">//    注解赋值 @Value注解 读取外部资源配置</span><br>    <span class="hljs-comment">//@Value(&quot;$&#123;key&#125;&quot;)</span><br>    <span class="hljs-comment">//@Value(&quot;$&#123;key:defaultValue&#125;&quot;)</span><br>    <span class="hljs-meta">@Value(&quot;$&#123;Jmin.username:admin&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-meta">@Value(&quot;$&#123;Jmin.password:admin&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String password;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="/assets/image-20230908100920775.png" alt="image-20230908100920775"></p><h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h2><p><img src="/assets/image-20230908101601394.png" alt="image-20230908101601394"></p>]]></content>
    
    
    <categories>
      
      <category>SSM</category>
      
      <category>Spring</category>
      
      <category>IOC</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>5_基于XML管理IOC练习</title>
    <link href="/2023/09/07/%E5%B0%9A%E7%A1%85%E8%B0%B7-SSM/Spring/5_%E5%9F%BA%E4%BA%8EXML%E7%AE%A1%E7%90%86IOC%E7%BB%83%E4%B9%A0/"/>
    <url>/2023/09/07/%E5%B0%9A%E7%A1%85%E8%B0%B7-SSM/Spring/5_%E5%9F%BA%E4%BA%8EXML%E7%AE%A1%E7%90%86IOC%E7%BB%83%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="基于XML整合三层架构组件练习"><a href="#基于XML整合三层架构组件练习" class="headerlink" title="基于XML整合三层架构组件练习"></a>基于XML整合三层架构组件练习</h1><p>基于XML整合三层架构组件</p><h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><p>搭建一个三层架构案例，模拟查询全部学生（学生表）信息，持久层使用JdbcTemplate和Druid技术，使用XML方式进行组件管理！</p><p><img src="/assets/image-20230906212015114.png" alt="image-20230906212015114"></p><h2 id="数据库的准备"><a href="#数据库的准备" class="headerlink" title="数据库的准备"></a>数据库的准备</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> database studb;<br><br>use studb;<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> students (<br>  id <span class="hljs-type">INT</span> <span class="hljs-keyword">PRIMARY</span> KEY,<br>  name <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  gender <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  age <span class="hljs-type">INT</span>,<br>  class <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">50</span>)<br>);<br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> students (id, name, gender, age, class)<br><span class="hljs-keyword">VALUES</span><br>  (<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;张三&#x27;</span>, <span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-number">20</span>, <span class="hljs-string">&#x27;高中一班&#x27;</span>),<br>  (<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;李四&#x27;</span>, <span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-number">19</span>, <span class="hljs-string">&#x27;高中二班&#x27;</span>),<br>  (<span class="hljs-number">3</span>, <span class="hljs-string">&#x27;王五&#x27;</span>, <span class="hljs-string">&#x27;女&#x27;</span>, <span class="hljs-number">18</span>, <span class="hljs-string">&#x27;高中一班&#x27;</span>),<br>  (<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;赵六&#x27;</span>, <span class="hljs-string">&#x27;女&#x27;</span>, <span class="hljs-number">20</span>, <span class="hljs-string">&#x27;高中三班&#x27;</span>),<br>  (<span class="hljs-number">5</span>, <span class="hljs-string">&#x27;刘七&#x27;</span>, <span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-number">19</span>, <span class="hljs-string">&#x27;高中二班&#x27;</span>),<br>  (<span class="hljs-number">6</span>, <span class="hljs-string">&#x27;陈八&#x27;</span>, <span class="hljs-string">&#x27;女&#x27;</span>, <span class="hljs-number">18</span>, <span class="hljs-string">&#x27;高中一班&#x27;</span>),<br>  (<span class="hljs-number">7</span>, <span class="hljs-string">&#x27;杨九&#x27;</span>, <span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-number">20</span>, <span class="hljs-string">&#x27;高中三班&#x27;</span>),<br>  (<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;吴十&#x27;</span>, <span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-number">19</span>, <span class="hljs-string">&#x27;高中二班&#x27;</span>);<br><br></code></pre></td></tr></table></figure><h2 id="实体类的准备"><a href="#实体类的准备" class="headerlink" title="实体类的准备"></a>实体类的准备</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.Jmin.pojo;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br><br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String gender;<br>    <span class="hljs-keyword">private</span> Integer age;<br>    <span class="hljs-keyword">private</span> String classes;<br><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setId</span><span class="hljs-params">(Integer id)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getGender</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> gender;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setGender</span><span class="hljs-params">(String gender)</span> &#123;<br>        <span class="hljs-built_in">this</span>.gender = gender;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(Integer age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getClasses</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> classes;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setClasses</span><span class="hljs-params">(String classes)</span> &#123;<br>        <span class="hljs-built_in">this</span>.classes = classes;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;com.Jmin.pojo.Student&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;id=&quot;</span> + id +<br>                <span class="hljs-string">&quot;, name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, gender=&#x27;&quot;</span> + gender + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&quot;, classes=&#x27;&quot;</span> + classes + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="三层架构之前对装配的了解"><a href="#三层架构之前对装配的了解" class="headerlink" title="三层架构之前对装配的了解"></a>三层架构之前对装配的了解</h2><h3 id="properties"><a href="#properties" class="headerlink" title="properties"></a>properties</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">Jmin.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/studb</span><br><span class="hljs-attr">Jmin.driver</span>=<span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br><span class="hljs-attr">Jmin.username</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">Jmin.password</span>=<span class="hljs-string">lzm123456</span><br></code></pre></td></tr></table></figure><h3 id="常规实例化方式"><a href="#常规实例化方式" class="headerlink" title="常规实例化方式"></a>常规实例化方式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testForJava</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-comment">//        JDBCTemplate简化了数据库的crud，但不提供连接池</span><br><span class="hljs-comment">//        DruidDataSource负责连接的创建和数据库驱动的注册等等</span><br>        <span class="hljs-type">DruidDataSource</span> <span class="hljs-variable">druidDataSource</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DruidDataSource</span>();<br>        druidDataSource.setUrl(<span class="hljs-string">&quot;jdbc:///studb&quot;</span>);<br>        druidDataSource.setDriverClassName(<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);<br>        druidDataSource.setUsername(<span class="hljs-string">&quot;root&quot;</span>);<br>        druidDataSource.setPassword(<span class="hljs-string">&quot;lzm123456&quot;</span>);<br>        <span class="hljs-type">JdbcTemplate</span> <span class="hljs-variable">jdbcTemplate</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JdbcTemplate</span>();<br>        jdbcTemplate.setDataSource(druidDataSource);<br>        druidDataSource.close();<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="实例化过程装配到配置文件中"><a href="#实例化过程装配到配置文件中" class="headerlink" title="实例化过程装配到配置文件中"></a>实例化过程装配到配置文件中</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--    读取外部配置文件 properties格式的文件--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:property-placeholder</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;classpath:jdbc.properties&quot;</span>/&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dataSource&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;Jmin.url&#125;&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClassName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;Jmin.driver&#125;&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;Jmin.username&#125;&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;Jmin.password&#125;&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;jdbcTemplate&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><ol><li><p>将ioc中的bean实例化，并且进行简单sql操作测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testForIOC</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">ClassPathXmlApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;spring-01.xml&quot;</span>);<br>        <span class="hljs-type">JdbcTemplate</span> <span class="hljs-variable">template</span> <span class="hljs-operator">=</span> context.getBean(JdbcTemplate.class);<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 参数1：sql可以带占位符？替代值，但？不能替代关键字和容器名</span><br><span class="hljs-comment">         * 参数2：Object...param 传入占位符的值</span><br><span class="hljs-comment">         * return int</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">update</span> <span class="hljs-operator">=</span> template.update(<span class="hljs-string">&quot;insert into students (id,name,gender,age,class) values (?,?,?,?,?)&quot;</span>, <span class="hljs-number">1001</span>,<span class="hljs-string">&quot;lzm&quot;</span>, <span class="hljs-string">&quot;mal&quot;</span>, <span class="hljs-number">22</span>, <span class="hljs-string">&quot;11&quot;</span>);<br>        System.out.println(update);<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 参数1：sql可以带占位符？替代值，但？不能替代关键字和容器名</span><br><span class="hljs-comment">         * 参数2：RowMapper 列名和属性名的映射器接口</span><br><span class="hljs-comment">         * 参数3：Object...param 传入占位符的值</span><br><span class="hljs-comment">         */</span><br>        template.queryForObject(<span class="hljs-string">&quot;select * from students where id = ?;&quot;</span>, (rs, rowNum) -&gt; &#123;<br>            <span class="hljs-comment">//                rs结果集，rowNum行数</span><br>            <span class="hljs-type">Student</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>            student.setId(rs.getInt(<span class="hljs-string">&quot;id&quot;</span>));<br>            student.setName(rs.getString(<span class="hljs-string">&quot;name&quot;</span>));<br>            student.setGender(rs.getString(<span class="hljs-string">&quot;gender&quot;</span>));<br>            student.setAge(rs.getInt(<span class="hljs-string">&quot;id&quot;</span>));<br>            student.setClasses(rs.getString(<span class="hljs-string">&quot;class&quot;</span>));<br>            <span class="hljs-keyword">return</span> student;<br>        &#125;,<span class="hljs-number">8</span>);<br><span class="hljs-comment">//        BeanPropertyRowMapper类会根据列名映射属性值</span><br>        List&lt;Student&gt; query = template.query(<span class="hljs-string">&quot;select id,name,gender,age,class as classes from students&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanPropertyRowMapper</span>&lt;Student&gt;(Student.class));<br>        System.out.println(query);<br>    &#125;<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20230907085728673.png" alt="image-20230907085728673"></p></li></ol><h2 id="三层架构装配，进阶版"><a href="#三层架构装配，进阶版" class="headerlink" title="三层架构装配，进阶版"></a>三层架构装配，进阶版</h2><h3 id="三层架构的构建"><a href="#三层架构的构建" class="headerlink" title="三层架构的构建"></a>三层架构的构建</h3><p>Dao接口以及实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">StudentDao</span> &#123;<br>    List&lt;Student&gt; <span class="hljs-title function_">queryAll</span><span class="hljs-params">()</span>;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StudentDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">StudentDao</span> &#123;<br>    <span class="hljs-keyword">private</span> JdbcTemplate jdbcTemplate;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setJdbcTemplate</span><span class="hljs-params">(JdbcTemplate jdbcTemplate)</span> &#123;<br>        <span class="hljs-built_in">this</span>.jdbcTemplate = jdbcTemplate;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> List&lt;Student&gt; <span class="hljs-title function_">queryAll</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select id,name,gender,age,class as classes from students;&quot;</span>;<br>        List&lt;Student&gt; studentList = jdbcTemplate.query(sql, <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanPropertyRowMapper</span>&lt;Student&gt;(Student.class));<br>        System.out.println(studentList);<br>        <span class="hljs-keyword">return</span> studentList;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="Service接口以及实现类"><a href="#Service接口以及实现类" class="headerlink" title="Service接口以及实现类"></a>Service接口以及实现类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">StudentService</span> &#123;<br>    List&lt;Student&gt; <span class="hljs-title function_">findAll</span><span class="hljs-params">()</span>;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StudentServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">StudentService</span> &#123;<br>    <span class="hljs-keyword">private</span> StudentDao studentDao;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setStudentDao</span><span class="hljs-params">(StudentDao studentDao)</span> &#123;<br>        <span class="hljs-built_in">this</span>.studentDao = studentDao;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> List&lt;Student&gt; <span class="hljs-title function_">findAll</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> studentDao.queryAll();<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h3 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StudentController</span> &#123;<br>    <span class="hljs-keyword">private</span> StudentService studentService;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setStudentService</span><span class="hljs-params">(StudentService studentService)</span> &#123;<br>        <span class="hljs-built_in">this</span>.studentService = studentService;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">findAll</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;学员数据&quot;</span>+studentService.findAll());<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="spring-ioc-xml-容器的装配"><a href="#spring-ioc-xml-容器的装配" class="headerlink" title="spring-ioc.xml 容器的装配"></a>spring-ioc.xml 容器的装配</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:property-placeholder</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;classpath:jdbc.properties&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--    druid--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dataSource&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;Jmin.url&#125;&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClassName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;Jmin.driver&#125;&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;Jmin.username&#125;&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;Jmin.password&#125;&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-comment">&lt;!--    jdbctemp--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;jdbcTemplate&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-comment">&lt;!--    dao -&gt; jdbctemp--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.Jmin.UserDao.impl.StudentDaoImpl&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;studentDao&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;jdbcTemplate&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;jdbcTemplate&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-comment">&lt;!--    service -&gt; dao--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.Jmin.service.impl.StudentServiceImpl&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;service&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;studentDao&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;studentDao&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-comment">&lt;!--    controller -&gt; service--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.Jmin.controller.StudentController&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;controller&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;studentService&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;service&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="将IOC的bean实例化"><a href="#将IOC的bean实例化" class="headerlink" title="将IOC的bean实例化"></a>将IOC的bean实例化</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testForIOC2</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">ClassPathXmlApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;spring-02.xml&quot;</span>);<br>    <span class="hljs-type">StudentController</span> <span class="hljs-variable">bean</span> <span class="hljs-operator">=</span> context.getBean(StudentController.class);<br>    bean.findAll();<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20230907090629320.png" alt="image-20230907090629320"></p><h2 id="XMLIoC缺点总结"><a href="#XMLIoC缺点总结" class="headerlink" title="XMLIoC缺点总结"></a>XMLIoC缺点总结</h2><ol><li>注入的属性必须添加setter方法</li><li>配置文件与Java代码分离</li><li>XML配置文件解析效率低</li></ol>]]></content>
    
    
    <categories>
      
      <category>SSM</category>
      
      <category>Spring</category>
      
      <category>IOC</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>4_基于XML的SpringIOC容器实践和应用</title>
    <link href="/2023/09/05/%E5%B0%9A%E7%A1%85%E8%B0%B7-SSM/Spring/4_%E5%9F%BA%E4%BA%8EXML%E7%9A%84SpringIOC%E5%AE%B9%E5%99%A8/"/>
    <url>/2023/09/05/%E5%B0%9A%E7%A1%85%E8%B0%B7-SSM/Spring/4_%E5%9F%BA%E4%BA%8EXML%E7%9A%84SpringIOC%E5%AE%B9%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="4-SpringIOC容器实践和应用"><a href="#4-SpringIOC容器实践和应用" class="headerlink" title="4_SpringIOC容器实践和应用"></a>4_SpringIOC容器实践和应用</h1><ol><li>编写配置信息（元数据），配置文件（XML，注解，配置）</li><li>指定配置信息，实例化IOC容器对象</li><li>在Java代码中获取组件（Bean），使用组件</li></ol><h2 id="基于XML配置方式组件管理"><a href="#基于XML配置方式组件管理" class="headerlink" title="基于XML配置方式组件管理"></a>基于XML配置方式组件管理</h2><h3 id="组件信息声明配置IOC方式"><a href="#组件信息声明配置IOC方式" class="headerlink" title="组件信息声明配置IOC方式"></a>组件信息声明配置IOC方式</h3><ul><li><p>目标：SpringIOC管理一个或者多个bean。</p></li><li><p>思路：</p><p><img src="/assets/image-20230905083350701.png" alt="image-20230905083350701"></p></li></ul><blockquote><p>思考：在普通应用程序中实例对象有哪些方式？</p><p>答：1.构造函数实例化。（无参，有参实例化）（ioc）</p><p>​2.工厂模式实例化。（静态工厂，非静态工厂）(di)</p><p>不同实例化方式对象和组件，在IOC中的配置方式也不同！</p></blockquote><h4 id="基于无参构造函数"><a href="#基于无参构造函数" class="headerlink" title="基于无参构造函数"></a>基于无参构造函数</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.ioc;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HappyComponent</span> &#123;<br><br>    <span class="hljs-comment">//默认包含无参数构造函数</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doWork</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;HappyComponent.doWork&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>xml配置信息:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--    可以使用无参数构造函数实例化组件--&gt;</span><br><span class="hljs-comment">&lt;!--    代表一个组件信息，一个组件对象，默认单例模式--&gt;</span><br><span class="hljs-comment">&lt;!--    id 组件的唯一标识，方便后期读取--&gt;</span><br><span class="hljs-comment">&lt;!--    class组件的类的权限定符--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;HappyComponent&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.Jmin_ioc.ioc01.HappyComponent&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;HappyComponent2&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.Jmin_ioc.ioc01.HappyComponent&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="基于静态工厂方法实例化"><a href="#基于静态工厂方法实例化" class="headerlink" title="基于静态工厂方法实例化"></a>基于静态工厂方法实例化</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ClientService</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">ClientService</span> <span class="hljs-variable">clientService</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClientService</span>();<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">ClientService</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ClientService <span class="hljs-title function_">createInstance</span><span class="hljs-params">()</span> &#123;<br><br>        <span class="hljs-keyword">return</span> clientService;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>xml配置信息：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--    静态工程类声明工厂方法进行ioc配置 注意！实例方法必须是静态方法--&gt;</span><br><span class="hljs-comment">&lt;!--    factory-method指定静态工厂的实例化方法--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;ClientService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.Jmin_ioc.ioc01.ClientService&quot;</span> <span class="hljs-attr">factory-method</span>=<span class="hljs-string">&quot;createInstance&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="基于非静态工厂方法实例化"><a href="#基于非静态工厂方法实例化" class="headerlink" title="基于非静态工厂方法实例化"></a>基于非静态工厂方法实例化</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DefaultServiceLocator</span> &#123;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">ClientServiceImpl</span> <span class="hljs-variable">clientService</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClientServiceImpl</span>();<br><br>  <span class="hljs-keyword">public</span> ClientServiceImpl <span class="hljs-title function_">createClientServiceInstance</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> clientService;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>xml配置信息：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--    通过指定非静态工厂对象和方法名 注意！实例方法必须是非静态方法 配置生成的ioc信息--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;DefaultServiceLocator&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.Jmin_ioc.ioc01.DefaultServiceLocator&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;ClientServiceInstance&quot;</span> <span class="hljs-attr">factory-bean</span>=<span class="hljs-string">&quot;DefaultServiceLocator&quot;</span> <span class="hljs-attr">factory-method</span>=<span class="hljs-string">&quot;createClientServiceInstance&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/assets/image-20230905094436916.png" alt="image-20230905094436916"></p><h3 id="组件依赖注入配置（DI）"><a href="#组件依赖注入配置（DI）" class="headerlink" title="组件依赖注入配置（DI）"></a>组件依赖注入配置（DI）</h3><ol><li><p>目标</p><p>通过配置文件，实现IOC容器中Bean之间的引用（依赖注入DI配置）。</p><p>主要涉及注入场景，基于构造函数的依赖注入和基于Setter的依赖注入。</p></li><li><p>思路</p><p><img src="/assets/image-20230905225535354.png" alt="image-20230905225535354"></p></li></ol><h4 id="基于构造函数的依赖注入（单个构造参数）"><a href="#基于构造函数的依赖注入（单个构造参数）" class="headerlink" title="基于构造函数的依赖注入（单个构造参数）"></a>基于构造函数的依赖注入（单个构造参数）</h4><p>   基于构造函数的 DI 是通过容器调用具有多个参数的构造函数来完成的，每个参数表示一个依赖项。</p>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDao</span> &#123;<br><br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService</span> &#123;<br><br>    <span class="hljs-keyword">private</span> UserDao userDao;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">UserService</span><span class="hljs-params">(UserDao userDao)</span> &#123;<br>        <span class="hljs-built_in">this</span>.userDao = userDao;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>   <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--    引用和被引用的组件必须全部在ioc容器中--&gt;</span><br><span class="hljs-comment">&lt;!--    1 单个构造参数注入--&gt;</span><br><span class="hljs-comment">&lt;!--    构造userDao无参组件--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userDao&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.Jmin_ioc.ioc02.UserDao&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;UserService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.Jmin_ioc.ioc02.UserService&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--        构造参数传值 di配置--&gt;</span><br><span class="hljs-comment">&lt;!--        &lt;constructor-arg&gt;</span><br><span class="hljs-comment">            value 直接属性值   String name,int age</span><br><span class="hljs-comment">            ref 引用其他bean beanId</span><br><span class="hljs-comment">--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;userDao&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--    注意点 SpringIOC容器是一个高级容器，内部会有缓存动作</span><br><span class="hljs-comment">        1. 创建对象[IOC]</span><br><span class="hljs-comment">        2. 属性赋值</span><br><span class="hljs-comment">--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;UserService2&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.Jmin_ioc.ioc02.UserService&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--        构造参数传值 di配置--&gt;</span><br>        <span class="hljs-comment">&lt;!--        &lt;constructor-arg&gt;</span><br><span class="hljs-comment">                    value 直接属性值   String name,int age</span><br><span class="hljs-comment">                    ref 引用其他bean beanId</span><br><span class="hljs-comment">        --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;userDao2&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userDao2&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.Jmin_ioc.ioc02.UserDao&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><h4 id="基于构造函数的依赖注入（多构造参数解析）"><a href="#基于构造函数的依赖注入（多构造参数解析）" class="headerlink" title="基于构造函数的依赖注入（多构造参数解析）"></a>基于构造函数的依赖注入（多构造参数解析）</h4><p>   基于构造函数的 DI 是通过容器调用具有多个参数的构造函数来完成的，每个参数表示一个依赖项。</p>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDao</span> &#123;<br>&#125;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService</span> &#123;<br>    <br>    <span class="hljs-keyword">private</span> UserDao userDao;<br>    <br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">UserService</span><span class="hljs-params">(<span class="hljs-type">int</span> age , String name ,UserDao userDao)</span> &#123;<br>        <span class="hljs-built_in">this</span>.userDao = userDao;<br>        <span class="hljs-built_in">this</span>.age = age;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>   <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xml">    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userDao&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.Jmin_ioc.ioc03.UserDao&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userService1&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.Jmin_ioc.ioc03.UserService&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--        根据顺序填写构造参数--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;23&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;lm&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;userDao&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userService2&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.Jmin_ioc.ioc03.UserService&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--        根据参数的名称指定填写，不考虑顺序--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;userDao&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;userDao&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;32&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;lzm&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userService3&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.Jmin_ioc.ioc03.UserService&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--        根据参数的下角标指定填写，不考虑顺序--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;ml&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;13&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;2&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;userDao&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="基于Setter方法依赖注入"><a href="#基于Setter方法依赖注入" class="headerlink" title="基于Setter方法依赖注入"></a>基于Setter方法依赖注入</h4><p>   开发中除了构造函数注入DI更多使用Setter方法注入</p>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MovieFinder</span>&#123;<br><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SimpleMovieLister</span> &#123;<br><br>  <span class="hljs-keyword">private</span> MovieFinder movieFinder;<br>  <br>  <span class="hljs-keyword">private</span> String movieName;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setMovieFinder</span><span class="hljs-params">(MovieFinder movieFinder)</span> &#123;<br>    <span class="hljs-built_in">this</span>.movieFinder = movieFinder;<br>  &#125;<br>  <br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setMovieName</span><span class="hljs-params">(String movieName)</span>&#123;<br>    <span class="hljs-built_in">this</span>.movieName = movieName;<br>  &#125;<br><br>  <span class="hljs-comment">// business logic that actually uses the injected MovieFinder is omitted...</span><br>&#125;<br></code></pre></td></tr></table></figure>   <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml">    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;movieFinder&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.Jmin_ioc.ioc04.MovieFinder&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;simpleMovieLister&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.Jmin_ioc.ioc04.SimpleMovieLister&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--        name Setter方法的去set和首字母小写的值--&gt;</span><br><span class="hljs-comment">&lt;!--        setMovieFinder--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;movieFinder&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;movieFinder&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;movieName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;浪客剑心&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>依赖注入（DI）包含引用类型和基本数据类型，同时注入的方式也有多种！主流的注入方式为setter方法注入和构造函数注入</p></blockquote><p><strong>需要特别注意：引用其他bean，使用ref属性。直接注入基本类型值，使用value属性。</strong></p><h3 id="IOC容器创建和使用"><a href="#IOC容器创建和使用" class="headerlink" title="IOC容器创建和使用"></a>IOC容器创建和使用</h3><p>​想要配置文件中声明组件类信息真正的进行实例化成Bean对象和形成Bean之间的引用关系，我们需要声明IOC容器对象，读取配置文件，实例化组件和关系维护的过程都是在IOC容器中实现的！</p><h4 id="容器的实例化"><a href="#容器的实例化" class="headerlink" title="容器的实例化"></a>容器的实例化</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//方式1:实例化并且指定配置文件</span><br><span class="hljs-comment">//参数：String...locations 传入一个或者多个配置文件 该方法配置了刷新方法，不需要手动刷新</span><br><span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;services.xml&quot;</span>, <span class="hljs-string">&quot;daos.xml&quot;</span>);<br>           <br><span class="hljs-comment">//方式2:先实例化，再指定配置文件，最后刷新容器触发Bean实例化动作 [springmvc源码和contextLoadListener源码方式]  </span><br><span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>();   <br><span class="hljs-comment">//设置配置配置文件,方法参数为可变参数,可以设置一个或者多个配置</span><br>iocContainer1.setConfigLocations(<span class="hljs-string">&quot;services.xml&quot;</span>, <span class="hljs-string">&quot;daos.xml&quot;</span>);<br><span class="hljs-comment">//后配置的文件,需要调用refresh方法,触发刷新配置,</span><br>iocContainer1.refresh();           <br><br></code></pre></td></tr></table></figure><h4 id="bean对象的获取"><a href="#bean对象的获取" class="headerlink" title="bean对象的获取"></a>bean对象的获取</h4><p><img src="/assets/image-20230906075910773.png" alt="image-20230906075910773"></p><p>注意！可以通过接口类来获取bean，在满足bean唯一性的前提下，其实：『对象 instanceof 指定的类型』的返回结果， 只要返回的是true就可以认定为和类型匹配，能够获取到</p><h3 id="高级特性：组件的作用域和周期方法配置"><a href="#高级特性：组件的作用域和周期方法配置" class="headerlink" title="高级特性：组件的作用域和周期方法配置"></a>高级特性：组件的作用域和周期方法配置</h3><h4 id="组件周期方法配置"><a href="#组件周期方法配置" class="headerlink" title="组件周期方法配置"></a>组件周期方法配置</h4><ol><li><p>周期方法概念</p><p>可在组件类中定义方法，然后当ioc容器实例化和销毁组件对象的时候进行调用，这两种方法是生命周期方法！</p></li><li><p>周期方法声明</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Javabean</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;javabean.init&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">clean</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;javabean.clean&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">    &lt;bean id=<span class="hljs-string">&quot;javabean&quot;</span> class=<span class="hljs-string">&quot;com.Jmin_ioc.ioc06.Javabean&quot;</span> init-method=<span class="hljs-string">&quot;init&quot;</span> destroy-method=<span class="hljs-string">&quot;clean&quot;</span>/&gt;<br>&lt;!--    init-method初始化方法名<br>        destroy-method 销毁方法--&gt;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">SpringInitAndDestroy</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">ClassPathXmlApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;spring-06.xml&quot;</span>);<br>    context.getBean(<span class="hljs-string">&quot;javabean&quot;</span>);  <span class="hljs-comment">//完成初始化</span><br>    <span class="hljs-comment">//javabean.init</span><br>    context.close(); <span class="hljs-comment">//正常结束ioc容器之前调用destory()</span><br>    <span class="hljs-comment">//javabean.clean</span><br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20230906124317151.png" alt="image-20230906124317151"></p></li><li><p>周期方法配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml">    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;javabean&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.Jmin_ioc.ioc06.Javabean&quot;</span> <span class="hljs-attr">init-method</span>=<span class="hljs-string">&quot;init&quot;</span> <span class="hljs-attr">destroy-method</span>=<span class="hljs-string">&quot;clean&quot;</span>/&gt;</span><br><span class="hljs-comment">&lt;!--    init-method初始化方法名</span><br><span class="hljs-comment">        destroy-method 销毁方法--&gt;</span><br></code></pre></td></tr></table></figure></li></ol><h4 id="组件作用域配置"><a href="#组件作用域配置" class="headerlink" title="组件作用域配置"></a>组件作用域配置</h4><ol><li><p>bean作用域概念</p><p><code>&lt;bean</code> 标签声明Bean，只是将Bean的信息配置给SpringIoC容器！</p><p>在IoC容器中，这些<code>&lt;bean</code>标签对应的信息转成Spring内部 <code>BeanDefinition</code> 对象，<code>BeanDefinition</code> 对象内，包含定义的信息（id,class,属性等等）！</p><p><img src="/assets/image-20230906125718675.png" alt="image-20230906125718675"></p><p>这意味着，<code>BeanDefinition</code>与<code>类</code>概念一样，SpringIoC容器可以可以根据<code>BeanDefinition</code>对象反射创建多个Bean对象实例。</p><p>具体创建多少个Bean的实例对象，由Bean的作用域<code>Scope</code>属性指定！</p></li><li><p>作用域可选值</p><table><thead><tr><th>取值</th><th>含义</th><th>创建对象的时机</th><th>默认值</th></tr></thead><tbody><tr><td>singleton（单例）</td><td>在 IOC 容器中，这个 bean 的对象始终为单实例</td><td>IOC 容器初始化时</td><td>是</td></tr><tr><td>prototype（多例）</td><td>这个 bean 在 IOC 容器中有多个实例</td><td>获取 bean 时</td><td>否</td></tr></tbody></table><p> 如果是在WebApplicationContext环境下还会有另外两个作用域（但不常用）：</p><table><thead><tr><th align="center">取值</th><th>含义</th><th>创建对象的时机</th><th>默认值</th></tr></thead><tbody><tr><td align="center">request</td><td>请求范围内有效的实例</td><td>每次请求</td><td>否</td></tr><tr><td align="center">session</td><td>会话范围内有效的实例</td><td>每次会话</td><td>否</td></tr></tbody></table></li><li><p>作用域配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;javabean&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.Jmin_ioc.ioc06.Javabean&quot;</span> <span class="hljs-attr">init-method</span>=<span class="hljs-string">&quot;init&quot;</span> <span class="hljs-attr">destroy-method</span>=<span class="hljs-string">&quot;clean&quot;</span>/&gt;</span><br><span class="hljs-comment">&lt;!--    init-method初始化方法名</span><br><span class="hljs-comment">        destroy-method 销毁方法--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.Jmin_ioc.ioc06.Javabean&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;javabean2&quot;</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;prototype&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">SpringInitAndDestroy</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">ClassPathXmlApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;spring-06.xml&quot;</span>);<br>    <span class="hljs-type">Javabean</span> <span class="hljs-variable">bean</span> <span class="hljs-operator">=</span> context.getBean(Javabean.class);<br>    bean.setNum(<span class="hljs-number">12</span>);<br>    System.out.println(bean.getNum());<br>    <span class="hljs-type">Javabean</span> <span class="hljs-variable">bean2</span> <span class="hljs-operator">=</span> context.getBean(Javabean.class);<br>    System.out.println(bean2.getNum());<br>    context.close();<br>&#125;<br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">SpringInitAndDestroy2</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">ClassPathXmlApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;spring-06.xml&quot;</span>);<br>    <span class="hljs-type">Javabean</span> <span class="hljs-variable">bean</span> <span class="hljs-operator">=</span> context.getBean(<span class="hljs-string">&quot;javabean2&quot;</span>,Javabean.class);<br>    bean.setNum(<span class="hljs-number">12</span>);<br>    System.out.println(bean.getNum());<br>    <span class="hljs-type">Javabean</span> <span class="hljs-variable">bean2</span> <span class="hljs-operator">=</span> context.getBean(<span class="hljs-string">&quot;javabean2&quot;</span>,Javabean.class);<br>    System.out.println(bean2.getNum());<br>    context.close();<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20230906191506477.png" alt="image-20230906191506477"></p></li></ol><p><img src="/assets/image-20230906191652765.png" alt="image-20230906191652765"></p><h3 id="高级特性：FactoryBean特性和使用"><a href="#高级特性：FactoryBean特性和使用" class="headerlink" title="高级特性：FactoryBean特性和使用"></a>高级特性：FactoryBean特性和使用</h3><ol><li>简介</li></ol><p><img src="/assets/image-20230906193630652.png" alt="image-20230906193630652"></p><p><code>FactoryBean</code>接口是Spring IoC容器实例化逻辑的可插拨性点。</p><p>可用于配置复杂的Bean对象，可以将创建过程存储在<code>FactoryBean</code>的getObject方法。</p><p><code>FactoryBean&lt;T&gt;</code> 接口提供三种方法：</p><ul><li><p><code>T getObject()</code>: </p><p>  返回此工厂创建的对象的实例。该返回值会被存储到IoC容器！</p></li><li><p><code>boolean isSingleton()</code>: </p><p>  如果此 <code>FactoryBean</code> 返回单例，则返回 <code>true</code> ，否则返回 <code>false</code> 。此方法的默认实现返回 <code>true</code> （注意，lombok插件使用，可能影响效果）。</p></li><li><p><code>Class&lt;?&gt; getObjectType()</code>: </p><p>  返回 <code>getObject()</code> 方法返回的对象类型，如果事先不知道类型，则返回 <code>null</code> 。</p></li></ul><ol start="2"><li><p>使用场景：</p><ol><li>代理类的创建</li><li>第三方框架整合</li><li>复杂对象实例化等</li></ol></li><li><p>使用方法：</p><ol><li><p>创建需要实例化的类JavaBean。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaBean</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>再创建实例化工厂类，实现<code>FactoryBean&lt;JavaBean&gt;</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaBeanFactoryBean</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">FactoryBean</span>&lt;JavaBean&gt; &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> JavaBean <span class="hljs-title function_">getObject</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><span class="hljs-comment">//        实例化</span><br>        <span class="hljs-type">JavaBean</span> <span class="hljs-variable">javaBean</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JavaBean</span>();<br>        <span class="hljs-keyword">return</span> javaBean;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Class&lt;?&gt; getObjectType() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;javaBeanFactoryBean&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.Jmin_ioc.ioc07.JavaBeanFactoryBean&quot;</span>/&gt;</span><br><span class="hljs-comment">&lt;!--    优势：将复杂的实例化方法在工厂中返回--&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>检测是否成功实例化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">javaBeanFactoryTest</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">ClassPathXmlApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;spring-07.xml&quot;</span>);<br>    <span class="hljs-type">JavaBeanFactoryBean</span> <span class="hljs-variable">bean</span> <span class="hljs-operator">=</span> context.getBean(JavaBeanFactoryBean.class);<br>    <span class="hljs-type">JavaBean</span> <span class="hljs-variable">object</span> <span class="hljs-operator">=</span> bean.getObject();<br>    System.out.println(<span class="hljs-string">&quot;javaBean is &quot;</span>+object);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20230906203306946.png" alt="image-20230906203306946"></p></li></ol><p>复杂实例化，注入属性</p><ol start="2"><li><p>第一步如上，实例化工厂类，实现<code>FactoryBean&lt;JavaBean&gt;</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaBeanFactoryBean</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">FactoryBean</span>&lt;JavaBean&gt; &#123;<br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> JavaBean <span class="hljs-title function_">getObject</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><span class="hljs-comment">//        实例化</span><br>        <span class="hljs-type">JavaBean</span> <span class="hljs-variable">javaBean</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JavaBean</span>();<br>        javaBean.setName(name);<br>        <span class="hljs-keyword">return</span> javaBean;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Class&lt;?&gt; getObjectType() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;javaBeanFactoryBean&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.Jmin_ioc.ioc07.JavaBeanFactoryBean&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;dog&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-comment">&lt;!--    优势：将复杂的实例化方法在工厂中返回--&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>检测是否成功实例化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">javaBeanFactoryTest</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">ClassPathXmlApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;spring-07.xml&quot;</span>);<br>    <span class="hljs-type">JavaBean</span> <span class="hljs-variable">bean1</span> <span class="hljs-operator">=</span> context.getBean(<span class="hljs-string">&quot;javaBeanFactoryBean&quot;</span>,JavaBean.class);<br>    System.out.println(<span class="hljs-string">&quot;javaBean is &quot;</span> + bean1.getName());<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20230906204106237.png" alt="image-20230906204106237"></p></li></ol></li></ol><h4 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h4><blockquote><p>FactoryBean和BeanFactory区别</p></blockquote><p>答：共同点都是接口，BeanFactory是IoC容器最大的接口，也就是IoC容器，而FactoryBean是标准化组件工厂的接口，是组件。通常情况下整合第三方框架采用定义FactoryBean实现类的getObject()方法实现。</p><p>BeanFactory是SpringIOC容器中最大的接口，是Spring框架的基础。它是作为一个顶级接口定义了容器的基本行为，例如管理bean的生命周期，配置文件的加载和解析，bean的装配和依赖注入等。BeanFactory接口提供了访问Bean的方式，例如getBean()方法。可以获取不同来源比如数据库，xml文件，java配置类等等，获取bean实例。同时BeanFactory包含了很多子类提供很多强大的功能。</p><p>FactoryBean是标准化组件工厂的接口，是Spring中特殊的bean，可以在getObject()工厂方法自定义实例化bean的逻辑。FactoryBean在容器启动时被创建，一般情况下整合第三方框架采用定义FactoryBean实现类的getObject()方法实现。</p>]]></content>
    
    
    <categories>
      
      <category>SSM</category>
      
      <category>Spring</category>
      
      <category>IOC</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>3_SpringIOC容器和核心概念</title>
    <link href="/2023/09/04/%E5%B0%9A%E7%A1%85%E8%B0%B7-SSM/Spring/3_SpringIOC%E5%AE%B9%E5%99%A8%E5%92%8C%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/"/>
    <url>/2023/09/04/%E5%B0%9A%E7%A1%85%E8%B0%B7-SSM/Spring/3_SpringIOC%E5%AE%B9%E5%99%A8%E5%92%8C%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/</url>
    
    <content type="html"><![CDATA[<h1 id="3-SpringIOC容器和核心概念"><a href="#3-SpringIOC容器和核心概念" class="headerlink" title="3_SpringIOC容器和核心概念"></a>3_SpringIOC容器和核心概念</h1><h2 id="组件和组件管理概念"><a href="#组件和组件管理概念" class="headerlink" title="组件和组件管理概念"></a>组件和组件管理概念</h2><h3 id="什么是组件"><a href="#什么是组件" class="headerlink" title="什么是组件"></a>什么是组件</h3><p>组件是可以复用的对象，但对象不一定是组件。组件可以完全交给Spring 框架进行管理，Spring框架替代了程序员原有的new对象和对象属性赋值动作等！</p><p><img src="/assets/image-20230904224745062.png" alt="image-20230904224745062"></p><p><img src="/assets/image-20230904224800138.png" alt="image-20230904224800138"></p><h2 id="期待"><a href="#期待" class="headerlink" title="期待"></a>期待</h2><ul><li>有人替我们创建组件的对象</li><li>有人帮我们保存组件的对象</li><li>有人帮助我们自动组装</li><li>有人替我们管理事务</li><li>有人协助我们整合其他框架</li></ul><p><img src="/assets/image-20230904230250282.png" alt="image-20230904230250282"></p><h3 id="将组件交给Spring管理的优势？"><a href="#将组件交给Spring管理的优势？" class="headerlink" title="将组件交给Spring管理的优势？"></a>将组件交给Spring管理的优势？</h3><ol><li>降低了组件之间的耦合性</li><li>提高了代码的可重用性和可维护性</li><li>方便了配置和管理</li><li>可享受Spring框架的其他功能（AOP,声明事务管理）等</li></ol><h2 id="SpringIOC容器和容器实现"><a href="#SpringIOC容器和容器实现" class="headerlink" title="SpringIOC容器和容器实现"></a>SpringIOC容器和容器实现</h2><p>Spring管理组件的容器，就是一个复杂容器，不仅存储组件，也可以管理组件之间依赖关系，并且创建和销毁组件等！</p><p>Spring IoC 容器，负责实例化、配置和组装 bean（组件）。容器通过读取配置元数据来获取有关要实例化、配置和组装组件的指令。</p><p>配置元数据以 <strong>XML、Java 注解或 Java 代码</strong>形式表现。它允许表达组成应用程序的组件以及这些组件之间丰富的相互依赖关系。</p><h2 id="SpringIOC容器具体接口和实现类"><a href="#SpringIOC容器具体接口和实现类" class="headerlink" title="SpringIOC容器具体接口和实现类"></a>SpringIOC容器具体接口和实现类</h2><h3 id="SpringIOC容器接口"><a href="#SpringIOC容器接口" class="headerlink" title="SpringIOC容器接口"></a>SpringIOC容器接口</h3><p><code>BeanFactory</code>接口提供了一种高级配置机制，能够管理任何类型的对象，它是SpringIOC容器标准化超接口</p><p><code>ApplicationContext</code>是 <code>BeanFactory</code>的子接口</p><ul><li>更容易与 Spring 的 AOP 功能集成</li><li>消息资源处理（用于国际化）</li><li>特定于应用程序给予此接口实现，例如Web 应用程序的 <code>WebApplicationContext</code></li></ul><p><code>BeanFactory</code>提供了配置框架和基本功能，而<code>ApplicationContext</code>添加了更多特定于企业的功能。<code>ApplicationContext</code>是<code>BeanFactory</code>的完整超集！</p><h3 id="SpringIOC具体实现类"><a href="#SpringIOC具体实现类" class="headerlink" title="SpringIOC具体实现类"></a>SpringIOC具体实现类</h3><table><thead><tr><th>类型名</th><th>简介</th></tr></thead><tbody><tr><td>ClassPathXmlApplicationContext</td><td>通过读取类路径下的 XML 格式的配置文件创建 IOC 容器对象</td></tr><tr><td>FileSystemXmlApplicationContext</td><td>通过文件系统路径读取 XML 格式的配置文件创建 IOC 容器对象</td></tr><tr><td>AnnotationConfigApplicationContext</td><td>通过读取Java配置类创建 IOC 容器对象</td></tr><tr><td>WebApplicationContext</td><td>专门为 Web 应用准备，基于 Web 环境创建 IOC 容器对象，并将对象引入存入 ServletContext 域中。</td></tr></tbody></table><p><img src="/assets/image-20230905002407515.png" alt="image-20230905002407515"></p><h2 id="SpringIOC容器管理配置方式"><a href="#SpringIOC容器管理配置方式" class="headerlink" title="SpringIOC容器管理配置方式"></a>SpringIOC容器管理配置方式</h2><p>Spring框架提供了多种配置方式：XML配置方式、注解方式和Java配置类方式</p><ol><li>XML配置方式(淘汰)：是Spring框架最早的配置方式之一，通过在XML文件中定义Bean及其依赖关系、Bean的作用域等信息，让Spring IoC容器来管理Bean之间的依赖关系。该方式从Spring框架的第一版开始提供支持。</li><li>注解方式：从Spring 2.5版本开始提供支持，可以通过在Bean类上使用注解来代替XML配置文件中的配置信息。通过在Bean类上加上相应的注解（如@Component, @Service, @Autowired等），将Bean注册到Spring IoC容器中，这样Spring IoC容器就可以管理这些Bean之间的依赖关系。</li><li>Java配置类方式：从Spring 3.0版本开始提供支持，通过Java类来定义Bean、Bean之间的依赖关系和配置信息，从而代替XML配置文件的方式。Java配置类是一种使用Java编写配置信息的方式，通过@Configuration、@Bean等注解来实现Bean和依赖关系的配置。</li></ol><p>以<strong>配置类+注解方式</strong>为主进行</p><h2 id="SpringIOC核心功能（概念总结）"><a href="#SpringIOC核心功能（概念总结）" class="headerlink" title="SpringIOC核心功能（概念总结）"></a>SpringIOC核心功能（概念总结）</h2><ul><li><p>IOC容器</p><p>SpringIoC 容器，负责实例化、配置和组装 bean（组件）核心容器。容器通过读取配置元数据来获取有关要实例化、配置和组装组件的指令。</p></li><li><p>IOC控制反转</p><p><img src="/assets/image-20230905003938554.png" alt="image-20230905003938554"></p><p>通常说应用程序中类需要由程序员实例化，但是如果将应用程序中类的信息传递到Spring配置文件中，SpringIOC将读取该配置文件，按需求在SpringIOC中利用反射技术完成实例化。此过程中创建对象的“权利”发生了转交，便是IOC控制反转。</p></li><li><p>DI(Dependency Injection注入依赖)</p><p>应用程序中若对象1需要对象2，可以通过构造函数或者set方法将对象2注入到对象1中，而在SpringIOC中，也可以将对象2注入到对象1中，这便是DI注入依赖。Spring 中，DI 是通过 XML 配置文件或注解的方式实现的。它提供了三种形式的依赖注入：构造函数注入、Setter 方法注入和接口注入。</p><p><img src="/assets/image-20230905004859361.png" alt="image-20230905004859361"></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>SSM</category>
      
      <category>Spring</category>
      
      <category>IOC</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>2_Spring</title>
    <link href="/2023/09/04/%E5%B0%9A%E7%A1%85%E8%B0%B7-SSM/Spring/2_Spring%E7%AE%80%E4%BB%8B/"/>
    <url>/2023/09/04/%E5%B0%9A%E7%A1%85%E8%B0%B7-SSM/Spring/2_Spring%E7%AE%80%E4%BB%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="Spring简介"><a href="#Spring简介" class="headerlink" title="Spring简介"></a>Spring简介</h1><h2 id="Spring和SpringFramework"><a href="#Spring和SpringFramework" class="headerlink" title="Spring和SpringFramework"></a>Spring和SpringFramework</h2><p>广义的Spring：泛指SpringFramework为基础的Spring技术栈。Spring 已经不再是一个单纯的应用框架。</p><p>Spring Framework、Spring MVC、SpringBoot、Spring Cloud、Spring Data、Spring Security 等，其中 Spring Framework 是其他子项目的基础。</p><p>狭义的 Spring：Spring Framework</p><h2 id="SpringFramework主要功能模块"><a href="#SpringFramework主要功能模块" class="headerlink" title="SpringFramework主要功能模块"></a>SpringFramework主要功能模块</h2><p><img src="/assets/image-20230904171209253.png" alt="image-20230904171209253"></p><table><thead><tr><th>功能模块</th><th>功能介绍</th></tr></thead><tbody><tr><td>Core Container</td><td>核心容器，在 Spring 环境下使用任何功能都必须基于 IOC 容器。</td></tr><tr><td>AOP&amp;Aspects</td><td>面向切面编程</td></tr><tr><td>TX</td><td>声明式事务管理。</td></tr><tr><td>Spring MVC</td><td>提供了面向Web应用程序的集成功能。</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>SSM</category>
      
      <category>Spring</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>1_SpringFramework</title>
    <link href="/2023/09/04/%E5%B0%9A%E7%A1%85%E8%B0%B7-SSM/Spring/1_SpringFramework/"/>
    <url>/2023/09/04/%E5%B0%9A%E7%A1%85%E8%B0%B7-SSM/Spring/1_SpringFramework/</url>
    
    <content type="html"><![CDATA[<h1 id="1-SpringFramework简介"><a href="#1-SpringFramework简介" class="headerlink" title="1_SpringFramework简介"></a>1_SpringFramework简介</h1><h2 id="技术体系结构"><a href="#技术体系结构" class="headerlink" title="技术体系结构"></a>技术体系结构</h2><ul><li><p>单一架构</p><p>一个项目，一个工程，导出一个war包，在一个Tomcat上运行。称之为all in one。</p><p><img src="/assets/image-20230904154644910.png" alt="image-20230904154644910"></p><p>单一架构，项目主要应用技术框架为：Spring，SpringMVC，Mybatis</p></li><li><p>分布式架构</p><p>一个项目（对应idea中的一个project），拆分为多个模块，每个模块是一个idea中的module。每一个工程都是运行在自己的Tomcat上。模块之间可以相互调用。每一个模块内部可以看作一个单一架构的应用。</p><p><img src="/assets/image-20230904160757092.png" alt="image-20230904160757092"></p><p>分布式架构，项目主要应用技术框架：SpringBoot（SSM），SpringCloud，中间件等等。</p></li></ul><h2 id="框架的理解"><a href="#框架的理解" class="headerlink" title="框架的理解"></a>框架的理解</h2><blockquote><p>框架( Framework )是一个集成了基本结构、规范、设计模式、编程语言和程序库等基础组件的软件系统，它可以用来构建更高级别的应用程序。</p></blockquote><p>框架&#x3D;jar包+配置文件</p>]]></content>
    
    
    <categories>
      
      <category>SSM</category>
      
      <category>Spring</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>13_Maven总结.md</title>
    <link href="/2023/09/04/%E5%B0%9A%E7%A1%85%E8%B0%B7-SSM/Maven/13_Maven%E6%80%BB%E7%BB%93/"/>
    <url>/2023/09/04/%E5%B0%9A%E7%A1%85%E8%B0%B7-SSM/Maven/13_Maven%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p><img src="/assets/image-20230904150139697.png" alt="image-20230904150139697"></p>]]></content>
    
    
    <categories>
      
      <category>SSM</category>
      
      <category>Maven</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>12_Maven实战</title>
    <link href="/2023/09/04/%E5%B0%9A%E7%A1%85%E8%B0%B7-SSM/Maven/12_Maven%E5%AE%9E%E6%88%98/"/>
    <url>/2023/09/04/%E5%B0%9A%E7%A1%85%E8%B0%B7-SSM/Maven/12_Maven%E5%AE%9E%E6%88%98/</url>
    
    <content type="html"><![CDATA[<p><img src="/assets/image-20230904141903713.png" alt="image-20230904141903713"></p><h2 id="父工程micro-shop-maven"><a href="#父工程micro-shop-maven" class="headerlink" title="父工程micro-shop maven:"></a>父工程micro-shop maven:</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.Jmin<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>micro-shop<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modules</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>user-service<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>order-service<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>common-service<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">modules</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>17<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>17<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">spring.version</span>&gt;</span>6.0.6<span class="hljs-tag">&lt;/<span class="hljs-name">spring.version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">jackson.version</span>&gt;</span>2.15.0<span class="hljs-tag">&lt;/<span class="hljs-name">jackson.version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">shiro.version</span>&gt;</span>1.10.1<span class="hljs-tag">&lt;/<span class="hljs-name">shiro.version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">commons-io.version</span>&gt;</span>2.11.0<span class="hljs-tag">&lt;/<span class="hljs-name">commons-io.version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencyManagement</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-context<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-databind<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;jackson.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.shiro<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>shiro-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;shiro.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-io<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-io<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;commons-io.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>            子工程本地部署后，生成jar包为依赖，供给其他工程引用。<br>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.Jmin<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>common-service<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencyManagement</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="子工程-common-service"><a href="#子工程-common-service" class="headerlink" title="子工程 common-service"></a>子工程 common-service</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.Jmin<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>micro-shop<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>common-service<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-comment">&lt;!--    将本项目供本地仓库服务，需要先部署--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>17<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>17<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-io<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-io<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="子工程-user-service"><a href="#子工程-user-service" class="headerlink" title="子工程 user-service"></a>子工程 user-service</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.Jmin<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>micro-shop<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>user-service<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>war<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>17<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>17<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-context<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-databind<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.Jmin<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>common-service<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-comment">&lt;!--            &lt;version&gt;1.0.1&lt;/version&gt;--&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h2 id="子工程-order-service"><a href="#子工程-order-service" class="headerlink" title="子工程 order-service"></a>子工程 order-service</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.Jmin<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>micro-shop<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>order-service<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>war<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>17<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>17<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.shiro<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>shiro-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-context<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.Jmin<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>common-service<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-comment">&lt;!--            &lt;version&gt;1.0.1&lt;/version&gt;--&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>SSM</category>
      
      <category>Maven</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>11_Maven聚合特性</title>
    <link href="/2023/09/04/%E5%B0%9A%E7%A1%85%E8%B0%B7-SSM/Maven/11_Maven%E8%81%9A%E5%90%88%E5%85%B3%E7%B3%BB/"/>
    <url>/2023/09/04/%E5%B0%9A%E7%A1%85%E8%B0%B7-SSM/Maven/11_Maven%E8%81%9A%E5%90%88%E5%85%B3%E7%B3%BB/</url>
    
    <content type="html"><![CDATA[<h1 id="11-Maven聚合特性"><a href="#11-Maven聚合特性" class="headerlink" title="11_Maven聚合特性"></a>11_Maven聚合特性</h1><ol><li><p>聚合概念</p><p>Maven 聚合是指将多个项目组织到一个父级项目中，通过触发父工程的构建，统一按顺序触发子工程构建的过程!</p></li><li><p>聚合作用</p><ol><li>统一管理子项目构建：通过聚合，可以将多个子项目组织在一起，方便管理和维护。</li><li>优化构建顺序：通过聚合，可以对多个项目进行顺序控制，避免出现构建依赖混乱导致构建失败的情况。</li></ol></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">project</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.example<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>parent-project<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">modules</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>child-project1<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>child-project2<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">modules</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>SSM</category>
      
      <category>Maven</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>10_Maven继承和聚合特性</title>
    <link href="/2023/09/04/%E5%B0%9A%E7%A1%85%E8%B0%B7-SSM/Maven/10_Maven%E7%BB%A7%E6%89%BF%E5%92%8C%E8%81%9A%E5%90%88%E7%89%B9%E6%80%A7/"/>
    <url>/2023/09/04/%E5%B0%9A%E7%A1%85%E8%B0%B7-SSM/Maven/10_Maven%E7%BB%A7%E6%89%BF%E5%92%8C%E8%81%9A%E5%90%88%E7%89%B9%E6%80%A7/</url>
    
    <content type="html"><![CDATA[<h1 id="10-Maven继承和聚合特性"><a href="#10-Maven继承和聚合特性" class="headerlink" title="10_Maven继承和聚合特性"></a>10_Maven继承和聚合特性</h1><p>父工程管理依赖，不会加载，而子工程可以继承这些依赖或者覆盖版本</p><p><img src="/assets/image-20230904120901362.png" alt="image-20230904120901362"></p><p><img src="/assets/image-20230904120844140.png" alt="image-20230904120844140"></p>]]></content>
    
    
    <categories>
      
      <category>SSM</category>
      
      <category>Maven</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>9_Maven扩展构建管理和插件配置</title>
    <link href="/2023/09/04/%E5%B0%9A%E7%A1%85%E8%B0%B7-SSM/Maven/9_Maven%E6%89%A9%E5%B1%95%E6%9E%84%E5%BB%BA%E7%AE%A1%E7%90%86%E5%92%8C%E6%8F%92%E4%BB%B6%E9%85%8D%E7%BD%AE/"/>
    <url>/2023/09/04/%E5%B0%9A%E7%A1%85%E8%B0%B7-SSM/Maven/9_Maven%E6%89%A9%E5%B1%95%E6%9E%84%E5%BB%BA%E7%AE%A1%E7%90%86%E5%92%8C%E6%8F%92%E4%BB%B6%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="9-Maven扩展构建管理和插件配置"><a href="#9-Maven扩展构建管理和插件配置" class="headerlink" title="9_Maven扩展构建管理和插件配置"></a>9_Maven扩展构建管理和插件配置</h1><h2 id="构建概念"><a href="#构建概念" class="headerlink" title="构建概念"></a>构建概念</h2><p>项目构建是指将源代码、依赖库和资源文件等转换成可执行或可部署的应用程序的过程，在这个过程中包括编译源代码、链接依赖库、打包和部署等多个步骤。</p><p><img src="/assets/image-20230904111151694.png" alt="image-20230904111151694"></p><h3 id="主动触发场景"><a href="#主动触发场景" class="headerlink" title="主动触发场景"></a>主动触发场景</h3><ul><li>重新编译 : 编译不充分, 部分文件没有被编译!</li><li>打包 : 独立部署到外部服务器软件,打包部署</li><li>部署本地或者私服仓库 : maven工程加入到本地或者私服仓库,供其他工程使用，部署必须jar包形式</li></ul><p><img src="/assets/image-20230904111338744.png" alt="image-20230904111338744"></p><p><img src="/assets/image-20230904111355381.png" alt="image-20230904111355381"></p><h3 id="构建命令周期"><a href="#构建命令周期" class="headerlink" title="构建命令周期"></a>构建命令周期</h3><p>构建生命周期可以理解成是一组固定构建命令的有序集合，触发周期后的命令，会自动触发周期前的命令！也是一种简化构建的思路!</p><p><img src="/assets/image-20230904112724642.png" alt="image-20230904112724642"></p><ul><li><p>清理周期：主要是对项目编译生成文件进行清理</p><p>  包含命令：clean</p></li><li><p>默认周期：定义了真正构件时所需要执行的所有步骤，它是生命周期中最核心的部分</p><p>  包含命令：compile - test - package - install &#x2F; deploy</p></li><li><p>报告周期</p><p>  包含命令：site</p><p>  打包: mvn clean package 本地仓库: mvn clean install</p></li></ul><p>打包最佳方式：mvn clean package</p><h3 id="周期，命令和插件"><a href="#周期，命令和插件" class="headerlink" title="周期，命令和插件:"></a>周期，命令和插件:</h3><ul><li><p>周期→包含若干命令→包含若干插件!</p></li><li><p>使用周期命令构建，简化构建过程！</p></li><li><p>最终进行构建的是插件！</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>   <span class="hljs-comment">&lt;!-- jdk17 和 war包版本插件不匹配 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-war-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.2.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>SSM</category>
      
      <category>Maven</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>8_Maven依赖导入失败场景和解决方案</title>
    <link href="/2023/09/04/%E5%B0%9A%E7%A1%85%E8%B0%B7-SSM/Maven/8_Maven%E4%BE%9D%E8%B5%96%E5%AF%BC%E5%85%A5%E5%A4%B1%E8%B4%A5%E5%9C%BA%E6%99%AF%E5%92%8C%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <url>/2023/09/04/%E5%B0%9A%E7%A1%85%E8%B0%B7-SSM/Maven/8_Maven%E4%BE%9D%E8%B5%96%E5%AF%BC%E5%85%A5%E5%A4%B1%E8%B4%A5%E5%9C%BA%E6%99%AF%E5%92%8C%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    
    <content type="html"><![CDATA[<h1 id="8-Maven依赖导入失败场景和解决方案"><a href="#8-Maven依赖导入失败场景和解决方案" class="headerlink" title="8_Maven依赖导入失败场景和解决方案"></a>8_Maven依赖导入失败场景和解决方案</h1><h2 id="出错的场景"><a href="#出错的场景" class="headerlink" title="出错的场景"></a>出错的场景</h2><ol><li>下载依赖时出现网络故障或仓库服务器宕机等原因，导致无法连接至 Maven 仓库，从而无法下载依赖。</li><li>依赖项的版本号或配置文件中的版本号错误，或者依赖项没有正确定义，导致 Maven 下载的依赖项与实际需要的不一致，从而引发错误。</li><li>本地 Maven 仓库或缓存被污染或损坏，导致 Maven 无法正确地使用现有的依赖项，并且也无法重新下载！</li></ol><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><ol><li><p>检查网络连接和 Maven 仓库服务器状态。</p></li><li><p>确保依赖项的版本号与项目对应的版本号匹配，并检查 POM 文件中的依赖项是否正确。</p></li><li><p>清除本地 Maven 仓库缓存（lastUpdated 文件），因为只要存在lastupdated缓存文件，刷新也不会重新下载。本地仓库中，根据依赖的gav属性依次向下查找文件夹，最终删除内部的文件，刷新重新下载即可！</p><p> 例如： pom.xml依赖</p></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.8<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>可能出现的问题：访问本地仓库不存在依赖，并且不访问阿里镜像的问题，即本地仓库被污染。解决问题则必须删除污染文件，lastupdated缓存文件</p><p>​    <a href="https://secure2-danger.wostatic.cn/static/tpcPbE2YRb3wNi5TGT62Ht/%E6%B8%85%E7%90%86maven%E9%94%99%E8%AF%AF%E7%BC%93%E5%AD%98.bat?auth_key=1693796348-tbwNYKRzNqEaJgQSKCXWeN-0-ee9c561a4a3d43509b558e609636156c&download=%E6%B8%85%E7%90%86maven%E9%94%99%E8%AF%AF%E7%BC%93%E5%AD%98.bat">清理错误缓存脚本</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs XML">使用记事本打开<br>set REPOSITORY_PATH=D:\repository  改成你本地仓库地址即可！<br>点击运行脚本，即可自动清理本地错误缓存文件！！<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>SSM</category>
      
      <category>Maven</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>7_Maven依赖传递和冲突</title>
    <link href="/2023/09/04/%E5%B0%9A%E7%A1%85%E8%B0%B7-SSM/Maven/7_Maven%E4%BE%9D%E8%B5%96%E4%BC%A0%E9%80%92%E5%92%8C%E5%86%B2%E7%AA%81/"/>
    <url>/2023/09/04/%E5%B0%9A%E7%A1%85%E8%B0%B7-SSM/Maven/7_Maven%E4%BE%9D%E8%B5%96%E4%BC%A0%E9%80%92%E5%92%8C%E5%86%B2%E7%AA%81/</url>
    
    <content type="html"><![CDATA[<h1 id="7-Maven依赖传递和冲突"><a href="#7-Maven依赖传递和冲突" class="headerlink" title="7_Maven依赖传递和冲突"></a>7_Maven依赖传递和冲突</h1><p><strong>依赖传递</strong>指的是当一个模块或库 A 依赖于另一个模块或库 B，而 B 又依赖于模块或库 C，那么 A 会间接依赖于 C。</p><p>即导入依赖，会自动导入依赖的依赖。（compile dependenices）</p><h2 id="依赖传递的作用"><a href="#依赖传递的作用" class="headerlink" title="依赖传递的作用"></a>依赖传递的作用</h2><ol><li>减少重复依赖：当多个项目依赖同一个库时，Maven 可以自动下载并且只下载一次该库。这样可以减少项目的构建时间和磁盘空间。</li><li>自动管理依赖: Maven 可以自动管理依赖项，使用依赖传递，简化了依赖项的管理，使项目构建更加可靠和一致。</li><li>确保依赖版本正确性：通过依赖传递的依赖，之间都不会存在版本兼容性问题，确实依赖的版本正确性！</li></ol><h2 id="依赖冲突"><a href="#依赖冲突" class="headerlink" title="依赖冲突"></a>依赖冲突</h2><p>发现已经存在的重复依赖，会终止依赖传递，避免依赖和重复依赖的问题。</p><blockquote><p>假设A依赖B的1.0，而C依赖了B的2.0，问项目中引入A和C，此时B的版本(1.0)</p></blockquote><p>依赖冲突的解决原则：</p><ul><li>第一原则：谁短谁优先，即引用的路径长度。假设A-E-D-B1.0和C-B2.0，此时优先引用后者。C-A-B2.0</li><li>第二原则：谁上谁优先，即dependencies声明的先后顺序。假设A-B1.0,C-B2.0优先前者。A-C-B1.0</li><li>只要发生了冲突，后续的依赖传递将会发生终止。</li></ul>]]></content>
    
    
    <categories>
      
      <category>SSM</category>
      
      <category>Maven</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>6_Maven核心功能依赖和构建管理</title>
    <link href="/2023/09/04/%E5%B0%9A%E7%A1%85%E8%B0%B7-SSM/Maven/6_Maven%E6%A0%B8%E5%BF%83%E5%8A%9F%E8%83%BD%E4%BE%9D%E8%B5%96%E5%92%8C%E6%9E%84%E5%BB%BA%E7%AE%A1%E7%90%86/"/>
    <url>/2023/09/04/%E5%B0%9A%E7%A1%85%E8%B0%B7-SSM/Maven/6_Maven%E6%A0%B8%E5%BF%83%E5%8A%9F%E8%83%BD%E4%BE%9D%E8%B5%96%E5%92%8C%E6%9E%84%E5%BB%BA%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="6-Maven核心功能依赖和构建管理"><a href="#6-Maven核心功能依赖和构建管理" class="headerlink" title="6_Maven核心功能依赖和构建管理"></a>6_Maven核心功能依赖和构建管理</h1><p>Maven 依赖管理是 Maven 软件中最重要的功能之一。能够帮助开发人员自动解决软件包依赖问题。</p><p>Maven 能够自动解析项目的依赖关系，并通过 Maven 仓库自动下载和管理依赖，从而避免了手动下载和管理依赖的繁琐工作和可能引发的版本冲突问题。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- </span><br><span class="hljs-comment">   通过编写依赖jar包的gav必要属性，引入第三方依赖！</span><br><span class="hljs-comment">   scope属性是可选的，可以指定依赖生效范围！</span><br><span class="hljs-comment">   依赖信息查询方式：</span><br><span class="hljs-comment">      1. maven仓库信息官网 https://mvnrepository.com/</span><br><span class="hljs-comment">      2. mavensearch插件搜索</span><br><span class="hljs-comment"> --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 引入具体的依赖包 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.17<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">            生效范围</span><br><span class="hljs-comment">            - compile ：main目录 test目录  打包打包 [默认]</span><br><span class="hljs-comment">            - provided：main目录 test目录  Servlet</span><br><span class="hljs-comment">            - runtime： 打包运行           MySQL</span><br><span class="hljs-comment">            - test:    test目录           junit</span><br><span class="hljs-comment">         --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><p><a href="https://mvnrepository.com/">https://mvnrepository.com</a></p><p>maven-search插件</p><p><img src="/assets/image-20230904092353800.png" alt="image-20230904092353800"></p><p><img src="/assets/image-20230904092543000.png" alt="image-20230904092543000"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>cn.hutool<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>hutool-all<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.8.21<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><h3 id="如何设置变量呢，用于依赖版本管理"><a href="#如何设置变量呢，用于依赖版本管理" class="headerlink" title="如何设置变量呢，用于依赖版本管理"></a>如何设置变量呢，用于依赖版本管理</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--    声明变量，声明后可以在其他位置引用$&#123;hutool.version&#125;--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">hutool.version</span>&gt;</span>5.8.21<span class="hljs-tag">&lt;/<span class="hljs-name">hutool.version</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/assets/image-20230904093404904.png" alt="image-20230904093404904"></p><h3 id="scope"><a href="#scope" class="headerlink" title="scope"></a>scope</h3><p>引入依赖的作用域</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs subunit">scope引用作用域<br>默认compile 全局<br>main 主类<br><span class="hljs-keyword">test </span>测试 Junit @Test<br>runtime 运行和打包 mysql Class.forname(com.mysql.cj.jdbc.Driver)<br>provided main和test可以使用，runtime不使用 Servlet HttpServlet<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>SSM</category>
      
      <category>Maven</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>5_Maven工程项目结构说明</title>
    <link href="/2023/09/04/%E5%B0%9A%E7%A1%85%E8%B0%B7-SSM/Maven/5_Maven%E5%B7%A5%E7%A8%8B%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84%E8%AF%B4%E6%98%8E/"/>
    <url>/2023/09/04/%E5%B0%9A%E7%A1%85%E8%B0%B7-SSM/Maven/5_Maven%E5%B7%A5%E7%A8%8B%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84%E8%AF%B4%E6%98%8E/</url>
    
    <content type="html"><![CDATA[<h1 id="5-Maven工程项目结构说明"><a href="#5-Maven工程项目结构说明" class="headerlink" title="5_Maven工程项目结构说明"></a>5_Maven工程项目结构说明</h1><p>Maven Web 程序的文件结构及每个文件的作用：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs xml">|-- pom.xml                               # Maven 项目管理文件 <br>|-- src<br>    |-- main                              # 项目主要代码<br>    |   |-- java                          # Java 源代码目录<br>    |   |   `-- com/example/myapp         # 开发者代码主目录<br>    |   |       |-- controller            # 存放 Controller 层代码的目录<br>    |   |       |-- service               # 存放 Service 层代码的目录<br>    |   |       |-- dao                   # 存放 DAO 层代码的目录<br>    |   |       `-- model                 # 存放数据模型的目录<br>    |   |-- resources                     # 资源目录，存放配置文件、静态资源等<br>    |   |   |-- log4j.properties          # 日志配置文件<br>    |   |   |-- spring-mybatis.xml        # Spring Mybatis 配置文件<br>    |   |   `-- static                    # 存放静态资源的目录<br>    |   |       |-- css                   # 存放 CSS 文件的目录<br>    |   |       |-- js                    # 存放 JavaScript 文件的目录<br>    |   |       `-- images                # 存放图片资源的目录<br>    |   `-- webapp                        # 存放 WEB 相关配置和资源<br>    |       |-- WEB-INF                   # 存放 WEB 应用配置文件<br>    |       |   |-- web.xml               # Web 应用的部署描述文件<br>    |       |   `-- classes               # 存放编译后的 class 文件<br>    |       `-- index.html                # Web 应用入口页面<br>    `-- test                              # 项目测试代码<br>        |-- java                          # 单元测试目录<br>        `-- resources                     # 测试资源目录<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>SSM</category>
      
      <category>Maven</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>4_idea构建Maven.Javaee工程</title>
    <link href="/2023/09/04/%E5%B0%9A%E7%A1%85%E8%B0%B7-SSM/Maven/4_idea%E6%9E%84%E5%BB%BAMaven.Javaee%E5%B7%A5%E7%A8%8B/"/>
    <url>/2023/09/04/%E5%B0%9A%E7%A1%85%E8%B0%B7-SSM/Maven/4_idea%E6%9E%84%E5%BB%BAMaven.Javaee%E5%B7%A5%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="4-idea构建Maven-Javee工程"><a href="#4-idea构建Maven-Javee工程" class="headerlink" title="4_idea构建Maven.Javee工程"></a>4_idea构建Maven.Javee工程</h1><h2 id="手动创建web项目"><a href="#手动创建web项目" class="headerlink" title="手动创建web项目"></a>手动创建web项目</h2><ol><li>创建一个Javase maven工程</li><li>补全文件结构<br>main<br>   web<br>   WEB-INF<br>       web.xml</li><li>pom.xml<br>packaging    war</li><li>刷新-web多了一个小蓝点</li></ol><p><img src="/assets/image-20230904085713423.png" alt="image-20230904085713423"></p><h2 id="插件创建web项目"><a href="#插件创建web项目" class="headerlink" title="插件创建web项目"></a>插件创建web项目</h2><ol><li><p>安装插件JBLJavaToWeb</p><p><img src="/assets/image-20230904090112064.png" alt="image-20230904090112064"></p></li><li><p>创建一个javaeemaven工程</p></li><li><p>右键、使用插件快速补全web项目</p><p><img src="/assets/image-20230904090501505.png" alt="image-20230904090501505"></p></li></ol><p><img src="/assets/image-20230904090548624.png" alt="image-20230904090548624"></p>]]></content>
    
    
    <categories>
      
      <category>SSM</category>
      
      <category>Maven</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>2_MAVEN安装和配置</title>
    <link href="/2023/09/03/%E5%B0%9A%E7%A1%85%E8%B0%B7-SSM/Maven/2_Maven%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/"/>
    <url>/2023/09/03/%E5%B0%9A%E7%A1%85%E8%B0%B7-SSM/Maven/2_Maven%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="2-Maven安装和配置"><a href="#2-Maven安装和配置" class="headerlink" title="2_Maven安装和配置"></a>2_Maven安装和配置</h1><p>下载安装环境变量配置不说了</p><h2 id="本地maven基本配置"><a href="#本地maven基本配置" class="headerlink" title="本地maven基本配置"></a>本地maven基本配置</h2><p>改maven&#x2F;conf&#x2F;settings.xml配置文件</p><p>目标：</p><ol><li>依赖本地缓存位置（本地仓库位置）</li><li>maven下载镜像</li><li>maven选用编译项目的jdk版本！</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs xml">依赖本地缓存位置（本地仓库位置）<br><span class="hljs-comment">&lt;!-- localRepository</span><br><span class="hljs-comment"> | The path to the local repository maven will use to store artifacts.</span><br><span class="hljs-comment"> |</span><br><span class="hljs-comment"> | Default: $&#123;user.home&#125;/.m2/repository</span><br><span class="hljs-comment">&lt;localRepository&gt;/path/to/local/repo&lt;/localRepository&gt;</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-comment">&lt;!-- conf/settings.xml 55行 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">localRepository</span>&gt;</span>D:\repository<span class="hljs-tag">&lt;/<span class="hljs-name">localRepository</span>&gt;</span><br><br>maven下载镜像<br><span class="hljs-comment">&lt;!--在mirrors节点(标签)下添加中央仓库镜像 160行附近--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>alimaven<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>aliyun maven<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>central<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span><br><br>配置jdk17版本项目构建<br><span class="hljs-comment">&lt;!--在profiles节点(标签)下添加jdk编译版本 268行附近--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">profile</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>jdk-17<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">activation</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">activeByDefault</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">activeByDefault</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">jdk</span>&gt;</span>17<span class="hljs-tag">&lt;/<span class="hljs-name">jdk</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">activation</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>17<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>17<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.compilerVersion</span>&gt;</span>17<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.compilerVersion</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">profile</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="IDEA配置本地MAVEN"><a href="#IDEA配置本地MAVEN" class="headerlink" title="IDEA配置本地MAVEN"></a>IDEA配置本地MAVEN</h2><p>替换成本地配置好的maven</p><ol><li>进入IDEA，file &#x2F; settings &#x2F; build &#x2F; build tool &#x2F; maven，选中本地maven</li><li>查看本地仓库是否自动变为配置的地址</li></ol>]]></content>
    
    
    <categories>
      
      <category>SSM</category>
      
      <category>Maven</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>1_MAVEN简介</title>
    <link href="/2023/09/03/%E5%B0%9A%E7%A1%85%E8%B0%B7-SSM/Maven/1_Maven%E7%AE%80%E4%BB%8B/"/>
    <url>/2023/09/03/%E5%B0%9A%E7%A1%85%E8%B0%B7-SSM/Maven/1_Maven%E7%AE%80%E4%BB%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="1-MAVEN简介"><a href="#1-MAVEN简介" class="headerlink" title="1_MAVEN简介"></a>1_MAVEN简介</h1><p>Maven 是一款为 Java 项目构建管理、依赖管理的工具（软件），使用 Maven 可以自动化构建、测试、打包和发布项目，大大提高了开发效率和质量。</p><p>（项目构建、依赖管理）√</p><h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><h3 id="场景概念"><a href="#场景概念" class="headerlink" title="场景概念"></a>场景概念</h3><ol><li>项目需要导包（依赖），可以将所需的依赖项信息填到Maven工程的配置文件，Maven将下载并复制到项目中。</li><li>开发完成后，如果需要打包为war文件并部署到服务器中运行，可以使用一行构建命令（mvn package）快速项目构建和打包，节省时间。</li></ol><h3 id="依赖管理"><a href="#依赖管理" class="headerlink" title="依赖管理"></a>依赖管理</h3><p>​Maven 可以管理项目的依赖，包括自动下载所需依赖库、自动下载依赖需要的依赖并且保证版本没有冲突、依赖版本管理等。</p><h3 id="构建管理"><a href="#构建管理" class="headerlink" title="构建管理"></a>构建管理</h3><p>​项目构建是指将源代码、配置文件、资源文件等转化为能够运行或部署的应用程序或库的过程！Maven可以管理项目的编译、测试、打包、部署等构建过程。通过实现标准的构建生命周期，Maven 可以确保每一个构建过程都遵循同样的规则和最佳实践。</p><p><img src="/assets/image-20230903235602934.png" alt="image-20230903235602934"></p>]]></content>
    
    
    <categories>
      
      <category>SSM</category>
      
      <category>Maven</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>3_基于idea的maven工程创建</title>
    <link href="/2023/09/03/%E5%B0%9A%E7%A1%85%E8%B0%B7-SSM/Maven/3_%E5%9F%BA%E4%BA%8Eidea%E7%9A%84maven%E5%B7%A5%E7%A8%8B%E5%88%9B%E5%BB%BA/"/>
    <url>/2023/09/03/%E5%B0%9A%E7%A1%85%E8%B0%B7-SSM/Maven/3_%E5%9F%BA%E4%BA%8Eidea%E7%9A%84maven%E5%B7%A5%E7%A8%8B%E5%88%9B%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="3-基于idea的maven工程创建"><a href="#3-基于idea的maven工程创建" class="headerlink" title="3_基于idea的maven工程创建"></a>3_基于idea的maven工程创建</h1><h2 id="GAVP属性"><a href="#GAVP属性" class="headerlink" title="GAVP属性"></a>GAVP属性</h2><p>GAVP 是指 GroupId、ArtifactId、Version、Packaging</p><p>前三个是必要的，而 Packaging 属性为可选项</p><ul><li><p>GroupId</p><p>GroupID 格式：com.{公司&#x2F;BU }.业务线.[子业务线]，最多 4 级。com.taobao.tddl</p></li><li><p>ArtifactID</p><p>产品线名-模块名。tc-client或者bookstore</p></li><li><p>Version版本号</p><p>主版本号.次版本号.修订号，通常</p><p>初始→1.0.0  修改bug → 1.0.1  功能调整 → 1.1.1</p><p><img src="/assets/image-20230904082705083.png" alt="image-20230904082705083"></p></li><li><p>Packaging定义规则</p><p>指示将项目打包为什么类型的文件，idea根据packaging值，识别maven项目类型</p><ul><li><p>packaging 属性为 jar（默认值），代表普通的Java工程，打包以后是.jar结尾的文件。</p></li><li><p>packaging 属性为 war，代表Java的web工程，打包以后.war结尾的文件。</p></li><li><p>packaging 属性为 pom，代表不会打包，用来做继承的父工程。</p></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>SSM</category>
      
      <category>Maven</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/09/03/%E6%95%B0%E6%8D%AE%E5%BA%93MYSQL/8_%E8%81%9A%E5%90%88%E5%87%BD%E6%95%B0/%E7%BB%83%E4%B9%A0/"/>
    <url>/2023/09/03/%E6%95%B0%E6%8D%AE%E5%BA%93MYSQL/8_%E8%81%9A%E5%90%88%E5%87%BD%E6%95%B0/%E7%BB%83%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<p><img src="/assets/image-20230824115837834.png" alt="image-20230824115837834"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs sql">#<span class="hljs-number">2</span> <br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">MAX</span>(salary),<span class="hljs-built_in">MIN</span>(salary),<span class="hljs-built_in">AVG</span>(salary),<span class="hljs-built_in">SUM</span>(salary)<br><span class="hljs-keyword">FROM</span> employees;<br>#<span class="hljs-number">3</span><br><span class="hljs-keyword">SELECT</span> job_id,<span class="hljs-built_in">MAX</span>(salary),<span class="hljs-built_in">MIN</span>(salary),<span class="hljs-built_in">AVG</span>(salary),<span class="hljs-built_in">SUM</span>(salary)<br><span class="hljs-keyword">FROM</span> employees<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> job_id;<br>#<span class="hljs-number">4</span><br><span class="hljs-keyword">SELECT</span> job_id,<span class="hljs-built_in">COUNT</span>(<span class="hljs-number">1</span>)<br><span class="hljs-keyword">FROM</span> employees<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> job_id;<br>#<span class="hljs-number">5</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">MAX</span>(salary) <span class="hljs-operator">-</span> <span class="hljs-built_in">MIN</span>(salary) <span class="hljs-string">&#x27;DIFFERENCE&#x27;</span><br><span class="hljs-keyword">FROM</span> employees;<br>#<span class="hljs-number">6</span><br><span class="hljs-keyword">SELECT</span> manager_id,<span class="hljs-built_in">MIN</span>(salary)<br><span class="hljs-keyword">FROM</span> employees<br><span class="hljs-keyword">WHERE</span> manager_id <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span><br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> manager_id<br><span class="hljs-keyword">HAVING</span> <span class="hljs-built_in">MIN</span>(salary) <span class="hljs-operator">&gt;</span> <span class="hljs-number">6000</span>;<br>#<span class="hljs-number">7</span><br><span class="hljs-keyword">SELECT</span> D.department_name,D.location_id,<span class="hljs-built_in">COUNT</span>(E.employee_id),<span class="hljs-built_in">AVG</span>(E.salary)<br><span class="hljs-keyword">FROM</span> employees E <span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span> departments D<br><span class="hljs-keyword">ON</span> E.department_id <span class="hljs-operator">=</span> D.department_id<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> D.department_name,D.location_id<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> <span class="hljs-built_in">AVG</span>(e.salary) <span class="hljs-keyword">DESC</span>;<br>#<span class="hljs-number">8</span><br><span class="hljs-keyword">SELECT</span> E.job_id,D.department_name,J.job_title,<span class="hljs-built_in">MIN</span>(E.salary)<br><span class="hljs-keyword">FROM</span> employees E <span class="hljs-keyword">JOIN</span> departments D<br><span class="hljs-keyword">ON</span> E.department_id <span class="hljs-operator">=</span> E.department_id<br><span class="hljs-keyword">JOIN</span> jobs J <span class="hljs-keyword">ON</span> E.job_id <span class="hljs-operator">=</span> J.job_id<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> E.job_id,D.department_name<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/09/03/%E6%95%B0%E6%8D%AE%E5%BA%93MYSQL/6_%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2/%E7%BB%83%E4%B9%A0/"/>
    <url>/2023/09/03/%E6%95%B0%E6%8D%AE%E5%BA%93MYSQL/6_%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2/%E7%BB%83%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="多表查询1"><a href="#多表查询1" class="headerlink" title="多表查询1"></a>多表查询1</h1><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs markdown">【题目】<br><span class="hljs-section"># 1.显示所有员工的姓名，部门号和部门名称。</span><br><span class="hljs-section"># 2.查询90号部门员工的job<span class="hljs-emphasis">_id和90号部门的location_</span>id</span><br><span class="hljs-section"># 3.选择所有有奖金的员工的 last<span class="hljs-emphasis">_name , department_</span>name , location<span class="hljs-emphasis">_id , city</span></span><br><span class="hljs-emphasis"><span class="hljs-section"># 4.选择city在Toronto工作的员工的 last_</span>name , job<span class="hljs-emphasis">_id , department_</span>id , department<span class="hljs-emphasis">_name</span></span><br><span class="hljs-emphasis"><span class="hljs-section"># 5.查询员工所在的部门名称、部门地址、姓名、工作、工资，其中员工所在部门的部门名称为’Executive’</span></span><br><span class="hljs-emphasis"><span class="hljs-section"># 6.选择指定员工的姓名，员工号，以及他的管理者的姓名和员工号，结果类似于下面的格式</span></span><br><span class="hljs-emphasis"><span class="hljs-section">employeesEmp#manager  Mgr#</span></span><br><span class="hljs-emphasis"><span class="hljs-section">kochhar 101king     100</span></span><br><span class="hljs-emphasis"><span class="hljs-section"># 7.查询哪些部门没有员工</span></span><br><span class="hljs-emphasis"><span class="hljs-section"># 8. 查询哪个城市没有部门</span></span><br><span class="hljs-emphasis"><span class="hljs-section"># 9. 查询部门名为 Sales 或 IT 的员工信息</span></span><br></code></pre></td></tr></table></figure><h1 id="多表查询2"><a href="#多表查询2" class="headerlink" title="多表查询2"></a>多表查询2</h1><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs markdown">储备：建表操作：<br>CREATE TABLE <span class="hljs-code">`t_dept`</span> (<br><span class="hljs-code">`id`</span> INT(11) NOT NULL AUTO<span class="hljs-emphasis">_INCREMENT,</span><br><span class="hljs-emphasis">`deptName` VARCHAR(30) DEFAULT NULL,</span><br><span class="hljs-emphasis">`address` VARCHAR(40) DEFAULT NULL,</span><br><span class="hljs-emphasis">PRIMARY KEY (`id`)</span><br><span class="hljs-emphasis">) ENGINE=INNODB AUTO_</span>INCREMENT=1 DEFAULT CHARSET=utf8;<br>CREATE TABLE <span class="hljs-code">`t_emp`</span> (<br><span class="hljs-code">`id`</span> INT(11) NOT NULL AUTO<span class="hljs-emphasis">_INCREMENT,</span><br><span class="hljs-emphasis">`name` VARCHAR(20) DEFAULT NULL,</span><br><span class="hljs-emphasis">`age` INT(3) DEFAULT NULL,</span><br><span class="hljs-emphasis">`deptId` INT(11) DEFAULT NULL,</span><br><span class="hljs-emphasis">empno int not null,</span><br><span class="hljs-emphasis">PRIMARY KEY (`id`),</span><br><span class="hljs-emphasis">KEY `idx_</span>dept<span class="hljs-emphasis">_id` (`deptId`)</span><br><span class="hljs-emphasis">#CONSTRAINT `fk_</span>dept<span class="hljs-emphasis">_id` FOREIGN KEY (`deptId`) REFERENCES `t_</span>dept<span class="hljs-code">` (`</span>id`)<br>) ENGINE=INNODB AUTO<span class="hljs-emphasis">_INCREMENT=1 DEFAULT CHARSET=utf8;</span><br><span class="hljs-emphasis">1. 所有有门派的人员信息</span><br><span class="hljs-emphasis">（ A、B两表共有）</span><br><span class="hljs-emphasis">INSERT INTO t_</span>dept(deptName,address) VALUES(&#x27;华山&#x27;,&#x27;华山&#x27;);<br>INSERT INTO t<span class="hljs-emphasis">_dept(deptName,address) VALUES(&#x27;丐帮&#x27;,&#x27;洛阳&#x27;);</span><br><span class="hljs-emphasis">INSERT INTO t_</span>dept(deptName,address) VALUES(&#x27;峨眉&#x27;,&#x27;峨眉山&#x27;);<br>INSERT INTO t<span class="hljs-emphasis">_dept(deptName,address) VALUES(&#x27;武当&#x27;,&#x27;武当山&#x27;);</span><br><span class="hljs-emphasis">INSERT INTO t_</span>dept(deptName,address) VALUES(&#x27;明教&#x27;,&#x27;光明顶&#x27;);<br>INSERT INTO t<span class="hljs-emphasis">_dept(deptName,address) VALUES(&#x27;少林&#x27;,&#x27;少林寺&#x27;);</span><br><span class="hljs-emphasis">INSERT INTO t_</span>emp(NAME,age,deptId,empno) VALUES(&#x27;风清扬&#x27;,90,1,100001);<br>INSERT INTO t<span class="hljs-emphasis">_emp(NAME,age,deptId,empno) VALUES(&#x27;岳不群&#x27;,50,1,100002);</span><br><span class="hljs-emphasis">INSERT INTO t_</span>emp(NAME,age,deptId,empno) VALUES(&#x27;令狐冲&#x27;,24,1,100003);<br>INSERT INTO t<span class="hljs-emphasis">_emp(NAME,age,deptId,empno) VALUES(&#x27;洪七公&#x27;,70,2,100004);</span><br><span class="hljs-emphasis">INSERT INTO t_</span>emp(NAME,age,deptId,empno) VALUES(&#x27;乔峰&#x27;,35,2,100005);<br>INSERT INTO t<span class="hljs-emphasis">_emp(NAME,age,deptId,empno) VALUES(&#x27;灭绝师太&#x27;,70,3,100006);</span><br><span class="hljs-emphasis">INSERT INTO t_</span>emp(NAME,age,deptId,empno) VALUES(&#x27;周芷若&#x27;,20,3,100007);<br>INSERT INTO t<span class="hljs-emphasis">_emp(NAME,age,deptId,empno) VALUES(&#x27;张三丰&#x27;,100,4,100008);</span><br><span class="hljs-emphasis">INSERT INTO t_</span>emp(NAME,age,deptId,empno) VALUES(&#x27;张无忌&#x27;,25,5,100009);<br>INSERT INTO t<span class="hljs-emphasis">_emp(NAME,age,deptId,empno) VALUES(&#x27;韦小宝&#x27;,18,null,100010);</span><br><span class="hljs-emphasis">【题目】</span><br><span class="hljs-emphasis">#1.所有有门派的人员信息</span><br><span class="hljs-emphasis">（ A、B两表共有）</span><br><span class="hljs-emphasis">#2.列出所有用户，并显示其机构信息</span><br><span class="hljs-emphasis">（A的全集）</span><br><span class="hljs-emphasis">#3.列出所有门派</span><br><span class="hljs-emphasis">（B的全集）</span><br><span class="hljs-emphasis">#4.所有不入门派的人员</span><br><span class="hljs-emphasis">（A的独有）</span><br><span class="hljs-emphasis">#5.所有没人入的门派</span><br><span class="hljs-emphasis">（B的独有）</span><br><span class="hljs-emphasis">#6.列出所有人员和机构的对照关系</span><br><span class="hljs-emphasis">(AB全有)</span><br><span class="hljs-emphasis">#MySQL Full Join的实现 因为MySQL不支持FULL JOIN,下面是替代方法</span><br><span class="hljs-emphasis">#left join + union(可去除重复数据)+ right join</span><br><span class="hljs-emphasis">#7.列出所有没入派的人员和没人入的门派</span><br><span class="hljs-emphasis">（A的独有+B的独有）</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/09/03/%E6%95%B0%E6%8D%AE%E5%BA%93MYSQL/5_%E6%8E%92%E5%BA%8F%E4%B8%8E%E5%88%86%E9%A1%B5/%E7%BB%83%E4%B9%A0/"/>
    <url>/2023/09/03/%E6%95%B0%E6%8D%AE%E5%BA%93MYSQL/5_%E6%8E%92%E5%BA%8F%E4%B8%8E%E5%88%86%E9%A1%B5/%E7%BB%83%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<p><img src="/assets/image-20230821185819433.png" alt="image-20230821185819433"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> last_name,first_name,department_id,<span class="hljs-number">12</span> <span class="hljs-operator">*</span> salary <span class="hljs-operator">*</span> (<span class="hljs-number">1</span> <span class="hljs-operator">+</span> IFNULL(commission_pct,<span class="hljs-number">0</span>)) <span class="hljs-string">&#x27;annual_salary&#x27;</span> <span class="hljs-keyword">FROM</span> employees<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> first_name <span class="hljs-keyword">ASC</span>;<br><br><span class="hljs-keyword">SELECT</span> last_name,first_name,salary <span class="hljs-keyword">FROM</span> employees<br><span class="hljs-keyword">WHERE</span> salary <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">BETWEEN</span> <span class="hljs-number">8000</span> <span class="hljs-keyword">AND</span> <span class="hljs-number">17000</span><br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> salary <span class="hljs-keyword">DESC</span><br>LIMIT <span class="hljs-number">21</span>,<span class="hljs-number">20</span>;<br><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> employees<br><span class="hljs-keyword">WHERE</span> email <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;%e%&#x27;</span><br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> LENGTH(email) <span class="hljs-keyword">DESC</span>,department_id <span class="hljs-keyword">ASC</span>;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/09/03/%E6%95%B0%E6%8D%AE%E5%BA%93MYSQL/4_%E8%BF%90%E7%AE%97%E7%AC%A6/%E7%BB%83%E4%B9%A0/"/>
    <url>/2023/09/03/%E6%95%B0%E6%8D%AE%E5%BA%93MYSQL/4_%E8%BF%90%E7%AE%97%E7%AC%A6/%E7%BB%83%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<p><img src="/assets/image-20230821165556805.png" alt="image-20230821165556805"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> last_name,first_name,salary <span class="hljs-keyword">FROM</span> employees<br><span class="hljs-keyword">WHERE</span> salary <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">BETWEEN</span> <span class="hljs-number">5000</span> <span class="hljs-keyword">AND</span> <span class="hljs-number">12000</span>; <br><br><span class="hljs-keyword">SELECT</span> last_name,first_name,department_id <span class="hljs-keyword">FROM</span> employees<br><span class="hljs-keyword">WHERE</span> department_id <span class="hljs-operator">=</span> <span class="hljs-number">20</span> <span class="hljs-keyword">OR</span> department_id <span class="hljs-operator">=</span> <span class="hljs-number">50</span>;<br><br><span class="hljs-keyword">SELECT</span> last_name,first_name,job_id <span class="hljs-keyword">FROM</span> employees<br><span class="hljs-keyword">WHERE</span> manager_id <span class="hljs-operator">&lt;=&gt;</span> <span class="hljs-keyword">NULL</span>;<br><br><span class="hljs-keyword">SELECT</span> last_name,first_name,commission_pct <span class="hljs-keyword">FROM</span> employees<br><span class="hljs-keyword">WHERE</span> commission_pct <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>;<br><br><span class="hljs-keyword">SELECT</span> last_name,first_name <span class="hljs-keyword">FROM</span> employees<br><span class="hljs-keyword">WHERE</span> first_name <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;__a%&#x27;</span>;<br><br><span class="hljs-keyword">SELECT</span> last_name,first_name <span class="hljs-keyword">FROM</span> employees<br><span class="hljs-keyword">WHERE</span> first_name <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;%a%k%&#x27;</span> <span class="hljs-keyword">or</span> first_name <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;%k%a%&#x27;</span>;<br><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> employees<br><span class="hljs-keyword">WHERE</span> first_name <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;%e&#x27;</span>;<br><br><span class="hljs-keyword">SELECT</span> first_name,last_name,job_id <span class="hljs-keyword">FROM</span> employees<br><span class="hljs-keyword">WHERE</span> department_id <span class="hljs-keyword">BETWEEN</span> <span class="hljs-number">80</span> <span class="hljs-keyword">AND</span> <span class="hljs-number">100</span>;<br><br><span class="hljs-keyword">SELECT</span> first_name,last_name,department_id <span class="hljs-keyword">FROM</span> employees<br><span class="hljs-keyword">WHERE</span> manager_id <span class="hljs-keyword">IN</span>(<span class="hljs-number">100</span>,<span class="hljs-number">101</span>,<span class="hljs-number">110</span>);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/09/03/%E6%95%B0%E6%8D%AE%E5%BA%93MYSQL/3_%E5%9F%BA%E6%9C%AC%E7%9A%84select%E8%AF%AD%E5%8F%A5/%E7%BB%83%E4%B9%A0/"/>
    <url>/2023/09/03/%E6%95%B0%E6%8D%AE%E5%BA%93MYSQL/3_%E5%9F%BA%E6%9C%AC%E7%9A%84select%E8%AF%AD%E5%8F%A5/%E7%BB%83%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<p><img src="/2023/09/03/%E6%95%B0%E6%8D%AE%E5%BA%93MYSQL/3_%E5%9F%BA%E6%9C%AC%E7%9A%84select%E8%AF%AD%E5%8F%A5/%E7%BB%83%E4%B9%A0/Users\29522\AppData\Roaming\Typora\typora-user-images\image-20230821143523375.png" alt="image-20230821143523375"></p><ol><li><p><img src="/assets/image-20230821143942656.png" alt="image-20230821143942656"></p></li><li><p><img src="/assets/image-20230821144031691.png" alt="image-20230821144031691"></p></li><li><p><img src="/assets/image-20230821144211358.png" alt="image-20230821144211358"></p></li><li><p><img src="/assets/image-20230821144655506.png" alt="image-20230821144655506"></p></li><li><p><img src="/assets/image-20230821144721489.png" alt="image-20230821144721489"></p></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>HTTP</title>
    <link href="/2023/09/01/%E9%BB%91%E9%A9%AC-Web%E6%A0%B8%E5%BF%83/1_HTTP/"/>
    <url>/2023/09/01/%E9%BB%91%E9%A9%AC-Web%E6%A0%B8%E5%BF%83/1_HTTP/</url>
    
    <content type="html"><![CDATA[<h1 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>HyperText Transfer Protocol，超文本传输协议，规定了浏览器和服务器之间数据传输的规则</p><ol><li>基于TCP协议：面向连接，安全</li><li>基于请求-响应模型的：一次请求对应一次响应</li><li>HTTP协议是无状态的协议：对于事务处理没有记忆能力。每次请求-响应都是独立的。<ul><li>缺点：多次请求间不能共享数据。JAVA中使用会话技术（Cookie，Session）来解决此问题。</li><li>优点：速度快</li></ul></li></ol><h2 id="HTTP-请求数据格式"><a href="#HTTP-请求数据格式" class="headerlink" title="HTTP-请求数据格式"></a>HTTP-请求数据格式</h2><p><img src="/assets/image-20230831230845473.png" alt="image-20230831230845473"><img src="/assets/image-20230831231959008.png" alt="image-20230831231959008"></p><p>请求数据分为3部分：</p><ol><li>请求行：请求数据的第一行，其中GET表示请求方式，表示请求资源路径，HTTP&#x2F;1.1表示协议版本</li><li>请求头：第二行开始，格式为key:value形式。</li><li>请求体：POST请求的最后一部分，存放请求参数</li></ol><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">Host：表示请求的主机名<br><span class="hljs-keyword">User</span>-Agent：浏览器版本，例如Chrome浏览器的标识类似Mozilla/<span class="hljs-number">5.0</span>.<br>Chrome/<span class="hljs-number">79</span>：IE浏览器的标识类似Mozilla/<span class="hljs-number">5.0</span>(Windows NT.)<span class="hljs-keyword">like</span> Gecko;<br>Accept：表示浏览器能接收的资源类型，如<span class="hljs-type">text</span><span class="hljs-comment">/*,image,/*或者*/</span>*表示所有；<br>Accept-<span class="hljs-keyword">Language</span>：表示浏览器偏好的语言，服务器可以据此返回不同语言的网页；<br>Accept-<span class="hljs-keyword">Encoding</span>：表示浏览器可以支持的压缩类型，例如gzip,deflate等。<br></code></pre></td></tr></table></figure><h3 id="GET请求和POST请求区别："><a href="#GET请求和POST请求区别：" class="headerlink" title="GET请求和POST请求区别："></a>GET请求和POST请求区别：</h3><ol><li>GET请求请求参数在请求行中，没有请求体。<br>POST请求请求参数在请求体中</li><li>GET请求请求参数大小有限制，POST没有</li></ol><p><img src="/assets/image-20230901072215650.png" alt="image-20230901072215650"></p><p><img src="/assets/image-20230901072253569.png" alt="image-20230901072253569"></p><p><img src="/assets/image-20230901072312125.png" alt="image-20230901072312125"></p><h2 id="HTTP-响应数据格式"><a href="#HTTP-响应数据格式" class="headerlink" title="HTTP-响应数据格式"></a>HTTP-响应数据格式</h2><p><img src="/assets/image-20230901072548757.png" alt="image-20230901072548757"></p><ol><li>响应行：响应数据的第一行。其中HTTP&#x2F;1.1表示协议版本，200表示响应状态码，OK表示状态码描述</li><li>响应头：第二行开始，格式为key:value形式</li><li>响应体：最后一部分。存放响应数据</li></ol><blockquote><p>响应行的状态码说明：</p></blockquote><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-number">1</span>xx 响应中<span class="hljs-comment">----临时状态码，表示请求已经接受，告诉客户端应该继续请求或者如果它已经完成则忽略它</span><br><span class="hljs-number">2</span>xx 成功<span class="hljs-comment">----表示请求已经被成功接收，处理已完成</span><br><span class="hljs-number">3</span>xx 重定向<span class="hljs-comment">----重定向到其它地方：它让客户端再发起一个请求以完成整个处理。</span><br><span class="hljs-number">4</span>xx 客户端错误<span class="hljs-comment">----处理发生错误，责任在客户端，如：客户端的请求一个不存在的资源，客户端未被授权，禁止访问等。</span><br><span class="hljs-number">5</span>xx 服务器端错误<span class="hljs-comment">----处理发生错误，责任在服务端，如：服务端抛出异常，路由出错，HTTP版本不支持等</span><br></code></pre></td></tr></table></figure><blockquote><p>常见的响应状态码</p></blockquote><p><img src="/assets/image-20230901074144579.png" alt="image-20230901074144579"></p><p>状态码大全：<a href="https://cloud.tencent.com/developer/chapter/13553">https://cloud.tencent.com/developer/chapter/13553</a></p><blockquote><p>常见的HTTP响应头</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">Content</span>-Type:表示该响应内容的类型，例如text/html,image/jpeg;<br><span class="hljs-attribute">Content</span>-Length:表示该响应内容的长度（字节数）<br>Content-Encoding:表示该响应压缩算法，例如gzip;<br>Cache-Control:指示客户端应如何缓存，例如max-age=<span class="hljs-number">300</span> 表示可以最多缓存<span class="hljs-number">300</span>秒<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaWeb核心技术</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Listener监听器</title>
    <link href="/2023/09/01/%E9%BB%91%E9%A9%AC-Web%E6%A0%B8%E5%BF%83/10_Listener%E7%9B%91%E5%90%AC%E5%99%A8/"/>
    <url>/2023/09/01/%E9%BB%91%E9%A9%AC-Web%E6%A0%B8%E5%BF%83/10_Listener%E7%9B%91%E5%90%AC%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="Listener监听器"><a href="#Listener监听器" class="headerlink" title="Listener监听器"></a>Listener监听器</h1><ul><li><p>监听器可以监听就是在application,session,request三个对象创建、销毁或者往其中添加修改删除属性时自动执行代码的功能组件。</p></li><li><p>Listener分类：JavaWeb中提供了8个监听器。</p><p><img src="/assets/image-20230903201633021.png" alt="image-20230903201633021"></p></li></ul><p><img src="/assets/image-20230903202100304.png" alt="image-20230903202100304"></p>]]></content>
    
    
    <categories>
      
      <category>JavaWeb核心技术</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Servlet</title>
    <link href="/2023/09/01/%E9%BB%91%E9%A9%AC-Web%E6%A0%B8%E5%BF%83/3_Servlet/"/>
    <url>/2023/09/01/%E9%BB%91%E9%A9%AC-Web%E6%A0%B8%E5%BF%83/3_Servlet/</url>
    
    <content type="html"><![CDATA[<h1 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Servlet是Java提供的一门动态web资源开发技术</p><p><img src="/assets/image-20230901085623970.png" alt="image-20230901085623970"></p><p>Servlet是javaee规范之一，其实就一个<strong>接口</strong>，需要我们定义Servlet类的实现类，并由web服务器运行Servlet</p><h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><p><img src="/assets/image-20230901090339326.png" alt="image-20230901090339326"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;build&gt;<br>        &lt;plugins&gt;<br>            &lt;plugin&gt;<br>                &lt;groupId&gt;org.apache.tomcat.maven&lt;/groupId&gt;<br>                &lt;artifactId&gt;tomcat7-maven-plugin&lt;/artifactId&gt;<br>                &lt;version&gt;<span class="hljs-number">2.2</span>&lt;/version&gt;<br>            &lt;/plugin&gt;<br>        &lt;/plugins&gt;<br>&lt;/build&gt;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(&quot;/demo1&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServletTest</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Servlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(ServletConfig servletConfig)</span> <span class="hljs-keyword">throws</span> ServletException &#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> ServletConfig <span class="hljs-title function_">getServletConfig</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">service</span><span class="hljs-params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        System.out.println(<span class="hljs-string">&quot;hello serlvet&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getServletInfo</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span> &#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Servlet执行流程"><a href="#Servlet执行流程" class="headerlink" title="Servlet执行流程"></a>Servlet执行流程</h2><p><img src="/assets/image-20230901190907824.png" alt="image-20230901190907824"></p><ol><li>Servlet由谁创建？Servlet方法由谁调用？</li></ol><blockquote><p>答：Tomcat服务器创建和调用。</p></blockquote><ol start="2"><li>服务器如何知道Servlet中一定存在servlet方法？</li></ol><blockquote><p>答：因为我们自定义的Servlet，必须实现Servlet接口并复写其方法，而Servlet接口中有service方法。</p></blockquote><h2 id="Servlet生命周期"><a href="#Servlet生命周期" class="headerlink" title="Servlet生命周期"></a>Servlet生命周期</h2><p>对象的生命周期指的是一个对象从被创建到被销毁的整个过程。</p><p><img src="/assets/image-20230901192144902.png" alt="image-20230901192144902"></p><p><img src="/assets/image-20230901192221520.png" alt="image-20230901192221520"></p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(urlPatterns = &quot;/demo2&quot;,loadOnStartup = 1)</span><span class="hljs-comment">//loadOnStartup为负整数为默认第一次被访问时创建servlet对象。否则为服务器启动时创建Servlet对象</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServletDemo1</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Servlet</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * init()初始化方法</span><br><span class="hljs-comment">     * 1.调用时机：默认情况servlet被第一次访问</span><br><span class="hljs-comment">     * 2.调用次数：只调用一次</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> servletConfig</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> ServletException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(ServletConfig servletConfig)</span> <span class="hljs-keyword">throws</span> ServletException &#123;<br>        System.out.println(<span class="hljs-string">&quot;init...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 提供服务</span><br><span class="hljs-comment">     * 1.调用时机：每次servlet被访问时就会被调用</span><br><span class="hljs-comment">     * 2.调用次数：调用n次</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> servletRequest</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> servletResponse</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> ServletException</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> IOException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">service</span><span class="hljs-params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        System.out.println(<span class="hljs-string">&quot;service...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 销毁方法</span><br><span class="hljs-comment">     * 1.调用时机：内存释放的时候或者服务器关闭的时候</span><br><span class="hljs-comment">     * 2.调用次数：1次</span><br><span class="hljs-comment">     * 3.需要通过命令行正常关闭才会调用</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;destroy()&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getServletInfo</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> ServletConfig <span class="hljs-title function_">getServletConfig</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="Servlet方法介绍"><a href="#Servlet方法介绍" class="headerlink" title="Servlet方法介绍"></a>Servlet方法介绍</h2><p><img src="/assets/image-20230901213656178.png" alt="image-20230901213656178"></p><h2 id="Servlet体系结构"><a href="#Servlet体系结构" class="headerlink" title="Servlet体系结构"></a>Servlet体系结构</h2><p><img src="/assets/image-20230901215512726.png" alt="image-20230901215512726"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServletDemo4</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-built_in">super</span>.doGet(req, resp);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-built_in">super</span>.doPost(req, resp);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20230901224351165.png" alt="image-20230901224351165"><img src="/assets/image-20230901224402545.png" alt="image-20230901224402545"></p><ol><li><p>HttpServlet中为什么要根据请求方式的不同，调用不同方法？</p><blockquote><ol><li>继承HttpServlet</li><li>重写doGet()和doPost()</li></ol></blockquote></li><li><p>如何调用？</p><blockquote><p>获取请求方式，并根据不同的请求方式，调用不同的doXxx方法</p></blockquote></li></ol><h2 id="Servlet-urlPattern配置"><a href="#Servlet-urlPattern配置" class="headerlink" title="Servlet urlPattern配置"></a>Servlet urlPattern配置</h2><p>Servlet要被访问，就必须配置访问路径</p><ol><li><p>一个Servlet，可以配置多个urlPattern</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(urlPatterns = &#123;&quot;/demo1&quot;,&quot;/demo2&quot;,&quot;/demo3&quot;&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServletDemo2</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Servlet</span> &#123;&#125;<br></code></pre></td></tr></table></figure></li><li><p>urlServlet配置规则</p><ol><li><p>精确匹配</p><p><img src="/assets/image-20230902001851846.png" alt="image-20230902001851846"></p></li><li><p>目录匹配</p><p><img src="/assets/image-20230902001934015.png" alt="image-20230902001934015"></p></li><li><p>扩展名匹配</p><p><img src="/assets/image-20230902002039156.png" alt="image-20230902002039156"></p></li><li><p>任意匹配</p><p><img src="/assets/image-20230902002050729.png" alt="image-20230902002050729"></p></li></ol></li></ol><p>&#x2F;和&#x2F;*的区别</p><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs qml">项目中Servlet配置了<span class="hljs-string">&#x27;/&#x27;</span>，会覆盖掉tomcat中的DefaultServlet，当其他的<span class="hljs-built_in">url</span>-pattern都匹配不上时都会走这个Servlet。<br>当我们的项目中配置了<span class="hljs-string">&#x27;/*&#x27;</span>，意味着匹配任意访问路径。<br>DefaultServlet会覆盖项目中的所有静态资源，如果被覆盖，则无法访问静态资源。<br></code></pre></td></tr></table></figure><blockquote><p>优先级：精确路径 &gt; 目录路径 &gt; 扩展名路径 &gt; &#x2F;* &gt; &#x2F; </p></blockquote><h2 id="XML配置方式编写Servlet"><a href="#XML配置方式编写Servlet" class="headerlink" title="XML配置方式编写Servlet"></a>XML配置方式编写Servlet</h2><p><img src="/assets/image-20230902094004848.png" alt="image-20230902094004848"></p>]]></content>
    
    
    <categories>
      
      <category>JavaWeb核心技术</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Tomcat</title>
    <link href="/2023/09/01/%E9%BB%91%E9%A9%AC-Web%E6%A0%B8%E5%BF%83/2_Apache_Tomcat/"/>
    <url>/2023/09/01/%E9%BB%91%E9%A9%AC-Web%E6%A0%B8%E5%BF%83/2_Apache_Tomcat/</url>
    
    <content type="html"><![CDATA[<h1 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li><p>概念：Tomcat是Apache软件基金会一个核心项目，是一个开源免费的<strong>轻量级Web服务器</strong>，支持Servlet&#x2F;JSP少量JavaEE规范。</p></li><li><p>JavaEE：Java Enterprise Edition Java企业版。包含13项技术规范：</p><p>JDBC,JNDI,EJB,JSP,Servlet,XML,JMS,JAVA IDL,JTS,JTA,JavaMail,JAF</p></li></ul><h2 id="问答"><a href="#问答" class="headerlink" title="问答"></a>问答</h2><ol><li>Web服务器的作用？封装HTTP协议操作，简化开发。可将web项目部署到服务器，对外提供网上浏览服务。</li><li>Tomcat是一个轻量级的web服务器，支持Servlet&#x2F;JSP少量JavaEE规范，也称Web容器，Servlet容器。</li></ol><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>官网</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p><img src="/assets/image-20230901080720741.png" alt="image-20230901080720741"><img src="/assets/image-20230901080943294.png" alt="image-20230901080943294"></p><h3 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h3><p>直接删除目录即可</p><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p>双击bin\startup.bat</p><p><img src="/assets/image-20230901081342172.png" alt="image-20230901081342172"></p><p><img src="/assets/image-20230901081241009.png" alt="image-20230901081241009"></p><p>解决乱码问题:在conf&#x2F;logging.properties</p><p><img src="/assets/image-20230901081725216.png" alt="image-20230901081725216"><img src="/assets/image-20230901081833397.png" alt="image-20230901081833397"></p><h3 id="关闭"><a href="#关闭" class="headerlink" title="关闭"></a>关闭</h3><ol><li>直接×掉运行窗口：强制关闭</li><li>bin\shutdown.bat:正常关闭</li><li>Ctrl+C:正常关闭</li></ol><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>修改端口号：conf&#x2F;server.xml</p><p><img src="/assets/image-20230901082046824.png" alt="image-20230901082046824"></p><p><img src="/assets/image-20230901082210477.png" alt="image-20230901082210477"></p><p>HTTP默认端口号为80</p><h3 id="部署项目"><a href="#部署项目" class="headerlink" title="部署项目"></a>部署项目</h3><p><img src="/assets/image-20230901082426150.png" alt="image-20230901082426150"></p><p><img src="/assets/image-20230901082532643.png" alt="image-20230901082532643"></p><h2 id="IDEA创建Maven-web项目"><a href="#IDEA创建Maven-web项目" class="headerlink" title="IDEA创建Maven web项目"></a>IDEA创建Maven web项目</h2><p><img src="/assets/image-20230901082834307.png" alt="image-20230901082834307"></p><p>war打包之后就会在target目录中生成，如下</p><p><img src="/assets/image-20230901082934444.png" alt="image-20230901082934444"></p><p><img src="/assets/image-20230901083425622.png" alt="image-20230901083425622"></p><p>编译后的java字节码文件和resource的资源文件放到WEB-INF的classes目录中，pom.xml依赖坐标对应的jar包会放入WEB-INF的lib目录中</p><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><p><img src="/assets/image-20230901083706828.png" alt="image-20230901083706828"></p><p><img src="/assets/image-20230901083746740.png" alt="image-20230901083746740"></p><p><img src="/assets/image-20230901084500747.png" alt="image-20230901084500747"></p><p><img src="/assets/image-20230901084614107.png" alt="image-20230901084614107"></p><p><img src="/assets/image-20230901084633362.png" alt="image-20230901084633362"></p><p><img src="/assets/image-20230901084652060.png" alt="image-20230901084652060"></p><h2 id="IDEA集成本地Tomcat"><a href="#IDEA集成本地Tomcat" class="headerlink" title="IDEA集成本地Tomcat"></a>IDEA集成本地Tomcat</h2><p><img src="/assets/image-20230901084959883.png" alt="image-20230901084959883"></p><p><img src="/assets/image-20230901085453488.png" alt="image-20230901085453488"></p><p><img src="/assets/image-20230901085429942.png" alt="image-20230901085429942"></p>]]></content>
    
    
    <categories>
      
      <category>JavaWeb核心技术</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Request&amp;&amp;Response</title>
    <link href="/2023/09/01/%E9%BB%91%E9%A9%AC-Web%E6%A0%B8%E5%BF%83/4_Request&amp;Response/"/>
    <url>/2023/09/01/%E9%BB%91%E9%A9%AC-Web%E6%A0%B8%E5%BF%83/4_Request&amp;Response/</url>
    
    <content type="html"><![CDATA[<h1 id="Request-Response"><a href="#Request-Response" class="headerlink" title="Request&amp;&amp;Response"></a>Request&amp;&amp;Response</h1><p><img src="/assets/image-20230902100816161.png" alt="image-20230902100816161"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(&quot;/demo1&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">demo1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> req.getParameter(<span class="hljs-string">&quot;name&quot;</span>);<br>        resp.setHeader(<span class="hljs-string">&quot;content-type&quot;</span>,<span class="hljs-string">&quot;text/html;charset=utf-8&quot;</span>);<br>        resp.getWriter().write(<span class="hljs-string">&quot;&lt;h1&gt;你好,&quot;</span>+ name + <span class="hljs-string">&quot;&lt;/h1&gt;&quot;</span>);<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="Request"><a href="#Request" class="headerlink" title="Request"></a>Request</h2><h3 id="Request继承体系"><a href="#Request继承体系" class="headerlink" title="Request继承体系"></a>Request继承体系</h3><p><img src="/assets/image-20230902103359677.png" alt="image-20230902103359677"><img src="/assets/image-20230902105751368.png" alt="image-20230902105751368"></p><p>Tomcat解析请求数据，封装为request对象，并且创建request对象传递到service方法中</p><h3 id="Request获取请求数据"><a href="#Request获取请求数据" class="headerlink" title="Request获取请求数据"></a>Request获取请求数据</h3><p>请求数据分为三部分：</p><ol><li><p>请求行：GET&#x2F;requestDemo&#x2F;req?username&#x3D;zhangsan HTTP&#x2F;1.1</p><blockquote><p>String getMethod():获取请求方式：GET<br>String getContextPath():获取虚拟目录（项目访问路径）：&#x2F;requestDemo<br>StringBuffer getRequestURL():获取URL(统一资源定位符)：http:&#x2F;localhost::8080&#x2F;requestDemo&#x2F;req<br>String getRequestURI():(获取URI(统一资源标识符)：&#x2F;requestDemo&#x2F;req<br>String getQueryString():获取请求参数(GET方式)：username&#x3D;zhangsan</p></blockquote></li><li><p>请求头：User-Agent:Mozilla&#x2F;5.0 Chrome&#x2F;91.0.4472.106</p><blockquote><p>String getHeader(String name):根据请求头名称，获取值</p></blockquote></li><li><p>请求体：username&#x3D;zhangsan</p><blockquote><p>ServletInputStream getInputStream()：获取字节输入流</p><p>BufferedReader getReader()：获取字符输入流</p></blockquote></li></ol><h3 id="Request通用方式获取请求参数"><a href="#Request通用方式获取请求参数" class="headerlink" title="Request通用方式获取请求参数"></a>Request通用方式获取请求参数</h3><p><img src="/assets/image-20230902113609955.png" alt="image-20230902113609955"></p><blockquote><p>GET请求方式和POST请求方式区别主要在于获取请求参数的方式不一样，是否可以提供一种统一获取请求参数的方式，从而统一doGet和doPost方法内的代码？</p></blockquote><p><img src="/assets/image-20230902113849619.png" alt="image-20230902113849619"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(&quot;/demo1&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">demo1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        req.setCharacterEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br>        resp.setCharacterEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br><span class="hljs-comment">//        Map&lt;String, String[]&gt; parameterMap = req.getParameterMap();</span><br><span class="hljs-comment">//        for (String key : parameterMap.keySet()) &#123;</span><br><span class="hljs-comment">//            System.out.print(key + &quot;:&quot;);</span><br><span class="hljs-comment">//            String[] strings = parameterMap.get(key);</span><br><span class="hljs-comment">//            Arrays.stream(strings).forEach(System.out::print);</span><br><span class="hljs-comment">//            System.out.println();</span><br><span class="hljs-comment">//        &#125;</span><br>        System.out.println(req.getParameter(<span class="hljs-string">&quot;username&quot;</span>));<br>        System.out.println(req.getParameter(<span class="hljs-string">&quot;password&quot;</span>));<br>        Arrays.stream(req.getParameterValues(<span class="hljs-string">&quot;cb&quot;</span>)).forEach(System.out::print);<br><span class="hljs-comment">//        resp.sendRedirect(&quot;http://www.baidu.com&quot;);</span><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-built_in">this</span>.doGet(req,resp);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Request请求参数中文乱码处理"><a href="#Request请求参数中文乱码处理" class="headerlink" title="Request请求参数中文乱码处理"></a>Request请求参数中文乱码处理</h3><p>第一种</p><ol><li>表单方法设置为POST</li><li>在post方法中调用get方法，在get方法中调用<code>req.setCharacterEncoding(&quot;UTF-8&quot;);</code></li></ol><p>第二种</p><p><img src="/assets/image-20230902121809378.png" alt="image-20230902121809378"></p><p>URL编码是将字符串按照编码方式转化为二进制，每个字节转为2个16进制并在前面加上%</p><p><img src="/assets/image-20230902122730170.png" alt="image-20230902122730170"></p><p>浏览器将字符转化为二进制码，（每个字节占8个二进制位）将每个字节转为2个16进制并在前面加上%，即为URL编码，URL编码由浏览器传递到web服务器后，web服务器（Tomcat）将URL以ISO-8859-1进行URL解码，而不是UTF-8，此解码方式无法配置。</p><p>因此解决方案是将web服务器的解码再一次转为二进制数据，再以UTF-8进行URL解码出所需的字符串。</p><h3 id="Request请求转发"><a href="#Request请求转发" class="headerlink" title="Request请求转发"></a>Request请求转发</h3><p><img src="/assets/image-20230902141635604.png" alt="image-20230902141635604"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">req.getRequestDispatcher(<span class="hljs-string">&quot;转发路径&quot;</span>).forward(req,resp);<br></code></pre></td></tr></table></figure><p>请求转发资源间共享数据，使用Request对象</p><p><img src="/assets/image-20230902142727072.png" alt="image-20230902142727072"></p><p><img src="/assets/image-20230902143700297.png" alt="image-20230902143700297"></p><h2 id="Response"><a href="#Response" class="headerlink" title="Response"></a>Response</h2><p><img src="/assets/image-20230902143833545.png" alt="image-20230902143833545"></p><h3 id="Response设置响应数据功能介绍"><a href="#Response设置响应数据功能介绍" class="headerlink" title="Response设置响应数据功能介绍"></a>Response设置响应数据功能介绍</h3><p><img src="/assets/image-20230902144028924.png" alt="image-20230902144028924"></p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arduino">设置响应状态码：<span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setStatus</span><span class="hljs-params">(<span class="hljs-type">int</span> sc)</span></span>;<br>设置响应头键值对: <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setHeader</span><span class="hljs-params">(<span class="hljs-type">String</span> key,<span class="hljs-type">String</span> value)</span></span>;<br>对响应体：获取字符输出流：<span class="hljs-function">PrintWriter <span class="hljs-title">getWriter</span><span class="hljs-params">()</span></span>;<br>获取字节输出流：<span class="hljs-function">ServletOutputStream <span class="hljs-title">getOutputStream</span><span class="hljs-params">()</span></span>;<br></code></pre></td></tr></table></figure><h3 id="Response完成重定向"><a href="#Response完成重定向" class="headerlink" title="Response完成重定向"></a>Response完成重定向</h3><p>重定向：一种资源跳转方式</p><p><img src="/assets/image-20230902145600398.png" alt="image-20230902145600398"></p><p><img src="/assets/image-20230902150623532.png" alt="image-20230902150623532"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//        重定向</span><br>        resp.setStatus(<span class="hljs-number">302</span>);<br>        resp.setHeader(<span class="hljs-string">&quot;Location&quot;</span>,<span class="hljs-string">&quot;/ReqRespDemo/resp2&quot;</span>);<br><span class="hljs-comment">//        重定向简化</span><br>        resp.sendRedirect(<span class="hljs-string">&quot;/ReqRespDemo/resp2&quot;</span>);<br></code></pre></td></tr></table></figure><p><strong>重定向的特点</strong></p><ul><li>浏览器地址栏路径发生变化</li><li>可以重定向到任意位置的资源（服务器内部、外部均可）</li><li>两次请求，不能在多个资源使用request共享数据</li></ul><p><strong>转发的特点</strong></p><ul><li>浏览器地址栏路径不发生变化</li><li>只能转发到当前服务器的内部资源</li><li>一次请求，可以在转发的资源间使用request共享数据</li></ul><p><strong>路径问题</strong></p><ul><li><strong>明确路径谁使用</strong><ul><li>浏览器使用：需要加虚拟目录（项目访问路径）</li><li>服务器使用：不需要加虚拟目录</li></ul></li></ul><p><img src="/assets/image-20230902164533277.png" alt="image-20230902164533277"></p><ol><li>需要虚拟目录</li><li>需要虚拟目录</li><li>不加虚拟目录</li><li>需要虚拟目录</li></ol><ul><li><strong>动态获取虚拟目录</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">        <span class="hljs-type">String</span> <span class="hljs-variable">contextPath</span> <span class="hljs-operator">=</span> req.getContextPath();<br><span class="hljs-comment">//        重定向简化</span><br>        resp.sendRedirect(contextPath + <span class="hljs-string">&quot;/resp2&quot;</span>);<br></code></pre></td></tr></table></figure><h3 id="Response响应字符数据"><a href="#Response响应字符数据" class="headerlink" title="Response响应字符数据"></a>Response响应字符数据</h3><p><img src="/assets/image-20230902170253919.png" alt="image-20230902170253919"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 响应头的content-type默认为text/html;charset=ISO-8859-1</span><br>resp.setContentType(<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span>);<br>    resp.getWriter().write(<span class="hljs-string">&quot;&lt;h1&gt;Response3&lt;/h&gt;&quot;</span>);<br>    resp.getWriter().write(<span class="hljs-string">&quot;&lt;h1&gt;你好&lt;/h1&gt;&quot;</span>);<br></code></pre></td></tr></table></figure><p><em>&#x2F;&#x2F;</em>        <em>细节：流不需要手动关闭</em></p><h3 id="Response响应字节数据"><a href="#Response响应字节数据" class="headerlink" title="Response响应字节数据"></a>Response响应字节数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>    <span class="hljs-type">BufferedInputStream</span> <span class="hljs-variable">bis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;D:\\Employment_Readiness\\黑马-WEB\\ReqRespDemo\\src\\main\\resources\\anya.jpg&quot;</span>));<br>    <span class="hljs-type">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>    <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">ServletOutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> resp.getOutputStream();<br>    <span class="hljs-keyword">while</span> ((len = bis.read(bytes))!=-<span class="hljs-number">1</span>)&#123;<br>        os.write(bytes,<span class="hljs-number">0</span>,len);<br>    &#125;<br>    bis.close();<br>&#125;<br></code></pre></td></tr></table></figure><p>字节传输技巧：由工具类commons-io</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-io<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-io<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.7<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">IOUtils.copy(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;D:\\\\Employment_Readiness\\\\黑马-WEB\\\\ReqRespDemo\\\\src\\\\main\\\\resources\\\\anya.jpg&quot;</span>)),resp.getOutputStream());<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaWeb核心技术</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>会话跟踪</title>
    <link href="/2023/09/01/%E9%BB%91%E9%A9%AC-Web%E6%A0%B8%E5%BF%83/5_%E4%BC%9A%E8%AF%9D%E8%B7%9F%E8%B8%AA/"/>
    <url>/2023/09/01/%E9%BB%91%E9%A9%AC-Web%E6%A0%B8%E5%BF%83/5_%E4%BC%9A%E8%AF%9D%E8%B7%9F%E8%B8%AA/</url>
    
    <content type="html"><![CDATA[<h1 id="会话跟踪"><a href="#会话跟踪" class="headerlink" title="会话跟踪"></a>会话跟踪</h1><p>会话：用户打开浏览器，访问web服务器的资源，会话建立，直到有一方断开连接，会话结束。在一次会话中，可以包含多次请求和响应。</p><p><img src="/assets/image-20230902203541003.png" alt="image-20230902203541003"></p><p>会话跟踪：一种维护浏览器状态的方法，服务器需要识别多次请求是否来自于同一浏览器，以便在同一次会话的多次请求之间的数据共享。</p><p><img src="/assets/image-20230902204211410.png" alt="image-20230902204211410"></p><p>HTTP协议是无状态的。每次浏览器向服务器请求数据时，服务器都会以此作为新的请求，因此我们需要会话跟踪技术来实现会话内的数据共享。</p><p>实现方式：</p><ol><li>客户端会话跟踪技术：Cookie</li><li>服务端会话跟踪技术：Session</li></ol>]]></content>
    
    
    <categories>
      
      <category>JavaWeb核心技术</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Session</title>
    <link href="/2023/09/01/%E9%BB%91%E9%A9%AC-Web%E6%A0%B8%E5%BF%83/7_Session/"/>
    <url>/2023/09/01/%E9%BB%91%E9%A9%AC-Web%E6%A0%B8%E5%BF%83/7_Session/</url>
    
    <content type="html"><![CDATA[<h1 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h1><ul><li>服务端会话跟踪技术，将数据保存到服务端</li><li>JavaEE提供了HttpSession接口，来实现一次会话的多次请求间数据共享功能。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(&quot;/session1&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">demo1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-type">HttpSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> req.getSession();<br>        session.setAttribute(<span class="hljs-string">&quot;SessionUsername&quot;</span>,<span class="hljs-string">&quot;LiHua&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(&quot;/session2&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">demo2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-type">HttpSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> req.getSession();<br>        System.out.println(session.getAttribute(<span class="hljs-string">&quot;SessionUsername&quot;</span>).toString());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Session原理"><a href="#Session原理" class="headerlink" title="Session原理"></a>Session原理</h2><ul><li>Session是基于Cookie实现的</li><li><img src="/assets/image-20230903123025455.png" alt="image-20230903123025455"></li></ul><p>我的理解：</p><blockquote><p>客户端浏览器访问&#x2F;demo1请求获取服务端的session，服务端收到请求后，服务端创建了一个session对象，并且该对象拥有唯一的标识id，&#x2F;demo1的数据存放到该session对象中，服务器向客户端浏览器响应，将session标识id作为Cookie发送给客户端浏览器，即set-cookie:JSESSIONID，客户端浏览器将这个Cookie存放到浏览器内存中。当该客户端浏览器再一次访问服务端时携带JSESSIONID，服务端获取到cookie值也就是JSESSIONID，服务端将在内存中查找是否存在匹配的Session对象，如果有则使用，否则创建新的Session对象</p></blockquote><h2 id="Session的使用细节"><a href="#Session的使用细节" class="headerlink" title="Session的使用细节"></a>Session的使用细节</h2><ul><li><p>Session钝化，活化</p><ul><li><p>服务器重启后，Session中的数据是否存在？</p><ul><li><p>钝化：服务器正常关闭后，Tomcat会自动将Session数据写入硬盘的文件中。</p><p><img src="/assets/image-20230903131306044.png" alt="image-20230903131306044"></p></li><li><p>活化：再次启动服务器后，从文件中加载数据到Session中</p></li><li><p>当浏览器关闭后，浏览器的从服务端响应到的Cookie消失，但服务端对应的Session对象仍保留</p></li></ul></li></ul></li><li><p>Session销毁</p><ul><li><p>默认情况下，session对象最后一次调用的30分钟自动销毁</p><p><img src="/assets/image-20230903131929014.png" alt="image-20230903131929014"></p></li><li><p>调用Session对象的invalidate()方法</p></li></ul></li></ul><p><img src="/assets/image-20230903132357992.png" alt="image-20230903132357992"></p>]]></content>
    
    
    <categories>
      
      <category>JavaWeb核心技术</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Filter过滤器</title>
    <link href="/2023/09/01/%E9%BB%91%E9%A9%AC-Web%E6%A0%B8%E5%BF%83/9_Filter%E8%BF%87%E6%BB%A4%E5%99%A8/"/>
    <url>/2023/09/01/%E9%BB%91%E9%A9%AC-Web%E6%A0%B8%E5%BF%83/9_Filter%E8%BF%87%E6%BB%A4%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="Filter过滤器"><a href="#Filter过滤器" class="headerlink" title="Filter过滤器"></a>Filter过滤器</h1><p>过滤器可以将资源的请求拦截下来，从而实现一些特殊功能。</p><p>过滤器一般完成一些通用的操作，比如：权限控制、统一编码处理、敏感字符处理等等</p><p><img src="/assets/image-20230903171636201.png" alt="image-20230903171636201"></p><h2 id="Filter快速入门"><a href="#Filter快速入门" class="headerlink" title="Filter快速入门"></a>Filter快速入门</h2><ol><li><p>定义类，实现Filter接口，并重写其方法</p><p><img src="/assets/image-20230903192327048.png" alt="image-20230903192327048"></p></li><li><p>配置Filter拦截资源的路径，在类上定义@WebFilter注解</p><p><img src="/assets/image-20230903192758865.png" alt="image-20230903192758865"></p></li><li><p>在doFilter方法结束，并放行</p><p><img src="/assets/image-20230903192854039.png" alt="image-20230903192854039"></p></li></ol><h2 id="Filter执行流程"><a href="#Filter执行流程" class="headerlink" title="Filter执行流程"></a>Filter执行流程</h2><p><img src="/assets/image-20230903193511737.png" alt="image-20230903193511737"></p><ol><li>放行后，访问对应资源，资源访问完成后，还会回到Filter中吗？</li></ol><blockquote><p>会</p></blockquote><ol start="2"><li><p>如果回到Filter中，是从头执行还是执行放行后的逻辑？</p><blockquote><p>放行后的逻辑</p></blockquote></li><li><p>执行顺序：</p></li></ol><blockquote><p>执行放行之前的逻辑-》放行-》访问资源-》执行放行后逻辑</p></blockquote><p>​<img src="/assets/image-20230903194831844.png" alt="image-20230903194831844"></p><h2 id="Filter使用细节"><a href="#Filter使用细节" class="headerlink" title="Filter使用细节"></a>Filter使用细节</h2><h3 id="拦截路径配置"><a href="#拦截路径配置" class="headerlink" title="拦截路径配置"></a>拦截路径配置</h3><h3 id="过滤器链"><a href="#过滤器链" class="headerlink" title="过滤器链"></a>过滤器链</h3><ul><li>拦截具体的资源：&#x2F;index.jsp: 只有访问index.jsp时才会被拦截。</li><li>目录拦截：&#x2F;user&#x2F;: 访问&#x2F;user下的所有资源，都会被拦截。</li><li>后缀名拦截：*.jsp：访问后缀名为jsp的资源，都会被拦截。</li><li>拦截所有：&#x2F;*：访问所有资源，都会被拦截。</li></ul><blockquote><p>一个WEB应用，可配置多个过滤器，这多个过滤器称为过滤器链</p><p>注解配置的Filter，优先级按照类名的自然排序</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>JavaWeb核心技术</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>验证码工具类</title>
    <link href="/2023/09/01/%E9%BB%91%E9%A9%AC-Web%E6%A0%B8%E5%BF%83/8_%E9%AA%8C%E8%AF%81%E7%A0%81%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
    <url>/2023/09/01/%E9%BB%91%E9%A9%AC-Web%E6%A0%B8%E5%BF%83/8_%E9%AA%8C%E8%AF%81%E7%A0%81%E5%B7%A5%E5%85%B7%E7%B1%BB/</url>
    
    <content type="html"><![CDATA[<h1 id="验证码工具类"><a href="#验证码工具类" class="headerlink" title="验证码工具类"></a>验证码工具类</h1><p>Hutool</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>cn.hutool<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>hutool-all<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.7.20<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> FileNotFoundException &#123;<br>        <span class="hljs-type">LineCaptcha</span> <span class="hljs-variable">lineCaptcha</span> <span class="hljs-operator">=</span> CaptchaUtil.createLineCaptcha(<span class="hljs-number">100</span>, <span class="hljs-number">30</span>, <span class="hljs-number">4</span>, <span class="hljs-number">25</span>);<br>        lineCaptcha.write(<span class="hljs-string">&quot;D:\\Employment_Readiness\\黑马-WEB\\CookieDemo\\src\\main\\resources\\x.png&quot;</span>);<br><span class="hljs-comment">//        or</span><br>        lineCaptcha.write(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;D:\\Employment_Readiness\\黑马-WEB\\CookieDemo\\src\\main\\resources\\x1.jpg&quot;</span>)));<br>        System.out.println(lineCaptcha.getCode());<br>    &#125;<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20230903171309340.png" alt="image-20230903171309340"></p><p><img src="/assets/image-20230903171314981.png" alt="image-20230903171314981"></p>]]></content>
    
    
    <categories>
      
      <category>JavaWeb核心技术</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Cookie</title>
    <link href="/2023/09/01/%E9%BB%91%E9%A9%AC-Web%E6%A0%B8%E5%BF%83/6_Cookie/"/>
    <url>/2023/09/01/%E9%BB%91%E9%A9%AC-Web%E6%A0%B8%E5%BF%83/6_Cookie/</url>
    
    <content type="html"><![CDATA[<h1 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h1><h2 id="Cookie基本使用"><a href="#Cookie基本使用" class="headerlink" title="Cookie基本使用"></a>Cookie基本使用</h2><p>数据保存在<strong>客户端</strong>，每次请求都携带Cookie数据进行访问</p><p><img src="/assets/image-20230902211121274.png" alt="image-20230902211121274"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>    <span class="hljs-type">Cookie</span> <span class="hljs-variable">cookie</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cookie</span>(<span class="hljs-string">&quot;username&quot;</span>, <span class="hljs-string">&quot;zhansan&quot;</span>);<br>    resp.addCookie(cookie);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20230902212437077.png" alt="image-20230902212437077"></p><p><img src="/assets/image-20230902212721661.png" alt="image-20230902212721661"></p><blockquote><p>为什么服务端只能在客户端获取从服务端发送的cookie，而不能获取非服务端发送的其他cookie呢</p></blockquote><p>服务端只能获取从服务端发送的Cookie，以及客户端将这些Cookie随后发送回服务器的Cookie，是由于浏览器的安全性和隐私保护机制所决定的。这个限制有以下原因：</p><ol><li>同源策略：浏览器实施了同源策略（Same-Origin Policy），这是一种安全措施，限制了一个网站（或域）的JavaScript代码只能访问与其来源相同的资源。这意味着，JavaScript代码只能访问与网站的域名相同的Cookie。这是为了防止恶意网站访问用户在其他网站上的Cookie数据。</li><li>安全性：Cookie中包含了敏感信息，如用户身份验证令牌。如果服务端可以直接获取所有Cookie，那么恶意的服务端可以轻松地窃取用户在其他网站上的Cookie信息，导致安全问题。</li><li>隐私保护：Cookie中可能包含用户的隐私信息，如浏览历史、偏好设置等。浏览器将这些信息视为用户的隐私，并严格限制对其访问，以保护用户的隐私。</li></ol><p>虽然服务端不能直接获取非服务端发送的其他网站的Cookie，但可以通过合法的手段，如用户授权或者跳转到其他网站来获取特定Cookie信息。例如，OAuth授权流程允许服务端通过重定向用户到第三方认证提供者的页面，获得用户授权后，获取特定的令牌信息。但这些操作通常需要用户的明示同意和合法的授权机制，以确保隐私和安全。</p><h2 id="Cookie原理"><a href="#Cookie原理" class="headerlink" title="Cookie原理"></a>Cookie原理</h2><ul><li>Cookie的实现是基于HTTP协议的<ul><li>响应头：set-cookie</li><li>请求头：cookie</li></ul></li></ul><p><img src="/assets/image-20230902215325907.png" alt="image-20230902215325907"></p><h2 id="Cookie使用细节"><a href="#Cookie使用细节" class="headerlink" title="Cookie使用细节"></a>Cookie使用细节</h2><ul><li><p>Cookie的存活时间</p><ul><li>默认情况下，Cookie存储在浏览器内存中，当浏览器关闭，内存释放，则Cookie被销毁</li><li>持久化修改：setMaxAge(int seconds)<ol><li>正数：将Cookie写入浏览器所在电脑的硬盘，持久化存储。到时间自动删除</li><li>负数：默认值，Cookie在当前浏览器内存中，当浏览器关闭，则Cookie被销毁</li><li>零：删除对应Cookie</li></ol></li></ul></li><li><p>Cookie存储中文</p><ul><li><p>Cookie不能直接存储中文</p></li><li><p>存储方法：转码，URL编码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;张三&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">encode</span> <span class="hljs-operator">=</span> URLEncoder.encode(value, <span class="hljs-string">&quot;UTF-8&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;存储数据&quot;</span> + encode);<br><span class="hljs-type">Cookie</span> <span class="hljs-variable">cookie</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cookie</span>(<span class="hljs-string">&quot;username&quot;</span>, encode);<br></code></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>JavaWeb核心技术</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>13_约束Constraint</title>
    <link href="/2023/08/25/%E6%95%B0%E6%8D%AE%E5%BA%93MYSQL/13_%E7%BA%A6%E6%9D%9F/%E7%BA%A6%E6%9D%9F/"/>
    <url>/2023/08/25/%E6%95%B0%E6%8D%AE%E5%BA%93MYSQL/13_%E7%BA%A6%E6%9D%9F/%E7%BA%A6%E6%9D%9F/</url>
    
    <content type="html"><![CDATA[<h1 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h1><h2 id="约束Constraint-概述"><a href="#约束Constraint-概述" class="headerlink" title="约束Constraint 概述"></a>约束Constraint 概述</h2><h3 id="为什么需要约束"><a href="#为什么需要约束" class="headerlink" title="为什么需要约束"></a>为什么需要约束</h3><p>数据完整性是指数据的精确性和可靠性。<strong>为了保证数据的完整性</strong>，SQL规范以约束的方式对表数据进行额外的条件限制。</p><ul><li><code>实体完整性</code>：同一个表中，不能存在两条完全相同无法区别的记录。</li><li><code>域完整性</code>：范围</li><li><code>引用完整性</code>：例如员工所在部门，部门表就必须存在该部门</li><li><code>用户自定义完整性</code>：例如用户名密码不可为空</li></ul><blockquote><p>为什么需要约束？为了保证数据的完整性！</p></blockquote><blockquote><p>什么叫约束？对表中字段的限制。</p></blockquote><ul><li>列级约束：将此约束声明在对应字段的后面</li><li>表级约束：在表中所有字段都声明完，在所有字段的后面声明的约束</li></ul><blockquote><p>约束的分类：</p></blockquote><ul><li>NOT NULL非空约束</li><li>UNIQUE唯一性约束</li><li>PRIMARY KEY主键约束</li><li>FOREIGN KEY外键约束</li><li>CHECK检查约束</li><li>DEFAULT默认值约束</li></ul><blockquote><p>如何增加约束？</p></blockquote><blockquote><p>如何查看表中的约束？</p></blockquote><h2 id="NOT-NULL"><a href="#NOT-NULL" class="headerlink" title="NOT NULL"></a>NOT NULL</h2><p>建表时：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql">#information_schema数据库名（系统库）<br>#table_constraints表名称（专门存储各个表的约束）<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> information_schema.table_constraints<br><span class="hljs-keyword">WHERE</span> table_name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;表名称&#x27;</span>;<br><br></code></pre></td></tr></table></figure><p>建表后：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> 表名称 modify 字段名 数据类型 <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>;<br></code></pre></td></tr></table></figure><p>删除：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> 表名称 modify 字段名 数据类型 <span class="hljs-keyword">NULL</span>;#去掉<span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>，相当于修改某个非注解字段，该字段允许为空<br>或<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> 表名称 modify 字段名 数据类型;#去掉<span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>，相当于修改某个非注解字段，该字段允许为空<br></code></pre></td></tr></table></figure><h2 id="UNIQUE"><a href="#UNIQUE" class="headerlink" title="UNIQUE"></a>UNIQUE</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs">同一个表可以有多个唯一约束。<br>唯一约束可以是某一个列的值唯一，也可以多个列组合的值唯一。<br>唯一性约束允许列值为空。<br>在创建唯一约束的时候，如果不给唯一约束命名，就默认和列名相同。<br>MySQL会给唯一约束的列上默认创建一个唯一索引。<br></code></pre></td></tr></table></figure><p>建表时：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> table_name(<br>字段名 数据类型,<br>字段名 数据类型 <span class="hljs-keyword">unique</span>,<br>    字段名 数据类型 <span class="hljs-keyword">unique</span> key,<br>    字段名 数据类型<br>);<br><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> 表名称(<br>字段名 数据类型,<br>字段名 数据类型,<br>字段名 数据类型,<br>    ## 表级约束<br>[<span class="hljs-keyword">constraint</span> 约束名] <span class="hljs-keyword">unique</span> key(字段名)<br>);<br></code></pre></td></tr></table></figure><p>举例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> student(<br>sid <span class="hljs-type">int</span>,<br>sname <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>),<br>tel <span class="hljs-type">char</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">unique</span>,<br>cardid <span class="hljs-type">char</span>(<span class="hljs-number">18</span>) <span class="hljs-keyword">unique</span> key<br>);<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-keyword">USER</span>(<br>id <span class="hljs-type">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>NAME <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">25</span>),<br>PASSWORD <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">16</span>),<br><span class="hljs-comment">-- 使用表级约束语法</span><br><span class="hljs-keyword">CONSTRAINT</span> uk_name_pwd <span class="hljs-keyword">UNIQUE</span>(NAME,PASSWORD)<br>);<br></code></pre></td></tr></table></figure><p>建表后指定唯一键约束:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql">#字段列表中如果是一个字段，表示该列的值唯一。如果是两个或更多个字段，那么复合唯一，即多个字段的组合是唯一的<br>#方式<span class="hljs-number">1</span>：<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> 表名称 <span class="hljs-keyword">add</span> <span class="hljs-keyword">unique</span> key(字段列表);<br></code></pre></td></tr></table></figure><h3 id="删除唯一约束"><a href="#删除唯一约束" class="headerlink" title="删除唯一约束"></a>删除唯一约束</h3><ul><li>添加唯一性约束的列上也会自动创建唯一索引。</li><li>删除唯一约束只能通过删除唯一索引的方式删除。</li><li>删除时需要指定唯一索引名，唯一索引名就和唯一约束名一样。</li><li>如果创建唯一约束时未指定名称，如果是单列，就默认和列名相同；如果是组合列，那么默认和()中排在第一个的列名相同。也可以自定义唯一性约束名。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> information_schema.table_constraints <br><span class="hljs-keyword">WHERE</span> table_name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;表名&#x27;</span>; #查看都有哪些约束<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-keyword">USER</span><br><span class="hljs-keyword">DROP</span> INDEX uk_name_pwd;<br></code></pre></td></tr></table></figure><blockquote><p> 注意：可以通过 show index from 表名称; 查看表的索引</p></blockquote><p><img src="/assets/image-20230829165818704.png" alt="image-20230829165818704"></p><p><img src="/assets/image-20230829165929992.png" alt="image-20230829165929992"></p><p><img src="/assets/image-20230829165943087.png" alt="image-20230829165943087"></p><h2 id="PRIMARY-KEY"><a href="#PRIMARY-KEY" class="headerlink" title="PRIMARY KEY"></a>PRIMARY KEY</h2><p>作用：用来唯一标识表中的一行记录。</p><p>特点：主键约束相当于<strong>唯一约束+非空约束</strong>的组合，主键约束列不允许重复，也不允许出现空值。</p><ul><li>一个表最多只能有一个主键约束，建立主键约束可以在列级别创建，也可以在表级别上创建。</li><li>主键约束对应着表中的一列或者多列（复合主键）</li><li>MySQL的主键名总是PRIMARY，就算自己命名了主键约束名也没用。</li><li>当创建主键约束时，系统默认会在所在的列或列组合上建立对应的主键索引（能够根据主键查询的，就根据主键查询，效率更高）。如果删除主键约束了，主键约束对应的索引就自动删除了。</li><li>需要注意的一点是，不要修改主键字段的值。因为主键是数据记录的唯一标识，如果修改了主键的值，就有可能会破坏数据的完整性。</li></ul><p><img src="/assets/image-20230829171558637.png" alt="image-20230829171558637"></p><p>建表时</p><p>建立一个表的主键约束</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> 表名称(<br>字段名 数据类型 <span class="hljs-keyword">primary</span> key, #列级模式<br>字段名 数据类型,<br>字段名 数据类型<br>);<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> 表名称(<br>字段名 数据类型,<br>字段名 数据类型,<br>字段名 数据类型,<br>[<span class="hljs-keyword">constraint</span> 约束名] <span class="hljs-keyword">primary</span> key(字段名) #表级模式<br>);<br>#列级约束<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> temp(<br>id <span class="hljs-type">int</span> <span class="hljs-keyword">primary</span> key,<br>name <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>)<br>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> temp <span class="hljs-keyword">values</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;张三&#x27;</span>);#成功<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> temp <span class="hljs-keyword">values</span>(<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;李四&#x27;</span>);#成功<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> temp <span class="hljs-keyword">values</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;张三&#x27;</span>);#失败 因为与第一行的id重复<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> temp <span class="hljs-keyword">values</span>(<span class="hljs-keyword">null</span>,<span class="hljs-string">&#x27;李琦&#x27;</span>);#失败 因为id不能为<span class="hljs-keyword">null</span><br><br>#表级约束<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> emp5(<br>id <span class="hljs-type">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>NAME <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>),<br>pwd <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">15</span>),<br><span class="hljs-keyword">CONSTRAINT</span> emp5_id_pk <span class="hljs-keyword">PRIMARY</span> KEY(id)<br>);<br></code></pre></td></tr></table></figure><p>建立两个表主键约束</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql">#演示一个表建立两个主键约束<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> temp(<br>id <span class="hljs-type">int</span> <span class="hljs-keyword">primary</span> key,<br>name <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">primary</span> key<br>); #错误 一个表不能含有两个及以上的主键<br></code></pre></td></tr></table></figure><p>建表后增加主键约束</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名称 <span class="hljs-keyword">ADD</span> <span class="hljs-keyword">PRIMARY</span> KEY(字段列表); <br>#字段列表可以是一个字段，也可以是多个字段，如果是多个字段的话，是复合主键<br><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> student <span class="hljs-keyword">ADD</span> <span class="hljs-keyword">PRIMARY</span> KEY (sid);<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> emp5 <span class="hljs-keyword">ADD</span> <span class="hljs-keyword">PRIMARY</span> KEY(NAME,pwd);<br></code></pre></td></tr></table></figure><p><strong><code>通常不删除索引操作</code></strong></p><h3 id="关于复合主键"><a href="#关于复合主键" class="headerlink" title="关于复合主键"></a>关于复合主键</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> 表名称(<br>字段名 数据类型,<br>字段名 数据类型,<br>字段名 数据类型,<br><span class="hljs-keyword">primary</span> key(字段名<span class="hljs-number">1</span>,字段名<span class="hljs-number">2</span>) #表示字段<span class="hljs-number">1</span>和字段<span class="hljs-number">2</span>的组合是唯一的，也可以有更多个字段<br>);<br>#学生表<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> student(<br>sid <span class="hljs-type">int</span> <span class="hljs-keyword">primary</span> key, #学号<br>sname <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) #学生姓名<br>);<br>#课程表<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> course(<br>cid <span class="hljs-type">int</span> <span class="hljs-keyword">primary</span> key, #课程编号<br>cname <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) #课程名称<br>);<br>#选课表<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> student_course(<br>sid <span class="hljs-type">int</span>,<br>cid <span class="hljs-type">int</span>,<br>score <span class="hljs-type">int</span>,<br><span class="hljs-keyword">primary</span> key(sid,cid) #复合主键<br>);<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> emp6(<br>id <span class="hljs-type">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>NAME <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>),<br>pwd <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">15</span>),<br><span class="hljs-keyword">CONSTRAINT</span> emp7_pk <span class="hljs-keyword">PRIMARY</span> KEY(NAME,pwd)<br>);<br></code></pre></td></tr></table></figure><h2 id="AUTO-INCREMENT自增长列"><a href="#AUTO-INCREMENT自增长列" class="headerlink" title="AUTO_INCREMENT自增长列"></a>AUTO_INCREMENT自增长列</h2><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs 1c">（<span class="hljs-number">1</span>）一个表最多只能有一个自增长列<br>（<span class="hljs-number">2</span>）当需要产生唯一标识符或顺序值时，可设置自 增长<br>（<span class="hljs-number">3</span>）自增长列约束的列必须是键列（主键列，唯一键列）<br>（<span class="hljs-number">4</span>）自增约束的列的数据类型必须是整数类型<br>（<span class="hljs-number">5</span>）如果自增列指定了 <span class="hljs-number">0</span> 和 <span class="hljs-literal">null</span>，会在当前最大值的基础上自增；如果自增列手动指定了具体值，直接<br>赋值为具体值。<br></code></pre></td></tr></table></figure><p>错误演示：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> employee(<br>eid <span class="hljs-type">int</span> auto_increment,<br>ename <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>)<br>); #自增长约束的列必须是键列<br><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> employee(<br>eid <span class="hljs-type">int</span> <span class="hljs-keyword">primary</span> key,<br>ename <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">unique</span> key auto_increment<br>); #自增约束的列的数据类型必须是整数类型<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> 表名称(<br>字段名 数据类型 <span class="hljs-keyword">primary</span> key auto_increment,<br>字段名 数据类型 <span class="hljs-keyword">unique</span> key <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br>字段名 数据类型 <span class="hljs-keyword">unique</span> key,<br>字段名 数据类型 <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">default</span> 默认值,<br>);<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> 表名称(<br>字段名 数据类型 <span class="hljs-keyword">default</span> 默认值 ,<br>字段名 数据类型 <span class="hljs-keyword">unique</span> key auto_increment,<br>字段名 数据类型 <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">default</span> 默认值,,<br><span class="hljs-keyword">primary</span> key(字段名)<br>);<br><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> employee(<br>eid <span class="hljs-type">int</span> <span class="hljs-keyword">primary</span> key auto_increment,<br>ename <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>)<br>);<br></code></pre></td></tr></table></figure><p>建表后：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> 表名称 modify 字段名 数据类型 auto_increment;<br><br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> employee <br>modify eid <span class="hljs-type">int</span> auto_increment;<br></code></pre></td></tr></table></figure><p>删除自增约束</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql">#<span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> 表名称 modify 字段名 数据类型 auto_increment;#给这个字段增加自增约束<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> 表名称 modify 字段名 数据类型;<br>#去掉auto_increment相当于删除<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> employee modify eid <span class="hljs-type">int</span>; #把auto_increment去掉<br></code></pre></td></tr></table></figure><h3 id="MySQL-8-0新特性—自增变量的持久化"><a href="#MySQL-8-0新特性—自增变量的持久化" class="headerlink" title="MySQL 8.0新特性—自增变量的持久化"></a>MySQL 8.0新特性—自增变量的持久化</h3><blockquote><p>在mysql5（内存维护）中自增长删除行后会延续删除行的增量，需要重启服务，才会延续最后一行的增量</p><p>而mysql8（重做日志）中删除一行不会延续删除行的增量，重启服务后也会记录之前删除行的增量</p></blockquote><h2 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h2><ul><li>作用：限定某个表的某个字段的引用</li></ul><h3 id="添加外键"><a href="#添加外键" class="headerlink" title="添加外键"></a>添加外键</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs SQL">#外键约束<br><span class="hljs-comment">-- 先创建主表</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> DEPT1(<br>DEPT_ID <span class="hljs-type">INT</span> <span class="hljs-keyword">PRIMARY</span> KEY,<br>DEPT_NAME <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">15</span>)<br>);<br><br>#再创建从表<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> EMP1(<br>EMP_ID <span class="hljs-type">INT</span> <span class="hljs-keyword">PRIMARY</span> KEY AUTO_INCREMENT,<br>EMP_NAME <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">15</span>),<br>DEPAMENT_ID <span class="hljs-type">INT</span>,<br><span class="hljs-keyword">CONSTRAINT</span> FK_EMP1_DEPT_ID <span class="hljs-keyword">FOREIGN</span> KEY(DEPAMENT_ID) <span class="hljs-keyword">REFERENCES</span> DEPT1(DEPT_ID)<br>);<br><br>## 效果如下<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> DEPT1 <span class="hljs-keyword">VALUES</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;DS&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> EMP1 <span class="hljs-keyword">VALUES</span>(<span class="hljs-number">100</span>,<span class="hljs-string">&#x27;SD&#x27;</span>,<span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure><h3 id="约束等级"><a href="#约束等级" class="headerlink" title="约束等级"></a>约束等级</h3><ul><li>Cascade方式：在父表上update&#x2F;delete记录时，同步update&#x2F;delete子表的匹配记录</li><li>Set null方式：在父表上update&#x2F;delete记录时，将子表上匹配记录的列设为null，但是要注意子表的外键列不能为not null</li><li>No action方式（默认）：如果子表中有匹配的记录，则不允许对父表对应候选键进行update&#x2F;delete操作</li><li>Restrict方式（默认）：同no action,都是立即检查外键约束</li><li>Set default方式（在可视化工具中可能显示空白）：父表有变更时，子表将外键列设置成一个默认的值，但Innodb2不能识别</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sql">#外键约束<br><span class="hljs-comment">-- 先创建主表</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> DEPT1(<br>DEPT_ID <span class="hljs-type">INT</span> <span class="hljs-keyword">PRIMARY</span> KEY,<br>DEPT_NAME <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">15</span>)<br>);<br><br>#再创建从表<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> EMP1(<br>EMP_ID <span class="hljs-type">INT</span> <span class="hljs-keyword">PRIMARY</span> KEY AUTO_INCREMENT,<br>EMP_NAME <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">15</span>),<br>DEPAMENT_ID <span class="hljs-type">INT</span>,<br><span class="hljs-keyword">FOREIGN</span> KEY(DEPAMENT_ID) <span class="hljs-keyword">REFERENCES</span> DEPT1(DEPT_ID) <span class="hljs-keyword">ON</span> <span class="hljs-keyword">UPDATE</span> CASCADE <span class="hljs-keyword">ON</span> <span class="hljs-keyword">DELETE</span> RESTRICT<br>);<br></code></pre></td></tr></table></figure><h2 id="CHECK约束-MYSQL8"><a href="#CHECK约束-MYSQL8" class="headerlink" title="CHECK约束(MYSQL8+)"></a>CHECK约束(MYSQL8+)</h2><p><img src="/assets/image-20230829204520064.png" alt="image-20230829204520064"></p><h2 id="DEFAULT约束"><a href="#DEFAULT约束" class="headerlink" title="DEFAULT约束"></a>DEFAULT约束</h2><p>默认赋值</p>]]></content>
    
    
    <categories>
      
      <category>Mysql数据库</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>10_创建和管理表</title>
    <link href="/2023/08/25/%E6%95%B0%E6%8D%AE%E5%BA%93MYSQL/10_%E5%88%9B%E5%BB%BA%E5%92%8C%E7%AE%A1%E7%90%86%E8%A1%A8/%E5%88%9B%E5%BB%BA%E8%A1%A8%E5%92%8C%E7%AE%A1%E7%90%86%E8%A1%A8/"/>
    <url>/2023/08/25/%E6%95%B0%E6%8D%AE%E5%BA%93MYSQL/10_%E5%88%9B%E5%BB%BA%E5%92%8C%E7%AE%A1%E7%90%86%E8%A1%A8/%E5%88%9B%E5%BB%BA%E8%A1%A8%E5%92%8C%E7%AE%A1%E7%90%86%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<p>创建数据库之前为什么不是先创建数据表？</p><blockquote><p>从系统架构的层次看，MYSQL数据库系统从大到小依次是数据库服务器，数据库，数据表，数据表的行与列</p></blockquote><h2 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h2><h3 id="方式1-MYSQL8"><a href="#方式1-MYSQL8" class="headerlink" title="方式1 MYSQL8+"></a>方式1 MYSQL8+</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">CREATE</span> DATABASE mytest1<br></code></pre></td></tr></table></figure><p>方式2 MYSQL5</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> DATABASE IF <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span> TEST9 <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> <span class="hljs-string">&#x27;UTF8&#x27;</span>;<br></code></pre></td></tr></table></figure><h2 id="管理数据库"><a href="#管理数据库" class="headerlink" title="管理数据库"></a>管理数据库</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> DATABASE IF <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span> TEST10 <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> <span class="hljs-string">&#x27;GBK&#x27;</span>;<br><span class="hljs-keyword">SHOW</span> <span class="hljs-keyword">CREATE</span> DATABASE IF <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span> TEST10;<br><span class="hljs-comment">-- 切换数据库</span><br>USE test9;<br>USE atguigudb;<br><span class="hljs-comment">-- 查看当前数据库中保存的数据库</span><br><span class="hljs-keyword">SHOW</span> TABLES;<br><span class="hljs-comment">-- 查看当前使用的数据库</span><br><span class="hljs-keyword">SELECT</span> DATABASE();<br><span class="hljs-comment">-- 查看指定数据库下保存的数据表</span><br><span class="hljs-keyword">SHOW</span> TABLES <span class="hljs-keyword">FROM</span> atguigudb;<br><br><span class="hljs-comment">-- 修改数据库</span><br><span class="hljs-keyword">ALTER</span> DATABASE test10 <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> <span class="hljs-string">&#x27;UTF8&#x27;</span><br><span class="hljs-comment">-- 删除数据库 DROP通常不可回滚</span><br><span class="hljs-keyword">DROP</span> DATABASE IF <span class="hljs-keyword">EXISTS</span> test10;<br><span class="hljs-keyword">SHOW</span> DATABASES;<br></code></pre></td></tr></table></figure><h2 id="创建数据表"><a href="#创建数据表" class="headerlink" title="创建数据表"></a>创建数据表</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span> MYEMP1;<br></code></pre></td></tr></table></figure><p>创建复制表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 基于现有的表复制出新的表，包括表数据</span><br>USE atguigudb;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> employeesCOPY <span class="hljs-keyword">AS</span> <br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> employees;<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> employeesCOPY;<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-comment">-- 基于现有的表复制出新的表，不包括表数据</span><br><span class="hljs-comment">-- 方式1</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> employeesCOPY_NULLDATA<br><span class="hljs-keyword">AS</span> <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> employees <span class="hljs-keyword">WHERE</span> department_id <span class="hljs-operator">&gt;</span> <span class="hljs-number">10000</span>;<br><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> employeesCOPY_NULLDATA;<br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> employeesCOPY_NULLDATA;<br><span class="hljs-comment">-- 方式2</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> employeesCOPY_NULLDATA<br><span class="hljs-keyword">AS</span> <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> employees <span class="hljs-keyword">WHERE</span> <span class="hljs-literal">FALSE</span>;<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> employeesCOPY_NULLDATA;<br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> employeesCOPY_NULLDATA;<br></code></pre></td></tr></table></figure><h2 id="修改表结构或数据"><a href="#修改表结构或数据" class="headerlink" title="修改表结构或数据"></a>修改表结构或数据</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 修改表 ALTER</span><br>USE TEST10;<br><span class="hljs-keyword">DESC</span> employeesCOPY;<br><span class="hljs-comment">-- 添加一个字段属性</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> employeesCOPY <br><span class="hljs-keyword">ADD</span> completement <span class="hljs-keyword">DOUBLE</span>(<span class="hljs-number">10</span>,<span class="hljs-number">2</span>); #默认添加到表中最后的字段<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> employeesCOPY <br><span class="hljs-keyword">ADD</span> phone <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">FIRST</span>;<br><span class="hljs-comment">-- 修改一个字段，数据类型，长度，默认值</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> employeesCOPY<br>MODIFY phone_number <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">30</span>);<br><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> employeesCOPY<br>MODIFY emp_name <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">34</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;AAA&#x27;</span>;<br><span class="hljs-comment">-- 重命名字段</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> employeesCOPY<br>CHANGE salary month_salary <span class="hljs-keyword">DOUBLE</span>(<span class="hljs-number">10</span>,<span class="hljs-number">2</span>);<br><span class="hljs-comment">-- 删除字段</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> employeesCOPY<br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">COLUMN</span> phone;<br><span class="hljs-comment">-- 重命名表</span><br>RENAME <span class="hljs-keyword">TABLE</span> employeesCOPY <span class="hljs-keyword">TO</span> EMPCOPY;<br><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> EMPCOPY<br>RENAME <span class="hljs-keyword">TO</span> ECP;<br><span class="hljs-comment">-- 删除表 不光表结构做了删除，表中数据也删除了</span><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> ECP;<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> ECP;<br><span class="hljs-comment">-- 清空表 删除表中所有数据，释放表中的存储空间，保留表结构</span><br><span class="hljs-keyword">TRUNCATE</span> <span class="hljs-keyword">TABLE</span> ECP;<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">TRUNCATE</span> <span class="hljs-keyword">TABLE</span> 和 <span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> 异同点<br>相同点:都可以清除表中所有数据删除,同时保留表结构<br>不同点:<span class="hljs-keyword">TRUNCATE</span> <span class="hljs-keyword">TABLE</span> 一旦操作,表数据全部清除,同时数据是不可以回滚的,但不删除结构<br><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span>一旦执行此操作,表数据可以全部删除,但数据是可以回滚的.<br><br></code></pre></td></tr></table></figure><h2 id><a href="#" class="headerlink" title></a></h2><h2 id="DCL-事务-中COMMIT和ROLLBACK"><a href="#DCL-事务-中COMMIT和ROLLBACK" class="headerlink" title="DCL(事务)中COMMIT和ROLLBACK"></a>DCL(事务)中COMMIT和ROLLBACK</h2><blockquote><p>COMMIT提交数据，一旦执行COMMIT，则数据就被永久保存在数据库中，数据不可以回滚。</p></blockquote><blockquote><p>ROLLBACK回滚数据,一单执行ROLLBACK,则可以实现数据的回滚,回滚到最近的一次COMMIT之后</p></blockquote><h2 id="DDL和DML的说明"><a href="#DDL和DML的说明" class="headerlink" title="DDL和DML的说明"></a>DDL和DML的说明</h2><ol><li>DDL操作一旦执行,不可回滚,指令SET autucommit &#x3D; FALSE会对DDL操作失效(因为在执行完DDL操作之后,一定会执行一次COMMIT,而COMMIT操作不受SET autocommit &#x3D; false限制)</li><li>DML默认情况下,也不可回滚,但是在执行DML之前执行了SET autocommit &#x3D; FALSE,则可以实现回滚.</li><li>一旦执行提交,就无法回滚到提交前的状态</li></ol><p>DML-&gt;DROP</p><p>DDL-&gt;TRUNCATE</p><p>DCL-&gt;COMMIT&#x2F;ROLLBACK</p><h3 id="MYSQL5-vs-8的DDL原子化"><a href="#MYSQL5-vs-8的DDL原子化" class="headerlink" title="MYSQL5 vs 8的DDL原子化"></a>MYSQL5 vs 8的DDL原子化</h3><blockquote><p>MYSQL5中<code>DROP TABLE t1,不存在的t2</code>时,报错但对t1成功删除</p></blockquote><blockquote><p>而在MYSQL8中<code>DROP TABLE t1,不存在的t2</code>时,报错且不会对t1删除,因为在MYSQL对报错过程进行事务回滚</p></blockquote><h2 id="面试题-想要彻底删除数据表中某条数据时要用TRUNCATE还是DELETE"><a href="#面试题-想要彻底删除数据表中某条数据时要用TRUNCATE还是DELETE" class="headerlink" title="面试题:想要彻底删除数据表中某条数据时要用TRUNCATE还是DELETE ?"></a>面试题:想要彻底删除数据表中某条数据时要用TRUNCATE还是DELETE ?</h2><blockquote><p>【参考】TRUNCATE TABLE比DELETE速度快，且使用的系统和事务日志资源少，但TRUNCATE无事务且不触发TRIGGER,有可能造成事故，故不建议在开发代码中使用此语句。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Mysql数据库</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>15_存储过程与函数</title>
    <link href="/2023/08/25/%E6%95%B0%E6%8D%AE%E5%BA%93MYSQL/15_%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E4%B8%8E%E5%87%BD%E6%95%B0/%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E4%B8%8E%E5%87%BD%E6%95%B0/"/>
    <url>/2023/08/25/%E6%95%B0%E6%8D%AE%E5%BA%93MYSQL/15_%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E4%B8%8E%E5%87%BD%E6%95%B0/%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E4%B8%8E%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="存储过程与函数"><a href="#存储过程与函数" class="headerlink" title="存储过程与函数"></a><strong>存储过程与函数</strong></h1><h2 id="创建存储过程"><a href="#创建存储过程" class="headerlink" title="创建存储过程"></a>创建存储过程</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">PROCEDURE</span> 存储过程名(<span class="hljs-keyword">IN</span><span class="hljs-operator">|</span><span class="hljs-keyword">OUT</span><span class="hljs-operator">|</span><span class="hljs-keyword">INOUT</span> 参数名 参数类型,...)<br>[characteristics ...]<br><span class="hljs-keyword">BEGIN</span><br>存储过程体<br><span class="hljs-keyword">END</span><br></code></pre></td></tr></table></figure><ul><li>IN:为输入参数，有输入无返回，默认</li><li>OUT:当前参数为输出，有返回无输入</li><li>INOUT:有输入有返回</li></ul><p><strong>阿里巴巴规范不建议写存储过程</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- navicat 存储过程包含在函数里，也不改结束符号</span><br><span class="hljs-comment">-- 类型1 无参数无返回值</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">PROCEDURE</span> select_all_data()<br><span class="hljs-keyword">BEGIN</span> <br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> employees;<br><span class="hljs-keyword">END</span>;<br><br><span class="hljs-comment">-- 存储过程的调用</span><br><span class="hljs-keyword">CALL</span> select_all_data();<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">PROCEDURE</span> avg_employee_salary()<br><span class="hljs-keyword">BEGIN</span> <br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">AVG</span>(SALARY) <span class="hljs-keyword">FROM</span> employees;<br><span class="hljs-keyword">END</span>;<br><span class="hljs-keyword">CALL</span> avg_employee_salary();<br><span class="hljs-comment">-- 类型2 带out</span><br><span class="hljs-keyword">DESC</span> employees;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">PROCEDURE</span> show_min_salary(<span class="hljs-keyword">OUT</span> MS <span class="hljs-keyword">double</span>)<br><span class="hljs-keyword">BEGIN</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">MIN</span>(SALARY) <span class="hljs-keyword">INTO</span> MS<br><span class="hljs-keyword">FROM</span> employees;<br><span class="hljs-keyword">END</span>;<br><span class="hljs-keyword">CALL</span> show_min_salary(<span class="hljs-variable">@MS</span>);<br><span class="hljs-comment">-- 查看变量值</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-variable">@MS</span>;<br><span class="hljs-comment">-- 类型3 带IN</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">PROCEDURE</span> show_someone_salary(<span class="hljs-keyword">IN</span> EMPNAME <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>))<br><span class="hljs-keyword">BEGIN</span><br><span class="hljs-keyword">SELECT</span> SALARY <span class="hljs-keyword">FROM</span> employees<br><span class="hljs-keyword">WHERE</span> last_name <span class="hljs-operator">=</span> EMPNAME;<br><span class="hljs-keyword">END</span>;<br><span class="hljs-comment">-- 调用方式1</span><br><span class="hljs-keyword">CALL</span> show_someone_salary(<span class="hljs-string">&#x27;King&#x27;</span>);<br><span class="hljs-comment">-- 调用方式2</span><br><span class="hljs-keyword">SET</span> <span class="hljs-variable">@EMPNAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;Abel&#x27;</span>;<br><span class="hljs-keyword">CALL</span> show_someone_salary(<span class="hljs-variable">@EMPNAME</span>);<br><br><span class="hljs-comment">-- 类型4 带IN和OUT</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">PROCEDURE</span> show_someone_salary2(<span class="hljs-keyword">IN</span> empname <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>),<span class="hljs-keyword">OUT</span> empsalary <span class="hljs-keyword">DOUBLE</span>(<span class="hljs-number">8</span>,<span class="hljs-number">2</span>))<br><span class="hljs-keyword">BEGIN</span> <br><span class="hljs-keyword">SELECT</span> salary <span class="hljs-keyword">INTO</span> empsalary <span class="hljs-keyword">FROM</span> employees <span class="hljs-keyword">WHERE</span> last_name <span class="hljs-operator">=</span> empname;  <br><span class="hljs-keyword">END</span>;<br><span class="hljs-keyword">CALL</span> show_someone_salary2(<span class="hljs-string">&#x27;Abel&#x27;</span>,<span class="hljs-variable">@ES</span>);<br><span class="hljs-keyword">SELECT</span> <span class="hljs-variable">@ES</span>;<br><span class="hljs-comment">-- 类型5 带INOUT</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">PROCEDURE</span> show_mgr_name(<span class="hljs-keyword">INOUT</span> empname <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">25</span>))<br><span class="hljs-keyword">BEGIN</span><br><span class="hljs-keyword">SELECT</span> last_name <span class="hljs-keyword">FROM</span> employees<br><span class="hljs-keyword">WHERE</span> employee_id <span class="hljs-operator">=</span> (<br><span class="hljs-keyword">SELECT</span> manager_id <span class="hljs-keyword">FROM</span> employees<br><span class="hljs-keyword">WHERE</span> last_name <span class="hljs-operator">=</span> empname<br>);<br><span class="hljs-keyword">END</span>;<br><span class="hljs-keyword">SET</span> <span class="hljs-variable">@EMPNAME</span> :<span class="hljs-operator">=</span> <span class="hljs-string">&#x27;Abel&#x27;</span>;<br><span class="hljs-keyword">CALL</span> show_mgr_name(<span class="hljs-variable">@EMPNAME</span>);<br></code></pre></td></tr></table></figure><h2 id="存储函数的使用"><a href="#存储函数的使用" class="headerlink" title="存储函数的使用"></a>存储函数的使用</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">FUNCTION</span> 函数名(参数名 参数类型,...)<br><span class="hljs-keyword">RETURNS</span> 返回值类型<br>[characteristics ...]<br><span class="hljs-keyword">BEGIN</span><br>函数体 #函数体中肯定有 <span class="hljs-keyword">RETURN</span> 语句<br><span class="hljs-keyword">END</span><br><br><span class="hljs-number">1</span>、参数列表：指定参数为<span class="hljs-keyword">IN</span>、<span class="hljs-keyword">OUT</span>或<span class="hljs-keyword">INOUT</span>只对<span class="hljs-keyword">PROCEDURE</span>是合法的，<span class="hljs-keyword">FUNCTION</span>中总是默认为<span class="hljs-keyword">IN</span>参<br>数。<br></code></pre></td></tr></table></figure><blockquote><p>创建存储函数，名称为email_by_name()，参数定义为空，该函数查询Abel的email，并返回，数据类型字符串型。</p></blockquote><p>错误实例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">FUNCTION</span> email_by_name()<br><span class="hljs-keyword">RETURNS</span> <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">25</span>)<br><span class="hljs-keyword">BEGIN</span><br><span class="hljs-keyword">RETURN</span>(<span class="hljs-keyword">SELECT</span> email <span class="hljs-keyword">FROM</span> employees <span class="hljs-keyword">WHERE</span> last_name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;Abel&#x27;</span>);<br><span class="hljs-keyword">END</span>;<br></code></pre></td></tr></table></figure><blockquote><p>1418 - This function has none of DETERMINISTIC, NO SQL, or READS SQL DATA in its declaration and binary logging is enabled (you <em>might</em> want to use the less safe log_bin_trust_function_creators variable)</p></blockquote><p>方式1：补全特征</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">FUNCTION</span> email_by_name()<br><span class="hljs-keyword">RETURNS</span> <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">25</span>) <br><span class="hljs-keyword">DETERMINISTIC</span><br><span class="hljs-keyword">CONTAINS</span> <span class="hljs-keyword">SQL</span><br><span class="hljs-keyword">READS</span> <span class="hljs-keyword">SQL</span> DATA<br><span class="hljs-keyword">BEGIN</span><br><span class="hljs-keyword">RETURN</span>(<span class="hljs-keyword">SELECT</span> email <span class="hljs-keyword">FROM</span> employees <span class="hljs-keyword">WHERE</span> last_name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;Abel&#x27;</span>);<br><span class="hljs-keyword">END</span>;<br></code></pre></td></tr></table></figure><p>方式2：配置全局变量</p><p><img src="/assets/image-20230830144649022.png" alt="image-20230830144649022"></p><h2 id="对比存储函数和存储过程"><a href="#对比存储函数和存储过程" class="headerlink" title="对比存储函数和存储过程"></a>对比存储函数和存储过程</h2><p><img src="/assets/image-20230830193454074.png" alt="image-20230830193454074"></p>]]></content>
    
    
    <categories>
      
      <category>Mysql数据库</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>14_视图View</title>
    <link href="/2023/08/25/%E6%95%B0%E6%8D%AE%E5%BA%93MYSQL/14_%E8%A7%86%E5%9B%BE/%E8%A7%86%E5%9B%BE/"/>
    <url>/2023/08/25/%E6%95%B0%E6%8D%AE%E5%BA%93MYSQL/14_%E8%A7%86%E5%9B%BE/%E8%A7%86%E5%9B%BE/</url>
    
    <content type="html"><![CDATA[<h1 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h1><h2 id="视图的理解"><a href="#视图的理解" class="headerlink" title="视图的理解"></a>视图的理解</h2><ul><li>可以看作是一个虚拟表，本身不存储数据，本质是可以存储起来的SELECT语句。</li><li>视图中SELECT语句涉及的表称为基表</li><li>针对视图做DML操作，会影响到对应的基表中的数据。反之亦然。</li><li>视图本身的删除，不会导致基表中数据的删除。</li><li>视图的应用场景：针对于小型项目，不推荐使用视图。针对于大型项目，可以考虑使用视图。</li><li>优点：简化查询。控制数据的访问。</li></ul><h2 id="具体格式"><a href="#具体格式" class="headerlink" title="具体格式"></a>具体格式</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> [<span class="hljs-keyword">OR</span> REPLACE]<br>[ALGORITHM <span class="hljs-operator">=</span> &#123;UNDEFINED <span class="hljs-operator">|</span> <span class="hljs-keyword">MERGE</span> <span class="hljs-operator">|</span> TEMPTABLE&#125;]<br><span class="hljs-keyword">VIEW</span> 视图名称 [(字段列表)]<br><span class="hljs-keyword">AS</span> 查询语句<br>[<span class="hljs-keyword">WITH</span> [<span class="hljs-keyword">CASCADED</span><span class="hljs-operator">|</span><span class="hljs-keyword">LOCAL</span>] <span class="hljs-keyword">CHECK</span> OPTION]<br></code></pre></td></tr></table></figure><h2 id="简化格式"><a href="#简化格式" class="headerlink" title="简化格式"></a>简化格式</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">VIEW</span> 视图名称<br><span class="hljs-keyword">AS</span> 查询语句<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">VIEW</span> VIEW1<br><span class="hljs-keyword">AS</span> <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> employees;<br><br>#查询视图<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> VIEW1<br></code></pre></td></tr></table></figure><h3 id="创建单表视图"><a href="#创建单表视图" class="headerlink" title="创建单表视图"></a>创建单表视图</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">VIEW</span> emp_year_salary (ename,year_salary)<br><span class="hljs-keyword">AS</span><br><span class="hljs-keyword">SELECT</span> ename,salary<span class="hljs-operator">*</span><span class="hljs-number">12</span><span class="hljs-operator">*</span>(<span class="hljs-number">1</span><span class="hljs-operator">+</span>IFNULL(commission_pct,<span class="hljs-number">0</span>))<br><span class="hljs-keyword">FROM</span> t_employee;<br></code></pre></td></tr></table></figure><blockquote><p>实际上就是我们在 SQL 查询语句的基础上封装了视图 VIEW，这样就会基于 SQL 语句的结果集形成一张虚拟表。</p></blockquote><blockquote><p>在创建视图时，没有在视图名后面指定字段列表，则视图中字段列表默认和SELECT语句中的字段列表一致。如果SELECT语句中给字段取了别名，那么视图中的字段名和别名相同</p></blockquote><h3 id="创建多表联合视图"><a href="#创建多表联合视图" class="headerlink" title="创建多表联合视图"></a>创建多表联合视图</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">VIEW</span> empview<br><span class="hljs-keyword">AS</span><br><span class="hljs-keyword">SELECT</span> employee_id emp_id,last_name NAME,department_name<br><span class="hljs-keyword">FROM</span> employees e,departments d<br><span class="hljs-keyword">WHERE</span> e.department_id <span class="hljs-operator">=</span> d.department_id;<br></code></pre></td></tr></table></figure><ul><li>利用视图对数据进行格式化</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">VIEW</span> emp_depart<br><span class="hljs-keyword">AS</span><br><span class="hljs-keyword">SELECT</span> CONCAT(last_name,<span class="hljs-string">&#x27;(&#x27;</span>,department_name,<span class="hljs-string">&#x27;)&#x27;</span>) <span class="hljs-keyword">AS</span> emp_dept<br><span class="hljs-keyword">FROM</span> employees e <span class="hljs-keyword">JOIN</span> departments d<br><span class="hljs-keyword">WHERE</span> e.department_id <span class="hljs-operator">=</span> d.department_id<br></code></pre></td></tr></table></figure><h3 id="基于视图创建视图"><a href="#基于视图创建视图" class="headerlink" title="基于视图创建视图"></a>基于视图创建视图</h3><p>当我们创建好一张视图之后，还可以在它的基础上继续创建视图。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">VIEW</span> emp_dept_ysalary<br><span class="hljs-keyword">AS</span><br><span class="hljs-keyword">SELECT</span> emp_dept.ename,dname,year_salary<br><span class="hljs-keyword">FROM</span> emp_dept <span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> emp_year_salary<br><span class="hljs-keyword">ON</span> emp_dept.ename <span class="hljs-operator">=</span> emp_year_salary.ename;<br></code></pre></td></tr></table></figure><h2 id="查看视图"><a href="#查看视图" class="headerlink" title="查看视图"></a>查看视图</h2><p>语法1：查看数据库的表对象、视图对象</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SHOW</span> TABLES;<br></code></pre></td></tr></table></figure><p>语法2：查看视图的结构</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DESC</span> <span class="hljs-operator">/</span> <span class="hljs-keyword">DESCRIBE</span> 视图名称;<br></code></pre></td></tr></table></figure><p>语法3：查看视图的属性信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 查看视图信息（显示数据表的存储引擎、版本、数据行数和数据大小等）<br><span class="hljs-keyword">SHOW</span> <span class="hljs-keyword">TABLE</span> STATUS <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;视图名称&#x27;</span>;<br></code></pre></td></tr></table></figure><p>执行结果显示，注释Comment为VIEW，说明该表为视图，其他的信息为NULL，说明这是一个虚表。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">SHOW</span> <span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">VIEW</span> 视图名称;<br></code></pre></td></tr></table></figure><h2 id="更新视图的数据"><a href="#更新视图的数据" class="headerlink" title="更新视图的数据"></a><strong>更新视图的数据</strong></h2><p>MySQL支持使用INSERT、UPDATE和DELETE语句对视图中的数据进行插入、更新和删除操作。当视图中的数据发生变化时，数据表中的数据也会发生变化，反之亦然。</p><p>不可更新的视图：</p><ol><li>在定义视图的时候指定了“ALGORITHM &#x3D; TEMPTABLE”，视图将不支持INSERT和DELETE操作；</li><li>视图中不包含基表中所有被定义为非空又未指定默认值的列，视图将不支持INSERT操作；</li><li>在定义视图的SELECT语句中使用了 JOIN联合查询 ，视图将不支持INSERT和DELETE操作；</li><li>在定义视图的SELECT语句后的字段列表中使用了 数学表达式 或 子查询 ，视图将不支持INSERT，也不支持UPDATE使用了数学表达式、子查询的字段值；</li><li>在定义视图的SELECT语句后的字段列表中使用 DISTINCT 、 聚合函数 、 GROUP BY 、 HAVING 、UNION 等，视图将不支持INSERT、UPDATE、DELETE；</li></ol><h2 id="修改、删除视图"><a href="#修改、删除视图" class="headerlink" title="修改、删除视图"></a>修改、删除视图</h2><p>方式一：</p><p>使用CREATE OR REPLACE VIEW 子句<strong>修改视图</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">OR</span> REPLACE <span class="hljs-keyword">VIEW</span> empvu80<br>(id_number, name, sal, department_id)<br><span class="hljs-keyword">AS</span><br><span class="hljs-keyword">SELECT</span> employee_id, first_name <span class="hljs-operator">||</span> <span class="hljs-string">&#x27; &#x27;</span> <span class="hljs-operator">||</span> last_name, salary, department_id<br><span class="hljs-keyword">FROM</span> employees<br><span class="hljs-keyword">WHERE</span> department_id <span class="hljs-operator">=</span> <span class="hljs-number">80</span>;<br></code></pre></td></tr></table></figure><blockquote><p>说明：CREATE VIEW 子句中各列的别名应和子查询中各列相对应。</p></blockquote><p>方式二：</p><p>ALTER VIEW</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">VIEW</span> 视图名称<br><span class="hljs-keyword">AS</span><br>查询语句<br></code></pre></td></tr></table></figure><p>删除视图的语法</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">VIEW</span> IF <span class="hljs-keyword">EXISTS</span> 视图名称;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Mysql数据库</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>11_增删改查DML</title>
    <link href="/2023/08/25/%E6%95%B0%E6%8D%AE%E5%BA%93MYSQL/11_%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5DML/CRUD/"/>
    <url>/2023/08/25/%E6%95%B0%E6%8D%AE%E5%BA%93MYSQL/11_%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5DML/CRUD/</url>
    
    <content type="html"><![CDATA[<h2 id="INSERT"><a href="#INSERT" class="headerlink" title="INSERT"></a>INSERT</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> emp(emp_id,emp_name)<br><span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1001</span>,<span class="hljs-string">&#x27;shkstart&#x27;</span>),<br><span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span> (<span class="hljs-number">1002</span>,<span class="hljs-string">&#x27;atguigu&#x27;</span>),<br><span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span> (<span class="hljs-number">1003</span>,<span class="hljs-string">&#x27;Tom&#x27;</span>);<br><br><span class="hljs-comment">-- </span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> table_name(column1 [, column2, …, columnn])<br><span class="hljs-keyword">VALUES</span><br>(value1 [value2, …, valuen]),<br>(value1 [value2, …, valuen]),<br>……<br>(value1 [value2, …, valuen]);<br><br><span class="hljs-comment">-- </span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> 目标表名<br>(tar_column1 [, tar_column2, …, tar_columnn])<br><span class="hljs-keyword">SELECT</span><br>(src_column1 [, src_column2, …, src_columnn])<br><span class="hljs-keyword">FROM</span> 源表名<br>[<span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">condition</span>]<br></code></pre></td></tr></table></figure><blockquote><p>INSERT还可以将SELECT语句查询的结果插入到表中，此时不需要把每一条记录的值一个一个输入，只需要使用一条INSERT语句和一条SELECT语句组成的组合语句即可快速地从一个或多个表中向一个表中插入多行。</p></blockquote><ul><li>在 INSERT 语句中加入子查询。</li><li><strong>不必书写VALUES子句。</strong></li><li>子查询中的值列表应与 INSERT 子句中的列名对应。</li></ul><h2 id="UPDATE"><a href="#UPDATE" class="headerlink" title="UPDATE"></a>UPDATE</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">UPDATE</span> table_name<br><span class="hljs-keyword">SET</span> column1<span class="hljs-operator">=</span>value1, column2<span class="hljs-operator">=</span>value2, … , <span class="hljs-keyword">column</span><span class="hljs-operator">=</span>valuen<br>[<span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">condition</span>]<br><br><span class="hljs-keyword">UPDATE</span> employees<br><span class="hljs-keyword">SET</span> department_id <span class="hljs-operator">=</span> <span class="hljs-number">70</span><br><span class="hljs-keyword">WHERE</span> employee_id <span class="hljs-operator">=</span> <span class="hljs-number">113</span>;<br></code></pre></td></tr></table></figure><p>如果省略 WHERE 子句，则表中的所有数据都将被更新。</p><ul><li>可以一次更新<strong>多条</strong>数据。</li><li>如果需要回滚数据，需要保证在DML前，进行设置：<strong>SET AUTOCOMMIT &#x3D; FALSE;</strong></li></ul><h2 id="DELETE"><a href="#DELETE" class="headerlink" title="DELETE"></a>DELETE</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> table_name [<span class="hljs-keyword">WHERE</span> <span class="hljs-operator">&lt;</span><span class="hljs-keyword">condition</span><span class="hljs-operator">&gt;</span>];<br><br><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> departments<br><span class="hljs-keyword">WHERE</span> department_name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;Finance&#x27;</span>;<br><br>## 如果省略 <span class="hljs-keyword">WHERE</span> 子句，则表中的全部数据将被删除<br><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> copy_emp;<br></code></pre></td></tr></table></figure><h2 id="MySQL8新特性：计算列"><a href="#MySQL8新特性：计算列" class="headerlink" title="MySQL8新特性：计算列"></a>MySQL8新特性：计算列</h2><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> tb1(<br>id <span class="hljs-type">INT</span>,<br>a <span class="hljs-type">INT</span>,<br>b <span class="hljs-type">INT</span>,<br>c <span class="hljs-type">INT</span> <span class="hljs-keyword">GENERATED</span> <span class="hljs-keyword">ALWAYS</span> <span class="hljs-keyword">AS</span> (a + b) VIRTUAL<br>);<br></code></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">c <span class="hljs-type">INT</span> <span class="hljs-keyword">GENERATED</span> <span class="hljs-keyword">ALWAYS</span> <span class="hljs-keyword">AS</span> (a + b) VIRTUAL<br></code></pre></td></tr></table></figure><p>为计算列</p>]]></content>
    
    
    <categories>
      
      <category>Mysql数据库</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>16_事务</title>
    <link href="/2023/08/25/%E6%95%B0%E6%8D%AE%E5%BA%93MYSQL/16_%E4%BA%8B%E5%8A%A1/%E4%BA%8B%E5%8A%A1/"/>
    <url>/2023/08/25/%E6%95%B0%E6%8D%AE%E5%BA%93MYSQL/16_%E4%BA%8B%E5%8A%A1/%E4%BA%8B%E5%8A%A1/</url>
    
    <content type="html"><![CDATA[<h1 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li>事务是一种机制，一个操作序列，包含了一组数据库操作命令。</li><li>事务把所有命令作为一个整体一起向系统提交或撤销操作请求，即这组数据库命令要么同时成功，要么同时失败</li><li>事务是不可分割的工作逻辑单元</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-comment">-- 开启事务</span><br><span class="hljs-keyword">START</span> TRANSACTION;<br>或者 <span class="hljs-keyword">BEGIN</span>;<br><span class="hljs-comment">-- 提交事务</span><br><span class="hljs-keyword">COMMIT</span>;<br><span class="hljs-comment">-- 回滚事务</span><br><span class="hljs-keyword">ROLLBACK</span>;<br><br><br>提交事务之前开启事务，就会备份一次事务，事务提交之前所执行的操作一旦回滚，则会回到开启事务之前的状态，事务提交后则开启事务之前的状态消失，无法回滚。<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20230830195142681.png" alt="image-20230830195142681"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 事务开启</span><br><span class="hljs-keyword">BEGIN</span>;## 或者<span class="hljs-keyword">START</span> TRANSACTION<br><span class="hljs-comment">-- 2.MRA金额-500</span><br><span class="hljs-keyword">UPDATE</span> ACCOUNT <span class="hljs-keyword">SET</span> MONEY <span class="hljs-operator">=</span> MONEY <span class="hljs-operator">-</span> <span class="hljs-number">500</span> <span class="hljs-keyword">WHERE</span> NAME <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;MRA&#x27;</span>;<br><span class="hljs-comment">-- 3.MRB金额+500</span><br><span class="hljs-keyword">UPDATE</span> ACCOUNT <span class="hljs-keyword">SET</span> MONEY <span class="hljs-operator">=</span> MONEY <span class="hljs-operator">+</span> <span class="hljs-number">500</span> <span class="hljs-keyword">WHERE</span> NAME <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;MRB&#x27;</span>;<br><span class="hljs-keyword">COMMIT</span>; <br><span class="hljs-keyword">ROLLBACK</span>;<br></code></pre></td></tr></table></figure><h2 id="事务的四大特征"><a href="#事务的四大特征" class="headerlink" title="事务的四大特征"></a>事务的四大特征</h2><ul><li>原子性(Atomicity):事务是不可分割的最小操作单位，要么同时成功，要么同时失败</li><li>一致性(Consistency):事务完成时，必须使所有的数据都保持一致状态</li><li>隔离性(Isolation):多个事务之间，操作的可见性</li><li>持久性(Durability）:事务一旦提交或回滚，它对数据库中的数据的改变就是永久的</li></ul><p>mysql是默认自动提交，而ORACLE默认手动提交</p>]]></content>
    
    
    <categories>
      
      <category>Mysql数据库</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>2_卸载</title>
    <link href="/2023/08/25/%E6%95%B0%E6%8D%AE%E5%BA%93MYSQL/2_%E5%AE%89%E8%A3%85%E5%8D%B8%E8%BD%BD/%E5%AE%89%E8%A3%85%E5%8D%B8%E8%BD%BD/"/>
    <url>/2023/08/25/%E6%95%B0%E6%8D%AE%E5%BA%93MYSQL/2_%E5%AE%89%E8%A3%85%E5%8D%B8%E8%BD%BD/%E5%AE%89%E8%A3%85%E5%8D%B8%E8%BD%BD/</url>
    
    <content type="html"><![CDATA[<h1 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h1><ol><li><ol><li></li></ol><p>cmd 查询当前版本 &#x2F;&#x2F;mysql –version</p></li><li><ol start="2"><li></li></ol><p>登录mysql &#x2F;&#x2F;mysql -u root -p </p></li><li><ol start="3"><li></li></ol><p>文件资源管理器中找到Mysql server</p></li></ol><p>卸载：</p><ol><li><ol><li></li></ol><p>关闭mysql服务</p></li><li><ol start="2"><li></li></ol><p>卸载包卸载或控制面板卸载</p></li></ol><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>链接：<a href="https://share.weiyun.com/yd7OxoMm">https://share.weiyun.com/yd7OxoMm</a> 密码：cg4mvb</p><p><a href="https://dev.mysql.com/downloads/mysql/">MySQL :: Download MySQL Community Server</a></p><p>建议安装msi</p><h1 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h1><h2 id="服务的启动与停止"><a href="#服务的启动与停止" class="headerlink" title="服务的启动与停止"></a>服务的启动与停止</h2><p>MySQL安装完毕之后，需要启动服务器进程，不然客户端无法连接数据库。在前面的配置过程中，已经将MySQL安装为Windows服务，并且勾选当Windows启动、停止时，MySQL也自动启动、停止。</p><p>手动启动指令</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">net start Mysql服务器名称<br>net stop Mysql<br></code></pre></td></tr></table></figure><h2 id="登录-1"><a href="#登录-1" class="headerlink" title="登录"></a>登录</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs text">常规登录<br>mysql -u(username) root -p(password) 123456(建议不在此写) <br>如果需要另外版本的mysql服务需要补充端口号<br>mysql -u(username) root -P(POST) 3307 -p(password)<br>连接其他ip的mysql<br>mysql -u(username) root -P(POST) 3307 -h(host) 192.168.1.12 -p(password)<br></code></pre></td></tr></table></figure><h2 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h2><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tex">show databases;<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20230820183809331.png" alt="image-20230820183809331"></p><p>创建数据库</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tex">create database dbtest;<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20230820183957168.png" alt="image-20230820183957168"></p><p>使用数据库</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">use dbtest<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p><img src="/assets/image-20230820184148149.png" alt="image-20230820184148149"></p><p>创建表</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> employees(id <span class="hljs-type">int</span>,<span class="hljs-type">name</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">15</span>));<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20230820184254114.png" alt="image-20230820184254114"></p><p>添加数据</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> employees <span class="hljs-keyword">values</span>(<span class="hljs-number">1001</span>,<span class="hljs-string">&quot;TOM&quot;</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> employees <span class="hljs-keyword">values</span>(<span class="hljs-number">1002</span>,<span class="hljs-string">&quot;JOY&quot;</span>);<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20230820184409967.png" alt="image-20230820184409967"></p><p>查询所有数据</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> employees;<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20230820184540026.png" alt="image-20230820184540026"></p><p>添加中文数据（8.0+支持中文）</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> employees <span class="hljs-keyword">values</span>(<span class="hljs-number">1003</span>,<span class="hljs-string">&quot;汉拨尼&quot;</span>);<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20230820184739147.png" alt="image-20230820184739147"></p><p>（原因是支持utf-8字符集）</p><p><img src="/assets/image-20230820184851849.png" alt="image-20230820184851849"></p><h2 id="Navicate图形化界面"><a href="#Navicate图形化界面" class="headerlink" title="Navicate图形化界面"></a>Navicate图形化界面</h2><p>太简单不说了</p><p><img src="/assets/image-20230820185529223.png" alt="image-20230820185529223"></p><p><img src="/assets/image-20230820185650030.png" alt="image-20230820185650030"></p><h1 id="安装目录"><a href="#安装目录" class="headerlink" title="安装目录"></a>安装目录</h1><p><img src="/assets/image-20230820185925330.png" alt="image-20230820185925330"></p><p><img src="/assets/image-20230820185840481.png" alt="image-20230820185840481"></p><p>MYSQL主要的开发语言是<strong>C++</strong></p><h1 id="忘记密码"><a href="#忘记密码" class="headerlink" title="忘记密码"></a>忘记密码</h1><p>1:通过任务管理器或者服务管理，关掉mysqld(服务进程)<br>2:通过命令行+特殊参数开启mysqld<br>mysqld–defaults-file&#x3D;”D:\ProgramFiles\mysql\MySQLServer5.7Data\my.ini–skip-grant-tables<br>3:此时，mysqld服务进程已经打开。并且不需要权限检查<br>4:mysql-uroot无密码登陆服务器。另启动一个客户端进行<br>5:修改权限表<br>(1)use mysql;<br>(2)update user set authentication_string&#x3D;password(‘newpassword’) where user&#x3D;’root’and Host&#x3D;’localhost’;<br>(3)flush privileges;<br>6:通过任务管理器，关掉mysqld服务进程。<br>7:再次通过服务管理，打开mysql服务。<br>8:即可用修改后的新密码登陆。</p><h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h1><p><img src="/assets/image-20230820190754564.png" alt="image-20230820190754564"></p><p><img src="/assets/image-20230820190839636.png" alt="image-20230820190839636"></p>]]></content>
    
    
    <categories>
      
      <category>Mysql数据库</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>1_数据库概述</title>
    <link href="/2023/08/25/%E6%95%B0%E6%8D%AE%E5%BA%93MYSQL/1_%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A6%82%E8%BF%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A6%82%E8%BF%B0/"/>
    <url>/2023/08/25/%E6%95%B0%E6%8D%AE%E5%BA%93MYSQL/1_%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A6%82%E8%BF%B0/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A6%82%E8%BF%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="数据库概述"><a href="#数据库概述" class="headerlink" title="数据库概述"></a>数据库概述</h1><p><strong>1.为什么使用数据库</strong></p><ul><li>持久化：将数据保存到可掉电式存储设备中，在硬盘中“固化”数据</li><li>持久化的主要作用：将内存中的数据存储在关系型数据库中</li></ul><p><img src="/assets/image-20230820175721499.png" alt="image-20230820175721499"></p><p><strong>2.数据库与数据库管理系统</strong></p><p><strong>相关概念</strong></p><ul><li>DB:database <strong>数据库</strong>。即存储数据的“仓库”，其本质是一个文件系统。它保存了一系列有组织的数据。</li><li>DBMS:<strong>数据库管理系统</strong>。是一种操纵和管理数据库的大型软件，用于建立、使用和维护数据库，对数据库进行统一管理和控制。用户通过数据库管理系统访问数据库中表内的数据。</li><li>SQL:<strong>结构化查询语言</strong>。用来与数据库通信的语言。</li></ul><p><strong>二者关系</strong></p><p>数据库管理系统(DBMS)可以管理多个数据库，一般开发人员会针对每一个应用创建一个数据库。为保存应用中实体的数据，一般会在数据库创建多个表，以保存程序中实体用户的数据。</p><p><strong>常见DBMS</strong></p><ul><li>MYSQL</li><li>ORACLE</li><li>SQLSERVER</li></ul><p><strong>3.MYSQL介绍</strong></p><p><strong>概述</strong></p><p>MYSQL是一个<strong>开放源代码的关系型数据库管理系统</strong></p><p><strong>版本由5.7—-&gt;8.0</strong></p><p><strong>ORACLE与<strong><strong>MYSQL</strong></strong>的选择</strong></p><p>Oracle更适合大型跨国企业的使用，对性能要求以及安全性有更高的要求。</p><p>MySQL由于其体积小、速度快、总体拥有成本低，可处理上干万条记录的大型数据库，尤其是开放源码这一特点，使得很多互联网公司、中小型网站选择了MySQL作为网站数据库(Facebook,Twitter,YouTube,阿里巴巴&#x2F;蚂蚁金服，去哪儿，美团外卖，腾讯)。</p><p><strong>4.RDBMS与非RDMBS</strong></p><p>使用最多的是RDBMS关系型数据库</p><p><strong>RDBMS</strong></p><p>实质：最古老的数据库类型，<strong>二元关系</strong></p><ul><li>关系型数据库以行列存储数据，这一行列系列组成表TABLE，一组表组成库DATABASE</li><li>表与表之间的数据记录存在关系，关系型数据库就是建立在关系模型基础上的数据库</li><li>SQL是查询语言</li></ul><p>优势</p><ul><li>复杂查询</li><li>事务支持</li></ul><p><strong>非RDBMS(NoSQL)</strong></p><p>实质：RDBMS的阉割版，基于键值对存储数据，性能贼高。通过减少不常用的功能进一步提高性能。</p><p><strong>键值型数据库（如Redis）</strong></p><p><strong>文档型数据库（如MongoDB）…</strong></p><p>NoSQL对SQL做出了很好的补充，比如实际开发中，有很多业务需求，其实并不需要完整的关系型数据库功能非关系型数据库的功能就足够使用了。这种情况下，使用性能更高、成本更低的非关系型数据库当然是更明智的选择。比如：日志收集、排行榜、定时器等。</p><p><strong>5.RDBMS设计规则</strong></p><ul><li>关系型数据库的典型数据结构就是数据表，这些数据表的组成都是结构化的(Structured)。</li><li>将数据放到表中，表再放到库中。</li><li>一个数据库中可以有多个表，每个表都有一个名字，用来标识自己。表名具有唯一性。</li><li>表具有一些特性，这些特性定义了数据在表中如何存储，类似Java和Python中“类”的设计。</li></ul><p><strong>表，记录，字段</strong></p><ul><li>ER模型（entity-relationship，实体-联系）三个主要概念：实体集，属性，联系集</li><li>一个实体集(class)对应于数据库中的一个表(table),一个实体(instance)则对应于数据库表中的一行(row),也称为一条记录(record)。一个属性(attribute)对应于数据库表中的一列(column),也称为一个字段(field)。</li></ul><p>ORM思想 表—java的类 表的数据—类的对象 表的列—类的属性</p><p><strong>表的关联关系</strong></p><p>存在四种</p><ol><li>一对一关联</li><li>一对多关联</li><li>多对多关联</li><li>自我引用</li></ol><p><strong>一对一 one to one</strong></p><p>举例：学生表（学号、姓名、手机号码、班级、系别、身份证号码、家庭住籍贯、紧急联系人…）</p><ul><li><p>拆为两个表</p></li><li><ul><li>基础信息表：学号、姓名、手机号码、班级、系别</li><li>档案信息表：身份证号码、家庭住籍贯、紧急联系人…</li></ul></li><li><p>建表原则</p></li><li><ul><li>外键唯一：主表的主键和从表的外键（唯一），形成主外键关系，外键唯一。</li><li>外键是主键：主表的主键和从表的主键，形成主外键关系。</li></ul></li></ul><p><strong>一对多 one to many</strong></p><p>举例：客户表和订单表，分类表和商品表，部门表和员工表</p><p><strong>多对多 many to many</strong></p><p>创建第三表，即联接表，将多对多划分为两个一对多关系。</p><ul><li>学生信息表：一行代表一个学生的信息（学号、姓名、手机号码、班级、系别…）</li><li>课程信息表：一行代表一个课程的信息（课程编号、授课老师、简介…）</li><li>选课信息表：一个学生可以选多门课，一门课可以被多个学生选择</li></ul><h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h1><p><img src="/assets/image-20230820190615531.png" alt="image-20230820190615531"></p><p><img src="/assets/image-20230820190652783.png" alt="image-20230820190652783"></p>]]></content>
    
    
    <categories>
      
      <category>Mysql数据库</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>6_多表查询</title>
    <link href="/2023/08/25/%E6%95%B0%E6%8D%AE%E5%BA%93MYSQL/6_%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2/%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2/"/>
    <url>/2023/08/25/%E6%95%B0%E6%8D%AE%E5%BA%93MYSQL/6_%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2/%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>多表查询也称为关联查询，它们之间有关联字段，可能之间建立了外键。例如员工表和部门表，之间依靠部门编号进行关联。</p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> employees,departments;   <br>#employees <span class="hljs-number">107</span>LINE     departments <span class="hljs-number">27</span>LINE    employees,departments <span class="hljs-number">2889</span>LINE<br></code></pre></td></tr></table></figure><p>为什么该语句输出有2889条数据呢？</p><blockquote><p>因为每一位员工都与所有的部门匹配，即笛卡尔积（交叉连接）错误。</p></blockquote><p>为什么会出现笛卡尔积错误呢？</p><blockquote><p>因为缺少了多表的连接条件。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 补充连接条件</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> employees,departments<br><span class="hljs-keyword">WHERE</span> employees.department_id <span class="hljs-operator">=</span> departments.department_id;  #<span class="hljs-number">106</span>LINE<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> employee_id,department_name,department_id <span class="hljs-keyword">FROM</span> employees,departments<br><span class="hljs-keyword">WHERE</span> employees.department_id <span class="hljs-operator">=</span> departments.department_id;<br>#报错：<span class="hljs-keyword">Column</span> <span class="hljs-string">&#x27;department_id&#x27;</span> <span class="hljs-keyword">in</span> field list <span class="hljs-keyword">is</span> ambiguous<br>#解释department_id在两个表中都有出现，因此需要表明是哪个表的department_id<br><span class="hljs-keyword">SELECT</span> employee_id,department_name,employees.department_id <span class="hljs-keyword">FROM</span> employees,departments<br><span class="hljs-keyword">WHERE</span> employees.department_id <span class="hljs-operator">=</span> departments.department_id;<br></code></pre></td></tr></table></figure><p>建议多表查询时，每个字段前都指明其所在的表。</p><h2 id="给表起别名"><a href="#给表起别名" class="headerlink" title="给表起别名"></a>给表起别名</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> e.employee_id,d.department_name,e.department_id <span class="hljs-keyword">FROM</span> employees e,departments d<br><span class="hljs-keyword">WHERE</span> e.department_id <span class="hljs-operator">=</span> d.department_id;<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20230822140937346.png" alt="image-20230822140937346"></p><blockquote><p>可以给表起别名，但起名之后必须在SELECT和WHERE中使用表的别名。</p></blockquote><p>查询员工的employee id,last_name,department_name,city</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> E.employee_id,E.last_name,D.department_name,L.city<br><span class="hljs-keyword">FROM</span> employees E,departments D,locations L<br><span class="hljs-keyword">WHERE</span> E.department_id <span class="hljs-operator">=</span> D.department_id<br><span class="hljs-keyword">AND</span> D.location_id <span class="hljs-operator">=</span> L.location_id;<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20230822141634849.png" alt="image-20230822141634849"></p><blockquote><p>如果有n个表实现多表的查询，则至少需要n-1个连接条件</p></blockquote><h2 id="多表查询的分类"><a href="#多表查询的分类" class="headerlink" title="多表查询的分类"></a>多表查询的分类</h2><h3 id="等值连接-vs-非等值连接"><a href="#等值连接-vs-非等值连接" class="headerlink" title="等值连接 vs 非等值连接"></a>等值连接 vs 非等值连接</h3><blockquote><p> 查询格员工的等级</p></blockquote><p><img src="/assets/image-20230822145202125.png" alt="image-20230822145202125"></p><h3 id="自连接-vs-非自连接"><a href="#自连接-vs-非自连接" class="headerlink" title="自连接 vs 非自连接"></a>自连接 vs 非自连接</h3><blockquote><p>查询员工id姓名及其管理者的id姓名</p></blockquote><p><img src="/assets/image-20230822145746659.png" alt="image-20230822145746659"></p><h3 id="内连接-vs-外连接"><a href="#内连接-vs-外连接" class="headerlink" title="内连接 vs 外连接"></a>内连接 vs 外连接</h3><p>内连接 合并具有同一列的两个以上的表的行，结果集中不包含一个表与另一个表不匹配的行</p><p><img src="/assets/image-20230822150711973.png" alt="image-20230822150711973"></p><p>外连接 合并具有同一列的两个以上的表的行，结果集中除了包含一个表与另一个表不匹配的行之外，还查到左表或右表中不匹配的行</p><h4 id="外连接的分类"><a href="#外连接的分类" class="headerlink" title="外连接的分类"></a>外连接的分类</h4><p><img src="/assets/image-20230822155432532.png" alt="image-20230822155432532"></p><h5 id="左外连接"><a href="#左外连接" class="headerlink" title="左外连接"></a>左外连接</h5><p>两个表在连接过程中除了返回满足连接条件的行以外还返回左表中不满足条件的行</p><blockquote><p>查询’’所有的’’员工的last_name,department_name信息</p></blockquote><blockquote><p>SQL99语法中使用JOIN … ON的方式实现多表的查询。这种方式也能解决外连接的问题。MySQL是支持此种方式</p></blockquote><p><img src="/assets/image-20230822153802446.png" alt="image-20230822153802446"></p><h5 id="右外连接"><a href="#右外连接" class="headerlink" title="右外连接"></a>右外连接</h5><p>两个表在连接过程中除了返 回满足连接条件的行以外还返回右表中不满足条件的行</p><p><img src="/assets/image-20230822154844292.png" alt="image-20230822154844292"></p><h5 id="满外连接-MYSQL不支持FULL"><a href="#满外连接-MYSQL不支持FULL" class="headerlink" title="满外连接(MYSQL不支持FULL)"></a>满外连接(MYSQL不支持FULL)</h5><p>UNION ALL</p><p> <a href="%E4%B8%83%E7%A7%8DSQL_JOIN.md">七种SQL_JOIN.md</a> </p><h3 id="SQL99新特性1-NATURAL-JOIN"><a href="#SQL99新特性1-NATURAL-JOIN" class="headerlink" title="SQL99新特性1 NATURAL JOIN"></a>SQL99新特性1 NATURAL JOIN</h3><p>它会帮你白动查询两张连接表中<code>所有相同的字段</code>，然后进行、等值连接</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> E.employee_id,E.manager_id,D.department_name,D.manager_id<br><span class="hljs-keyword">FROM</span> employees E <span class="hljs-keyword">JOIN</span> departments D<br></code></pre></td></tr></table></figure><h4 id="SQL99新特性2-USING"><a href="#SQL99新特性2-USING" class="headerlink" title="SQL99新特性2 USING"></a>SQL99新特性2 USING</h4><p>当我们进行连接的时候，SQL99还支持使用USING指定数据表里的同名字段进行等值连接。但是只能配合JOIN，但不适用于自连接。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> E.employee_id,E.manager_id,D.department_name,D.manager_id<br><span class="hljs-keyword">FROM</span> employees E <span class="hljs-keyword">JOIN</span> departments D<br><span class="hljs-keyword">ON</span> E.department_id <span class="hljs-operator">=</span> D.department_id<br>## 等价<br><span class="hljs-keyword">SELECT</span> E.employee_id,E.manager_id,D.department_name,D.manager_id<br><span class="hljs-keyword">FROM</span> employees E <span class="hljs-keyword">JOIN</span> departments D<br><span class="hljs-keyword">USING</span>(department_id)<br></code></pre></td></tr></table></figure><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>我们要控制连接表的数量。多表连接就相当于嵌套for循环一样，非常消耗资源，会让SQL查询性能下降得很严<br>重，因此不要连接不必要的表。在许多DBMS中，也都会有最大连接表的限制。</p><blockquote><p>【强制】超过三个表禁止join。需要join的字段，数据类型保持绝对一致；多表关联查询时，保证被关联的<br>字段需要有索引。<br>说明：即使双表join也要注意表索引、SQL性能。<br>来源：阿里巴巴《Java开发手册》</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Mysql数据库</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>7_加密和解密函数</title>
    <link href="/2023/08/25/%E6%95%B0%E6%8D%AE%E5%BA%93MYSQL/7_%E5%8D%95%E8%A1%8C%E5%87%BD%E6%95%B0/%E5%8A%A0%E5%AF%86%E4%B8%8E%E8%A7%A3%E5%AF%86%E5%87%BD%E6%95%B0/"/>
    <url>/2023/08/25/%E6%95%B0%E6%8D%AE%E5%BA%93MYSQL/7_%E5%8D%95%E8%A1%8C%E5%87%BD%E6%95%B0/%E5%8A%A0%E5%AF%86%E4%B8%8E%E8%A7%A3%E5%AF%86%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="加密与解密函数"><a href="#加密与解密函数" class="headerlink" title="加密与解密函数"></a>加密与解密函数</h1><p><img src="/assets/image-20230823141711763.png" alt="image-20230823141711763"></p><p>PASSWORD(8.0已弃用)</p><p>MD5,SHA不可逆加密</p><p>ENCODE,DECODE加解密(8.0已弃用)</p>]]></content>
    
    
    <categories>
      
      <category>Mysql数据库</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>3_SQL背景</title>
    <link href="/2023/08/25/%E6%95%B0%E6%8D%AE%E5%BA%93MYSQL/3_%E5%9F%BA%E6%9C%AC%E7%9A%84select%E8%AF%AD%E5%8F%A5/select/"/>
    <url>/2023/08/25/%E6%95%B0%E6%8D%AE%E5%BA%93MYSQL/3_%E5%9F%BA%E6%9C%AC%E7%9A%84select%E8%AF%AD%E5%8F%A5/select/</url>
    
    <content type="html"><![CDATA[<h1 id="SQL背景"><a href="#SQL背景" class="headerlink" title="SQL背景"></a>SQL背景</h1><ul><li>半衰期长</li><li>与数据打交道</li></ul><p><img src="/assets/image-20230820194652718.png" alt="image-20230820194652718"></p><h2 id="SQL分类"><a href="#SQL分类" class="headerlink" title="SQL分类"></a>SQL分类</h2><ol><li>DDL数据定义语言 create \ alter \ drop \ rename \ truncate (data definition languages)</li><li>DML数据操作语言 insert \ delete \ update \ select  (data manipulation languages)</li><li>DCL数据控制语言 commit \ rollback \ savepoint \ grant \ revoke (data control languages)</li><li>DQL 数据查询语言 select （data query languages）</li><li>TCL 事务控制语言 commit \ rollback (transaction control language)</li></ol><h1 id="SQL规则与规范"><a href="#SQL规则与规范" class="headerlink" title="SQL规则与规范"></a>SQL规则与规范</h1><h3 id="基本规则"><a href="#基本规则" class="headerlink" title="基本规则"></a>基本规则</h3><ul><li><p>SQL可一行或者多行</p></li><li><p>每一段语句必须加分号<code>;</code>或者<code>\G</code> <code>\g</code></p></li><li><p>字符串型和日期时间类型的数据可以使用单引号(‘)表示</p></li></ul><h3 id="大小写规范问题"><a href="#大小写规范问题" class="headerlink" title="大小写规范问题"></a>大小写规范问题</h3><ul><li>windows大小写不敏感，但是Linux敏感</li><li>推荐采用统一的书写规范<ul><li>数据库名、表名、表别名、字段名、字段别名等都小写</li><li>SQL关键字、函数名、绑定变量等都大写</li></ul></li></ul><h3 id="命名规则"><a href="#命名规则" class="headerlink" title="命名规则"></a>命名规则</h3><ul><li>数据库、表名不得超过30个字符，变量名限制为29个</li><li>必须只能包含A-Z,a-Z,0-9,_共63个字符</li><li>数据库名、表名、字段名等对象名中间不要包含空格</li><li>同一个MYSQL软件中，数据库不能同名；同一个库中，表不能重名；同一个表中，字段不能重名</li><li>必须保证字段没有私保留字、数据库系统或常用方法冲突。如果坚持使用，请在SQL语句中使用、（着重<br>号)引起来</li><li>保持字段名和类型的一致性，在命名字段并为其指定数据类型的时候一定要保证一致性。假如数据类型在一<br>个表里是整数，那在另一个表里可就别变成字符型了</li></ul><h1 id="导入数据表的数据方式"><a href="#导入数据表的数据方式" class="headerlink" title="导入数据表的数据方式"></a>导入数据表的数据方式</h1><ul><li>source sql文件的全路径名 需要在cmd命令行操作</li><li>基于具体的图形化界面的工具导入数据</li></ul><p> <a href="%22db/atguigudb.sql%22">atguigudb.sql</a> </p><h1 id="基本的SELECT语句"><a href="#基本的SELECT语句" class="headerlink" title="基本的SELECT语句"></a>基本的SELECT语句</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> (?) <span class="hljs-keyword">from</span> (<span class="hljs-keyword">table</span>);<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-number">1</span> <span class="hljs-operator">+</span> <span class="hljs-number">1</span>; <br><span class="hljs-keyword">select</span> <span class="hljs-number">2</span> <span class="hljs-keyword">from</span> dual; dual是伪表<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">table</span>;<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20230821121715577.png" alt="image-20230821121715577"></p><h2 id="列的别名"><a href="#列的别名" class="headerlink" title="列的别名"></a>列的别名</h2><p>关键字<strong>as</strong>，alias</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> id <span class="hljs-keyword">as</span> emp_id <span class="hljs-keyword">from</span> tablename;<br><span class="hljs-keyword">select</span> id <span class="hljs-keyword">as</span> &quot;emp_id&quot; <span class="hljs-keyword">from</span> tablename;<br><span class="hljs-keyword">select</span> id <span class="hljs-keyword">as</span> &quot;employee id&quot; <span class="hljs-keyword">from</span> tablename;<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20230821124355769.png" alt="image-20230821124355769"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> id idas <span class="hljs-keyword">from</span> tablename;<br><span class="hljs-keyword">select</span> id &quot;idas&quot; <span class="hljs-keyword">from</span> tablename;<br><span class="hljs-keyword">select</span> id &quot;employee id&quot; <span class="hljs-keyword">from</span> tablename; # 必须加双引号的情况<br></code></pre></td></tr></table></figure><p>规范：<strong>列的别名可以用双引号就不用单引号</strong></p><p><img src="/assets/image-20230821124213876.png" alt="image-20230821124213876"></p><h2 id="去除重复行"><a href="#去除重复行" class="headerlink" title="去除重复行"></a>去除重复行</h2><p><strong>distinct</strong> 关键字去重</p><p>查询员工表中一共有哪些部门id</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DISTINCT</span> department_id <span class="hljs-keyword">FROM</span> employees;<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20230821130252505.png" alt="image-20230821130252505"></p><p><img src="/assets/image-20230821130717437.png" alt="image-20230821130717437"></p><p><img src="/assets/image-20230821131023650.png" alt="image-20230821131023650"></p><h2 id="空值参与运算"><a href="#空值参与运算" class="headerlink" title="空值参与运算"></a>空值参与运算</h2><p>null不等同于0和‘’ ，‘null’ </p><p><img src="/assets/image-20230821135529313.png" alt="image-20230821135529313"></p><p>空值参与运算结果也是空值</p><p><img src="/assets/image-20230821135717996.png" alt="image-20230821135717996"></p><h2 id="着重号"><a href="#着重号" class="headerlink" title="着重号 &#96;&#96;"></a>着重号 &#96;&#96;</h2><p><img src="/assets/image-20230821140029068.png" alt="image-20230821140029068"></p><p>关键字冲突需要’order’</p><p><img src="/assets/image-20230821140128309.png" alt="image-20230821140128309"></p><h2 id="查询常数"><a href="#查询常数" class="headerlink" title="查询常数"></a>查询常数</h2><p><img src="/assets/image-20230821140422445.png" alt="image-20230821140422445"></p><h2 id="显示表结构"><a href="#显示表结构" class="headerlink" title="显示表结构"></a>显示表结构</h2><p>关键字<code>DESCRIBE</code> <code>DESC</code></p><p>显示表中字段的详细信息</p><p><img src="/assets/image-20230821140602617.png" alt="image-20230821140602617"></p><h2 id="过滤数据"><a href="#过滤数据" class="headerlink" title="过滤数据"></a>过滤数据</h2><p>关键字 <code>WHERE</code></p><p><img src="/assets/image-20230821142946351.png" alt="image-20230821142946351"></p><p><img src="/assets/image-20230821143103480.png" alt="image-20230821143103480"></p><p>atguigudb</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">/*</span><br><span class="hljs-comment">SQLyog Ultimate v12.08 (64 bit)</span><br><span class="hljs-comment">MySQL - 5.7.28-log : Database - atguigudb</span><br><span class="hljs-comment">*********************************************************************</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">/*!40101 SET NAMES utf8 */</span>;<br><br><span class="hljs-comment">/*!40101 SET SQL_MODE=&#x27;&#x27;*/</span>;<br><br><span class="hljs-comment">/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */</span>;<br><span class="hljs-comment">/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */</span>;<br><span class="hljs-comment">/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE=&#x27;NO_AUTO_VALUE_ON_ZERO&#x27; */</span>;<br><span class="hljs-comment">/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */</span>;<br><span class="hljs-keyword">CREATE</span> DATABASE <span class="hljs-comment">/*!32312 IF NOT EXISTS*/</span>`atguigudb` <span class="hljs-comment">/*!40100 DEFAULT CHARACTER SET utf8 */</span>;<br><br>USE `atguigudb`;<br><br><span class="hljs-comment">/*Table structure for table `countries` */</span><br><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> `countries`;<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `countries` (<br>  `country_id` <span class="hljs-type">char</span>(<span class="hljs-number">2</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `country_name` <span class="hljs-type">varchar</span>(<span class="hljs-number">40</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `region_id` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`country_id`),<br>  KEY `countr_reg_fk` (`region_id`),<br>  <span class="hljs-keyword">CONSTRAINT</span> `countr_reg_fk` <span class="hljs-keyword">FOREIGN</span> KEY (`region_id`) <span class="hljs-keyword">REFERENCES</span> `regions` (`region_id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8;<br><br><span class="hljs-comment">/*Data for the table `countries` */</span><br><br><span class="hljs-keyword">insert</span>  <span class="hljs-keyword">into</span> `countries`(`country_id`,`country_name`,`region_id`) <span class="hljs-keyword">values</span> (<span class="hljs-string">&#x27;AR&#x27;</span>,<span class="hljs-string">&#x27;Argentina&#x27;</span>,<span class="hljs-number">2</span>),(<span class="hljs-string">&#x27;AU&#x27;</span>,<span class="hljs-string">&#x27;Australia&#x27;</span>,<span class="hljs-number">3</span>),(<span class="hljs-string">&#x27;BE&#x27;</span>,<span class="hljs-string">&#x27;Belgium&#x27;</span>,<span class="hljs-number">1</span>),(<span class="hljs-string">&#x27;BR&#x27;</span>,<span class="hljs-string">&#x27;Brazil&#x27;</span>,<span class="hljs-number">2</span>),(<span class="hljs-string">&#x27;CA&#x27;</span>,<span class="hljs-string">&#x27;Canada&#x27;</span>,<span class="hljs-number">2</span>),(<span class="hljs-string">&#x27;CH&#x27;</span>,<span class="hljs-string">&#x27;Switzerland&#x27;</span>,<span class="hljs-number">1</span>),(<span class="hljs-string">&#x27;CN&#x27;</span>,<span class="hljs-string">&#x27;China&#x27;</span>,<span class="hljs-number">3</span>),(<span class="hljs-string">&#x27;DE&#x27;</span>,<span class="hljs-string">&#x27;Germany&#x27;</span>,<span class="hljs-number">1</span>),(<span class="hljs-string">&#x27;DK&#x27;</span>,<span class="hljs-string">&#x27;Denmark&#x27;</span>,<span class="hljs-number">1</span>),(<span class="hljs-string">&#x27;EG&#x27;</span>,<span class="hljs-string">&#x27;Egypt&#x27;</span>,<span class="hljs-number">4</span>),(<span class="hljs-string">&#x27;FR&#x27;</span>,<span class="hljs-string">&#x27;France&#x27;</span>,<span class="hljs-number">1</span>),(<span class="hljs-string">&#x27;HK&#x27;</span>,<span class="hljs-string">&#x27;HongKong&#x27;</span>,<span class="hljs-number">3</span>),(<span class="hljs-string">&#x27;IL&#x27;</span>,<span class="hljs-string">&#x27;Israel&#x27;</span>,<span class="hljs-number">4</span>),(<span class="hljs-string">&#x27;IN&#x27;</span>,<span class="hljs-string">&#x27;India&#x27;</span>,<span class="hljs-number">3</span>),(<span class="hljs-string">&#x27;IT&#x27;</span>,<span class="hljs-string">&#x27;Italy&#x27;</span>,<span class="hljs-number">1</span>),(<span class="hljs-string">&#x27;JP&#x27;</span>,<span class="hljs-string">&#x27;Japan&#x27;</span>,<span class="hljs-number">3</span>),(<span class="hljs-string">&#x27;KW&#x27;</span>,<span class="hljs-string">&#x27;Kuwait&#x27;</span>,<span class="hljs-number">4</span>),(<span class="hljs-string">&#x27;MX&#x27;</span>,<span class="hljs-string">&#x27;Mexico&#x27;</span>,<span class="hljs-number">2</span>),(<span class="hljs-string">&#x27;NG&#x27;</span>,<span class="hljs-string">&#x27;Nigeria&#x27;</span>,<span class="hljs-number">4</span>),(<span class="hljs-string">&#x27;NL&#x27;</span>,<span class="hljs-string">&#x27;Netherlands&#x27;</span>,<span class="hljs-number">1</span>),(<span class="hljs-string">&#x27;SG&#x27;</span>,<span class="hljs-string">&#x27;Singapore&#x27;</span>,<span class="hljs-number">3</span>),(<span class="hljs-string">&#x27;UK&#x27;</span>,<span class="hljs-string">&#x27;United Kingdom&#x27;</span>,<span class="hljs-number">1</span>),(<span class="hljs-string">&#x27;US&#x27;</span>,<span class="hljs-string">&#x27;United States of America&#x27;</span>,<span class="hljs-number">2</span>),(<span class="hljs-string">&#x27;ZM&#x27;</span>,<span class="hljs-string">&#x27;Zambia&#x27;</span>,<span class="hljs-number">4</span>),(<span class="hljs-string">&#x27;ZW&#x27;</span>,<span class="hljs-string">&#x27;Zimbabwe&#x27;</span>,<span class="hljs-number">4</span>);<br><br><span class="hljs-comment">/*Table structure for table `departments` */</span><br><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> `departments`;<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `departments` (<br>  `department_id` <span class="hljs-type">int</span>(<span class="hljs-number">4</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span>,<br>  `department_name` <span class="hljs-type">varchar</span>(<span class="hljs-number">30</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `manager_id` <span class="hljs-type">int</span>(<span class="hljs-number">6</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `location_id` <span class="hljs-type">int</span>(<span class="hljs-number">4</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`department_id`),<br>  <span class="hljs-keyword">UNIQUE</span> KEY `dept_id_pk` (`department_id`),<br>  KEY `dept_loc_fk` (`location_id`),<br>  KEY `dept_mgr_fk` (`manager_id`),<br>  <span class="hljs-keyword">CONSTRAINT</span> `dept_loc_fk` <span class="hljs-keyword">FOREIGN</span> KEY (`location_id`) <span class="hljs-keyword">REFERENCES</span> `locations` (`location_id`),<br>  <span class="hljs-keyword">CONSTRAINT</span> `dept_mgr_fk` <span class="hljs-keyword">FOREIGN</span> KEY (`manager_id`) <span class="hljs-keyword">REFERENCES</span> `employees` (`employee_id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8;<br><br><span class="hljs-comment">/*Data for the table `departments` */</span><br><br><span class="hljs-keyword">insert</span>  <span class="hljs-keyword">into</span> `departments`(`department_id`,`department_name`,`manager_id`,`location_id`) <span class="hljs-keyword">values</span> (<span class="hljs-number">10</span>,<span class="hljs-string">&#x27;Administration&#x27;</span>,<span class="hljs-number">200</span>,<span class="hljs-number">1700</span>),(<span class="hljs-number">20</span>,<span class="hljs-string">&#x27;Marketing&#x27;</span>,<span class="hljs-number">201</span>,<span class="hljs-number">1800</span>),(<span class="hljs-number">30</span>,<span class="hljs-string">&#x27;Purchasing&#x27;</span>,<span class="hljs-number">114</span>,<span class="hljs-number">1700</span>),(<span class="hljs-number">40</span>,<span class="hljs-string">&#x27;Human Resources&#x27;</span>,<span class="hljs-number">203</span>,<span class="hljs-number">2400</span>),(<span class="hljs-number">50</span>,<span class="hljs-string">&#x27;Shipping&#x27;</span>,<span class="hljs-number">121</span>,<span class="hljs-number">1500</span>),(<span class="hljs-number">60</span>,<span class="hljs-string">&#x27;IT&#x27;</span>,<span class="hljs-number">103</span>,<span class="hljs-number">1400</span>),(<span class="hljs-number">70</span>,<span class="hljs-string">&#x27;Public Relations&#x27;</span>,<span class="hljs-number">204</span>,<span class="hljs-number">2700</span>),(<span class="hljs-number">80</span>,<span class="hljs-string">&#x27;Sales&#x27;</span>,<span class="hljs-number">145</span>,<span class="hljs-number">2500</span>),(<span class="hljs-number">90</span>,<span class="hljs-string">&#x27;Executive&#x27;</span>,<span class="hljs-number">100</span>,<span class="hljs-number">1700</span>),(<span class="hljs-number">100</span>,<span class="hljs-string">&#x27;Finance&#x27;</span>,<span class="hljs-number">108</span>,<span class="hljs-number">1700</span>),(<span class="hljs-number">110</span>,<span class="hljs-string">&#x27;Accounting&#x27;</span>,<span class="hljs-number">205</span>,<span class="hljs-number">1700</span>),(<span class="hljs-number">120</span>,<span class="hljs-string">&#x27;Treasury&#x27;</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">1700</span>),(<span class="hljs-number">130</span>,<span class="hljs-string">&#x27;Corporate Tax&#x27;</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">1700</span>),(<span class="hljs-number">140</span>,<span class="hljs-string">&#x27;Control And Credit&#x27;</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">1700</span>),(<span class="hljs-number">150</span>,<span class="hljs-string">&#x27;Shareholder Services&#x27;</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">1700</span>),(<span class="hljs-number">160</span>,<span class="hljs-string">&#x27;Benefits&#x27;</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">1700</span>),(<span class="hljs-number">170</span>,<span class="hljs-string">&#x27;Manufacturing&#x27;</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">1700</span>),(<span class="hljs-number">180</span>,<span class="hljs-string">&#x27;Construction&#x27;</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">1700</span>),(<span class="hljs-number">190</span>,<span class="hljs-string">&#x27;Contracting&#x27;</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">1700</span>),(<span class="hljs-number">200</span>,<span class="hljs-string">&#x27;Operations&#x27;</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">1700</span>),(<span class="hljs-number">210</span>,<span class="hljs-string">&#x27;IT Support&#x27;</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">1700</span>),(<span class="hljs-number">220</span>,<span class="hljs-string">&#x27;NOC&#x27;</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">1700</span>),(<span class="hljs-number">230</span>,<span class="hljs-string">&#x27;IT Helpdesk&#x27;</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">1700</span>),(<span class="hljs-number">240</span>,<span class="hljs-string">&#x27;Government Sales&#x27;</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">1700</span>),(<span class="hljs-number">250</span>,<span class="hljs-string">&#x27;Retail Sales&#x27;</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">1700</span>),(<span class="hljs-number">260</span>,<span class="hljs-string">&#x27;Recruiting&#x27;</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">1700</span>),(<span class="hljs-number">270</span>,<span class="hljs-string">&#x27;Payroll&#x27;</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">1700</span>);<br><br><span class="hljs-comment">/*Table structure for table `employees` */</span><br><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> `employees`;<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `employees` (<br>  `employee_id` <span class="hljs-type">int</span>(<span class="hljs-number">6</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span>,<br>  `first_name` <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `last_name` <span class="hljs-type">varchar</span>(<span class="hljs-number">25</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `email` <span class="hljs-type">varchar</span>(<span class="hljs-number">25</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `phone_number` <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `hire_date` <span class="hljs-type">date</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `job_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `salary` <span class="hljs-keyword">double</span>(<span class="hljs-number">8</span>,<span class="hljs-number">2</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `commission_pct` <span class="hljs-keyword">double</span>(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `manager_id` <span class="hljs-type">int</span>(<span class="hljs-number">6</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `department_id` <span class="hljs-type">int</span>(<span class="hljs-number">4</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`employee_id`),<br>  <span class="hljs-keyword">UNIQUE</span> KEY `emp_email_uk` (`email`),<br>  <span class="hljs-keyword">UNIQUE</span> KEY `emp_emp_id_pk` (`employee_id`),<br>  KEY `emp_dept_fk` (`department_id`),<br>  KEY `emp_job_fk` (`job_id`),<br>  KEY `emp_manager_fk` (`manager_id`),<br>  <span class="hljs-keyword">CONSTRAINT</span> `emp_dept_fk` <span class="hljs-keyword">FOREIGN</span> KEY (`department_id`) <span class="hljs-keyword">REFERENCES</span> `departments` (`department_id`),<br>  <span class="hljs-keyword">CONSTRAINT</span> `emp_job_fk` <span class="hljs-keyword">FOREIGN</span> KEY (`job_id`) <span class="hljs-keyword">REFERENCES</span> `jobs` (`job_id`),<br>  <span class="hljs-keyword">CONSTRAINT</span> `emp_manager_fk` <span class="hljs-keyword">FOREIGN</span> KEY (`manager_id`) <span class="hljs-keyword">REFERENCES</span> `employees` (`employee_id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8;<br><br><span class="hljs-comment">/*Data for the table `employees` */</span><br><br><span class="hljs-keyword">insert</span>  <span class="hljs-keyword">into</span> `employees`(`employee_id`,`first_name`,`last_name`,`email`,`phone_number`,`hire_date`,`job_id`,`salary`,`commission_pct`,`manager_id`,`department_id`) <span class="hljs-keyword">values</span> (<span class="hljs-number">100</span>,<span class="hljs-string">&#x27;Steven&#x27;</span>,<span class="hljs-string">&#x27;King&#x27;</span>,<span class="hljs-string">&#x27;SKING&#x27;</span>,<span class="hljs-string">&#x27;515.123.4567&#x27;</span>,<span class="hljs-string">&#x27;1987-06-17&#x27;</span>,<span class="hljs-string">&#x27;AD_PRES&#x27;</span>,<span class="hljs-number">24000.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">90</span>),(<span class="hljs-number">101</span>,<span class="hljs-string">&#x27;Neena&#x27;</span>,<span class="hljs-string">&#x27;Kochhar&#x27;</span>,<span class="hljs-string">&#x27;NKOCHHAR&#x27;</span>,<span class="hljs-string">&#x27;515.123.4568&#x27;</span>,<span class="hljs-string">&#x27;1989-09-21&#x27;</span>,<span class="hljs-string">&#x27;AD_VP&#x27;</span>,<span class="hljs-number">17000.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">100</span>,<span class="hljs-number">90</span>),(<span class="hljs-number">102</span>,<span class="hljs-string">&#x27;Lex&#x27;</span>,<span class="hljs-string">&#x27;De Haan&#x27;</span>,<span class="hljs-string">&#x27;LDEHAAN&#x27;</span>,<span class="hljs-string">&#x27;515.123.4569&#x27;</span>,<span class="hljs-string">&#x27;1993-01-13&#x27;</span>,<span class="hljs-string">&#x27;AD_VP&#x27;</span>,<span class="hljs-number">17000.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">100</span>,<span class="hljs-number">90</span>),(<span class="hljs-number">103</span>,<span class="hljs-string">&#x27;Alexander&#x27;</span>,<span class="hljs-string">&#x27;Hunold&#x27;</span>,<span class="hljs-string">&#x27;AHUNOLD&#x27;</span>,<span class="hljs-string">&#x27;590.423.4567&#x27;</span>,<span class="hljs-string">&#x27;1990-01-03&#x27;</span>,<span class="hljs-string">&#x27;IT_PROG&#x27;</span>,<span class="hljs-number">9000.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">102</span>,<span class="hljs-number">60</span>),(<span class="hljs-number">104</span>,<span class="hljs-string">&#x27;Bruce&#x27;</span>,<span class="hljs-string">&#x27;Ernst&#x27;</span>,<span class="hljs-string">&#x27;BERNST&#x27;</span>,<span class="hljs-string">&#x27;590.423.4568&#x27;</span>,<span class="hljs-string">&#x27;1991-05-21&#x27;</span>,<span class="hljs-string">&#x27;IT_PROG&#x27;</span>,<span class="hljs-number">6000.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">103</span>,<span class="hljs-number">60</span>),(<span class="hljs-number">105</span>,<span class="hljs-string">&#x27;David&#x27;</span>,<span class="hljs-string">&#x27;Austin&#x27;</span>,<span class="hljs-string">&#x27;DAUSTIN&#x27;</span>,<span class="hljs-string">&#x27;590.423.4569&#x27;</span>,<span class="hljs-string">&#x27;1997-06-25&#x27;</span>,<span class="hljs-string">&#x27;IT_PROG&#x27;</span>,<span class="hljs-number">4800.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">103</span>,<span class="hljs-number">60</span>),(<span class="hljs-number">106</span>,<span class="hljs-string">&#x27;Valli&#x27;</span>,<span class="hljs-string">&#x27;Pataballa&#x27;</span>,<span class="hljs-string">&#x27;VPATABAL&#x27;</span>,<span class="hljs-string">&#x27;590.423.4560&#x27;</span>,<span class="hljs-string">&#x27;1998-02-05&#x27;</span>,<span class="hljs-string">&#x27;IT_PROG&#x27;</span>,<span class="hljs-number">4800.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">103</span>,<span class="hljs-number">60</span>),(<span class="hljs-number">107</span>,<span class="hljs-string">&#x27;Diana&#x27;</span>,<span class="hljs-string">&#x27;Lorentz&#x27;</span>,<span class="hljs-string">&#x27;DLORENTZ&#x27;</span>,<span class="hljs-string">&#x27;590.423.5567&#x27;</span>,<span class="hljs-string">&#x27;1999-02-07&#x27;</span>,<span class="hljs-string">&#x27;IT_PROG&#x27;</span>,<span class="hljs-number">4200.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">103</span>,<span class="hljs-number">60</span>),(<span class="hljs-number">108</span>,<span class="hljs-string">&#x27;Nancy&#x27;</span>,<span class="hljs-string">&#x27;Greenberg&#x27;</span>,<span class="hljs-string">&#x27;NGREENBE&#x27;</span>,<span class="hljs-string">&#x27;515.124.4569&#x27;</span>,<span class="hljs-string">&#x27;1994-08-17&#x27;</span>,<span class="hljs-string">&#x27;FI_MGR&#x27;</span>,<span class="hljs-number">12000.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">101</span>,<span class="hljs-number">100</span>),(<span class="hljs-number">109</span>,<span class="hljs-string">&#x27;Daniel&#x27;</span>,<span class="hljs-string">&#x27;Faviet&#x27;</span>,<span class="hljs-string">&#x27;DFAVIET&#x27;</span>,<span class="hljs-string">&#x27;515.124.4169&#x27;</span>,<span class="hljs-string">&#x27;1994-08-16&#x27;</span>,<span class="hljs-string">&#x27;FI_ACCOUNT&#x27;</span>,<span class="hljs-number">9000.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">108</span>,<span class="hljs-number">100</span>),(<span class="hljs-number">110</span>,<span class="hljs-string">&#x27;John&#x27;</span>,<span class="hljs-string">&#x27;Chen&#x27;</span>,<span class="hljs-string">&#x27;JCHEN&#x27;</span>,<span class="hljs-string">&#x27;515.124.4269&#x27;</span>,<span class="hljs-string">&#x27;1997-09-28&#x27;</span>,<span class="hljs-string">&#x27;FI_ACCOUNT&#x27;</span>,<span class="hljs-number">8200.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">108</span>,<span class="hljs-number">100</span>),(<span class="hljs-number">111</span>,<span class="hljs-string">&#x27;Ismael&#x27;</span>,<span class="hljs-string">&#x27;Sciarra&#x27;</span>,<span class="hljs-string">&#x27;ISCIARRA&#x27;</span>,<span class="hljs-string">&#x27;515.124.4369&#x27;</span>,<span class="hljs-string">&#x27;1997-09-30&#x27;</span>,<span class="hljs-string">&#x27;FI_ACCOUNT&#x27;</span>,<span class="hljs-number">7700.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">108</span>,<span class="hljs-number">100</span>),(<span class="hljs-number">112</span>,<span class="hljs-string">&#x27;Jose Manuel&#x27;</span>,<span class="hljs-string">&#x27;Urman&#x27;</span>,<span class="hljs-string">&#x27;JMURMAN&#x27;</span>,<span class="hljs-string">&#x27;515.124.4469&#x27;</span>,<span class="hljs-string">&#x27;1998-03-07&#x27;</span>,<span class="hljs-string">&#x27;FI_ACCOUNT&#x27;</span>,<span class="hljs-number">7800.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">108</span>,<span class="hljs-number">100</span>),(<span class="hljs-number">113</span>,<span class="hljs-string">&#x27;Luis&#x27;</span>,<span class="hljs-string">&#x27;Popp&#x27;</span>,<span class="hljs-string">&#x27;LPOPP&#x27;</span>,<span class="hljs-string">&#x27;515.124.4567&#x27;</span>,<span class="hljs-string">&#x27;1999-12-07&#x27;</span>,<span class="hljs-string">&#x27;FI_ACCOUNT&#x27;</span>,<span class="hljs-number">6900.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">108</span>,<span class="hljs-number">100</span>),(<span class="hljs-number">114</span>,<span class="hljs-string">&#x27;Den&#x27;</span>,<span class="hljs-string">&#x27;Raphaely&#x27;</span>,<span class="hljs-string">&#x27;DRAPHEAL&#x27;</span>,<span class="hljs-string">&#x27;515.127.4561&#x27;</span>,<span class="hljs-string">&#x27;1994-12-07&#x27;</span>,<span class="hljs-string">&#x27;PU_MAN&#x27;</span>,<span class="hljs-number">11000.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">100</span>,<span class="hljs-number">30</span>),(<span class="hljs-number">115</span>,<span class="hljs-string">&#x27;Alexander&#x27;</span>,<span class="hljs-string">&#x27;Khoo&#x27;</span>,<span class="hljs-string">&#x27;AKHOO&#x27;</span>,<span class="hljs-string">&#x27;515.127.4562&#x27;</span>,<span class="hljs-string">&#x27;1995-05-18&#x27;</span>,<span class="hljs-string">&#x27;PU_CLERK&#x27;</span>,<span class="hljs-number">3100.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">114</span>,<span class="hljs-number">30</span>),(<span class="hljs-number">116</span>,<span class="hljs-string">&#x27;Shelli&#x27;</span>,<span class="hljs-string">&#x27;Baida&#x27;</span>,<span class="hljs-string">&#x27;SBAIDA&#x27;</span>,<span class="hljs-string">&#x27;515.127.4563&#x27;</span>,<span class="hljs-string">&#x27;1997-12-24&#x27;</span>,<span class="hljs-string">&#x27;PU_CLERK&#x27;</span>,<span class="hljs-number">2900.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">114</span>,<span class="hljs-number">30</span>),(<span class="hljs-number">117</span>,<span class="hljs-string">&#x27;Sigal&#x27;</span>,<span class="hljs-string">&#x27;Tobias&#x27;</span>,<span class="hljs-string">&#x27;STOBIAS&#x27;</span>,<span class="hljs-string">&#x27;515.127.4564&#x27;</span>,<span class="hljs-string">&#x27;1997-07-24&#x27;</span>,<span class="hljs-string">&#x27;PU_CLERK&#x27;</span>,<span class="hljs-number">2800.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">114</span>,<span class="hljs-number">30</span>),(<span class="hljs-number">118</span>,<span class="hljs-string">&#x27;Guy&#x27;</span>,<span class="hljs-string">&#x27;Himuro&#x27;</span>,<span class="hljs-string">&#x27;GHIMURO&#x27;</span>,<span class="hljs-string">&#x27;515.127.4565&#x27;</span>,<span class="hljs-string">&#x27;1998-11-15&#x27;</span>,<span class="hljs-string">&#x27;PU_CLERK&#x27;</span>,<span class="hljs-number">2600.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">114</span>,<span class="hljs-number">30</span>),(<span class="hljs-number">119</span>,<span class="hljs-string">&#x27;Karen&#x27;</span>,<span class="hljs-string">&#x27;Colmenares&#x27;</span>,<span class="hljs-string">&#x27;KCOLMENA&#x27;</span>,<span class="hljs-string">&#x27;515.127.4566&#x27;</span>,<span class="hljs-string">&#x27;1999-08-10&#x27;</span>,<span class="hljs-string">&#x27;PU_CLERK&#x27;</span>,<span class="hljs-number">2500.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">114</span>,<span class="hljs-number">30</span>),(<span class="hljs-number">120</span>,<span class="hljs-string">&#x27;Matthew&#x27;</span>,<span class="hljs-string">&#x27;Weiss&#x27;</span>,<span class="hljs-string">&#x27;MWEISS&#x27;</span>,<span class="hljs-string">&#x27;650.123.1234&#x27;</span>,<span class="hljs-string">&#x27;1996-07-18&#x27;</span>,<span class="hljs-string">&#x27;ST_MAN&#x27;</span>,<span class="hljs-number">8000.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">100</span>,<span class="hljs-number">50</span>),(<span class="hljs-number">121</span>,<span class="hljs-string">&#x27;Adam&#x27;</span>,<span class="hljs-string">&#x27;Fripp&#x27;</span>,<span class="hljs-string">&#x27;AFRIPP&#x27;</span>,<span class="hljs-string">&#x27;650.123.2234&#x27;</span>,<span class="hljs-string">&#x27;1997-04-10&#x27;</span>,<span class="hljs-string">&#x27;ST_MAN&#x27;</span>,<span class="hljs-number">8200.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">100</span>,<span class="hljs-number">50</span>),(<span class="hljs-number">122</span>,<span class="hljs-string">&#x27;Payam&#x27;</span>,<span class="hljs-string">&#x27;Kaufling&#x27;</span>,<span class="hljs-string">&#x27;PKAUFLIN&#x27;</span>,<span class="hljs-string">&#x27;650.123.3234&#x27;</span>,<span class="hljs-string">&#x27;1995-05-01&#x27;</span>,<span class="hljs-string">&#x27;ST_MAN&#x27;</span>,<span class="hljs-number">7900.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">100</span>,<span class="hljs-number">50</span>),(<span class="hljs-number">123</span>,<span class="hljs-string">&#x27;Shanta&#x27;</span>,<span class="hljs-string">&#x27;Vollman&#x27;</span>,<span class="hljs-string">&#x27;SVOLLMAN&#x27;</span>,<span class="hljs-string">&#x27;650.123.4234&#x27;</span>,<span class="hljs-string">&#x27;1997-10-10&#x27;</span>,<span class="hljs-string">&#x27;ST_MAN&#x27;</span>,<span class="hljs-number">6500.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">100</span>,<span class="hljs-number">50</span>),(<span class="hljs-number">124</span>,<span class="hljs-string">&#x27;Kevin&#x27;</span>,<span class="hljs-string">&#x27;Mourgos&#x27;</span>,<span class="hljs-string">&#x27;KMOURGOS&#x27;</span>,<span class="hljs-string">&#x27;650.123.5234&#x27;</span>,<span class="hljs-string">&#x27;1999-11-16&#x27;</span>,<span class="hljs-string">&#x27;ST_MAN&#x27;</span>,<span class="hljs-number">5800.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">100</span>,<span class="hljs-number">50</span>),(<span class="hljs-number">125</span>,<span class="hljs-string">&#x27;Julia&#x27;</span>,<span class="hljs-string">&#x27;Nayer&#x27;</span>,<span class="hljs-string">&#x27;JNAYER&#x27;</span>,<span class="hljs-string">&#x27;650.124.1214&#x27;</span>,<span class="hljs-string">&#x27;1997-07-16&#x27;</span>,<span class="hljs-string">&#x27;ST_CLERK&#x27;</span>,<span class="hljs-number">3200.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">120</span>,<span class="hljs-number">50</span>),(<span class="hljs-number">126</span>,<span class="hljs-string">&#x27;Irene&#x27;</span>,<span class="hljs-string">&#x27;Mikkilineni&#x27;</span>,<span class="hljs-string">&#x27;IMIKKILI&#x27;</span>,<span class="hljs-string">&#x27;650.124.1224&#x27;</span>,<span class="hljs-string">&#x27;1998-09-28&#x27;</span>,<span class="hljs-string">&#x27;ST_CLERK&#x27;</span>,<span class="hljs-number">2700.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">120</span>,<span class="hljs-number">50</span>),(<span class="hljs-number">127</span>,<span class="hljs-string">&#x27;James&#x27;</span>,<span class="hljs-string">&#x27;Landry&#x27;</span>,<span class="hljs-string">&#x27;JLANDRY&#x27;</span>,<span class="hljs-string">&#x27;650.124.1334&#x27;</span>,<span class="hljs-string">&#x27;1999-01-14&#x27;</span>,<span class="hljs-string">&#x27;ST_CLERK&#x27;</span>,<span class="hljs-number">2400.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">120</span>,<span class="hljs-number">50</span>),(<span class="hljs-number">128</span>,<span class="hljs-string">&#x27;Steven&#x27;</span>,<span class="hljs-string">&#x27;Markle&#x27;</span>,<span class="hljs-string">&#x27;SMARKLE&#x27;</span>,<span class="hljs-string">&#x27;650.124.1434&#x27;</span>,<span class="hljs-string">&#x27;2000-03-08&#x27;</span>,<span class="hljs-string">&#x27;ST_CLERK&#x27;</span>,<span class="hljs-number">2200.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">120</span>,<span class="hljs-number">50</span>),(<span class="hljs-number">129</span>,<span class="hljs-string">&#x27;Laura&#x27;</span>,<span class="hljs-string">&#x27;Bissot&#x27;</span>,<span class="hljs-string">&#x27;LBISSOT&#x27;</span>,<span class="hljs-string">&#x27;650.124.5234&#x27;</span>,<span class="hljs-string">&#x27;1997-08-20&#x27;</span>,<span class="hljs-string">&#x27;ST_CLERK&#x27;</span>,<span class="hljs-number">3300.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">121</span>,<span class="hljs-number">50</span>),(<span class="hljs-number">130</span>,<span class="hljs-string">&#x27;Mozhe&#x27;</span>,<span class="hljs-string">&#x27;Atkinson&#x27;</span>,<span class="hljs-string">&#x27;MATKINSO&#x27;</span>,<span class="hljs-string">&#x27;650.124.6234&#x27;</span>,<span class="hljs-string">&#x27;1997-10-30&#x27;</span>,<span class="hljs-string">&#x27;ST_CLERK&#x27;</span>,<span class="hljs-number">2800.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">121</span>,<span class="hljs-number">50</span>),(<span class="hljs-number">131</span>,<span class="hljs-string">&#x27;James&#x27;</span>,<span class="hljs-string">&#x27;Marlow&#x27;</span>,<span class="hljs-string">&#x27;JAMRLOW&#x27;</span>,<span class="hljs-string">&#x27;650.124.7234&#x27;</span>,<span class="hljs-string">&#x27;1997-02-16&#x27;</span>,<span class="hljs-string">&#x27;ST_CLERK&#x27;</span>,<span class="hljs-number">2500.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">121</span>,<span class="hljs-number">50</span>),(<span class="hljs-number">132</span>,<span class="hljs-string">&#x27;TJ&#x27;</span>,<span class="hljs-string">&#x27;Olson&#x27;</span>,<span class="hljs-string">&#x27;TJOLSON&#x27;</span>,<span class="hljs-string">&#x27;650.124.8234&#x27;</span>,<span class="hljs-string">&#x27;1999-04-10&#x27;</span>,<span class="hljs-string">&#x27;ST_CLERK&#x27;</span>,<span class="hljs-number">2100.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">121</span>,<span class="hljs-number">50</span>),(<span class="hljs-number">133</span>,<span class="hljs-string">&#x27;Jason&#x27;</span>,<span class="hljs-string">&#x27;Mallin&#x27;</span>,<span class="hljs-string">&#x27;JMALLIN&#x27;</span>,<span class="hljs-string">&#x27;650.127.1934&#x27;</span>,<span class="hljs-string">&#x27;1996-06-14&#x27;</span>,<span class="hljs-string">&#x27;ST_CLERK&#x27;</span>,<span class="hljs-number">3300.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">122</span>,<span class="hljs-number">50</span>),(<span class="hljs-number">134</span>,<span class="hljs-string">&#x27;Michael&#x27;</span>,<span class="hljs-string">&#x27;Rogers&#x27;</span>,<span class="hljs-string">&#x27;MROGERS&#x27;</span>,<span class="hljs-string">&#x27;650.127.1834&#x27;</span>,<span class="hljs-string">&#x27;1998-08-26&#x27;</span>,<span class="hljs-string">&#x27;ST_CLERK&#x27;</span>,<span class="hljs-number">2900.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">122</span>,<span class="hljs-number">50</span>),(<span class="hljs-number">135</span>,<span class="hljs-string">&#x27;Ki&#x27;</span>,<span class="hljs-string">&#x27;Gee&#x27;</span>,<span class="hljs-string">&#x27;KGEE&#x27;</span>,<span class="hljs-string">&#x27;650.127.1734&#x27;</span>,<span class="hljs-string">&#x27;1999-12-12&#x27;</span>,<span class="hljs-string">&#x27;ST_CLERK&#x27;</span>,<span class="hljs-number">2400.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">122</span>,<span class="hljs-number">50</span>),(<span class="hljs-number">136</span>,<span class="hljs-string">&#x27;Hazel&#x27;</span>,<span class="hljs-string">&#x27;Philtanker&#x27;</span>,<span class="hljs-string">&#x27;HPHILTAN&#x27;</span>,<span class="hljs-string">&#x27;650.127.1634&#x27;</span>,<span class="hljs-string">&#x27;2000-02-06&#x27;</span>,<span class="hljs-string">&#x27;ST_CLERK&#x27;</span>,<span class="hljs-number">2200.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">122</span>,<span class="hljs-number">50</span>),(<span class="hljs-number">137</span>,<span class="hljs-string">&#x27;Renske&#x27;</span>,<span class="hljs-string">&#x27;Ladwig&#x27;</span>,<span class="hljs-string">&#x27;RLADWIG&#x27;</span>,<span class="hljs-string">&#x27;650.121.1234&#x27;</span>,<span class="hljs-string">&#x27;1995-07-14&#x27;</span>,<span class="hljs-string">&#x27;ST_CLERK&#x27;</span>,<span class="hljs-number">3600.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">123</span>,<span class="hljs-number">50</span>),(<span class="hljs-number">138</span>,<span class="hljs-string">&#x27;Stephen&#x27;</span>,<span class="hljs-string">&#x27;Stiles&#x27;</span>,<span class="hljs-string">&#x27;SSTILES&#x27;</span>,<span class="hljs-string">&#x27;650.121.2034&#x27;</span>,<span class="hljs-string">&#x27;1997-10-26&#x27;</span>,<span class="hljs-string">&#x27;ST_CLERK&#x27;</span>,<span class="hljs-number">3200.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">123</span>,<span class="hljs-number">50</span>),(<span class="hljs-number">139</span>,<span class="hljs-string">&#x27;John&#x27;</span>,<span class="hljs-string">&#x27;Seo&#x27;</span>,<span class="hljs-string">&#x27;JSEO&#x27;</span>,<span class="hljs-string">&#x27;650.121.2019&#x27;</span>,<span class="hljs-string">&#x27;1998-02-12&#x27;</span>,<span class="hljs-string">&#x27;ST_CLERK&#x27;</span>,<span class="hljs-number">2700.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">123</span>,<span class="hljs-number">50</span>),(<span class="hljs-number">140</span>,<span class="hljs-string">&#x27;Joshua&#x27;</span>,<span class="hljs-string">&#x27;Patel&#x27;</span>,<span class="hljs-string">&#x27;JPATEL&#x27;</span>,<span class="hljs-string">&#x27;650.121.1834&#x27;</span>,<span class="hljs-string">&#x27;1998-04-06&#x27;</span>,<span class="hljs-string">&#x27;ST_CLERK&#x27;</span>,<span class="hljs-number">2500.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">123</span>,<span class="hljs-number">50</span>),(<span class="hljs-number">141</span>,<span class="hljs-string">&#x27;Trenna&#x27;</span>,<span class="hljs-string">&#x27;Rajs&#x27;</span>,<span class="hljs-string">&#x27;TRAJS&#x27;</span>,<span class="hljs-string">&#x27;650.121.8009&#x27;</span>,<span class="hljs-string">&#x27;1995-10-17&#x27;</span>,<span class="hljs-string">&#x27;ST_CLERK&#x27;</span>,<span class="hljs-number">3500.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">124</span>,<span class="hljs-number">50</span>),(<span class="hljs-number">142</span>,<span class="hljs-string">&#x27;Curtis&#x27;</span>,<span class="hljs-string">&#x27;Davies&#x27;</span>,<span class="hljs-string">&#x27;CDAVIES&#x27;</span>,<span class="hljs-string">&#x27;650.121.2994&#x27;</span>,<span class="hljs-string">&#x27;1997-01-29&#x27;</span>,<span class="hljs-string">&#x27;ST_CLERK&#x27;</span>,<span class="hljs-number">3100.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">124</span>,<span class="hljs-number">50</span>),(<span class="hljs-number">143</span>,<span class="hljs-string">&#x27;Randall&#x27;</span>,<span class="hljs-string">&#x27;Matos&#x27;</span>,<span class="hljs-string">&#x27;RMATOS&#x27;</span>,<span class="hljs-string">&#x27;650.121.2874&#x27;</span>,<span class="hljs-string">&#x27;1998-03-15&#x27;</span>,<span class="hljs-string">&#x27;ST_CLERK&#x27;</span>,<span class="hljs-number">2600.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">124</span>,<span class="hljs-number">50</span>),(<span class="hljs-number">144</span>,<span class="hljs-string">&#x27;Peter&#x27;</span>,<span class="hljs-string">&#x27;Vargas&#x27;</span>,<span class="hljs-string">&#x27;PVARGAS&#x27;</span>,<span class="hljs-string">&#x27;650.121.2004&#x27;</span>,<span class="hljs-string">&#x27;1998-07-09&#x27;</span>,<span class="hljs-string">&#x27;ST_CLERK&#x27;</span>,<span class="hljs-number">2500.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">124</span>,<span class="hljs-number">50</span>),(<span class="hljs-number">145</span>,<span class="hljs-string">&#x27;John&#x27;</span>,<span class="hljs-string">&#x27;Russell&#x27;</span>,<span class="hljs-string">&#x27;JRUSSEL&#x27;</span>,<span class="hljs-string">&#x27;011.44.1344.429268&#x27;</span>,<span class="hljs-string">&#x27;1996-10-01&#x27;</span>,<span class="hljs-string">&#x27;SA_MAN&#x27;</span>,<span class="hljs-number">14000.00</span>,<span class="hljs-number">0.40</span>,<span class="hljs-number">100</span>,<span class="hljs-number">80</span>),(<span class="hljs-number">146</span>,<span class="hljs-string">&#x27;Karen&#x27;</span>,<span class="hljs-string">&#x27;Partners&#x27;</span>,<span class="hljs-string">&#x27;KPARTNER&#x27;</span>,<span class="hljs-string">&#x27;011.44.1344.467268&#x27;</span>,<span class="hljs-string">&#x27;1997-01-05&#x27;</span>,<span class="hljs-string">&#x27;SA_MAN&#x27;</span>,<span class="hljs-number">13500.00</span>,<span class="hljs-number">0.30</span>,<span class="hljs-number">100</span>,<span class="hljs-number">80</span>),(<span class="hljs-number">147</span>,<span class="hljs-string">&#x27;Alberto&#x27;</span>,<span class="hljs-string">&#x27;Errazuriz&#x27;</span>,<span class="hljs-string">&#x27;AERRAZUR&#x27;</span>,<span class="hljs-string">&#x27;011.44.1344.429278&#x27;</span>,<span class="hljs-string">&#x27;1997-03-10&#x27;</span>,<span class="hljs-string">&#x27;SA_MAN&#x27;</span>,<span class="hljs-number">12000.00</span>,<span class="hljs-number">0.30</span>,<span class="hljs-number">100</span>,<span class="hljs-number">80</span>),(<span class="hljs-number">148</span>,<span class="hljs-string">&#x27;Gerald&#x27;</span>,<span class="hljs-string">&#x27;Cambrault&#x27;</span>,<span class="hljs-string">&#x27;GCAMBRAU&#x27;</span>,<span class="hljs-string">&#x27;011.44.1344.619268&#x27;</span>,<span class="hljs-string">&#x27;1999-10-15&#x27;</span>,<span class="hljs-string">&#x27;SA_MAN&#x27;</span>,<span class="hljs-number">11000.00</span>,<span class="hljs-number">0.30</span>,<span class="hljs-number">100</span>,<span class="hljs-number">80</span>),(<span class="hljs-number">149</span>,<span class="hljs-string">&#x27;Eleni&#x27;</span>,<span class="hljs-string">&#x27;Zlotkey&#x27;</span>,<span class="hljs-string">&#x27;EZLOTKEY&#x27;</span>,<span class="hljs-string">&#x27;011.44.1344.429018&#x27;</span>,<span class="hljs-string">&#x27;2000-01-29&#x27;</span>,<span class="hljs-string">&#x27;SA_MAN&#x27;</span>,<span class="hljs-number">10500.00</span>,<span class="hljs-number">0.20</span>,<span class="hljs-number">100</span>,<span class="hljs-number">80</span>),(<span class="hljs-number">150</span>,<span class="hljs-string">&#x27;Peter&#x27;</span>,<span class="hljs-string">&#x27;Tucker&#x27;</span>,<span class="hljs-string">&#x27;PTUCKER&#x27;</span>,<span class="hljs-string">&#x27;011.44.1344.129268&#x27;</span>,<span class="hljs-string">&#x27;1997-01-30&#x27;</span>,<span class="hljs-string">&#x27;SA_REP&#x27;</span>,<span class="hljs-number">10000.00</span>,<span class="hljs-number">0.30</span>,<span class="hljs-number">145</span>,<span class="hljs-number">80</span>),(<span class="hljs-number">151</span>,<span class="hljs-string">&#x27;David&#x27;</span>,<span class="hljs-string">&#x27;Bernstein&#x27;</span>,<span class="hljs-string">&#x27;DBERNSTE&#x27;</span>,<span class="hljs-string">&#x27;011.44.1344.345268&#x27;</span>,<span class="hljs-string">&#x27;1997-03-24&#x27;</span>,<span class="hljs-string">&#x27;SA_REP&#x27;</span>,<span class="hljs-number">9500.00</span>,<span class="hljs-number">0.25</span>,<span class="hljs-number">145</span>,<span class="hljs-number">80</span>),(<span class="hljs-number">152</span>,<span class="hljs-string">&#x27;Peter&#x27;</span>,<span class="hljs-string">&#x27;Hall&#x27;</span>,<span class="hljs-string">&#x27;PHALL&#x27;</span>,<span class="hljs-string">&#x27;011.44.1344.478968&#x27;</span>,<span class="hljs-string">&#x27;1997-08-20&#x27;</span>,<span class="hljs-string">&#x27;SA_REP&#x27;</span>,<span class="hljs-number">9000.00</span>,<span class="hljs-number">0.25</span>,<span class="hljs-number">145</span>,<span class="hljs-number">80</span>),(<span class="hljs-number">153</span>,<span class="hljs-string">&#x27;Christopher&#x27;</span>,<span class="hljs-string">&#x27;Olsen&#x27;</span>,<span class="hljs-string">&#x27;COLSEN&#x27;</span>,<span class="hljs-string">&#x27;011.44.1344.498718&#x27;</span>,<span class="hljs-string">&#x27;1998-03-30&#x27;</span>,<span class="hljs-string">&#x27;SA_REP&#x27;</span>,<span class="hljs-number">8000.00</span>,<span class="hljs-number">0.20</span>,<span class="hljs-number">145</span>,<span class="hljs-number">80</span>),(<span class="hljs-number">154</span>,<span class="hljs-string">&#x27;Nanette&#x27;</span>,<span class="hljs-string">&#x27;Cambrault&#x27;</span>,<span class="hljs-string">&#x27;NCAMBRAU&#x27;</span>,<span class="hljs-string">&#x27;011.44.1344.987668&#x27;</span>,<span class="hljs-string">&#x27;1998-12-09&#x27;</span>,<span class="hljs-string">&#x27;SA_REP&#x27;</span>,<span class="hljs-number">7500.00</span>,<span class="hljs-number">0.20</span>,<span class="hljs-number">145</span>,<span class="hljs-number">80</span>),(<span class="hljs-number">155</span>,<span class="hljs-string">&#x27;Oliver&#x27;</span>,<span class="hljs-string">&#x27;Tuvault&#x27;</span>,<span class="hljs-string">&#x27;OTUVAULT&#x27;</span>,<span class="hljs-string">&#x27;011.44.1344.486508&#x27;</span>,<span class="hljs-string">&#x27;1999-11-23&#x27;</span>,<span class="hljs-string">&#x27;SA_REP&#x27;</span>,<span class="hljs-number">7000.00</span>,<span class="hljs-number">0.15</span>,<span class="hljs-number">145</span>,<span class="hljs-number">80</span>),(<span class="hljs-number">156</span>,<span class="hljs-string">&#x27;Janette&#x27;</span>,<span class="hljs-string">&#x27;King&#x27;</span>,<span class="hljs-string">&#x27;JKING&#x27;</span>,<span class="hljs-string">&#x27;011.44.1345.429268&#x27;</span>,<span class="hljs-string">&#x27;1996-01-30&#x27;</span>,<span class="hljs-string">&#x27;SA_REP&#x27;</span>,<span class="hljs-number">10000.00</span>,<span class="hljs-number">0.35</span>,<span class="hljs-number">146</span>,<span class="hljs-number">80</span>),(<span class="hljs-number">157</span>,<span class="hljs-string">&#x27;Patrick&#x27;</span>,<span class="hljs-string">&#x27;Sully&#x27;</span>,<span class="hljs-string">&#x27;PSULLY&#x27;</span>,<span class="hljs-string">&#x27;011.44.1345.929268&#x27;</span>,<span class="hljs-string">&#x27;1996-03-04&#x27;</span>,<span class="hljs-string">&#x27;SA_REP&#x27;</span>,<span class="hljs-number">9500.00</span>,<span class="hljs-number">0.35</span>,<span class="hljs-number">146</span>,<span class="hljs-number">80</span>),(<span class="hljs-number">158</span>,<span class="hljs-string">&#x27;Allan&#x27;</span>,<span class="hljs-string">&#x27;McEwen&#x27;</span>,<span class="hljs-string">&#x27;AMCEWEN&#x27;</span>,<span class="hljs-string">&#x27;011.44.1345.829268&#x27;</span>,<span class="hljs-string">&#x27;1996-08-01&#x27;</span>,<span class="hljs-string">&#x27;SA_REP&#x27;</span>,<span class="hljs-number">9000.00</span>,<span class="hljs-number">0.35</span>,<span class="hljs-number">146</span>,<span class="hljs-number">80</span>),(<span class="hljs-number">159</span>,<span class="hljs-string">&#x27;Lindsey&#x27;</span>,<span class="hljs-string">&#x27;Smith&#x27;</span>,<span class="hljs-string">&#x27;LSMITH&#x27;</span>,<span class="hljs-string">&#x27;011.44.1345.729268&#x27;</span>,<span class="hljs-string">&#x27;1997-03-10&#x27;</span>,<span class="hljs-string">&#x27;SA_REP&#x27;</span>,<span class="hljs-number">8000.00</span>,<span class="hljs-number">0.30</span>,<span class="hljs-number">146</span>,<span class="hljs-number">80</span>),(<span class="hljs-number">160</span>,<span class="hljs-string">&#x27;Louise&#x27;</span>,<span class="hljs-string">&#x27;Doran&#x27;</span>,<span class="hljs-string">&#x27;LDORAN&#x27;</span>,<span class="hljs-string">&#x27;011.44.1345.629268&#x27;</span>,<span class="hljs-string">&#x27;1997-12-15&#x27;</span>,<span class="hljs-string">&#x27;SA_REP&#x27;</span>,<span class="hljs-number">7500.00</span>,<span class="hljs-number">0.30</span>,<span class="hljs-number">146</span>,<span class="hljs-number">80</span>),(<span class="hljs-number">161</span>,<span class="hljs-string">&#x27;Sarath&#x27;</span>,<span class="hljs-string">&#x27;Sewall&#x27;</span>,<span class="hljs-string">&#x27;SSEWALL&#x27;</span>,<span class="hljs-string">&#x27;011.44.1345.529268&#x27;</span>,<span class="hljs-string">&#x27;1998-11-03&#x27;</span>,<span class="hljs-string">&#x27;SA_REP&#x27;</span>,<span class="hljs-number">7000.00</span>,<span class="hljs-number">0.25</span>,<span class="hljs-number">146</span>,<span class="hljs-number">80</span>),(<span class="hljs-number">162</span>,<span class="hljs-string">&#x27;Clara&#x27;</span>,<span class="hljs-string">&#x27;Vishney&#x27;</span>,<span class="hljs-string">&#x27;CVISHNEY&#x27;</span>,<span class="hljs-string">&#x27;011.44.1346.129268&#x27;</span>,<span class="hljs-string">&#x27;1997-11-11&#x27;</span>,<span class="hljs-string">&#x27;SA_REP&#x27;</span>,<span class="hljs-number">10500.00</span>,<span class="hljs-number">0.25</span>,<span class="hljs-number">147</span>,<span class="hljs-number">80</span>),(<span class="hljs-number">163</span>,<span class="hljs-string">&#x27;Danielle&#x27;</span>,<span class="hljs-string">&#x27;Greene&#x27;</span>,<span class="hljs-string">&#x27;DGREENE&#x27;</span>,<span class="hljs-string">&#x27;011.44.1346.229268&#x27;</span>,<span class="hljs-string">&#x27;1999-03-19&#x27;</span>,<span class="hljs-string">&#x27;SA_REP&#x27;</span>,<span class="hljs-number">9500.00</span>,<span class="hljs-number">0.15</span>,<span class="hljs-number">147</span>,<span class="hljs-number">80</span>),(<span class="hljs-number">164</span>,<span class="hljs-string">&#x27;Mattea&#x27;</span>,<span class="hljs-string">&#x27;Marvins&#x27;</span>,<span class="hljs-string">&#x27;MMARVINS&#x27;</span>,<span class="hljs-string">&#x27;011.44.1346.329268&#x27;</span>,<span class="hljs-string">&#x27;2000-01-24&#x27;</span>,<span class="hljs-string">&#x27;SA_REP&#x27;</span>,<span class="hljs-number">7200.00</span>,<span class="hljs-number">0.10</span>,<span class="hljs-number">147</span>,<span class="hljs-number">80</span>),(<span class="hljs-number">165</span>,<span class="hljs-string">&#x27;David&#x27;</span>,<span class="hljs-string">&#x27;Lee&#x27;</span>,<span class="hljs-string">&#x27;DLEE&#x27;</span>,<span class="hljs-string">&#x27;011.44.1346.529268&#x27;</span>,<span class="hljs-string">&#x27;2000-02-23&#x27;</span>,<span class="hljs-string">&#x27;SA_REP&#x27;</span>,<span class="hljs-number">6800.00</span>,<span class="hljs-number">0.10</span>,<span class="hljs-number">147</span>,<span class="hljs-number">80</span>),(<span class="hljs-number">166</span>,<span class="hljs-string">&#x27;Sundar&#x27;</span>,<span class="hljs-string">&#x27;Ande&#x27;</span>,<span class="hljs-string">&#x27;SANDE&#x27;</span>,<span class="hljs-string">&#x27;011.44.1346.629268&#x27;</span>,<span class="hljs-string">&#x27;2000-03-24&#x27;</span>,<span class="hljs-string">&#x27;SA_REP&#x27;</span>,<span class="hljs-number">6400.00</span>,<span class="hljs-number">0.10</span>,<span class="hljs-number">147</span>,<span class="hljs-number">80</span>),(<span class="hljs-number">167</span>,<span class="hljs-string">&#x27;Amit&#x27;</span>,<span class="hljs-string">&#x27;Banda&#x27;</span>,<span class="hljs-string">&#x27;ABANDA&#x27;</span>,<span class="hljs-string">&#x27;011.44.1346.729268&#x27;</span>,<span class="hljs-string">&#x27;2000-04-21&#x27;</span>,<span class="hljs-string">&#x27;SA_REP&#x27;</span>,<span class="hljs-number">6200.00</span>,<span class="hljs-number">0.10</span>,<span class="hljs-number">147</span>,<span class="hljs-number">80</span>),(<span class="hljs-number">168</span>,<span class="hljs-string">&#x27;Lisa&#x27;</span>,<span class="hljs-string">&#x27;Ozer&#x27;</span>,<span class="hljs-string">&#x27;LOZER&#x27;</span>,<span class="hljs-string">&#x27;011.44.1343.929268&#x27;</span>,<span class="hljs-string">&#x27;1997-03-11&#x27;</span>,<span class="hljs-string">&#x27;SA_REP&#x27;</span>,<span class="hljs-number">11500.00</span>,<span class="hljs-number">0.25</span>,<span class="hljs-number">148</span>,<span class="hljs-number">80</span>),(<span class="hljs-number">169</span>,<span class="hljs-string">&#x27;Harrison&#x27;</span>,<span class="hljs-string">&#x27;Bloom&#x27;</span>,<span class="hljs-string">&#x27;HBLOOM&#x27;</span>,<span class="hljs-string">&#x27;011.44.1343.829268&#x27;</span>,<span class="hljs-string">&#x27;1998-03-23&#x27;</span>,<span class="hljs-string">&#x27;SA_REP&#x27;</span>,<span class="hljs-number">10000.00</span>,<span class="hljs-number">0.20</span>,<span class="hljs-number">148</span>,<span class="hljs-number">80</span>),(<span class="hljs-number">170</span>,<span class="hljs-string">&#x27;Tayler&#x27;</span>,<span class="hljs-string">&#x27;Fox&#x27;</span>,<span class="hljs-string">&#x27;TFOX&#x27;</span>,<span class="hljs-string">&#x27;011.44.1343.729268&#x27;</span>,<span class="hljs-string">&#x27;1998-01-24&#x27;</span>,<span class="hljs-string">&#x27;SA_REP&#x27;</span>,<span class="hljs-number">9600.00</span>,<span class="hljs-number">0.20</span>,<span class="hljs-number">148</span>,<span class="hljs-number">80</span>),(<span class="hljs-number">171</span>,<span class="hljs-string">&#x27;William&#x27;</span>,<span class="hljs-string">&#x27;Smith&#x27;</span>,<span class="hljs-string">&#x27;WSMITH&#x27;</span>,<span class="hljs-string">&#x27;011.44.1343.629268&#x27;</span>,<span class="hljs-string">&#x27;1999-02-23&#x27;</span>,<span class="hljs-string">&#x27;SA_REP&#x27;</span>,<span class="hljs-number">7400.00</span>,<span class="hljs-number">0.15</span>,<span class="hljs-number">148</span>,<span class="hljs-number">80</span>),(<span class="hljs-number">172</span>,<span class="hljs-string">&#x27;Elizabeth&#x27;</span>,<span class="hljs-string">&#x27;Bates&#x27;</span>,<span class="hljs-string">&#x27;EBATES&#x27;</span>,<span class="hljs-string">&#x27;011.44.1343.529268&#x27;</span>,<span class="hljs-string">&#x27;1999-03-24&#x27;</span>,<span class="hljs-string">&#x27;SA_REP&#x27;</span>,<span class="hljs-number">7300.00</span>,<span class="hljs-number">0.15</span>,<span class="hljs-number">148</span>,<span class="hljs-number">80</span>),(<span class="hljs-number">173</span>,<span class="hljs-string">&#x27;Sundita&#x27;</span>,<span class="hljs-string">&#x27;Kumar&#x27;</span>,<span class="hljs-string">&#x27;SKUMAR&#x27;</span>,<span class="hljs-string">&#x27;011.44.1343.329268&#x27;</span>,<span class="hljs-string">&#x27;2000-04-21&#x27;</span>,<span class="hljs-string">&#x27;SA_REP&#x27;</span>,<span class="hljs-number">6100.00</span>,<span class="hljs-number">0.10</span>,<span class="hljs-number">148</span>,<span class="hljs-number">80</span>),(<span class="hljs-number">174</span>,<span class="hljs-string">&#x27;Ellen&#x27;</span>,<span class="hljs-string">&#x27;Abel&#x27;</span>,<span class="hljs-string">&#x27;EABEL&#x27;</span>,<span class="hljs-string">&#x27;011.44.1644.429267&#x27;</span>,<span class="hljs-string">&#x27;1996-05-11&#x27;</span>,<span class="hljs-string">&#x27;SA_REP&#x27;</span>,<span class="hljs-number">11000.00</span>,<span class="hljs-number">0.30</span>,<span class="hljs-number">149</span>,<span class="hljs-number">80</span>),(<span class="hljs-number">175</span>,<span class="hljs-string">&#x27;Alyssa&#x27;</span>,<span class="hljs-string">&#x27;Hutton&#x27;</span>,<span class="hljs-string">&#x27;AHUTTON&#x27;</span>,<span class="hljs-string">&#x27;011.44.1644.429266&#x27;</span>,<span class="hljs-string">&#x27;1997-03-19&#x27;</span>,<span class="hljs-string">&#x27;SA_REP&#x27;</span>,<span class="hljs-number">8800.00</span>,<span class="hljs-number">0.25</span>,<span class="hljs-number">149</span>,<span class="hljs-number">80</span>),(<span class="hljs-number">176</span>,<span class="hljs-string">&#x27;Jonathon&#x27;</span>,<span class="hljs-string">&#x27;Taylor&#x27;</span>,<span class="hljs-string">&#x27;JTAYLOR&#x27;</span>,<span class="hljs-string">&#x27;011.44.1644.429265&#x27;</span>,<span class="hljs-string">&#x27;1998-03-24&#x27;</span>,<span class="hljs-string">&#x27;SA_REP&#x27;</span>,<span class="hljs-number">8600.00</span>,<span class="hljs-number">0.20</span>,<span class="hljs-number">149</span>,<span class="hljs-number">80</span>),(<span class="hljs-number">177</span>,<span class="hljs-string">&#x27;Jack&#x27;</span>,<span class="hljs-string">&#x27;Livingston&#x27;</span>,<span class="hljs-string">&#x27;JLIVINGS&#x27;</span>,<span class="hljs-string">&#x27;011.44.1644.429264&#x27;</span>,<span class="hljs-string">&#x27;1998-04-23&#x27;</span>,<span class="hljs-string">&#x27;SA_REP&#x27;</span>,<span class="hljs-number">8400.00</span>,<span class="hljs-number">0.20</span>,<span class="hljs-number">149</span>,<span class="hljs-number">80</span>),(<span class="hljs-number">178</span>,<span class="hljs-string">&#x27;Kimberely&#x27;</span>,<span class="hljs-string">&#x27;Grant&#x27;</span>,<span class="hljs-string">&#x27;KGRANT&#x27;</span>,<span class="hljs-string">&#x27;011.44.1644.429263&#x27;</span>,<span class="hljs-string">&#x27;1999-05-24&#x27;</span>,<span class="hljs-string">&#x27;SA_REP&#x27;</span>,<span class="hljs-number">7000.00</span>,<span class="hljs-number">0.15</span>,<span class="hljs-number">149</span>,<span class="hljs-keyword">NULL</span>),(<span class="hljs-number">179</span>,<span class="hljs-string">&#x27;Charles&#x27;</span>,<span class="hljs-string">&#x27;Johnson&#x27;</span>,<span class="hljs-string">&#x27;CJOHNSON&#x27;</span>,<span class="hljs-string">&#x27;011.44.1644.429262&#x27;</span>,<span class="hljs-string">&#x27;2000-01-04&#x27;</span>,<span class="hljs-string">&#x27;SA_REP&#x27;</span>,<span class="hljs-number">6200.00</span>,<span class="hljs-number">0.10</span>,<span class="hljs-number">149</span>,<span class="hljs-number">80</span>),(<span class="hljs-number">180</span>,<span class="hljs-string">&#x27;Winston&#x27;</span>,<span class="hljs-string">&#x27;Taylor&#x27;</span>,<span class="hljs-string">&#x27;WTAYLOR&#x27;</span>,<span class="hljs-string">&#x27;650.507.9876&#x27;</span>,<span class="hljs-string">&#x27;1998-01-24&#x27;</span>,<span class="hljs-string">&#x27;SH_CLERK&#x27;</span>,<span class="hljs-number">3200.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">120</span>,<span class="hljs-number">50</span>),(<span class="hljs-number">181</span>,<span class="hljs-string">&#x27;Jean&#x27;</span>,<span class="hljs-string">&#x27;Fleaur&#x27;</span>,<span class="hljs-string">&#x27;JFLEAUR&#x27;</span>,<span class="hljs-string">&#x27;650.507.9877&#x27;</span>,<span class="hljs-string">&#x27;1998-02-23&#x27;</span>,<span class="hljs-string">&#x27;SH_CLERK&#x27;</span>,<span class="hljs-number">3100.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">120</span>,<span class="hljs-number">50</span>),(<span class="hljs-number">182</span>,<span class="hljs-string">&#x27;Martha&#x27;</span>,<span class="hljs-string">&#x27;Sullivan&#x27;</span>,<span class="hljs-string">&#x27;MSULLIVA&#x27;</span>,<span class="hljs-string">&#x27;650.507.9878&#x27;</span>,<span class="hljs-string">&#x27;1999-06-21&#x27;</span>,<span class="hljs-string">&#x27;SH_CLERK&#x27;</span>,<span class="hljs-number">2500.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">120</span>,<span class="hljs-number">50</span>),(<span class="hljs-number">183</span>,<span class="hljs-string">&#x27;Girard&#x27;</span>,<span class="hljs-string">&#x27;Geoni&#x27;</span>,<span class="hljs-string">&#x27;GGEONI&#x27;</span>,<span class="hljs-string">&#x27;650.507.9879&#x27;</span>,<span class="hljs-string">&#x27;2000-02-03&#x27;</span>,<span class="hljs-string">&#x27;SH_CLERK&#x27;</span>,<span class="hljs-number">2800.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">120</span>,<span class="hljs-number">50</span>),(<span class="hljs-number">184</span>,<span class="hljs-string">&#x27;Nandita&#x27;</span>,<span class="hljs-string">&#x27;Sarchand&#x27;</span>,<span class="hljs-string">&#x27;NSARCHAN&#x27;</span>,<span class="hljs-string">&#x27;650.509.1876&#x27;</span>,<span class="hljs-string">&#x27;1996-01-27&#x27;</span>,<span class="hljs-string">&#x27;SH_CLERK&#x27;</span>,<span class="hljs-number">4200.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">121</span>,<span class="hljs-number">50</span>),(<span class="hljs-number">185</span>,<span class="hljs-string">&#x27;Alexis&#x27;</span>,<span class="hljs-string">&#x27;Bull&#x27;</span>,<span class="hljs-string">&#x27;ABULL&#x27;</span>,<span class="hljs-string">&#x27;650.509.2876&#x27;</span>,<span class="hljs-string">&#x27;1997-02-20&#x27;</span>,<span class="hljs-string">&#x27;SH_CLERK&#x27;</span>,<span class="hljs-number">4100.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">121</span>,<span class="hljs-number">50</span>),(<span class="hljs-number">186</span>,<span class="hljs-string">&#x27;Julia&#x27;</span>,<span class="hljs-string">&#x27;Dellinger&#x27;</span>,<span class="hljs-string">&#x27;JDELLING&#x27;</span>,<span class="hljs-string">&#x27;650.509.3876&#x27;</span>,<span class="hljs-string">&#x27;1998-06-24&#x27;</span>,<span class="hljs-string">&#x27;SH_CLERK&#x27;</span>,<span class="hljs-number">3400.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">121</span>,<span class="hljs-number">50</span>),(<span class="hljs-number">187</span>,<span class="hljs-string">&#x27;Anthony&#x27;</span>,<span class="hljs-string">&#x27;Cabrio&#x27;</span>,<span class="hljs-string">&#x27;ACABRIO&#x27;</span>,<span class="hljs-string">&#x27;650.509.4876&#x27;</span>,<span class="hljs-string">&#x27;1999-02-07&#x27;</span>,<span class="hljs-string">&#x27;SH_CLERK&#x27;</span>,<span class="hljs-number">3000.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">121</span>,<span class="hljs-number">50</span>),(<span class="hljs-number">188</span>,<span class="hljs-string">&#x27;Kelly&#x27;</span>,<span class="hljs-string">&#x27;Chung&#x27;</span>,<span class="hljs-string">&#x27;KCHUNG&#x27;</span>,<span class="hljs-string">&#x27;650.505.1876&#x27;</span>,<span class="hljs-string">&#x27;1997-06-14&#x27;</span>,<span class="hljs-string">&#x27;SH_CLERK&#x27;</span>,<span class="hljs-number">3800.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">122</span>,<span class="hljs-number">50</span>),(<span class="hljs-number">189</span>,<span class="hljs-string">&#x27;Jennifer&#x27;</span>,<span class="hljs-string">&#x27;Dilly&#x27;</span>,<span class="hljs-string">&#x27;JDILLY&#x27;</span>,<span class="hljs-string">&#x27;650.505.2876&#x27;</span>,<span class="hljs-string">&#x27;1997-08-13&#x27;</span>,<span class="hljs-string">&#x27;SH_CLERK&#x27;</span>,<span class="hljs-number">3600.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">122</span>,<span class="hljs-number">50</span>),(<span class="hljs-number">190</span>,<span class="hljs-string">&#x27;Timothy&#x27;</span>,<span class="hljs-string">&#x27;Gates&#x27;</span>,<span class="hljs-string">&#x27;TGATES&#x27;</span>,<span class="hljs-string">&#x27;650.505.3876&#x27;</span>,<span class="hljs-string">&#x27;1998-07-11&#x27;</span>,<span class="hljs-string">&#x27;SH_CLERK&#x27;</span>,<span class="hljs-number">2900.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">122</span>,<span class="hljs-number">50</span>),(<span class="hljs-number">191</span>,<span class="hljs-string">&#x27;Randall&#x27;</span>,<span class="hljs-string">&#x27;Perkins&#x27;</span>,<span class="hljs-string">&#x27;RPERKINS&#x27;</span>,<span class="hljs-string">&#x27;650.505.4876&#x27;</span>,<span class="hljs-string">&#x27;1999-12-19&#x27;</span>,<span class="hljs-string">&#x27;SH_CLERK&#x27;</span>,<span class="hljs-number">2500.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">122</span>,<span class="hljs-number">50</span>),(<span class="hljs-number">192</span>,<span class="hljs-string">&#x27;Sarah&#x27;</span>,<span class="hljs-string">&#x27;Bell&#x27;</span>,<span class="hljs-string">&#x27;SBELL&#x27;</span>,<span class="hljs-string">&#x27;650.501.1876&#x27;</span>,<span class="hljs-string">&#x27;1996-02-04&#x27;</span>,<span class="hljs-string">&#x27;SH_CLERK&#x27;</span>,<span class="hljs-number">4000.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">123</span>,<span class="hljs-number">50</span>),(<span class="hljs-number">193</span>,<span class="hljs-string">&#x27;Britney&#x27;</span>,<span class="hljs-string">&#x27;Everett&#x27;</span>,<span class="hljs-string">&#x27;BEVERETT&#x27;</span>,<span class="hljs-string">&#x27;650.501.2876&#x27;</span>,<span class="hljs-string">&#x27;1997-03-03&#x27;</span>,<span class="hljs-string">&#x27;SH_CLERK&#x27;</span>,<span class="hljs-number">3900.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">123</span>,<span class="hljs-number">50</span>),(<span class="hljs-number">194</span>,<span class="hljs-string">&#x27;Samuel&#x27;</span>,<span class="hljs-string">&#x27;McCain&#x27;</span>,<span class="hljs-string">&#x27;SMCCAIN&#x27;</span>,<span class="hljs-string">&#x27;650.501.3876&#x27;</span>,<span class="hljs-string">&#x27;1998-07-01&#x27;</span>,<span class="hljs-string">&#x27;SH_CLERK&#x27;</span>,<span class="hljs-number">3200.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">123</span>,<span class="hljs-number">50</span>),(<span class="hljs-number">195</span>,<span class="hljs-string">&#x27;Vance&#x27;</span>,<span class="hljs-string">&#x27;Jones&#x27;</span>,<span class="hljs-string">&#x27;VJONES&#x27;</span>,<span class="hljs-string">&#x27;650.501.4876&#x27;</span>,<span class="hljs-string">&#x27;1999-03-17&#x27;</span>,<span class="hljs-string">&#x27;SH_CLERK&#x27;</span>,<span class="hljs-number">2800.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">123</span>,<span class="hljs-number">50</span>),(<span class="hljs-number">196</span>,<span class="hljs-string">&#x27;Alana&#x27;</span>,<span class="hljs-string">&#x27;Walsh&#x27;</span>,<span class="hljs-string">&#x27;AWALSH&#x27;</span>,<span class="hljs-string">&#x27;650.507.9811&#x27;</span>,<span class="hljs-string">&#x27;1998-04-24&#x27;</span>,<span class="hljs-string">&#x27;SH_CLERK&#x27;</span>,<span class="hljs-number">3100.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">124</span>,<span class="hljs-number">50</span>),(<span class="hljs-number">197</span>,<span class="hljs-string">&#x27;Kevin&#x27;</span>,<span class="hljs-string">&#x27;Feeney&#x27;</span>,<span class="hljs-string">&#x27;KFEENEY&#x27;</span>,<span class="hljs-string">&#x27;650.507.9822&#x27;</span>,<span class="hljs-string">&#x27;1998-05-23&#x27;</span>,<span class="hljs-string">&#x27;SH_CLERK&#x27;</span>,<span class="hljs-number">3000.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">124</span>,<span class="hljs-number">50</span>),(<span class="hljs-number">198</span>,<span class="hljs-string">&#x27;Donald&#x27;</span>,<span class="hljs-string">&#x27;OConnell&#x27;</span>,<span class="hljs-string">&#x27;DOCONNEL&#x27;</span>,<span class="hljs-string">&#x27;650.507.9833&#x27;</span>,<span class="hljs-string">&#x27;1999-06-21&#x27;</span>,<span class="hljs-string">&#x27;SH_CLERK&#x27;</span>,<span class="hljs-number">2600.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">124</span>,<span class="hljs-number">50</span>),(<span class="hljs-number">199</span>,<span class="hljs-string">&#x27;Douglas&#x27;</span>,<span class="hljs-string">&#x27;Grant&#x27;</span>,<span class="hljs-string">&#x27;DGRANT&#x27;</span>,<span class="hljs-string">&#x27;650.507.9844&#x27;</span>,<span class="hljs-string">&#x27;2000-01-13&#x27;</span>,<span class="hljs-string">&#x27;SH_CLERK&#x27;</span>,<span class="hljs-number">2600.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">124</span>,<span class="hljs-number">50</span>),(<span class="hljs-number">200</span>,<span class="hljs-string">&#x27;Jennifer&#x27;</span>,<span class="hljs-string">&#x27;Whalen&#x27;</span>,<span class="hljs-string">&#x27;JWHALEN&#x27;</span>,<span class="hljs-string">&#x27;515.123.4444&#x27;</span>,<span class="hljs-string">&#x27;1987-09-17&#x27;</span>,<span class="hljs-string">&#x27;AD_ASST&#x27;</span>,<span class="hljs-number">4400.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">101</span>,<span class="hljs-number">10</span>),(<span class="hljs-number">201</span>,<span class="hljs-string">&#x27;Michael&#x27;</span>,<span class="hljs-string">&#x27;Hartstein&#x27;</span>,<span class="hljs-string">&#x27;MHARTSTE&#x27;</span>,<span class="hljs-string">&#x27;515.123.5555&#x27;</span>,<span class="hljs-string">&#x27;1996-02-17&#x27;</span>,<span class="hljs-string">&#x27;MK_MAN&#x27;</span>,<span class="hljs-number">13000.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">100</span>,<span class="hljs-number">20</span>),(<span class="hljs-number">202</span>,<span class="hljs-string">&#x27;Pat&#x27;</span>,<span class="hljs-string">&#x27;Fay&#x27;</span>,<span class="hljs-string">&#x27;PFAY&#x27;</span>,<span class="hljs-string">&#x27;603.123.6666&#x27;</span>,<span class="hljs-string">&#x27;1997-08-17&#x27;</span>,<span class="hljs-string">&#x27;MK_REP&#x27;</span>,<span class="hljs-number">6000.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">201</span>,<span class="hljs-number">20</span>),(<span class="hljs-number">203</span>,<span class="hljs-string">&#x27;Susan&#x27;</span>,<span class="hljs-string">&#x27;Mavris&#x27;</span>,<span class="hljs-string">&#x27;SMAVRIS&#x27;</span>,<span class="hljs-string">&#x27;515.123.7777&#x27;</span>,<span class="hljs-string">&#x27;1994-06-07&#x27;</span>,<span class="hljs-string">&#x27;HR_REP&#x27;</span>,<span class="hljs-number">6500.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">101</span>,<span class="hljs-number">40</span>),(<span class="hljs-number">204</span>,<span class="hljs-string">&#x27;Hermann&#x27;</span>,<span class="hljs-string">&#x27;Baer&#x27;</span>,<span class="hljs-string">&#x27;HBAER&#x27;</span>,<span class="hljs-string">&#x27;515.123.8888&#x27;</span>,<span class="hljs-string">&#x27;1994-06-07&#x27;</span>,<span class="hljs-string">&#x27;PR_REP&#x27;</span>,<span class="hljs-number">10000.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">101</span>,<span class="hljs-number">70</span>),(<span class="hljs-number">205</span>,<span class="hljs-string">&#x27;Shelley&#x27;</span>,<span class="hljs-string">&#x27;Higgins&#x27;</span>,<span class="hljs-string">&#x27;SHIGGINS&#x27;</span>,<span class="hljs-string">&#x27;515.123.8080&#x27;</span>,<span class="hljs-string">&#x27;1994-06-07&#x27;</span>,<span class="hljs-string">&#x27;AC_MGR&#x27;</span>,<span class="hljs-number">12000.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">101</span>,<span class="hljs-number">110</span>),(<span class="hljs-number">206</span>,<span class="hljs-string">&#x27;William&#x27;</span>,<span class="hljs-string">&#x27;Gietz&#x27;</span>,<span class="hljs-string">&#x27;WGIETZ&#x27;</span>,<span class="hljs-string">&#x27;515.123.8181&#x27;</span>,<span class="hljs-string">&#x27;1994-06-07&#x27;</span>,<span class="hljs-string">&#x27;AC_ACCOUNT&#x27;</span>,<span class="hljs-number">8300.00</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-number">205</span>,<span class="hljs-number">110</span>);<br><br><span class="hljs-comment">/*Table structure for table `job_grades` */</span><br><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> `job_grades`;<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `job_grades` (<br>  `grade_level` <span class="hljs-type">varchar</span>(<span class="hljs-number">3</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `lowest_sal` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `highest_sal` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span><br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8;<br><br><span class="hljs-comment">/*Data for the table `job_grades` */</span><br><br><span class="hljs-keyword">insert</span>  <span class="hljs-keyword">into</span> `job_grades`(`grade_level`,`lowest_sal`,`highest_sal`) <span class="hljs-keyword">values</span> (<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-number">1000</span>,<span class="hljs-number">2999</span>),(<span class="hljs-string">&#x27;B&#x27;</span>,<span class="hljs-number">3000</span>,<span class="hljs-number">5999</span>),(<span class="hljs-string">&#x27;C&#x27;</span>,<span class="hljs-number">6000</span>,<span class="hljs-number">9999</span>),(<span class="hljs-string">&#x27;D&#x27;</span>,<span class="hljs-number">10000</span>,<span class="hljs-number">14999</span>),(<span class="hljs-string">&#x27;E&#x27;</span>,<span class="hljs-number">15000</span>,<span class="hljs-number">24999</span>),(<span class="hljs-string">&#x27;F&#x27;</span>,<span class="hljs-number">25000</span>,<span class="hljs-number">40000</span>);<br><br><span class="hljs-comment">/*Table structure for table `job_history` */</span><br><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> `job_history`;<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `job_history` (<br>  `employee_id` <span class="hljs-type">int</span>(<span class="hljs-number">6</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `start_date` <span class="hljs-type">date</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `end_date` <span class="hljs-type">date</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `job_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `department_id` <span class="hljs-type">int</span>(<span class="hljs-number">4</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`employee_id`,`start_date`),<br>  <span class="hljs-keyword">UNIQUE</span> KEY `jhist_emp_id_st_date_pk` (`employee_id`,`start_date`),<br>  KEY `jhist_job_fk` (`job_id`),<br>  KEY `jhist_dept_fk` (`department_id`),<br>  <span class="hljs-keyword">CONSTRAINT</span> `jhist_dept_fk` <span class="hljs-keyword">FOREIGN</span> KEY (`department_id`) <span class="hljs-keyword">REFERENCES</span> `departments` (`department_id`),<br>  <span class="hljs-keyword">CONSTRAINT</span> `jhist_emp_fk` <span class="hljs-keyword">FOREIGN</span> KEY (`employee_id`) <span class="hljs-keyword">REFERENCES</span> `employees` (`employee_id`),<br>  <span class="hljs-keyword">CONSTRAINT</span> `jhist_job_fk` <span class="hljs-keyword">FOREIGN</span> KEY (`job_id`) <span class="hljs-keyword">REFERENCES</span> `jobs` (`job_id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8;<br><br><span class="hljs-comment">/*Data for the table `job_history` */</span><br><br><span class="hljs-keyword">insert</span>  <span class="hljs-keyword">into</span> `job_history`(`employee_id`,`start_date`,`end_date`,`job_id`,`department_id`) <span class="hljs-keyword">values</span> (<span class="hljs-number">101</span>,<span class="hljs-string">&#x27;1989-09-21&#x27;</span>,<span class="hljs-string">&#x27;1993-10-27&#x27;</span>,<span class="hljs-string">&#x27;AC_ACCOUNT&#x27;</span>,<span class="hljs-number">110</span>),(<span class="hljs-number">101</span>,<span class="hljs-string">&#x27;1993-10-28&#x27;</span>,<span class="hljs-string">&#x27;1997-03-15&#x27;</span>,<span class="hljs-string">&#x27;AC_MGR&#x27;</span>,<span class="hljs-number">110</span>),(<span class="hljs-number">102</span>,<span class="hljs-string">&#x27;1993-01-13&#x27;</span>,<span class="hljs-string">&#x27;1998-07-24&#x27;</span>,<span class="hljs-string">&#x27;IT_PROG&#x27;</span>,<span class="hljs-number">60</span>),(<span class="hljs-number">114</span>,<span class="hljs-string">&#x27;1998-03-24&#x27;</span>,<span class="hljs-string">&#x27;1999-12-31&#x27;</span>,<span class="hljs-string">&#x27;ST_CLERK&#x27;</span>,<span class="hljs-number">50</span>),(<span class="hljs-number">122</span>,<span class="hljs-string">&#x27;1999-01-01&#x27;</span>,<span class="hljs-string">&#x27;1999-12-31&#x27;</span>,<span class="hljs-string">&#x27;ST_CLERK&#x27;</span>,<span class="hljs-number">50</span>),(<span class="hljs-number">176</span>,<span class="hljs-string">&#x27;1998-03-24&#x27;</span>,<span class="hljs-string">&#x27;1998-12-31&#x27;</span>,<span class="hljs-string">&#x27;SA_REP&#x27;</span>,<span class="hljs-number">80</span>),(<span class="hljs-number">176</span>,<span class="hljs-string">&#x27;1999-01-01&#x27;</span>,<span class="hljs-string">&#x27;1999-12-31&#x27;</span>,<span class="hljs-string">&#x27;SA_MAN&#x27;</span>,<span class="hljs-number">80</span>),(<span class="hljs-number">200</span>,<span class="hljs-string">&#x27;1987-09-17&#x27;</span>,<span class="hljs-string">&#x27;1993-06-17&#x27;</span>,<span class="hljs-string">&#x27;AD_ASST&#x27;</span>,<span class="hljs-number">90</span>),(<span class="hljs-number">200</span>,<span class="hljs-string">&#x27;1994-07-01&#x27;</span>,<span class="hljs-string">&#x27;1998-12-31&#x27;</span>,<span class="hljs-string">&#x27;AC_ACCOUNT&#x27;</span>,<span class="hljs-number">90</span>),(<span class="hljs-number">201</span>,<span class="hljs-string">&#x27;1996-02-17&#x27;</span>,<span class="hljs-string">&#x27;1999-12-19&#x27;</span>,<span class="hljs-string">&#x27;MK_REP&#x27;</span>,<span class="hljs-number">20</span>);<br><br><span class="hljs-comment">/*Table structure for table `jobs` */</span><br><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> `jobs`;<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `jobs` (<br>  `job_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;&#x27;</span>,<br>  `job_title` <span class="hljs-type">varchar</span>(<span class="hljs-number">35</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `min_salary` <span class="hljs-type">int</span>(<span class="hljs-number">6</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `max_salary` <span class="hljs-type">int</span>(<span class="hljs-number">6</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`job_id`),<br>  <span class="hljs-keyword">UNIQUE</span> KEY `job_id_pk` (`job_id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8;<br><br><span class="hljs-comment">/*Data for the table `jobs` */</span><br><br><span class="hljs-keyword">insert</span>  <span class="hljs-keyword">into</span> `jobs`(`job_id`,`job_title`,`min_salary`,`max_salary`) <span class="hljs-keyword">values</span> (<span class="hljs-string">&#x27;AC_ACCOUNT&#x27;</span>,<span class="hljs-string">&#x27;Public Accountant&#x27;</span>,<span class="hljs-number">4200</span>,<span class="hljs-number">9000</span>),(<span class="hljs-string">&#x27;AC_MGR&#x27;</span>,<span class="hljs-string">&#x27;Accounting Manager&#x27;</span>,<span class="hljs-number">8200</span>,<span class="hljs-number">16000</span>),(<span class="hljs-string">&#x27;AD_ASST&#x27;</span>,<span class="hljs-string">&#x27;Administration Assistant&#x27;</span>,<span class="hljs-number">3000</span>,<span class="hljs-number">6000</span>),(<span class="hljs-string">&#x27;AD_PRES&#x27;</span>,<span class="hljs-string">&#x27;President&#x27;</span>,<span class="hljs-number">20000</span>,<span class="hljs-number">40000</span>),(<span class="hljs-string">&#x27;AD_VP&#x27;</span>,<span class="hljs-string">&#x27;Administration Vice President&#x27;</span>,<span class="hljs-number">15000</span>,<span class="hljs-number">30000</span>),(<span class="hljs-string">&#x27;FI_ACCOUNT&#x27;</span>,<span class="hljs-string">&#x27;Accountant&#x27;</span>,<span class="hljs-number">4200</span>,<span class="hljs-number">9000</span>),(<span class="hljs-string">&#x27;FI_MGR&#x27;</span>,<span class="hljs-string">&#x27;Finance Manager&#x27;</span>,<span class="hljs-number">8200</span>,<span class="hljs-number">16000</span>),(<span class="hljs-string">&#x27;HR_REP&#x27;</span>,<span class="hljs-string">&#x27;Human Resources Representative&#x27;</span>,<span class="hljs-number">4000</span>,<span class="hljs-number">9000</span>),(<span class="hljs-string">&#x27;IT_PROG&#x27;</span>,<span class="hljs-string">&#x27;Programmer&#x27;</span>,<span class="hljs-number">4000</span>,<span class="hljs-number">10000</span>),(<span class="hljs-string">&#x27;MK_MAN&#x27;</span>,<span class="hljs-string">&#x27;Marketing Manager&#x27;</span>,<span class="hljs-number">9000</span>,<span class="hljs-number">15000</span>),(<span class="hljs-string">&#x27;MK_REP&#x27;</span>,<span class="hljs-string">&#x27;Marketing Representative&#x27;</span>,<span class="hljs-number">4000</span>,<span class="hljs-number">9000</span>),(<span class="hljs-string">&#x27;PR_REP&#x27;</span>,<span class="hljs-string">&#x27;Public Relations Representative&#x27;</span>,<span class="hljs-number">4500</span>,<span class="hljs-number">10500</span>),(<span class="hljs-string">&#x27;PU_CLERK&#x27;</span>,<span class="hljs-string">&#x27;Purchasing Clerk&#x27;</span>,<span class="hljs-number">2500</span>,<span class="hljs-number">5500</span>),(<span class="hljs-string">&#x27;PU_MAN&#x27;</span>,<span class="hljs-string">&#x27;Purchasing Manager&#x27;</span>,<span class="hljs-number">8000</span>,<span class="hljs-number">15000</span>),(<span class="hljs-string">&#x27;SA_MAN&#x27;</span>,<span class="hljs-string">&#x27;Sales Manager&#x27;</span>,<span class="hljs-number">10000</span>,<span class="hljs-number">20000</span>),(<span class="hljs-string">&#x27;SA_REP&#x27;</span>,<span class="hljs-string">&#x27;Sales Representative&#x27;</span>,<span class="hljs-number">6000</span>,<span class="hljs-number">12000</span>),(<span class="hljs-string">&#x27;SH_CLERK&#x27;</span>,<span class="hljs-string">&#x27;Shipping Clerk&#x27;</span>,<span class="hljs-number">2500</span>,<span class="hljs-number">5500</span>),(<span class="hljs-string">&#x27;ST_CLERK&#x27;</span>,<span class="hljs-string">&#x27;Stock Clerk&#x27;</span>,<span class="hljs-number">2000</span>,<span class="hljs-number">5000</span>),(<span class="hljs-string">&#x27;ST_MAN&#x27;</span>,<span class="hljs-string">&#x27;Stock Manager&#x27;</span>,<span class="hljs-number">5500</span>,<span class="hljs-number">8500</span>);<br><br><span class="hljs-comment">/*Table structure for table `locations` */</span><br><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> `locations`;<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `locations` (<br>  `location_id` <span class="hljs-type">int</span>(<span class="hljs-number">4</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span>,<br>  `street_address` <span class="hljs-type">varchar</span>(<span class="hljs-number">40</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `postal_code` <span class="hljs-type">varchar</span>(<span class="hljs-number">12</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `city` <span class="hljs-type">varchar</span>(<span class="hljs-number">30</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `state_province` <span class="hljs-type">varchar</span>(<span class="hljs-number">25</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `country_id` <span class="hljs-type">char</span>(<span class="hljs-number">2</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`location_id`),<br>  <span class="hljs-keyword">UNIQUE</span> KEY `loc_id_pk` (`location_id`),<br>  KEY `loc_c_id_fk` (`country_id`),<br>  <span class="hljs-keyword">CONSTRAINT</span> `loc_c_id_fk` <span class="hljs-keyword">FOREIGN</span> KEY (`country_id`) <span class="hljs-keyword">REFERENCES</span> `countries` (`country_id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8;<br><br><span class="hljs-comment">/*Data for the table `locations` */</span><br><br><span class="hljs-keyword">insert</span>  <span class="hljs-keyword">into</span> `locations`(`location_id`,`street_address`,`postal_code`,`city`,`state_province`,`country_id`) <span class="hljs-keyword">values</span> (<span class="hljs-number">1000</span>,<span class="hljs-string">&#x27;1297 Via Cola di Rie&#x27;</span>,<span class="hljs-string">&#x27;00989&#x27;</span>,<span class="hljs-string">&#x27;Roma&#x27;</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-string">&#x27;IT&#x27;</span>),(<span class="hljs-number">1100</span>,<span class="hljs-string">&#x27;93091 Calle della Testa&#x27;</span>,<span class="hljs-string">&#x27;10934&#x27;</span>,<span class="hljs-string">&#x27;Venice&#x27;</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-string">&#x27;IT&#x27;</span>),(<span class="hljs-number">1200</span>,<span class="hljs-string">&#x27;2017 Shinjuku-ku&#x27;</span>,<span class="hljs-string">&#x27;1689&#x27;</span>,<span class="hljs-string">&#x27;Tokyo&#x27;</span>,<span class="hljs-string">&#x27;Tokyo Prefecture&#x27;</span>,<span class="hljs-string">&#x27;JP&#x27;</span>),(<span class="hljs-number">1300</span>,<span class="hljs-string">&#x27;9450 Kamiya-cho&#x27;</span>,<span class="hljs-string">&#x27;6823&#x27;</span>,<span class="hljs-string">&#x27;Hiroshima&#x27;</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-string">&#x27;JP&#x27;</span>),(<span class="hljs-number">1400</span>,<span class="hljs-string">&#x27;2014 Jabberwocky Rd&#x27;</span>,<span class="hljs-string">&#x27;26192&#x27;</span>,<span class="hljs-string">&#x27;Southlake&#x27;</span>,<span class="hljs-string">&#x27;Texas&#x27;</span>,<span class="hljs-string">&#x27;US&#x27;</span>),(<span class="hljs-number">1500</span>,<span class="hljs-string">&#x27;2011 Interiors Blvd&#x27;</span>,<span class="hljs-string">&#x27;99236&#x27;</span>,<span class="hljs-string">&#x27;South San Francisco&#x27;</span>,<span class="hljs-string">&#x27;California&#x27;</span>,<span class="hljs-string">&#x27;US&#x27;</span>),(<span class="hljs-number">1600</span>,<span class="hljs-string">&#x27;2007 Zagora St&#x27;</span>,<span class="hljs-string">&#x27;50090&#x27;</span>,<span class="hljs-string">&#x27;South Brunswick&#x27;</span>,<span class="hljs-string">&#x27;New Jersey&#x27;</span>,<span class="hljs-string">&#x27;US&#x27;</span>),(<span class="hljs-number">1700</span>,<span class="hljs-string">&#x27;2004 Charade Rd&#x27;</span>,<span class="hljs-string">&#x27;98199&#x27;</span>,<span class="hljs-string">&#x27;Seattle&#x27;</span>,<span class="hljs-string">&#x27;Washington&#x27;</span>,<span class="hljs-string">&#x27;US&#x27;</span>),(<span class="hljs-number">1800</span>,<span class="hljs-string">&#x27;147 Spadina Ave&#x27;</span>,<span class="hljs-string">&#x27;M5V 2L7&#x27;</span>,<span class="hljs-string">&#x27;Toronto&#x27;</span>,<span class="hljs-string">&#x27;Ontario&#x27;</span>,<span class="hljs-string">&#x27;CA&#x27;</span>),(<span class="hljs-number">1900</span>,<span class="hljs-string">&#x27;6092 Boxwood St&#x27;</span>,<span class="hljs-string">&#x27;YSW 9T2&#x27;</span>,<span class="hljs-string">&#x27;Whitehorse&#x27;</span>,<span class="hljs-string">&#x27;Yukon&#x27;</span>,<span class="hljs-string">&#x27;CA&#x27;</span>),(<span class="hljs-number">2000</span>,<span class="hljs-string">&#x27;40-5-12 Laogianggen&#x27;</span>,<span class="hljs-string">&#x27;190518&#x27;</span>,<span class="hljs-string">&#x27;Beijing&#x27;</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-string">&#x27;CN&#x27;</span>),(<span class="hljs-number">2100</span>,<span class="hljs-string">&#x27;1298 Vileparle (E)&#x27;</span>,<span class="hljs-string">&#x27;490231&#x27;</span>,<span class="hljs-string">&#x27;Bombay&#x27;</span>,<span class="hljs-string">&#x27;Maharashtra&#x27;</span>,<span class="hljs-string">&#x27;IN&#x27;</span>),(<span class="hljs-number">2200</span>,<span class="hljs-string">&#x27;12-98 Victoria Street&#x27;</span>,<span class="hljs-string">&#x27;2901&#x27;</span>,<span class="hljs-string">&#x27;Sydney&#x27;</span>,<span class="hljs-string">&#x27;New South Wales&#x27;</span>,<span class="hljs-string">&#x27;AU&#x27;</span>),(<span class="hljs-number">2300</span>,<span class="hljs-string">&#x27;198 Clementi North&#x27;</span>,<span class="hljs-string">&#x27;540198&#x27;</span>,<span class="hljs-string">&#x27;Singapore&#x27;</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-string">&#x27;SG&#x27;</span>),(<span class="hljs-number">2400</span>,<span class="hljs-string">&#x27;8204 Arthur St&#x27;</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-string">&#x27;London&#x27;</span>,<span class="hljs-keyword">NULL</span>,<span class="hljs-string">&#x27;UK&#x27;</span>),(<span class="hljs-number">2500</span>,<span class="hljs-string">&#x27;Magdalen Centre, The Oxford Science Park&#x27;</span>,<span class="hljs-string">&#x27;OX9 9ZB&#x27;</span>,<span class="hljs-string">&#x27;Oxford&#x27;</span>,<span class="hljs-string">&#x27;Oxford&#x27;</span>,<span class="hljs-string">&#x27;UK&#x27;</span>),(<span class="hljs-number">2600</span>,<span class="hljs-string">&#x27;9702 Chester Road&#x27;</span>,<span class="hljs-string">&#x27;09629850293&#x27;</span>,<span class="hljs-string">&#x27;Stretford&#x27;</span>,<span class="hljs-string">&#x27;Manchester&#x27;</span>,<span class="hljs-string">&#x27;UK&#x27;</span>),(<span class="hljs-number">2700</span>,<span class="hljs-string">&#x27;Schwanthalerstr. 7031&#x27;</span>,<span class="hljs-string">&#x27;80925&#x27;</span>,<span class="hljs-string">&#x27;Munich&#x27;</span>,<span class="hljs-string">&#x27;Bavaria&#x27;</span>,<span class="hljs-string">&#x27;DE&#x27;</span>),(<span class="hljs-number">2800</span>,<span class="hljs-string">&#x27;Rua Frei Caneca 1360 &#x27;</span>,<span class="hljs-string">&#x27;01307-002&#x27;</span>,<span class="hljs-string">&#x27;Sao Paulo&#x27;</span>,<span class="hljs-string">&#x27;Sao Paulo&#x27;</span>,<span class="hljs-string">&#x27;BR&#x27;</span>),(<span class="hljs-number">2900</span>,<span class="hljs-string">&#x27;20 Rue des Corps-Saints&#x27;</span>,<span class="hljs-string">&#x27;1730&#x27;</span>,<span class="hljs-string">&#x27;Geneva&#x27;</span>,<span class="hljs-string">&#x27;Geneve&#x27;</span>,<span class="hljs-string">&#x27;CH&#x27;</span>),(<span class="hljs-number">3000</span>,<span class="hljs-string">&#x27;Murtenstrasse 921&#x27;</span>,<span class="hljs-string">&#x27;3095&#x27;</span>,<span class="hljs-string">&#x27;Bern&#x27;</span>,<span class="hljs-string">&#x27;BE&#x27;</span>,<span class="hljs-string">&#x27;CH&#x27;</span>),(<span class="hljs-number">3100</span>,<span class="hljs-string">&#x27;Pieter Breughelstraat 837&#x27;</span>,<span class="hljs-string">&#x27;3029SK&#x27;</span>,<span class="hljs-string">&#x27;Utrecht&#x27;</span>,<span class="hljs-string">&#x27;Utrecht&#x27;</span>,<span class="hljs-string">&#x27;NL&#x27;</span>),(<span class="hljs-number">3200</span>,<span class="hljs-string">&#x27;Mariano Escobedo 9991&#x27;</span>,<span class="hljs-string">&#x27;11932&#x27;</span>,<span class="hljs-string">&#x27;Mexico City&#x27;</span>,<span class="hljs-string">&#x27;Distrito Federal,&#x27;</span>,<span class="hljs-string">&#x27;MX&#x27;</span>);<br><br><span class="hljs-comment">/*Table structure for table `order` */</span><br><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> `<span class="hljs-keyword">order</span>`;<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `<span class="hljs-keyword">order</span>` (<br>  `order_id` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `order_name` <span class="hljs-type">varchar</span>(<span class="hljs-number">15</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span><br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8;<br><br><span class="hljs-comment">/*Data for the table `order` */</span><br><br><span class="hljs-keyword">insert</span>  <span class="hljs-keyword">into</span> `<span class="hljs-keyword">order</span>`(`order_id`,`order_name`) <span class="hljs-keyword">values</span> (<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;shkstart&#x27;</span>),(<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;tomcat&#x27;</span>),(<span class="hljs-number">3</span>,<span class="hljs-string">&#x27;dubbo&#x27;</span>);<br><br><span class="hljs-comment">/*Table structure for table `regions` */</span><br><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> `regions`;<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `regions` (<br>  `region_id` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `region_name` <span class="hljs-type">varchar</span>(<span class="hljs-number">25</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`region_id`),<br>  <span class="hljs-keyword">UNIQUE</span> KEY `reg_id_pk` (`region_id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8;<br><br><span class="hljs-comment">/*Data for the table `regions` */</span><br><br><span class="hljs-keyword">insert</span>  <span class="hljs-keyword">into</span> `regions`(`region_id`,`region_name`) <span class="hljs-keyword">values</span> (<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;Europe&#x27;</span>),(<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;Americas&#x27;</span>),(<span class="hljs-number">3</span>,<span class="hljs-string">&#x27;Asia&#x27;</span>),(<span class="hljs-number">4</span>,<span class="hljs-string">&#x27;Middle East and Africa&#x27;</span>);<br><br><span class="hljs-comment">/*Table structure for table `emp_details_view` */</span><br><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> `emp_details_view`;<br><br><span class="hljs-comment">/*!50001 DROP VIEW IF EXISTS `emp_details_view` */</span>;<br><span class="hljs-comment">/*!50001 DROP TABLE IF EXISTS `emp_details_view` */</span>;<br><br><span class="hljs-comment">/*!50001 CREATE TABLE  `emp_details_view`(</span><br><span class="hljs-comment"> `employee_id` int(6) ,</span><br><span class="hljs-comment"> `job_id` varchar(10) ,</span><br><span class="hljs-comment"> `manager_id` int(6) ,</span><br><span class="hljs-comment"> `department_id` int(4) ,</span><br><span class="hljs-comment"> `location_id` int(4) ,</span><br><span class="hljs-comment"> `country_id` char(2) ,</span><br><span class="hljs-comment"> `first_name` varchar(20) ,</span><br><span class="hljs-comment"> `last_name` varchar(25) ,</span><br><span class="hljs-comment"> `salary` double(8,2) ,</span><br><span class="hljs-comment"> `commission_pct` double(2,2) ,</span><br><span class="hljs-comment"> `department_name` varchar(30) ,</span><br><span class="hljs-comment"> `job_title` varchar(35) ,</span><br><span class="hljs-comment"> `city` varchar(30) ,</span><br><span class="hljs-comment"> `state_province` varchar(25) ,</span><br><span class="hljs-comment"> `country_name` varchar(40) ,</span><br><span class="hljs-comment"> `region_name` varchar(25) </span><br><span class="hljs-comment">)*/</span>;<br><br><span class="hljs-comment">/*View structure for view emp_details_view */</span><br><br><span class="hljs-comment">/*!50001 DROP TABLE IF EXISTS `emp_details_view` */</span>;<br><span class="hljs-comment">/*!50001 DROP VIEW IF EXISTS `emp_details_view` */</span>;<br><br><span class="hljs-comment">/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `emp_details_view` AS select `e`.`employee_id` AS `employee_id`,`e`.`job_id` AS `job_id`,`e`.`manager_id` AS `manager_id`,`e`.`department_id` AS `department_id`,`d`.`location_id` AS `location_id`,`l`.`country_id` AS `country_id`,`e`.`first_name` AS `first_name`,`e`.`last_name` AS `last_name`,`e`.`salary` AS `salary`,`e`.`commission_pct` AS `commission_pct`,`d`.`department_name` AS `department_name`,`j`.`job_title` AS `job_title`,`l`.`city` AS `city`,`l`.`state_province` AS `state_province`,`c`.`country_name` AS `country_name`,`r`.`region_name` AS `region_name` from (((((`employees` `e` join `departments` `d`) join `jobs` `j`) join `locations` `l`) join `countries` `c`) join `regions` `r`) where ((`e`.`department_id` = `d`.`department_id`) and (`d`.`location_id` = `l`.`location_id`) and (`l`.`country_id` = `c`.`country_id`) and (`c`.`region_id` = `r`.`region_id`) and (`j`.`job_id` = `e`.`job_id`)) */</span>;<br><br><span class="hljs-comment">/*!40101 SET SQL_MODE=@OLD_SQL_MODE */</span>;<br><span class="hljs-comment">/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */</span>;<br><span class="hljs-comment">/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */</span>;<br><span class="hljs-comment">/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */</span>;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Mysql数据库</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>6_7种SQL JOINS实现</title>
    <link href="/2023/08/25/%E6%95%B0%E6%8D%AE%E5%BA%93MYSQL/6_%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2/%E4%B8%83%E7%A7%8DSQL_JOIN/"/>
    <url>/2023/08/25/%E6%95%B0%E6%8D%AE%E5%BA%93MYSQL/6_%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2/%E4%B8%83%E7%A7%8DSQL_JOIN/</url>
    
    <content type="html"><![CDATA[<h1 id="7种SQL-JOINS"><a href="#7种SQL-JOINS" class="headerlink" title="7种SQL JOINS"></a>7种SQL JOINS</h1><p><img src="/assets/image-20230822155432532.png" alt="image-20230822155432532"></p><h2 id="UNION的使用"><a href="#UNION的使用" class="headerlink" title="UNION的使用"></a>UNION的使用</h2><p>利用JNION关键字，可以给出多条SELECT语句，并将它们的结果组合成单个结果集。合并时，两个表对应的列数和数据类型必须相同，并且相互对应。各个SELECT语句之间使用JNION或UNION ALL关键字分隔。</p><h3 id="UNION"><a href="#UNION" class="headerlink" title="UNION"></a>UNION</h3><p>返回两个查询的结果集的并集。去除重复记录</p><h3 id="UNION-ALL"><a href="#UNION-ALL" class="headerlink" title="UNION ALL"></a>UNION ALL</h3><p>返回两个查询的结果集的并集，不删除重复部分</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">注意：执行<span class="hljs-built_in">UNION</span> <span class="hljs-built_in">ALL</span>语句时所需要的资源比<span class="hljs-built_in">UNION</span>语句少。如果明确知道合并数据后的结果数据不存在重复数据，或者不需要去除重复的数据，则尽量使用JNION <span class="hljs-built_in">ALL</span>语句，以提高数据查询的效率。<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs sql">#<span class="hljs-keyword">UNION</span> <span class="hljs-operator">/</span> <span class="hljs-keyword">UNION</span> <span class="hljs-keyword">ALL</span><br><span class="hljs-comment">-- 七种JOIN的实现</span><br><span class="hljs-comment">-- 中图 内连接</span><br><span class="hljs-keyword">SELECT</span> E.employee_id,D.department_name<br><span class="hljs-keyword">FROM</span> employees E <span class="hljs-keyword">JOIN</span> departments D<br><span class="hljs-keyword">ON</span> E.department_id <span class="hljs-operator">=</span> D.department_id; #<span class="hljs-number">106</span><br><span class="hljs-comment">-- 左上图 左外连接</span><br><span class="hljs-keyword">SELECT</span> E.employee_id,D.department_name<br><span class="hljs-keyword">FROM</span> employees E <span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span> departments D <br><span class="hljs-keyword">ON</span> E.department_id <span class="hljs-operator">=</span> D.department_id; #<span class="hljs-number">106</span> <span class="hljs-operator">+</span> <span class="hljs-number">1</span> <span class="hljs-operator">=</span> <span class="hljs-number">107</span><br><span class="hljs-comment">-- 右上图 右外连接</span><br><span class="hljs-keyword">SELECT</span> E.employee_id,D.department_name<br><span class="hljs-keyword">FROM</span> employees E <span class="hljs-keyword">RIGHT</span> <span class="hljs-keyword">JOIN</span> departments D <br><span class="hljs-keyword">ON</span> E.department_id <span class="hljs-operator">=</span> D.department_id; #<span class="hljs-number">106</span> <span class="hljs-operator">+</span> <span class="hljs-number">16</span> <span class="hljs-operator">=</span> <span class="hljs-number">122</span><br><span class="hljs-comment">-- 左图 左外连接</span><br><span class="hljs-keyword">SELECT</span> E.employee_id,D.department_name<br><span class="hljs-keyword">FROM</span> employees E <span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span> departments D <br><span class="hljs-keyword">ON</span> E.department_id <span class="hljs-operator">=</span> D.department_id<br><span class="hljs-keyword">WHERE</span> E.department_id <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NULL</span>;<br><span class="hljs-comment">-- 右图 右外连接</span><br><span class="hljs-keyword">SELECT</span> E.employee_id,D.department_name<br><span class="hljs-keyword">FROM</span> employees E <span class="hljs-keyword">RIGHT</span> <span class="hljs-keyword">JOIN</span> departments D <br><span class="hljs-keyword">ON</span> E.department_id <span class="hljs-operator">=</span> D.department_id<br><span class="hljs-keyword">WHERE</span> E.department_id <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NULL</span>;<br><span class="hljs-comment">-- 左下图 满外连接</span><br><span class="hljs-comment">-- 左上图 UNION ALL 右图</span><br><span class="hljs-keyword">SELECT</span> E.employee_id,D.department_name<br><span class="hljs-keyword">FROM</span> employees E <span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span> departments D <br><span class="hljs-keyword">ON</span> E.department_id <span class="hljs-operator">=</span> D.department_id<br><span class="hljs-keyword">UNION</span> <span class="hljs-keyword">ALL</span><br><span class="hljs-keyword">SELECT</span> E.employee_id,D.department_name<br><span class="hljs-keyword">FROM</span> employees E <span class="hljs-keyword">RIGHT</span> <span class="hljs-keyword">JOIN</span> departments D <br><span class="hljs-keyword">ON</span> E.department_id <span class="hljs-operator">=</span> D.department_id<br><span class="hljs-keyword">WHERE</span> E.department_id <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NULL</span>; #<span class="hljs-number">1</span> <span class="hljs-operator">+</span> <span class="hljs-number">106</span> <span class="hljs-operator">+</span> <span class="hljs-number">16</span> <span class="hljs-operator">=</span> <span class="hljs-number">123</span><br><span class="hljs-comment">-- 右上图 UNION ALL 左图</span><br><span class="hljs-keyword">SELECT</span> E.employee_id,D.department_name<br><span class="hljs-keyword">FROM</span> employees E <span class="hljs-keyword">RIGHT</span> <span class="hljs-keyword">JOIN</span> departments D <br><span class="hljs-keyword">ON</span> E.department_id <span class="hljs-operator">=</span> D.department_id<br><span class="hljs-keyword">UNION</span> <span class="hljs-keyword">ALL</span><br><span class="hljs-keyword">SELECT</span> E.employee_id,D.department_name<br><span class="hljs-keyword">FROM</span> employees E <span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span> departments D <br><span class="hljs-keyword">ON</span> E.department_id <span class="hljs-operator">=</span> D.department_id<br><span class="hljs-keyword">WHERE</span> E.department_id <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NULL</span>; #<span class="hljs-number">1</span> <span class="hljs-operator">+</span> <span class="hljs-number">106</span> <span class="hljs-operator">+</span> <span class="hljs-number">16</span> <span class="hljs-operator">=</span> <span class="hljs-number">123</span><br><span class="hljs-comment">-- 右下图 满外连接</span><br><span class="hljs-comment">-- 左图 UNION ALL 右图</span><br><span class="hljs-keyword">SELECT</span> E.employee_id,D.department_name<br><span class="hljs-keyword">FROM</span> employees E <span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span> departments D <br><span class="hljs-keyword">ON</span> E.department_id <span class="hljs-operator">=</span> D.department_id<br><span class="hljs-keyword">WHERE</span> E.department_id <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NULL</span><br><span class="hljs-keyword">UNION</span> <span class="hljs-keyword">ALL</span><br><span class="hljs-keyword">SELECT</span> E.employee_id,D.department_name<br><span class="hljs-keyword">FROM</span> employees E <span class="hljs-keyword">RIGHT</span> <span class="hljs-keyword">JOIN</span> departments D <br><span class="hljs-keyword">ON</span> E.department_id <span class="hljs-operator">=</span> D.department_id<br><span class="hljs-keyword">WHERE</span> E.department_id <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NULL</span>; #<span class="hljs-number">1</span> <span class="hljs-operator">+</span> <span class="hljs-number">16</span> <span class="hljs-operator">=</span> <span class="hljs-number">17</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Mysql数据库</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>4_运算符</title>
    <link href="/2023/08/25/%E6%95%B0%E6%8D%AE%E5%BA%93MYSQL/4_%E8%BF%90%E7%AE%97%E7%AC%A6/%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    <url>/2023/08/25/%E6%95%B0%E6%8D%AE%E5%BA%93MYSQL/4_%E8%BF%90%E7%AE%97%E7%AC%A6/%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
    
    <content type="html"><![CDATA[<h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><h2 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h2><p><img src="/assets/image-20230821145325487.png" alt="image-20230821145325487"></p><p>特殊举例</p><p><img src="/assets/image-20230821145521055.png" alt="image-20230821145521055"></p><p>此时字符串转换为数值，隐式转换</p><p><img src="/assets/image-20230821145656911.png" alt="image-20230821145656911"></p><p>‘s’当作0处理</p><p><img src="/assets/image-20230821145801342.png" alt="image-20230821145801342"></p><p>null与任何值运算结果都为null</p><p><img src="/assets/image-20230821145923033.png" alt="image-20230821145923033"></p><p>运算错误，输出null</p><p><img src="/assets/image-20230821150012310.png" alt="image-20230821150012310"></p><p>除法运算结果为浮点型数值</p><p><img src="/assets/image-20230821150344770.png" alt="image-20230821150344770"></p><p>结果正负取决于被除数的正负</p><h2 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h2><p>比较运算符用来对表达式左边的操作数和右边的操作数进行比较，比较的结果为真则返回1，比较的结果为假则返回0,其他情况则返回NULL。</p><p><img src="/assets/image-20230821150648725.png" alt="image-20230821150648725"></p><h3 id><a href="#" class="headerlink" title="&#x3D;"></a>&#x3D;</h3><p><img src="/assets/image-20230821150955048.png" alt="image-20230821150955048"></p><p>字符与数值的比较，字符隐式转换为0</p><p><img src="/assets/image-20230821151049711.png" alt="image-20230821151049711"></p><p>字符串的比较是根据ascii比较</p><p><img src="/assets/image-20230821151249968.png" alt="image-20230821151249968"></p><p><strong>null与任何值比较均为null</strong></p><p><img src="/assets/image-20230821151546184.png" alt="image-20230821151546184"></p><p>结果原因是where后面的条件语句不会返回0或1而是null不满足过滤</p><h3 id="-1"><a href="#-1" class="headerlink" title="&lt;&#x3D;&gt;"></a>&lt;&#x3D;&gt;</h3><p>&lt;&#x3D;&gt;安全等于号，（为null）特征是可以与null进行比较</p><p><img src="/assets/image-20230821152226108.png" alt="image-20230821152226108"></p><p><img src="/assets/image-20230821152709325.png" alt="image-20230821152709325"></p><h3 id="-2"><a href="#-2" class="headerlink" title="&lt;&gt;"></a>&lt;&gt;</h3><p>与!&#x3D;等价，并非&lt;&#x3D;&gt;的对立，容易误解</p><h3 id="字段"><a href="#字段" class="headerlink" title="字段"></a>字段</h3><p><img src="/assets/image-20230821153218957.png" alt="image-20230821153218957"></p><h4 id="IS-NULL-IS-NOT-NULL-ISNULL"><a href="#IS-NULL-IS-NOT-NULL-ISNULL" class="headerlink" title="IS NULL\IS NOT NULL\ISNULL()"></a>IS NULL\IS NOT NULL\ISNULL()</h4><p><img src="/assets/image-20230821153332600.png" alt="image-20230821153332600"></p><p><img src="/assets/image-20230821155142906.png" alt="image-20230821155142906"></p><h4 id="LEAST-GREATEST"><a href="#LEAST-GREATEST" class="headerlink" title="LEAST()&#x2F;GREATEST()"></a>LEAST()&#x2F;GREATEST()</h4><p><img src="/assets/image-20230821155417375.png" alt="image-20230821155417375"></p><h4 id="NOT-BETWEEN-…-AND-…"><a href="#NOT-BETWEEN-…-AND-…" class="headerlink" title="(NOT) BETWEEN … AND …"></a>(NOT) BETWEEN … AND …</h4><p>BETWEEN A AND B取值范围[A,B]</p><h4 id="NOT-IN"><a href="#NOT-IN" class="headerlink" title="(NOT) IN()"></a>(NOT) IN()</h4><p>A (NOT) IN(A,B,C,D,E);</p><h4 id="LIKE"><a href="#LIKE" class="headerlink" title="LIKE"></a>LIKE</h4><p>%代表不确定个数的字符</p><p>_代表确定1个单位的字符</p><p><img src="/assets/image-20230821160101265.png" alt="image-20230821160101265"></p><p><img src="/assets/image-20230821160115890.png" alt="image-20230821160115890"></p><p><img src="/assets/image-20230821160132407.png" alt="image-20230821160132407"></p><p>查询first name中包含字符’a’且包含字符’e’的员工信息</p><p><img src="/assets/image-20230821160444178.png" alt="image-20230821160444178"></p><p><img src="/assets/image-20230821160651147.png" alt="image-20230821160651147"></p><p>查询第2个字符是’a’的员工信息</p><p><img src="/assets/image-20230821160900273.png" alt="image-20230821160900273"></p><p>查询第2个字符是_且第3个字符是’a’的员工信息</p><p>需要转义字符\</p><p><img src="/assets/image-20230821162107382.png"></p><p>或者</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">where</span> name <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;_$_a%&#x27;</span> <span class="hljs-keyword">ESCAPE</span> <span class="hljs-string">&#x27;$&#x27;</span>;<br></code></pre></td></tr></table></figure><h4 id="REGEXP-RLIKE"><a href="#REGEXP-RLIKE" class="headerlink" title="REGEXP&#x2F;RLIKE"></a>REGEXP&#x2F;RLIKE</h4><p>正则表达式</p><p><img src="/assets/image-20230821162646926.png" alt="image-20230821162646926"></p><p><img src="/assets/image-20230821162819840.png" alt="image-20230821162819840"></p><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><p><img src="/assets/image-20230821162936055.png" alt="image-20230821162936055"></p><p>XOR逻辑异或，追求的是异</p><p><img src="/assets/image-20230821164908665.png" alt="image-20230821164908665"></p><p><img src="/assets/image-20230821164941183.png" alt="image-20230821164941183"></p><p><img src="/assets/image-20230821164957902.png" alt="image-20230821164957902"></p><h2 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h2><p><img src="/assets/image-20230821165340165.png" alt="image-20230821165340165"></p><h2 id="运算符的优先级"><a href="#运算符的优先级" class="headerlink" title="运算符的优先级"></a>运算符的优先级</h2><p><img src="/assets/image-20230821165509820.png" alt="image-20230821165509820"></p>]]></content>
    
    
    <categories>
      
      <category>Mysql数据库</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>7_单行函数</title>
    <link href="/2023/08/25/%E6%95%B0%E6%8D%AE%E5%BA%93MYSQL/7_%E5%8D%95%E8%A1%8C%E5%87%BD%E6%95%B0/%E5%8D%95%E8%A1%8C%E5%87%BD%E6%95%B0/"/>
    <url>/2023/08/25/%E6%95%B0%E6%8D%AE%E5%BA%93MYSQL/7_%E5%8D%95%E8%A1%8C%E5%87%BD%E6%95%B0/%E5%8D%95%E8%A1%8C%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="单行函数"><a href="#单行函数" class="headerlink" title="单行函数"></a>单行函数</h1><p> <a href="%E7%AC%AC07%E7%AB%A0_%E5%8D%95%E8%A1%8C%E5%87%BD%E6%95%B0.pdf">第07章_单行函数.pdf</a> </p><ul><li>操作数据对象</li><li>接受参数返回一个结果</li><li>只对一行进行变换</li><li>每行返回一个结果</li><li>可以嵌套</li><li>参数可以是一列或一个值</li></ul><h2 id="数值函数"><a href="#数值函数" class="headerlink" title="数值函数"></a>数值函数</h2><p><img src="/assets/image-20230823121851527.png" alt="image-20230823121851527"></p><p><img src="/assets/image-20230823122242286.png" alt="image-20230823122242286"></p><p><img src="/assets/image-20230823122316253.png" alt="image-20230823122316253"></p><p><img src="/assets/image-20230823122346246.png" alt="image-20230823122346246"></p><p><img src="/assets/image-20230823122814958.png" alt="image-20230823122814958"></p><p><img src="/assets/image-20230823122849806.png" alt="image-20230823122849806"></p><h2 id="三角函数"><a href="#三角函数" class="headerlink" title="三角函数"></a>三角函数</h2><p><img src="/assets/image-20230823123009353.png" alt="image-20230823123009353"></p><p><img src="/assets/image-20230823123121051.png" alt="image-20230823123121051"></p><p><img src="/assets/image-20230823123143511.png" alt="image-20230823123143511"></p><p><img src="/assets/image-20230823123215146.png" alt="image-20230823123215146"></p><p><img src="/assets/image-20230823123233399.png" alt="image-20230823123233399"></p><p><img src="/assets/image-20230823123337083.png" alt="image-20230823123337083"></p><h2 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h2><p><img src="/assets/image-20230823124056660.png" alt="image-20230823124056660"></p><p><img src="/assets/image-20230823124114629.png" alt="image-20230823124114629"></p><blockquote><p>注意：MySQL中，字符串的位置是从1开始的。</p></blockquote><h2 id="日期和时间函数"><a href="#日期和时间函数" class="headerlink" title="日期和时间函数"></a>日期和时间函数</h2><p><img src="/assets/image-20230823124255720.png" alt="image-20230823124255720"></p><h4 id="获取月份、星期、星期数、天数等函数"><a href="#获取月份、星期、星期数、天数等函数" class="headerlink" title="获取月份、星期、星期数、天数等函数"></a><strong>获取月份、星期、星期数、天数等函数</strong></h4><p><img src="/assets/image-20230823124441499.png" alt="image-20230823124441499"></p><h2 id="流程控制函数"><a href="#流程控制函数" class="headerlink" title="流程控制函数"></a>流程控制函数</h2><p><img src="/assets/image-20230823124809750.png" alt="image-20230823124809750"></p><p><img src="/assets/image-20230823124913247.png" alt="image-20230823124913247"></p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> 条件<span class="hljs-number">1</span> <span class="hljs-keyword">THEN</span> 输出结果<span class="hljs-number">1</span> <br><span class="hljs-keyword">WHEN</span> 条件<span class="hljs-number">2</span> <span class="hljs-keyword">THEN</span> 输出结果<span class="hljs-number">2</span><br><span class="hljs-keyword">WHEN</span> 条件<span class="hljs-number">3</span> <span class="hljs-keyword">THEN</span> 输出结果<span class="hljs-number">3</span><br><span class="hljs-keyword">ELSE</span> 输出结果<span class="hljs-number">4</span><br><span class="hljs-keyword">END</span>                   <span class="hljs-comment">----------------------------相当于java的if-else</span><br><br><br><br></code></pre></td></tr></table></figure><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">IFNULL</span>(<span class="hljs-literal">null</span>,<span class="hljs-string">&#x27;Hello Word&#x27;</span>)<br>-&gt;Hello Word<br><br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">CASE</span><br><span class="hljs-keyword">WHEN</span> <span class="hljs-number">1</span> &gt; <span class="hljs-number">0</span><br><span class="hljs-keyword">THEN</span> <span class="hljs-string">&#x27;1 &gt; 0&#x27;</span><br><span class="hljs-keyword">WHEN</span> <span class="hljs-number">2</span> &gt; <span class="hljs-number">0</span><br><span class="hljs-keyword">THEN</span> <span class="hljs-string">&#x27;2 &gt; 0&#x27;</span><br><span class="hljs-keyword">ELSE</span> <span class="hljs-string">&#x27;3 &gt; 0&#x27;</span><br><span class="hljs-keyword">END</span><br>-&gt;<span class="hljs-number">1</span> &gt; <span class="hljs-number">0</span><br><br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">CASE</span> <span class="hljs-number">1</span><br><span class="hljs-keyword">WHEN</span> <span class="hljs-number">1</span> <span class="hljs-keyword">THEN</span> <span class="hljs-string">&#x27;我是1&#x27;</span><br><span class="hljs-keyword">WHEN</span> <span class="hljs-number">2</span> <span class="hljs-keyword">THEN</span> <span class="hljs-string">&#x27;我是2&#x27;</span><br><span class="hljs-keyword">ELSE</span> <span class="hljs-string">&#x27;你是谁&#x27;</span><br><span class="hljs-keyword">END</span><br><br><span class="hljs-keyword">SELECT</span> employee_id,salary, <span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> salary&gt;=<span class="hljs-number">15000</span> <span class="hljs-keyword">THEN</span> <span class="hljs-string">&#x27;高薪&#x27;</span><br><span class="hljs-keyword">WHEN</span> salary&gt;=<span class="hljs-number">10000</span> <span class="hljs-keyword">THEN</span> <span class="hljs-string">&#x27;潜力股&#x27;</span><br><span class="hljs-keyword">WHEN</span> salary&gt;=<span class="hljs-number">8000</span> <span class="hljs-keyword">THEN</span> <span class="hljs-string">&#x27;屌丝&#x27;</span><br><span class="hljs-keyword">ELSE</span> <span class="hljs-string">&#x27;草根&#x27;</span> <span class="hljs-keyword">END</span> <span class="hljs-string">&quot;描述&quot;</span><br><span class="hljs-keyword">FROM</span> employees;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Mysql数据库</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>5_排序数据</title>
    <link href="/2023/08/25/%E6%95%B0%E6%8D%AE%E5%BA%93MYSQL/5_%E6%8E%92%E5%BA%8F%E4%B8%8E%E5%88%86%E9%A1%B5/%E6%8E%92%E5%BA%8F%E4%B8%8E%E5%88%86%E9%A1%B5/"/>
    <url>/2023/08/25/%E6%95%B0%E6%8D%AE%E5%BA%93MYSQL/5_%E6%8E%92%E5%BA%8F%E4%B8%8E%E5%88%86%E9%A1%B5/%E6%8E%92%E5%BA%8F%E4%B8%8E%E5%88%86%E9%A1%B5/</url>
    
    <content type="html"><![CDATA[<h1 id="排序数据"><a href="#排序数据" class="headerlink" title="排序数据"></a>排序数据</h1><h2 id="sql语句的执行顺序"><a href="#sql语句的执行顺序" class="headerlink" title="sql语句的执行顺序"></a>sql语句的执行顺序</h2><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs tex">1.先经过FROM过滤条件，筛选出数据<br>2.再经过SELECT查询需求截取数据，并发现某列具备别名<br>3.最后看ORDER BY的排序补充，因此别名也可以在此运用<br></code></pre></td></tr></table></figure><h2 id="排序规则"><a href="#排序规则" class="headerlink" title="排序规则"></a>排序规则</h2><ul><li>ORDER BY<ul><li>ASC升序(ascend) 默认</li><li>DESC倒序(descend)</li></ul></li></ul><p>没有排序操作，默认按添加数据的顺序进行排序，可以用列的别名编写排序</p><p>按照salary从高到低的顺序显示员工信息（一级排序）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> salary <span class="hljs-keyword">FROM</span> employees<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> salary <span class="hljs-keyword">DESC</span>;<br><br><span class="hljs-keyword">SELECT</span> employee_id,salary <span class="hljs-string">&#x27;employee_salary&#x27;</span> <span class="hljs-keyword">FROM</span> employees<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> employee_salary <span class="hljs-keyword">ASC</span>;<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20230821175616652.png" alt="image-20230821175616652"></p><p>按照salary从高到低的顺序显示员工信息的基础上，对salary升序排列（二级排序）</p><p><img src="/assets/image-20230821182111105.png" alt="image-20230821182111105"></p><p>补充</p><p>先对department_id升序排列再对相同department_id的salary进行升序排列</p><p><img src="/assets/image-20230821182237755.png" alt="image-20230821182237755"></p><h1 id="分页操作"><a href="#分页操作" class="headerlink" title="分页操作"></a>分页操作</h1><p>关键字LIMIT 从第n条数据开始往后查看m条数据 </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql">LIMIT n,m<br>或<br>LIMIT m          默认LIMIT <span class="hljs-number">0</span>,m<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20230821183035480.png" alt="image-20230821183035480"></p><p>需求：每页显示pageSize条记录，此时显示第pageNo页：<br>公式：LIMIT (pageNo - 1) * pagesize , pagesize;</p><p><img src="/assets/image-20230821183629895.png" alt="image-20230821183629895"></p><p>表里有107条数据，我们只想要显示第32、33条数据怎么办呢？</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">limit <span class="hljs-number">31</span>,<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>mysql8.0新特性 LIMIT … OFFSET …(两个数值调换位置)</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">limit</span> <span class="hljs-number">31</span>,<span class="hljs-number">2</span> <br>等价于<br><span class="hljs-keyword">limit</span> <span class="hljs-number">2</span> <span class="hljs-keyword">offset</span> <span class="hljs-number">31</span><br></code></pre></td></tr></table></figure><p>查询员工表中工资最高的员工信息</p><p><img src="/assets/image-20230821185559252.png" alt="image-20230821185559252"></p>]]></content>
    
    
    <categories>
      
      <category>Mysql数据库</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>8_聚合函数</title>
    <link href="/2023/08/25/%E6%95%B0%E6%8D%AE%E5%BA%93MYSQL/8_%E8%81%9A%E5%90%88%E5%87%BD%E6%95%B0/%E8%81%9A%E5%90%88%E5%87%BD%E6%95%B0/"/>
    <url>/2023/08/25/%E6%95%B0%E6%8D%AE%E5%BA%93MYSQL/8_%E8%81%9A%E5%90%88%E5%87%BD%E6%95%B0/%E8%81%9A%E5%90%88%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h1><p>聚合函数作用于一组数据，并对一组数据返回一个值。</p><h2 id="常见的聚合函数"><a href="#常见的聚合函数" class="headerlink" title="常见的聚合函数"></a>常见的聚合函数</h2><blockquote><p>AVG() &#x2F; SUM() 适用于数值类型的字段 二者均不会计算空值的数据</p><p>MAX() &#x2F; MIN() 适用于数值类型,字符串类型,日期时间类型的字段</p><p>COUNT()</p></blockquote><p>COUNT(常数或者*)表示该字段一共有多少条数据</p><p><img src="/assets/image-20230823151906922.png" alt="image-20230823151906922"></p><p>COUNT(具体字段)表示具体字段不为null的数量.</p><p><img src="/assets/image-20230823152255410.png" alt="image-20230823152255410"></p><blockquote><p>需要统计表中的记录数，使用COUNT(*)、COUNT(1)、COUNT(具体字段)哪个效率更高呢？</p></blockquote><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">如果使用的是MyISAM存储引擎,则三者都是O(1)<br>如果使用的是InnoDB存储引擎,则COUNT(*) = COUNT(1) &gt; COUNT(字段)<br></code></pre></td></tr></table></figure><h2 id="GROUP-BY"><a href="#GROUP-BY" class="headerlink" title="GROUP BY"></a>GROUP BY</h2><p><img src="/assets/image-20230823155234307.png" alt="image-20230823155234307"></p><blockquote><p> 需求:查询各个部门的平均工资,最高工资</p></blockquote><p><img src="/assets/image-20230823155959401.png" alt="image-20230823155959401"><img src="/assets/image-20230823160030413.png" alt="image-20230823160030413"></p><blockquote><p>查询各个department_id,job_id的平均工资</p></blockquote><p><img src="/assets/image-20230823161025454.png" alt="image-20230823161025454"></p><blockquote><p>SELECT 中非组函数的字段必须声明在GROUP BY中,而GROUP BY的字段不一定要出现在SELECT中.</p><p>GROUP BY 声明在FROM后面,WHERE后面,ORDER BY 前面,LIMIT前面</p><p>WITH ROLLUP 使用该关键字之后，在所有查询出的分组记录之后增加一条记录，该记录计算查询出的所有记录的总和，即统计记录数量。使用时不能同时使用ORDER BY字句结果进行排序,即互斥</p></blockquote><h3 id="WITH-ROLLUP"><a href="#WITH-ROLLUP" class="headerlink" title="WITH ROLLUP"></a>WITH ROLLUP</h3><p><img src="/assets/image-20230823163809844.png" alt="image-20230823163809844"></p><p><img src="/assets/image-20230823163826297.png" alt="image-20230823163826297"></p><h2 id="HAVING"><a href="#HAVING" class="headerlink" title="HAVING"></a>HAVING</h2><blockquote><p>在分组后进行过滤数据</p></blockquote><img src="/2023/08/25/%E6%95%B0%E6%8D%AE%E5%BA%93MYSQL/8_%E8%81%9A%E5%90%88%E5%87%BD%E6%95%B0/%E8%81%9A%E5%90%88%E5%87%BD%E6%95%B0/image-20230823164511801.png" alt="image-20230823164511801" style="zoom: 67%;"><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs text">1.如果过滤条件中使用了聚合函数，则必须使用HAVING来替换WHERE。否则，报错。<br>2.HAVING必须声明在GROUP BY后面<br>3.开发中使用HAVING的前提是SQL中使用了GROUP BY<br></code></pre></td></tr></table></figure><blockquote><p>查询部门id为10,20,30,40这四个部门中最高工资比10000高的部门</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 查询各个部门中最高工资比10000高的部门</span><br><span class="hljs-keyword">SELECT</span> D.department_name,<span class="hljs-built_in">MAX</span>(E.salary)<br><span class="hljs-keyword">FROM</span> employees E,departments D<br><span class="hljs-keyword">WHERE</span> E.department_id <span class="hljs-operator">=</span> D.department_id<br><span class="hljs-keyword">AND</span> E.department_id <span class="hljs-keyword">IN</span>(<span class="hljs-number">10</span>,<span class="hljs-number">20</span>,<span class="hljs-number">30</span>,<span class="hljs-number">40</span>)<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> D.department_name<br><span class="hljs-keyword">HAVING</span> <span class="hljs-built_in">MAX</span>(E.salary) <span class="hljs-operator">&gt;</span> <span class="hljs-number">10000</span>;<br></code></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">当过滤条件中有聚合函数时,则此过滤条件必须声明在HAVING中.<br>当过滤条件中没有聚合函数时,建议将此过滤条件声明在WHERE中.<br></code></pre></td></tr></table></figure><h2 id="WHERE与HAVING的对比"><a href="#WHERE与HAVING的对比" class="headerlink" title="WHERE与HAVING的对比"></a>WHERE与HAVING的对比</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs text">1.从适用范围上来讲，HAVING的适用范围更广。<br>2.如果过滤条件中没有聚合函数：这种情况下，WHERE的执行效率要高于HAVING<br>如果需要通过连接从关联表中获取需要的数据，WHERE是先筛选后连接，而HAVING是先连接后筛选。<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20230824011421486.png" alt="image-20230824011421486"></p><h1 id="SQL底层执行原理-1"><a href="#SQL底层执行原理-1" class="headerlink" title="SQL底层执行原理(1)"></a>SQL底层执行原理(1)</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs TEST">SQL92<br>SELECT ...,...,...(存在聚合函数)<br>FROM ...,...,...<br>WHERE 多表连接条件 AND 不包含聚合函数过滤条件<br>GROUP BY ...,...<br>HAVING 包含聚合函数的过滤条件<br>ORDER BY ...,...(ASC/DESC)<br>LIMIT ...,...<br><br>---------------------------执行过程------------------------------<br><br><br></code></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs TEXT">SQL99<br>SELECT ...,...,...(存在聚合函数)<br>FROM ...(LEFT/RIGHT)JOIN...ON<br>多表的连接条件<br>...(LEFT/RIGHT)JOIN...ON...<br>WHERE 不包含聚合函数过滤条件<br>GROUP BY ...,...<br>HAVING 包含聚合函数的过滤条件<br>ORDER BY ...,...(ASC/DESC)<br>LIMIT ...,...<br><br>---------------------------执行过程------------------------------<br>FROM ...,... -&gt; ON -&gt; (LEFT/RIGHT JOIN) -&gt; WHERE -&gt; GROUP BY -&gt;HAVING -&gt; SELECT -&gt; DISTINCT -&gt; ORDER BY -&gt; LIMIT <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Mysql数据库</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>9_子查询（嵌套查询）</title>
    <link href="/2023/08/25/%E6%95%B0%E6%8D%AE%E5%BA%93MYSQL/9_%E5%AD%90%E6%9F%A5%E8%AF%A2/%E5%AD%90%E6%9F%A5%E8%AF%A2%EF%BC%88%E5%B5%8C%E5%A5%97%E6%9F%A5%E8%AF%A2%EF%BC%89/"/>
    <url>/2023/08/25/%E6%95%B0%E6%8D%AE%E5%BA%93MYSQL/9_%E5%AD%90%E6%9F%A5%E8%AF%A2/%E5%AD%90%E6%9F%A5%E8%AF%A2%EF%BC%88%E5%B5%8C%E5%A5%97%E6%9F%A5%E8%AF%A2%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h1><h2 id="需求分析与问题解决"><a href="#需求分析与问题解决" class="headerlink" title="需求分析与问题解决"></a>需求分析与问题解决</h2><h3 id="实际问题"><a href="#实际问题" class="headerlink" title="实际问题"></a>实际问题</h3><p><img src="/assets/image-20230824160351727.png" alt="image-20230824160351727"></p><p>SQL中子查询的使用大大增强了SELECT查询的能力，因为很多时候查询需要从结果集中获取数据，或者需要从同一个表中先计算得出一个数据结果，然后与这个数据结果（可能是某个标量，也可能是某个集合）进行比较。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 谁的工资比Abel高</span><br><span class="hljs-comment">-- 方式1</span><br><span class="hljs-keyword">SELECT</span> last_name,salary<br><span class="hljs-keyword">FROM</span> employees <br><span class="hljs-keyword">WHERE</span> last_name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;Abel&#x27;</span>;<br><br><span class="hljs-keyword">SELECT</span> last_name,salary<br><span class="hljs-keyword">FROM</span> employees<br><span class="hljs-keyword">WHERE</span> salary <span class="hljs-operator">&gt;</span> <span class="hljs-number">11000</span>;<br><span class="hljs-comment">-- 方式2 自连接</span><br><span class="hljs-keyword">SELECT</span> E1.last_name,E1.salary<br><span class="hljs-keyword">FROM</span> employees E <span class="hljs-keyword">JOIN</span> employees E1<br><span class="hljs-keyword">ON</span> E.last_name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;Abel&#x27;</span> <span class="hljs-keyword">AND</span> E1.salary <span class="hljs-operator">&gt;</span> E.salary; <br><span class="hljs-comment">-- 方式3 子查询</span><br><span class="hljs-keyword">SELECT</span> last_name,salary<br><span class="hljs-keyword">FROM</span> employees <br><span class="hljs-keyword">WHERE</span> salary <span class="hljs-operator">&gt;</span> (<br><span class="hljs-keyword">SELECT</span> salary<br><span class="hljs-keyword">FROM</span> employees <br><span class="hljs-keyword">WHERE</span> last_name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;Abel&#x27;</span><br>);<br></code></pre></td></tr></table></figure><p><strong>称谓的规范</strong>：外查询（主查询），内查询（子查询）</p><ul><li>子查询在主查询之前一次执行完成</li><li>子查询的结果被主查询使用</li><li>子查询要包含在括号内</li><li>建议子查询放在比较条件的右侧，提高可读性</li><li>单行操作符对应单行子查询，多行操作符对应多行子查询</li></ul><h3 id="子查询的分类"><a href="#子查询的分类" class="headerlink" title="子查询的分类"></a>子查询的分类</h3><p>子查询可以分为单行子查询和多行子查</p><blockquote><p>子查询返回类型只有一行数据为单行子查询</p></blockquote><p>亦可分为相关（关联）子查询和不相关（非关联）子查询</p><blockquote><p>相关子查询：内查询是否被执行多次– 查询工资大于本部门平均工资的员工信息</p><p>不相关子查询：查询工资大于本公司平均工资的员工信息</p></blockquote><h2 id="单行子查询"><a href="#单行子查询" class="headerlink" title="单行子查询"></a>单行子查询</h2><p>单行运算符：略</p><blockquote><p>查询工资大于149号员工工资的员工的信息</p></blockquote><p><img src="/assets/image-20230825225711866.png" alt="image-20230825225711866"></p><blockquote><p>返回job_id与141号员工相同，salary比143号员工多的员工姓名，job_id和工资</p></blockquote><p><img src="/assets/image-20230825230808215.png" alt="image-20230825230808215"></p><blockquote><p>返回公司工资最少的员工的last_name,job_id,salary</p></blockquote><p><img src="/assets/image-20230826124549173.png" alt="image-20230826124549173"></p><blockquote><p>查询与141号员工的manager_id和department_id相同的其他员工employee_id,manager_id,department_id</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-comment">-- 方式1</span><br><span class="hljs-keyword">SELECT</span> employee_id,manager_id,department_id<br><span class="hljs-keyword">FROM</span> employees <span class="hljs-keyword">WHERE</span> manager_id <span class="hljs-operator">=</span> (<br><span class="hljs-keyword">SELECT</span> manager_id <span class="hljs-keyword">FROM</span> employees<br><span class="hljs-keyword">WHERE</span> employee_id <span class="hljs-operator">=</span> <span class="hljs-number">141</span><br>) <span class="hljs-keyword">AND</span> department_id <span class="hljs-operator">=</span> (<br><span class="hljs-keyword">SELECT</span> department_id <span class="hljs-keyword">FROM</span> employees <br><span class="hljs-keyword">WHERE</span> employee_id <span class="hljs-operator">=</span> <span class="hljs-number">141</span><br>) <span class="hljs-keyword">AND</span> employee_id <span class="hljs-operator">!=</span> <span class="hljs-number">141</span>;<br><span class="hljs-comment">-- 方式2</span><br><span class="hljs-keyword">SELECT</span> employee_id,manager_id,department_id<br><span class="hljs-keyword">FROM</span> employees <span class="hljs-keyword">WHERE</span> <br>(manager_id,department_id) <span class="hljs-operator">=</span> (<br><span class="hljs-keyword">SELECT</span> manager_id,department_id<br><span class="hljs-keyword">FROM</span> employees<br><span class="hljs-keyword">WHERE</span> employee_id <span class="hljs-operator">=</span> <span class="hljs-number">141</span><br>) <span class="hljs-keyword">AND</span> employee_id <span class="hljs-operator">&lt;&gt;</span> <span class="hljs-number">141</span> ;<br></code></pre></td></tr></table></figure><h3 id="HAVING子查询"><a href="#HAVING子查询" class="headerlink" title="HAVING子查询"></a>HAVING子查询</h3><blockquote><p>查询最低工资大于20号部门最低工资的部门id和其最低工资</p></blockquote><p><img src="/assets/image-20230826125423349.png" alt="image-20230826125423349"></p><blockquote><p>显式员工的employee_id,last_name和location。其中，若员工department_id与location_id为1800的department_id相同，则location为’Canada’,其余则为’USA’。</p></blockquote><p><img src="/assets/image-20230826132624542.png" alt="image-20230826132624542"></p><h3 id="子查询的空值问题"><a href="#子查询的空值问题" class="headerlink" title="子查询的空值问题"></a>子查询的空值问题</h3><p>子查询查询是空值</p><h3 id="非法使用子查询"><a href="#非法使用子查询" class="headerlink" title="非法使用子查询"></a>非法使用子查询</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> employee_id,last_name,salary,department_id <span class="hljs-keyword">FROM</span> employees <br><span class="hljs-keyword">WHERE</span> salary <span class="hljs-operator">=</span> (<span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">MIN</span>(salary) <span class="hljs-keyword">FROM</span> employees <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> department_id);<br>## 不能用 <span class="hljs-operator">=</span><br></code></pre></td></tr></table></figure><h2 id="多行子查询"><a href="#多行子查询" class="headerlink" title="多行子查询"></a>多行子查询</h2><h3 id="多行比较操作符"><a href="#多行比较操作符" class="headerlink" title="多行比较操作符"></a>多行比较操作符</h3><p><img src="/assets/image-20230826133606676.png" alt="image-20230826133606676"></p><blockquote><p>题目：返回其它job_id中比job_id为’IT PROG’部门任一工资低的员工的员工号，姓名，job_id以及salary</p></blockquote><p><img src="/assets/image-20230826180240499.png" alt="image-20230826180240499"></p><blockquote><p>返回所有job_id中比job_id为’IT PROG’部门任一工资低的员工的员工号，姓名，job id以及salary</p></blockquote><p><img src="/assets/image-20230826180451746.png" alt="image-20230826180451746"></p><blockquote><p>查询平均工资最低的部门 聚合函数不允许嵌套使用</p></blockquote><p><img src="/assets/image-20230826213932828.png" alt="image-20230826213932828"></p><p><img src="/assets/image-20230826214634624.png" alt="image-20230826214634624"></p><h3 id="空值问题的处理"><a href="#空值问题的处理" class="headerlink" title="空值问题的处理"></a>空值问题的处理</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">-- 例如对department_id not in（123,99,null）即可看作是not(department_id =123 or department_id=99 or department_id=null)<br>-- 满足括号的所有条件， 进一步理解为(department_id != 123 and department_id!=99 and department_id != null)<br></code></pre></td></tr></table></figure><p><img src="/assets/image-20230826220110442.png" alt="image-20230826220110442"></p><p><img src="/assets/image-20230826220146087.png" alt="image-20230826220146087"></p><h2 id="相关子查询"><a href="#相关子查询" class="headerlink" title="相关子查询"></a>相关子查询</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">如果子查询的执行依赖于外部查询，通常情况下都是因为子查询中的表用到了外部的表，并进行了条件关联，因此每执行一次外部查询，子查询都要重新计算一次，这样的子查询就称之为关联子查询。相关子查询按照一行接一行的顺序执行，主查询的每一行都执行一次子查询。<br></code></pre></td></tr></table></figure><blockquote><p>查询员工中工资大于本部门平均工资的员工的last_name,salary和其department_id</p></blockquote><p><img src="/assets/image-20230826222015328.png" alt="image-20230826222015328"></p><p><img src="/assets/image-20230826223921486.png" alt="image-20230826223921486"></p><blockquote><p>若employees表中employee_id与job_history表中employee_id相同的数目不小于2，输出这些相同id的员工的employee_id,last_name和其job_id</p></blockquote><p><img src="/assets/image-20230826231644906.png" alt="image-20230826231644906"></p><h3 id="EXISTS与NOT-EXISTS关键字"><a href="#EXISTS与NOT-EXISTS关键字" class="headerlink" title="EXISTS与NOT EXISTS关键字"></a>EXISTS与NOT EXISTS关键字</h3><ul><li><p>关联子查询通常也会和EXISTS操作符一起来使用，用来检查在子查询中是否存在满足条件的行。</p></li><li><p>如果在子查询中不存在满足条件的行</p><ul><li>条件返回FALSE</li><li>继续在子查询中查找</li></ul></li><li><p>如果在子查询中存在满足条件的行：</p><ul><li>不在子查询中继续查找</li><li>条件返回TRUE</li></ul></li><li><p>NOT EXISTS关键字表示如果不存在某种条件，则返回TRUE,否则返回FALSE。</p><blockquote><p>查询公司管理者的employee_.id,last_name,job_id,department_id信息</p></blockquote><p><img src="/assets/image-20230827081547498.png" alt="image-20230827081547498"></p><blockquote><p>查询departments表中，不存在于employees:表中的部门的department_id和department_name</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 查询departments表中，不存在于employees表中的部门的department_id和department._name</span><br><span class="hljs-keyword">SELECT</span> department_id,department_name<br><span class="hljs-keyword">FROM</span> departments D<br><span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span>(<span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> employees E <span class="hljs-keyword">WHERE</span> E.department_id <span class="hljs-operator">=</span> D.department_id);<br><span class="hljs-comment">-- </span><br><span class="hljs-keyword">SELECT</span> D.department_id,D.department_name,E.department_id<br><span class="hljs-keyword">FROM</span> employees E <span class="hljs-keyword">RIGHT</span> <span class="hljs-keyword">JOIN</span> departments D<br><span class="hljs-keyword">ON</span> E.department_id <span class="hljs-operator">=</span> D.department_id<br><span class="hljs-keyword">WHERE</span> E.department_id <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NULL</span>;<br></code></pre></td></tr></table></figure></li></ul><h1 id="SQL底层执行原理-2"><a href="#SQL底层执行原理-2" class="headerlink" title="SQL底层执行原理(2)"></a>SQL底层执行原理(2)</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs TEXT">SQL99<br>除了GROUP BY和LIMIT之外，其他位置都可声明子查询<br><br>SELECT ...,...,...(存在聚合函数)<br>FROM ...(LEFT/RIGHT)JOIN...ON<br>多表的连接条件<br>...(LEFT/RIGHT)JOIN...ON...<br>WHERE 不包含聚合函数过滤条件<br>GROUP BY ...,...<br>HAVING 包含聚合函数的过滤条件<br>ORDER BY ...,...(ASC/DESC)<br>LIMIT ...,...<br><br>---------------------------执行过程------------------------------<br>FROM ...,... -&gt; ON -&gt; (LEFT/RIGHT JOIN) -&gt; WHERE -&gt; GROUP BY -&gt;HAVING -&gt; SELECT -&gt; DISTINCT -&gt; ORDER BY -&gt; LIMIT <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Mysql数据库</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>KaiGod</title>
    <link href="/2023/07/04/%E5%87%AF%E7%A5%9E%E9%99%8D%E4%B8%B4/kaiGod/"/>
    <url>/2023/07/04/%E5%87%AF%E7%A5%9E%E9%99%8D%E4%B8%B4/kaiGod/</url>
    
    <content type="html"><![CDATA[<h1 id="帅是一种态度"><a href="#帅是一种态度" class="headerlink" title="帅是一种态度"></a>帅是一种态度</h1><h1 id="HANDSOMEBOY"><a href="#HANDSOMEBOY" class="headerlink" title="HANDSOMEBOY"></a>HANDSOMEBOY</h1><p><img src="/assets/image-20230903094856925.png" alt="image-20230903094856925"></p><h1 id="FREEDOMBOY"><a href="#FREEDOMBOY" class="headerlink" title="FREEDOMBOY"></a>FREEDOMBOY</h1><p><img src="/assets/image-20230903094907233.png" alt="image-20230903094907233"></p><h1 id="FASHIONBOY"><a href="#FASHIONBOY" class="headerlink" title="FASHIONBOY"></a>FASHIONBOY</h1>]]></content>
    
    
    <categories>
      
      <category>凯神降临</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
